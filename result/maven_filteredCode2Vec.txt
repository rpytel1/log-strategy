public void maven_f0_0() throws Exception
{    String basedir = System.getProperty("basedir", System.getProperty("user.dir"));    File globalSettingsFile = new File(basedir, "src/conf/settings.xml");    assertTrue(globalSettingsFile.getAbsolutePath(), globalSettingsFile.isFile());    try (Reader reader = new InputStreamReader(new FileInputStream(globalSettingsFile), "UTF-8")) {        new SettingsXpp3Reader().read(reader);    }}
public static boolean maven_f1_0(String version)
{    if (version != null) {        if (version.regionMatches(true, version.length() - Artifact.SNAPSHOT_VERSION.length(), Artifact.SNAPSHOT_VERSION, 0, Artifact.SNAPSHOT_VERSION.length())) {            return true;        } else if (Artifact.VERSION_FILE_PATTERN.matcher(version).matches()) {            return true;        }    }    return false;}
public static String maven_f2_0(String version)
{    notBlank(version, "version can neither be null, empty nor blank");    int lastHyphen = version.lastIndexOf('-');    if (lastHyphen > 0) {        int prevHyphen = version.lastIndexOf('-', lastHyphen - 1);        if (prevHyphen > 0) {            Matcher m = Artifact.VERSION_FILE_PATTERN.matcher(version);            if (m.matches()) {                return m.group(1) + "-" + Artifact.SNAPSHOT_VERSION;            }        }    }    return version;}
public static String maven_f3_0(Artifact artifact)
{    return versionlessKey(artifact.getGroupId(), artifact.getArtifactId());}
public static String maven_f4_0(String groupId, String artifactId)
{    notBlank(groupId, "groupId can neither be null, empty nor blank");    notBlank(artifactId, "artifactId can neither be null, empty nor blank");    return groupId + ":" + artifactId;}
public static String maven_f5_0(Artifact artifact)
{    return key(artifact.getGroupId(), artifact.getArtifactId(), artifact.getVersion());}
public static String maven_f6_0(String groupId, String artifactId, String version)
{    notBlank(groupId, "groupId can neither be null, empty nor blank");    notBlank(artifactId, "artifactId can neither be null, empty nor blank");    notBlank(version, "version can neither be null, empty nor blank");    return groupId + ":" + artifactId + ":" + version;}
private static void maven_f7_0(String str, String message)
{    int c = str != null && str.length() > 0 ? str.charAt(0) : 0;    if ((c < '0' || c > '9') && (c < 'a' || c > 'z')) {        Validate.notBlank(str, message);    }}
public static Map<String, Artifact> maven_f8_0(Collection<Artifact> artifacts)
{    Map<String, Artifact> artifactMap = new LinkedHashMap<>();    if (artifacts != null) {        for (Artifact artifact : artifacts) {            artifactMap.put(versionlessKey(artifact), artifact);        }    }    return artifactMap;}
public static Artifact maven_f9_0(Artifact artifact)
{    return (artifact != null) ? copyArtifact(artifact) : null;}
public static Artifact maven_f10_0(Artifact artifact)
{    VersionRange range = artifact.getVersionRange();    if (range == null) {        range = VersionRange.createFromVersion(artifact.getVersion());    }    DefaultArtifact clone = new DefaultArtifact(artifact.getGroupId(), artifact.getArtifactId(), range, artifact.getScope(), artifact.getType(), artifact.getClassifier(), artifact.getArtifactHandler(), artifact.isOptional());    clone.setRelease(artifact.isRelease());    clone.setResolvedVersion(artifact.getVersion());    clone.setResolved(artifact.isResolved());    clone.setFile(artifact.getFile());    clone.setAvailableVersions(copyList(artifact.getAvailableVersions()));    if (artifact.getVersion() != null) {        clone.setBaseVersion(artifact.getBaseVersion());    }    clone.setDependencyFilter(artifact.getDependencyFilter());    clone.setDependencyTrail(copyList(artifact.getDependencyTrail()));    clone.setDownloadUrl(artifact.getDownloadUrl());    clone.setRepository(artifact.getRepository());    return clone;}
public static T maven_f11_0(Collection<Artifact> from, T to)
{    for (Artifact artifact : from) {        to.add(ArtifactUtils.copyArtifact(artifact));    }    return to;}
public static T maven_f12_0(Map<K, ? extends Artifact> from, T to)
{    if (from != null) {        for (Map.Entry<K, ? extends Artifact> entry : from.entrySet()) {            to.put(entry.getKey(), ArtifactUtils.copyArtifact(entry.getValue()));        }    }    return to;}
private static List<T> maven_f13_0(List<T> original)
{    List<T> copy = null;    if (original != null) {        copy = new ArrayList<>();        if (!original.isEmpty()) {            copy.addAll(original);        }    }    return copy;}
private void maven_f14_0()
{    if (empty(groupId)) {        throw new InvalidArtifactRTException(groupId, artifactId, getVersion(), type, "The groupId cannot be empty.");    }    if (artifactId == null) {        throw new InvalidArtifactRTException(groupId, artifactId, getVersion(), type, "The artifactId cannot be empty.");    }    if (type == null) {        throw new InvalidArtifactRTException(groupId, artifactId, getVersion(), type, "The type cannot be empty.");    }    if ((version == null) && (versionRange == null)) {        throw new InvalidArtifactRTException(groupId, artifactId, getVersion(), type, "The version cannot be empty.");    }}
private boolean maven_f15_0(String value)
{    return (value == null) || (value.trim().length() < 1);}
public String maven_f16_0()
{    return classifier;}
public boolean maven_f17_0()
{    return StringUtils.isNotEmpty(classifier);}
public String maven_f18_0()
{    return scope;}
public String maven_f19_0()
{    return groupId;}
public String maven_f20_0()
{    return artifactId;}
public String maven_f21_0()
{    return version;}
public void maven_f22_0(String version)
{    this.version = version;    setBaseVersionInternal(version);    versionRange = null;}
public String maven_f23_0()
{    return type;}
public void maven_f24_0(File file)
{    this.file = file;}
public File maven_f25_0()
{    return file;}
public ArtifactRepository maven_f26_0()
{    return repository;}
public void maven_f27_0(ArtifactRepository repository)
{    this.repository = repository;}
public String maven_f28_0()
{    return getDependencyConflictId() + ":" + getBaseVersion();}
public String maven_f29_0()
{    StringBuilder sb = new StringBuilder(128);    sb.append(getGroupId());    sb.append(':');    appendArtifactTypeClassifierString(sb);    return sb.toString();}
private void maven_f30_0(StringBuilder sb)
{    sb.append(getArtifactId());    sb.append(':');    sb.append(getType());    if (hasClassifier()) {        sb.append(':');        sb.append(getClassifier());    }}
public void maven_f31_0(ArtifactMetadata metadata)
{    if (metadataMap == null) {        metadataMap = new HashMap<>();    }    ArtifactMetadata m = metadataMap.get(metadata.getKey());    if (m != null) {        m.merge(metadata);    } else {        metadataMap.put(metadata.getKey(), metadata);    }}
public Collection<ArtifactMetadata> maven_f32_0()
{    if (metadataMap == null) {        return Collections.emptyList();    }    return Collections.unmodifiableCollection(metadataMap.values());}
public String maven_f33_0()
{    StringBuilder sb = new StringBuilder();    if (getGroupId() != null) {        sb.append(getGroupId());        sb.append(':');    }    appendArtifactTypeClassifierString(sb);    sb.append(':');    if (getBaseVersionInternal() != null) {        sb.append(getBaseVersionInternal());    } else {        sb.append(versionRange.toString());    }    if (scope != null) {        sb.append(':');        sb.append(scope);    }    return sb.toString();}
public int maven_f34_0()
{    int result = 17;    result = 37 * result + groupId.hashCode();    result = 37 * result + artifactId.hashCode();    result = 37 * result + type.hashCode();    if (version != null) {        result = 37 * result + version.hashCode();    }    result = 37 * result + (classifier != null ? classifier.hashCode() : 0);    return result;}
public boolean maven_f35_0(Object o)
{    if (o == this) {        return true;    }    if (!(o instanceof Artifact)) {        return false;    }    Artifact a = (Artifact) o;    if (!a.getGroupId().equals(groupId)) {        return false;    } else if (!a.getArtifactId().equals(artifactId)) {        return false;    } else if (!a.getVersion().equals(version)) {        return false;    } else if (!a.getType().equals(type)) {        return false;    } else if (a.getClassifier() == null ? classifier != null : !a.getClassifier().equals(classifier)) {        return false;    }    return true;}
public String maven_f36_0()
{    if (baseVersion == null && version != null) {        setBaseVersionInternal(version);    }    return baseVersion;}
protected String maven_f37_0()
{    if ((baseVersion == null) && (version != null)) {        setBaseVersionInternal(version);    }    return baseVersion;}
public void maven_f38_0(String baseVersion)
{    setBaseVersionInternal(baseVersion);}
protected void maven_f39_0(String baseVersion)
{    this.baseVersion = ArtifactUtils.toSnapshotVersion(baseVersion);}
public int maven_f40_0(Artifact a)
{    int result = groupId.compareTo(a.getGroupId());    if (result == 0) {        result = artifactId.compareTo(a.getArtifactId());        if (result == 0) {            result = type.compareTo(a.getType());            if (result == 0) {                if (classifier == null) {                    if (a.getClassifier() != null) {                        result = 1;                    }                } else {                    if (a.getClassifier() != null) {                        result = classifier.compareTo(a.getClassifier());                    } else {                        result = -1;                    }                }                if (result == 0) {                                        result = new DefaultArtifactVersion(version).compareTo(new DefaultArtifactVersion(a.getVersion()));                }            }        }    }    return result;}
public void maven_f41_0(String version, ArtifactRepository localRepository)
{    setResolvedVersion(version);    setFile(new File(localRepository.getBasedir(), localRepository.pathOf(this)));}
public String maven_f42_0()
{    return downloadUrl;}
public void maven_f43_0(String downloadUrl)
{    this.downloadUrl = downloadUrl;}
public ArtifactFilter maven_f44_0()
{    return dependencyFilter;}
public void maven_f45_0(ArtifactFilter artifactFilter)
{    dependencyFilter = artifactFilter;}
public ArtifactHandler maven_f46_0()
{    return artifactHandler;}
public List<String> maven_f47_0()
{    return dependencyTrail;}
public void maven_f48_0(List<String> dependencyTrail)
{    this.dependencyTrail = dependencyTrail;}
public void maven_f49_0(String scope)
{    this.scope = scope;}
public VersionRange maven_f50_0()
{    return versionRange;}
public void maven_f51_0(VersionRange versionRange)
{    this.versionRange = versionRange;    selectVersionFromNewRangeIfAvailable();}
private void maven_f52_0()
{    if ((versionRange != null) && (versionRange.getRecommendedVersion() != null)) {        selectVersion(versionRange.getRecommendedVersion().toString());    } else {        version = null;        baseVersion = null;    }}
public void maven_f53_0(String version)
{    this.version = version;    setBaseVersionInternal(version);}
public void maven_f54_0(String groupId)
{    this.groupId = groupId;}
public void maven_f55_0(String artifactId)
{    this.artifactId = artifactId;}
public boolean maven_f56_0()
{    return getBaseVersion() != null && (getBaseVersion().endsWith(SNAPSHOT_VERSION) || getBaseVersion().equals(LATEST_VERSION));}
public void maven_f57_0(boolean resolved)
{    this.resolved = resolved;}
public boolean maven_f58_0()
{    return resolved;}
public void maven_f59_0(String version)
{    this.version = version;}
public void maven_f60_0(ArtifactHandler artifactHandler)
{    this.artifactHandler = artifactHandler;}
public void maven_f61_0(boolean release)
{    this.release = release;}
public boolean maven_f62_0()
{    return release;}
public List<ArtifactVersion> maven_f63_0()
{    return availableVersions;}
public void maven_f64_0(List<ArtifactVersion> availableVersions)
{    this.availableVersions = availableVersions;}
public boolean maven_f65_0()
{    return optional;}
public ArtifactVersion maven_f66_0() throws OverConstrainedVersionException
{    return versionRange.getSelectedVersion(this);}
public boolean maven_f67_0() throws OverConstrainedVersionException
{    return versionRange.isSelectedVersionKnown(this);}
public void maven_f68_0(boolean optional)
{    this.optional = optional;}
public String maven_f69_0()
{    return "For artifact {" + getArtifactKey() + "}: " + getBaseMessage();}
public String maven_f70_0()
{    return baseMessage;}
public String maven_f71_0()
{    return artifactId;}
public String maven_f72_0()
{    return groupId;}
public String maven_f73_0()
{    return type;}
public String maven_f74_0()
{    return version;}
public String maven_f75_0()
{    return groupId + ":" + artifactId + ":" + version + ":" + type;}
public void maven_f76_0(boolean enabled)
{    this.enabled = enabled;}
public void maven_f77_0(String updatePolicy)
{    if (updatePolicy != null) {        this.updatePolicy = updatePolicy;    }}
public void maven_f78_0(String checksumPolicy)
{    if (checksumPolicy != null) {        this.checksumPolicy = checksumPolicy;    }}
public boolean maven_f79_0()
{    return enabled;}
public String maven_f80_0()
{    return updatePolicy;}
public String maven_f81_0()
{    return checksumPolicy;}
public boolean maven_f82_0(Date lastModified)
{    boolean checkForUpdates = false;    if (UPDATE_POLICY_ALWAYS.equals(updatePolicy)) {        checkForUpdates = true;    } else if (UPDATE_POLICY_DAILY.equals(updatePolicy)) {                Calendar cal = Calendar.getInstance();        cal.set(Calendar.HOUR_OF_DAY, 0);        cal.set(Calendar.MINUTE, 0);        cal.set(Calendar.SECOND, 0);        cal.set(Calendar.MILLISECOND, 0);        if (cal.getTime().after(lastModified)) {            checkForUpdates = true;        }    } else if (updatePolicy.startsWith(UPDATE_POLICY_INTERVAL)) {        String s = updatePolicy.substring(UPDATE_POLICY_INTERVAL.length() + 1);        int minutes = Integer.valueOf(s);        Calendar cal = Calendar.getInstance();        cal.add(Calendar.MINUTE, -minutes);        if (cal.getTime().after(lastModified)) {            checkForUpdates = true;        }    }        return checkForUpdates;}
public String maven_f83_0()
{    StringBuilder buffer = new StringBuilder(64);    buffer.append("{enabled=");    buffer.append(enabled);    buffer.append(", checksums=");    buffer.append(checksumPolicy);    buffer.append(", updates=");    buffer.append(updatePolicy);    buffer.append('}');    return buffer.toString();}
public void maven_f84_0(ArtifactRepositoryPolicy policy)
{    if (policy != null && policy.isEnabled()) {        setEnabled(true);        if (ordinalOfCksumPolicy(policy.getChecksumPolicy()) < ordinalOfCksumPolicy(getChecksumPolicy())) {            setChecksumPolicy(policy.getChecksumPolicy());        }        if (ordinalOfUpdatePolicy(policy.getUpdatePolicy()) < ordinalOfUpdatePolicy(getUpdatePolicy())) {            setUpdatePolicy(policy.getUpdatePolicy());        }    }}
private int maven_f85_0(String policy)
{    if (ArtifactRepositoryPolicy.CHECKSUM_POLICY_FAIL.equals(policy)) {        return 2;    } else if (ArtifactRepositoryPolicy.CHECKSUM_POLICY_IGNORE.equals(policy)) {        return 0;    } else {        return 1;    }}
private int maven_f86_0(String policy)
{    if (ArtifactRepositoryPolicy.UPDATE_POLICY_DAILY.equals(policy)) {        return 1440;    } else if (ArtifactRepositoryPolicy.UPDATE_POLICY_ALWAYS.equals(policy)) {        return 0;    } else if (policy != null && policy.startsWith(ArtifactRepositoryPolicy.UPDATE_POLICY_INTERVAL)) {        String s = policy.substring(UPDATE_POLICY_INTERVAL.length() + 1);        return Integer.valueOf(s);    } else {        return Integer.MAX_VALUE;    }}
public String maven_f87_0()
{    return password;}
public void maven_f88_0(String password)
{    this.password = password;}
public String maven_f89_0()
{    return username;}
public void maven_f90_0(final String userName)
{    this.username = userName;}
public String maven_f91_0()
{    return passphrase;}
public void maven_f92_0(final String passphrase)
{    this.passphrase = passphrase;}
public String maven_f93_0()
{    return privateKey;}
public void maven_f94_0(final String privateKey)
{    this.privateKey = privateKey;}
public Artifact maven_f95_0()
{    return artifact;}
public String maven_f96_0()
{    return groupId;}
public String maven_f97_0()
{    return artifactId;}
public String maven_f98_0()
{    return version;}
public String maven_f99_0()
{    return type;}
public String maven_f100_0()
{    return this.classifier;}
public String maven_f101_0()
{    return this.path;}
public List<ArtifactRepository> maven_f102_0()
{    return remoteRepositories;}
public String maven_f103_0()
{    return originalMessage;}
protected static String maven_f104_0(List<String> path, String indentation)
{    StringBuilder sb = new StringBuilder();    if (path != null) {        sb.append(LS);        sb.append(indentation);        sb.append("Path to dependency: ");        sb.append(LS);        int num = 1;        for (Iterator<String> i = path.iterator(); i.hasNext(); num++) {            sb.append(indentation);            sb.append('\t');            sb.append(num);            sb.append(") ");            sb.append(i.next());            sb.append(LS);        }    }    return sb.toString();}
private static String maven_f105_0(String message, String groupId, String artifactId, String version, String type, List<ArtifactRepository> remoteRepositories, List<String> path)
{    StringBuilder sb = new StringBuilder();    sb.append(message);    if (message == null || !message.contains("from the specified remote repositories:")) {        sb.append(LS);        sb.append("  ").append(groupId).append(':').append(artifactId).append(':').append(type).append(':').append(version);        sb.append(LS);        if (remoteRepositories != null) {            sb.append(LS);            sb.append("from the specified remote repositories:");            sb.append(LS).append("  ");            if (remoteRepositories.isEmpty()) {                sb.append("(none)");            }            for (Iterator<ArtifactRepository> i = remoteRepositories.iterator(); i.hasNext(); ) {                ArtifactRepository remoteRepository = i.next();                sb.append(remoteRepository.getId());                sb.append(" (");                sb.append(remoteRepository.getUrl());                ArtifactRepositoryPolicy releases = remoteRepository.getReleases();                if (releases != null) {                    sb.append(", releases=").append(releases.isEnabled());                }                ArtifactRepositoryPolicy snapshots = remoteRepository.getSnapshots();                if (snapshots != null) {                    sb.append(", snapshots=").append(snapshots.isEnabled());                }                sb.append(')');                if (i.hasNext()) {                    sb.append(',').append(LS).append("  ");                }            }        }        sb.append(constructArtifactPath(path, ""));        sb.append(LS);    }    return sb.toString();}
protected static String maven_f106_0(String message, String indentation, String groupId, String artifactId, String version, String type, String classifier, String downloadUrl, List<String> path)
{    StringBuilder sb = new StringBuilder(message);    if (!"pom".equals(type)) {        if (downloadUrl != null) {            sb.append(LS);            sb.append(LS);            sb.append(indentation);            sb.append("Try downloading the file manually from: ");            sb.append(LS);            sb.append(indentation);            sb.append("    ");            sb.append(downloadUrl);        } else {            sb.append(LS);            sb.append(LS);            sb.append(indentation);            sb.append("Try downloading the file manually from the project website.");        }        sb.append(LS);        sb.append(LS);        sb.append(indentation);        sb.append("Then, install it using the command: ");        sb.append(LS);        sb.append(indentation);        sb.append("    mvn install:install-file -DgroupId=");        sb.append(groupId);        sb.append(" -DartifactId=");        sb.append(artifactId);        sb.append(" -Dversion=");        sb.append(version);                if (classifier != null && !classifier.equals("")) {            sb.append(" -Dclassifier=");            sb.append(classifier);        }        sb.append(" -Dpackaging=");        sb.append(type);        sb.append(" -Dfile=/path/to/file");        sb.append(LS);                sb.append(LS);        sb.append(indentation);        sb.append("Alternatively, if you host your own repository you can deploy the file there: ");        sb.append(LS);        sb.append(indentation);        sb.append("    mvn deploy:deploy-file -DgroupId=");        sb.append(groupId);        sb.append(" -DartifactId=");        sb.append(artifactId);        sb.append(" -Dversion=");        sb.append(version);                if (classifier != null && !classifier.equals("")) {            sb.append(" -Dclassifier=");            sb.append(classifier);        }        sb.append(" -Dpackaging=");        sb.append(type);        sb.append(" -Dfile=/path/to/file");        sb.append(" -Durl=[url] -DrepositoryId=[id]");        sb.append(LS);    }    sb.append(constructArtifactPath(path, indentation));    sb.append(LS);    return sb.toString();}
public String maven_f107_0()
{    return path;}
public String maven_f108_0()
{    return downloadUrl;}
public Artifact maven_f109_0()
{    return artifact;}
public List<Artifact> maven_f110_0()
{    return resolvedArtifacts;}
public List<Artifact> maven_f111_0()
{    return missingArtifacts;}
private static String maven_f112_0(List<Artifact> artifacts)
{    StringBuilder buffer = new StringBuilder(256);    buffer.append("Missing:\n");    buffer.append("----------\n");    int counter = 0;    for (Artifact artifact : artifacts) {        String message = (++counter) + ") " + artifact.getId();        buffer.append(constructMissingArtifactMessage(message, "  ", artifact.getGroupId(), artifact.getArtifactId(), artifact.getVersion(), artifact.getType(), artifact.getClassifier(), artifact.getDownloadUrl(), artifact.getDependencyTrail()));    }    buffer.append("----------\n");    int size = artifacts.size();    buffer.append(size).append(" required artifact");    if (size > 1) {        buffer.append("s are");    } else {        buffer.append(" is");    }    buffer.append(" missing.\n\nfor artifact: ");    return buffer.toString();}
public int maven_f113_0()
{    return INT_ITEM;}
public boolean maven_f114_0()
{    return value == 0;}
public int maven_f115_0(Item item)
{    if (item == null) {                return (value == 0) ? 0 : 1;    }    switch(item.getType()) {        case INT_ITEM:            int itemValue = ((IntItem) item).value;            return (value < itemValue) ? -1 : ((value == itemValue) ? 0 : 1);        case LONG_ITEM:        case BIGINTEGER_ITEM:            return -1;        case STRING_ITEM:                        return 1;        case LIST_ITEM:                        return 1;        default:            throw new IllegalStateException("invalid item: " + item.getClass());    }}
public boolean maven_f116_0(Object o)
{    if (this == o) {        return true;    }    if (o == null || getClass() != o.getClass()) {        return false;    }    IntItem intItem = (IntItem) o;    return value == intItem.value;}
public int maven_f117_0()
{    return value;}
public String maven_f118_0()
{    return Integer.toString(value);}
public int maven_f119_0()
{    return LONG_ITEM;}
public boolean maven_f120_0()
{    return value == 0;}
public int maven_f121_0(Item item)
{    if (item == null) {                return (value == 0) ? 0 : 1;    }    switch(item.getType()) {        case INT_ITEM:            return 1;        case LONG_ITEM:            long itemValue = ((LongItem) item).value;            return (value < itemValue) ? -1 : ((value == itemValue) ? 0 : 1);        case BIGINTEGER_ITEM:            return -1;        case STRING_ITEM:                        return 1;        case LIST_ITEM:                        return 1;        default:            throw new IllegalStateException("invalid item: " + item.getClass());    }}
public boolean maven_f122_0(Object o)
{    if (this == o) {        return true;    }    if (o == null || getClass() != o.getClass()) {        return false;    }    LongItem longItem = (LongItem) o;    return value == longItem.value;}
public int maven_f123_0()
{    return (int) (value ^ (value >>> 32));}
public String maven_f124_0()
{    return Long.toString(value);}
public int maven_f125_0()
{    return BIGINTEGER_ITEM;}
public boolean maven_f126_0()
{    return BigInteger.ZERO.equals(value);}
public int maven_f127_0(Item item)
{    if (item == null) {                return BigInteger.ZERO.equals(value) ? 0 : 1;    }    switch(item.getType()) {        case INT_ITEM:        case LONG_ITEM:            return 1;        case BIGINTEGER_ITEM:            return value.compareTo(((BigIntegerItem) item).value);        case STRING_ITEM:                        return 1;        case LIST_ITEM:                        return 1;        default:            throw new IllegalStateException("invalid item: " + item.getClass());    }}
public boolean maven_f128_0(Object o)
{    if (this == o) {        return true;    }    if (o == null || getClass() != o.getClass()) {        return false;    }    BigIntegerItem that = (BigIntegerItem) o;    return value.equals(that.value);}
public int maven_f129_0()
{    return value.hashCode();}
public String maven_f130_0()
{    return value.toString();}
public int maven_f131_0()
{    return STRING_ITEM;}
public boolean maven_f132_0()
{    return (comparableQualifier(value).compareTo(RELEASE_VERSION_INDEX) == 0);}
public static String maven_f133_0(String qualifier)
{    int i = QUALIFIERS.indexOf(qualifier);    return i == -1 ? (QUALIFIERS.size() + "-" + qualifier) : String.valueOf(i);}
public int maven_f134_0(Item item)
{    if (item == null) {                return comparableQualifier(value).compareTo(RELEASE_VERSION_INDEX);    }    switch(item.getType()) {        case INT_ITEM:        case LONG_ITEM:        case BIGINTEGER_ITEM:                        return -1;        case STRING_ITEM:            return comparableQualifier(value).compareTo(comparableQualifier(((StringItem) item).value));        case LIST_ITEM:                        return -1;        default:            throw new IllegalStateException("invalid item: " + item.getClass());    }}
public boolean maven_f135_0(Object o)
{    if (this == o) {        return true;    }    if (o == null || getClass() != o.getClass()) {        return false;    }    StringItem that = (StringItem) o;    return value.equals(that.value);}
public int maven_f136_0()
{    return value.hashCode();}
public String maven_f137_0()
{    return value;}
public int maven_f138_0()
{    return LIST_ITEM;}
public boolean maven_f139_0()
{    return (size() == 0);}
 void maven_f140_0()
{    for (int i = size() - 1; i >= 0; i--) {        Item lastItem = get(i);        if (lastItem.isNull()) {                        remove(i);        } else if (!(lastItem instanceof ListItem)) {            break;        }    }}
public int maven_f141_0(Item item)
{    if (item == null) {        if (size() == 0) {                        return 0;        }        Item first = get(0);        return first.compareTo(null);    }    switch(item.getType()) {        case INT_ITEM:        case LONG_ITEM:        case BIGINTEGER_ITEM:                        return -1;        case STRING_ITEM:                        return 1;        case LIST_ITEM:            Iterator<Item> left = iterator();            Iterator<Item> right = ((ListItem) item).iterator();            while (left.hasNext() || right.hasNext()) {                Item l = left.hasNext() ? left.next() : null;                Item r = right.hasNext() ? right.next() : null;                                int result = l == null ? (r == null ? 0 : -1 * r.compareTo(l)) : l.compareTo(r);                if (result != 0) {                    return result;                }            }            return 0;        default:            throw new IllegalStateException("invalid item: " + item.getClass());    }}
public String maven_f142_0()
{    StringBuilder buffer = new StringBuilder();    for (Item item : this) {        if (buffer.length() > 0) {            buffer.append((item instanceof ListItem) ? '-' : '.');        }        buffer.append(item);    }    return buffer.toString();}
public final void maven_f143_0(String version)
{    this.value = version;    items = new ListItem();    version = version.toLowerCase(Locale.ENGLISH);    ListItem list = items;    Deque<Item> stack = new ArrayDeque<>();    stack.push(list);    boolean isDigit = false;    int startIndex = 0;    for (int i = 0; i < version.length(); i++) {        char c = version.charAt(i);        if (c == '.') {            if (i == startIndex) {                list.add(IntItem.ZERO);            } else {                list.add(parseItem(isDigit, version.substring(startIndex, i)));            }            startIndex = i + 1;        } else if (c == '-') {            if (i == startIndex) {                list.add(IntItem.ZERO);            } else {                list.add(parseItem(isDigit, version.substring(startIndex, i)));            }            startIndex = i + 1;            list.add(list = new ListItem());            stack.push(list);        } else if (Character.isDigit(c)) {            if (!isDigit && i > startIndex) {                list.add(new StringItem(version.substring(startIndex, i), true));                startIndex = i;                list.add(list = new ListItem());                stack.push(list);            }            isDigit = true;        } else {            if (isDigit && i > startIndex) {                list.add(parseItem(true, version.substring(startIndex, i)));                startIndex = i;                list.add(list = new ListItem());                stack.push(list);            }            isDigit = false;        }    }    if (version.length() > startIndex) {        list.add(parseItem(isDigit, version.substring(startIndex)));    }    while (!stack.isEmpty()) {        list = (ListItem) stack.pop();        list.normalize();    }}
private static Item maven_f144_0(boolean isDigit, String buf)
{    if (isDigit) {        buf = stripLeadingZeroes(buf);        if (buf.length() <= MAX_INTITEM_LENGTH) {                        return new IntItem(buf);        } else if (buf.length() <= MAX_LONGITEM_LENGTH) {                        return new LongItem(buf);        }        return new BigIntegerItem(buf);    }    return new StringItem(buf, false);}
private static String maven_f145_0(String buf)
{    if (buf == null || buf.isEmpty()) {        return "0";    }    for (int i = 0; i < buf.length(); ++i) {        char c = buf.charAt(i);        if (c != '0') {            return buf.substring(i);        }    }    return buf;}
public int maven_f146_0(ComparableVersion o)
{    return items.compareTo(o.items);}
public String maven_f147_0()
{    return value;}
public String maven_f148_0()
{    if (canonical == null) {        canonical = items.toString();    }    return canonical;}
public boolean maven_f149_0(Object o)
{    return (o instanceof ComparableVersion) && items.equals(((ComparableVersion) o).items);}
public int maven_f150_0()
{    return items.hashCode();}
public static void maven_f151_0(String... args)
{    System.out.println("Display parameters as parsed by Maven (in canonical form) and comparison result:");    if (args.length == 0) {        return;    }    ComparableVersion prev = null;    int i = 1;    for (String version : args) {        ComparableVersion c = new ComparableVersion(version);        if (prev != null) {            int compare = prev.compareTo(c);            System.out.println("   " + prev.toString() + ' ' + ((compare == 0) ? "==" : ((compare < 0) ? "<" : ">")) + ' ' + version);        }        System.out.println(String.valueOf(i++) + ". " + version + " == " + c.getCanonical());        prev = c;    }}
public int maven_f152_0()
{    return 11 + comparable.hashCode();}
public boolean maven_f153_0(Object other)
{    if (this == other) {        return true;    }    if (!(other instanceof ArtifactVersion)) {        return false;    }    return compareTo((ArtifactVersion) other) == 0;}
public int maven_f154_0(ArtifactVersion otherVersion)
{    if (otherVersion instanceof DefaultArtifactVersion) {        return this.comparable.compareTo(((DefaultArtifactVersion) otherVersion).comparable);    } else {        return compareTo(new DefaultArtifactVersion(otherVersion.toString()));    }}
public int maven_f155_0()
{    return majorVersion != null ? majorVersion : 0;}
public int maven_f156_0()
{    return minorVersion != null ? minorVersion : 0;}
public int maven_f157_0()
{    return incrementalVersion != null ? incrementalVersion : 0;}
public int maven_f158_0()
{    return buildNumber != null ? buildNumber : 0;}
public String maven_f159_0()
{    return qualifier;}
public final void maven_f160_0(String version)
{    comparable = new ComparableVersion(version);    int index = version.indexOf('-');    String part1;    String part2 = null;    if (index < 0) {        part1 = version;    } else {        part1 = version.substring(0, index);        part2 = version.substring(index + 1);    }    if (part2 != null) {        if (part2.length() == 1 || !part2.startsWith("0")) {            buildNumber = tryParseInt(part2);            if (buildNumber == null) {                qualifier = part2;            }        } else {            qualifier = part2;        }    }    if ((!part1.contains(".")) && !part1.startsWith("0")) {        majorVersion = tryParseInt(part1);        if (majorVersion == null) {                        qualifier = version;            buildNumber = null;        }    } else {        boolean fallback = false;        StringTokenizer tok = new StringTokenizer(part1, ".");        if (tok.hasMoreTokens()) {            majorVersion = getNextIntegerToken(tok);            if (majorVersion == null) {                fallback = true;            }        } else {            fallback = true;        }        if (tok.hasMoreTokens()) {            minorVersion = getNextIntegerToken(tok);            if (minorVersion == null) {                fallback = true;            }        }        if (tok.hasMoreTokens()) {            incrementalVersion = getNextIntegerToken(tok);            if (incrementalVersion == null) {                fallback = true;            }        }        if (tok.hasMoreTokens()) {            qualifier = tok.nextToken();            fallback = isDigits(qualifier);        }                if (part1.contains("..") || part1.startsWith(".") || part1.endsWith(".")) {            fallback = true;        }        if (fallback) {                        qualifier = version;            majorVersion = null;            minorVersion = null;            incrementalVersion = null;            buildNumber = null;        }    }}
private static Integer maven_f161_0(StringTokenizer tok)
{    String s = tok.nextToken();    if ((s.length() > 1) && s.startsWith("0")) {        return null;    }    return tryParseInt(s);}
private static Integer maven_f162_0(String s)
{        if (!isDigits(s)) {        return null;    }    try {        long longValue = Long.parseLong(s);        if (longValue > Integer.MAX_VALUE) {            return null;        }        return (int) longValue;    } catch (NumberFormatException e) {                return null;    }}
public String maven_f163_0()
{    return comparable.toString();}
public ArtifactVersion maven_f164_0()
{    return lowerBound;}
public boolean maven_f165_0()
{    return lowerBoundInclusive;}
public ArtifactVersion maven_f166_0()
{    return upperBound;}
public boolean maven_f167_0()
{    return upperBoundInclusive;}
public boolean maven_f168_0(ArtifactVersion version)
{    if (lowerBound != null) {        int comparison = lowerBound.compareTo(version);        if ((comparison == 0) && !lowerBoundInclusive) {            return false;        }        if (comparison > 0) {            return false;        }    }    if (upperBound != null) {        int comparison = upperBound.compareTo(version);        if ((comparison == 0) && !upperBoundInclusive) {            return false;        }        if (comparison < 0) {            return false;        }    }    return true;}
public int maven_f169_0()
{    int result = 13;    if (lowerBound == null) {        result += 1;    } else {        result += lowerBound.hashCode();    }    result *= lowerBoundInclusive ? 1 : 2;    if (upperBound == null) {        result -= 3;    } else {        result -= upperBound.hashCode();    }    result *= upperBoundInclusive ? 2 : 3;    return result;}
public boolean maven_f170_0(Object other)
{    if (this == other) {        return true;    }    if (!(other instanceof Restriction)) {        return false;    }    Restriction restriction = (Restriction) other;    if (lowerBound != null) {        if (!lowerBound.equals(restriction.lowerBound)) {            return false;        }    } else if (restriction.lowerBound != null) {        return false;    }    if (lowerBoundInclusive != restriction.lowerBoundInclusive) {        return false;    }    if (upperBound != null) {        if (!upperBound.equals(restriction.upperBound)) {            return false;        }    } else if (restriction.upperBound != null) {        return false;    }    return upperBoundInclusive == restriction.upperBoundInclusive;}
public String maven_f171_0()
{    StringBuilder buf = new StringBuilder();    buf.append(isLowerBoundInclusive() ? '[' : '(');    if (getLowerBound() != null) {        buf.append(getLowerBound().toString());    }    buf.append(',');    if (getUpperBound() != null) {        buf.append(getUpperBound().toString());    }    buf.append(isUpperBoundInclusive() ? ']' : ')');    return buf.toString();}
public ArtifactVersion maven_f172_0()
{    return recommendedVersion;}
public List<Restriction> maven_f173_0()
{    return restrictions;}
public VersionRange maven_f174_0()
{    List<Restriction> copiedRestrictions = null;    if (restrictions != null) {        copiedRestrictions = new ArrayList<>();        if (!restrictions.isEmpty()) {            copiedRestrictions.addAll(restrictions);        }    }    return new VersionRange(recommendedVersion, copiedRestrictions);}
public static VersionRange maven_f175_0(String spec) throws InvalidVersionSpecificationException
{    if (spec == null) {        return null;    }    VersionRange cached = CACHE_SPEC.get(spec);    if (cached != null) {        return cached;    }    List<Restriction> restrictions = new ArrayList<>();    String process = spec;    ArtifactVersion version = null;    ArtifactVersion upperBound = null;    ArtifactVersion lowerBound = null;    while (process.startsWith("[") || process.startsWith("(")) {        int index1 = process.indexOf(')');        int index2 = process.indexOf(']');        int index = index2;        if (index2 < 0 || index1 < index2) {            if (index1 >= 0) {                index = index1;            }        }        if (index < 0) {            throw new InvalidVersionSpecificationException("Unbounded range: " + spec);        }        Restriction restriction = parseRestriction(process.substring(0, index + 1));        if (lowerBound == null) {            lowerBound = restriction.getLowerBound();        }        if (upperBound != null) {            if (restriction.getLowerBound() == null || restriction.getLowerBound().compareTo(upperBound) < 0) {                throw new InvalidVersionSpecificationException("Ranges overlap: " + spec);            }        }        restrictions.add(restriction);        upperBound = restriction.getUpperBound();        process = process.substring(index + 1).trim();        if (process.length() > 0 && process.startsWith(",")) {            process = process.substring(1).trim();        }    }    if (process.length() > 0) {        if (restrictions.size() > 0) {            throw new InvalidVersionSpecificationException("Only fully-qualified sets allowed in multiple set scenario: " + spec);        } else {            version = new DefaultArtifactVersion(process);            restrictions.add(Restriction.EVERYTHING);        }    }    cached = new VersionRange(version, restrictions);    CACHE_SPEC.put(spec, cached);    return cached;}
private static Restriction maven_f176_0(String spec) throws InvalidVersionSpecificationException
{    boolean lowerBoundInclusive = spec.startsWith("[");    boolean upperBoundInclusive = spec.endsWith("]");    String process = spec.substring(1, spec.length() - 1).trim();    Restriction restriction;    int index = process.indexOf(',');    if (index < 0) {        if (!lowerBoundInclusive || !upperBoundInclusive) {            throw new InvalidVersionSpecificationException("Single version must be surrounded by []: " + spec);        }        ArtifactVersion version = new DefaultArtifactVersion(process);        restriction = new Restriction(version, lowerBoundInclusive, version, upperBoundInclusive);    } else {        String lowerBound = process.substring(0, index).trim();        String upperBound = process.substring(index + 1).trim();        if (lowerBound.equals(upperBound)) {            throw new InvalidVersionSpecificationException("Range cannot have identical boundaries: " + spec);        }        ArtifactVersion lowerVersion = null;        if (lowerBound.length() > 0) {            lowerVersion = new DefaultArtifactVersion(lowerBound);        }        ArtifactVersion upperVersion = null;        if (upperBound.length() > 0) {            upperVersion = new DefaultArtifactVersion(upperBound);        }        if (upperVersion != null && lowerVersion != null && upperVersion.compareTo(lowerVersion) < 0) {            throw new InvalidVersionSpecificationException("Range defies version ordering: " + spec);        }        restriction = new Restriction(lowerVersion, lowerBoundInclusive, upperVersion, upperBoundInclusive);    }    return restriction;}
public static VersionRange maven_f177_0(String version)
{    VersionRange cached = CACHE_VERSION.get(version);    if (cached == null) {        List<Restriction> restrictions = Collections.emptyList();        cached = new VersionRange(new DefaultArtifactVersion(version), restrictions);        CACHE_VERSION.put(version, cached);    }    return cached;}
public VersionRange maven_f178_0(VersionRange restriction)
{    List<Restriction> r1 = this.restrictions;    List<Restriction> r2 = restriction.restrictions;    List<Restriction> restrictions;    if (r1.isEmpty() || r2.isEmpty()) {        restrictions = Collections.emptyList();    } else {        restrictions = Collections.unmodifiableList(intersection(r1, r2));    }    ArtifactVersion version = null;    if (restrictions.size() > 0) {        for (Restriction r : restrictions) {            if (recommendedVersion != null && r.containsVersion(recommendedVersion)) {                                version = recommendedVersion;                break;            } else if (version == null && restriction.getRecommendedVersion() != null && r.containsVersion(restriction.getRecommendedVersion())) {                                version = restriction.getRecommendedVersion();            }        }    } else     if (recommendedVersion != null) {                version = recommendedVersion;    } else if (restriction.recommendedVersion != null) {                        version = restriction.recommendedVersion;    }    return new VersionRange(version, restrictions);}
private List<Restriction> maven_f179_0(List<Restriction> r1, List<Restriction> r2)
{    List<Restriction> restrictions = new ArrayList<>(r1.size() + r2.size());    Iterator<Restriction> i1 = r1.iterator();    Iterator<Restriction> i2 = r2.iterator();    Restriction res1 = i1.next();    Restriction res2 = i2.next();    boolean done = false;    while (!done) {        if (res1.getLowerBound() == null || res2.getUpperBound() == null || res1.getLowerBound().compareTo(res2.getUpperBound()) <= 0) {            if (res1.getUpperBound() == null || res2.getLowerBound() == null || res1.getUpperBound().compareTo(res2.getLowerBound()) >= 0) {                ArtifactVersion lower;                ArtifactVersion upper;                boolean lowerInclusive;                boolean upperInclusive;                                if (res1.getLowerBound() == null) {                    lower = res2.getLowerBound();                    lowerInclusive = res2.isLowerBoundInclusive();                } else if (res2.getLowerBound() == null) {                    lower = res1.getLowerBound();                    lowerInclusive = res1.isLowerBoundInclusive();                } else {                    int comparison = res1.getLowerBound().compareTo(res2.getLowerBound());                    if (comparison < 0) {                        lower = res2.getLowerBound();                        lowerInclusive = res2.isLowerBoundInclusive();                    } else if (comparison == 0) {                        lower = res1.getLowerBound();                        lowerInclusive = res1.isLowerBoundInclusive() && res2.isLowerBoundInclusive();                    } else {                        lower = res1.getLowerBound();                        lowerInclusive = res1.isLowerBoundInclusive();                    }                }                if (res1.getUpperBound() == null) {                    upper = res2.getUpperBound();                    upperInclusive = res2.isUpperBoundInclusive();                } else if (res2.getUpperBound() == null) {                    upper = res1.getUpperBound();                    upperInclusive = res1.isUpperBoundInclusive();                } else {                    int comparison = res1.getUpperBound().compareTo(res2.getUpperBound());                    if (comparison < 0) {                        upper = res1.getUpperBound();                        upperInclusive = res1.isUpperBoundInclusive();                    } else if (comparison == 0) {                        upper = res1.getUpperBound();                        upperInclusive = res1.isUpperBoundInclusive() && res2.isUpperBoundInclusive();                    } else {                        upper = res2.getUpperBound();                        upperInclusive = res2.isUpperBoundInclusive();                    }                }                                if (lower == null || upper == null || lower.compareTo(upper) != 0) {                    restrictions.add(new Restriction(lower, lowerInclusive, upper, upperInclusive));                } else if (lowerInclusive && upperInclusive) {                    restrictions.add(new Restriction(lower, lowerInclusive, upper, upperInclusive));                }                                if (upper == res2.getUpperBound()) {                                        if (i2.hasNext()) {                        res2 = i2.next();                    } else {                        done = true;                    }                } else {                                        if (i1.hasNext()) {                        res1 = i1.next();                    } else {                        done = true;                    }                }            } else {                                if (i1.hasNext()) {                    res1 = i1.next();                } else {                    done = true;                }            }        } else {                        if (i2.hasNext()) {                res2 = i2.next();            } else {                done = true;            }        }    }    return restrictions;}
public ArtifactVersion maven_f180_0(Artifact artifact) throws OverConstrainedVersionException
{    ArtifactVersion version;    if (recommendedVersion != null) {        version = recommendedVersion;    } else {        if (restrictions.size() == 0) {            throw new OverConstrainedVersionException("The artifact has no valid ranges", artifact);        }        version = null;    }    return version;}
public boolean maven_f181_0(Artifact artifact) throws OverConstrainedVersionException
{    boolean value = false;    if (recommendedVersion != null) {        value = true;    } else {        if (restrictions.size() == 0) {            throw new OverConstrainedVersionException("The artifact has no valid ranges", artifact);        }    }    return value;}
public String maven_f182_0()
{    if (recommendedVersion != null) {        return recommendedVersion.toString();    } else {        StringBuilder buf = new StringBuilder();        for (Iterator<Restriction> i = restrictions.iterator(); i.hasNext(); ) {            Restriction r = i.next();            buf.append(r.toString());            if (i.hasNext()) {                buf.append(',');            }        }        return buf.toString();    }}
public ArtifactVersion maven_f183_0(List<ArtifactVersion> versions)
{        ArtifactVersion matched = null;    for (ArtifactVersion version : versions) {        if (containsVersion(version)) {                        if (matched == null || version.compareTo(matched) > 0) {                matched = version;            }        }    }    return matched;}
public boolean maven_f184_0(ArtifactVersion version)
{    for (Restriction restriction : restrictions) {        if (restriction.containsVersion(version)) {            return true;        }    }    return false;}
public boolean maven_f185_0()
{    return !restrictions.isEmpty() && recommendedVersion == null;}
public boolean maven_f186_0(Object obj)
{    if (this == obj) {        return true;    }    if (!(obj instanceof VersionRange)) {        return false;    }    VersionRange other = (VersionRange) obj;    return Objects.equals(recommendedVersion, other.recommendedVersion) && Objects.equals(restrictions, other.restrictions);}
public int maven_f187_0()
{    int hash = 7;    hash = 31 * hash + (recommendedVersion == null ? 0 : recommendedVersion.hashCode());    hash = 31 * hash + (restrictions == null ? 0 : restrictions.hashCode());    return hash;}
public String maven_f188_0()
{    return host;}
public void maven_f189_0(String host)
{    this.host = host;}
public String maven_f190_0()
{    return password;}
public void maven_f191_0(String password)
{    this.password = password;}
public int maven_f192_0()
{    return port;}
public void maven_f193_0(int port)
{    this.port = port;}
public String maven_f194_0()
{    return userName;}
public void maven_f195_0(String userName)
{    this.userName = userName;}
public String maven_f196_0()
{    return protocol;}
public void maven_f197_0(String protocol)
{    this.protocol = protocol;}
public String maven_f198_0()
{    return nonProxyHosts;}
public void maven_f199_0(String nonProxyHosts)
{    this.nonProxyHosts = nonProxyHosts;}
public String maven_f200_0()
{    return ntlmHost;}
public void maven_f201_0(String ntlmHost)
{    this.ntlmHost = ntlmHost;}
public void maven_f202_0(String ntlmDomain)
{    this.ntlmDomain = ntlmDomain;}
public String maven_f203_0()
{    return ntlmDomain;}
private Artifact maven_f204_0(String aid)
{    return new DefaultArtifact("group", aid, VersionRange.createFromVersion("1.0"), "test", "jar", "tests", null);}
public void maven_f205_0()
{    assertEquals(false, ArtifactUtils.isSnapshot(null));    assertEquals(false, ArtifactUtils.isSnapshot(""));    assertEquals(false, ArtifactUtils.isSnapshot("1.2.3"));    assertEquals(true, ArtifactUtils.isSnapshot("1.2.3-SNAPSHOT"));    assertEquals(true, ArtifactUtils.isSnapshot("1.2.3-snapshot"));    assertEquals(true, ArtifactUtils.isSnapshot("1.2.3-20090413.094722-2"));    assertEquals(false, ArtifactUtils.isSnapshot("1.2.3-20090413X094722-2"));}
public void maven_f206_0()
{    assertEquals("1.2.3", ArtifactUtils.toSnapshotVersion("1.2.3"));    assertEquals("1.2.3-SNAPSHOT", ArtifactUtils.toSnapshotVersion("1.2.3-SNAPSHOT"));    assertEquals("1.2.3-SNAPSHOT", ArtifactUtils.toSnapshotVersion("1.2.3-20090413.094722-2"));    assertEquals("1.2.3-20090413X094722-2", ArtifactUtils.toSnapshotVersion("1.2.3-20090413X094722-2"));}
public void maven_f207_0() throws Exception
{    List<Artifact> list = new ArrayList<>();    list.add(newArtifact("b"));    list.add(newArtifact("a"));    list.add(newArtifact("c"));    list.add(newArtifact("e"));    list.add(newArtifact("d"));    Map<String, Artifact> map = ArtifactUtils.artifactMapByVersionlessId(list);    assertNotNull(map);    assertEquals(list, new ArrayList<>(map.values()));}
protected void maven_f208_0() throws Exception
{    super.setUp();    artifactHandler = new ArtifactHandlerMock();    versionRange = VersionRange.createFromVersion(version);    artifact = new DefaultArtifact(groupId, artifactId, versionRange, scope, type, classifier, artifactHandler);    snapshotVersionRange = VersionRange.createFromVersion(snapshotResolvedVersion);    snapshotArtifact = new DefaultArtifact(groupId, artifactId, snapshotVersionRange, scope, type, classifier, artifactHandler);}
public void maven_f209_0()
{    assertEquals(snapshotResolvedVersion, snapshotArtifact.getVersion());            assertEquals(snapshotSpecVersion, snapshotArtifact.getBaseVersion());}
public void maven_f210_0()
{    assertEquals(groupId + ":" + artifactId + ":" + type + ":" + classifier, artifact.getDependencyConflictId());}
public void maven_f211_0()
{    artifact.setGroupId(null);    assertEquals(null + ":" + artifactId + ":" + type + ":" + classifier, artifact.getDependencyConflictId());}
public void maven_f212_0()
{    artifact = new DefaultArtifact(groupId, artifactId, versionRange, scope, type, null, artifactHandler);    assertEquals(groupId + ":" + artifactId + ":" + type, artifact.getDependencyConflictId());}
public void maven_f213_0()
{    artifact.setScope(null);    assertEquals(groupId + ":" + artifactId + ":" + type + ":" + classifier, artifact.getDependencyConflictId());}
public void maven_f214_0()
{    assertEquals(groupId + ":" + artifactId + ":" + type + ":" + classifier + ":" + version + ":" + scope, artifact.toString());}
public void maven_f215_0()
{    artifact.setGroupId(null);    assertEquals(artifactId + ":" + type + ":" + classifier + ":" + version + ":" + scope, artifact.toString());}
public void maven_f216_0()
{    artifact = new DefaultArtifact(groupId, artifactId, versionRange, scope, type, null, artifactHandler);    assertEquals(groupId + ":" + artifactId + ":" + type + ":" + version + ":" + scope, artifact.toString());}
public void maven_f217_0()
{    artifact.setScope(null);    assertEquals(groupId + ":" + artifactId + ":" + type + ":" + classifier + ":" + version, artifact.toString());}
public void maven_f218_0()
{    Artifact artifact1 = new DefaultArtifact(groupId, artifactId, VersionRange.createFromVersion("5.0"), scope, type, classifier, artifactHandler);    Artifact artifact2 = new DefaultArtifact(groupId, artifactId, VersionRange.createFromVersion("12.0"), scope, type, classifier, artifactHandler);    assertTrue(artifact1.compareTo(artifact2) < 0);    assertTrue(artifact2.compareTo(artifact1) > 0);    Artifact artifact = new DefaultArtifact(groupId, artifactId, VersionRange.createFromVersion("5.0"), scope, type, classifier, artifactHandler);    assertTrue(artifact.compareTo(artifact1) == 0);    assertTrue(artifact1.compareTo(artifact) == 0);}
public void maven_f219_0() throws Exception
{    VersionRange vr = VersionRange.createFromVersionSpec("[1.0,2.0)");    artifact = new DefaultArtifact(groupId, artifactId, vr, scope, type, null, artifactHandler);    assertEquals(null, artifact.getVersion());    assertEquals(null, artifact.getBaseVersion());}
public void maven_f220_0(String extension)
{    this.extension = extension;}
public String maven_f221_0()
{    return extension;}
public void maven_f222_0(String directory)
{    this.directory = directory;}
public String maven_f223_0()
{    return directory;}
public void maven_f224_0(String classifier)
{    this.classifier = classifier;}
public String maven_f225_0()
{    return classifier;}
public void maven_f226_0(String packaging)
{    this.packaging = packaging;}
public String maven_f227_0()
{    return packaging;}
public void maven_f228_0(boolean includesDependencies)
{    this.includesDependencies = includesDependencies;}
public boolean maven_f229_0()
{    return includesDependencies;}
public void maven_f230_0(String language)
{    this.language = language;}
public String maven_f231_0()
{    return language;}
public void maven_f232_0(boolean addedToClasspath)
{    this.addedToClasspath = addedToClasspath;}
public boolean maven_f233_0()
{    return addedToClasspath;}
public void maven_f234_0() throws Exception
{    Files.walkFileTree(Paths.get("target"), new SimpleFileVisitor<Path>() {        Pattern mavenArtifactJar = Pattern.compile("maven-artifact-[\\d.]+(-SNAPSHOT)?\\.jar");        @Override        public FileVisitResult visitFile(Path file, BasicFileAttributes attrs) throws IOException {            String filename = file.getFileName().toString();            if (mavenArtifactJar.matcher(filename).matches()) {                Process p = Runtime.getRuntime().exec(new String[] { Paths.get(System.getProperty("java.home"), "bin/java").toString(), "-jar", file.toAbsolutePath().toString(), "5.32", "5.27" });                try {                    assertEquals("Unexpected exit code", 0, p.waitFor());                } catch (InterruptedException e) {                    fail(e.getMessage());                }                return FileVisitResult.TERMINATE;            } else {                return FileVisitResult.CONTINUE;            }        }        @Override        public FileVisitResult preVisitDirectory(Path dir, BasicFileAttributes attrs) throws IOException {            if (Paths.get("target").equals(dir)) {                return FileVisitResult.CONTINUE;            } else {                return FileVisitResult.SKIP_SUBTREE;            }        }    });}
public FileVisitResult maven_f235_0(Path file, BasicFileAttributes attrs) throws IOException
{    String filename = file.getFileName().toString();    if (mavenArtifactJar.matcher(filename).matches()) {        Process p = Runtime.getRuntime().exec(new String[] { Paths.get(System.getProperty("java.home"), "bin/java").toString(), "-jar", file.toAbsolutePath().toString(), "5.32", "5.27" });        try {            assertEquals("Unexpected exit code", 0, p.waitFor());        } catch (InterruptedException e) {            fail(e.getMessage());        }        return FileVisitResult.TERMINATE;    } else {        return FileVisitResult.CONTINUE;    }}
public FileVisitResult maven_f236_0(Path dir, BasicFileAttributes attrs) throws IOException
{    if (Paths.get("target").equals(dir)) {        return FileVisitResult.CONTINUE;    } else {        return FileVisitResult.SKIP_SUBTREE;    }}
private Comparable maven_f237_0(String version)
{    ComparableVersion ret = new ComparableVersion(version);    String canonical = ret.getCanonical();    String parsedCanonical = new ComparableVersion(canonical).getCanonical();    System.out.println("canonical( " + version + " ) = " + canonical);    assertEquals("canonical( " + version + " ) = " + canonical + " -> canonical: " + parsedCanonical, canonical, parsedCanonical);    return ret;}
private void maven_f238_0(String[] versions)
{    Comparable[] c = new Comparable[versions.length];    for (int i = 0; i < versions.length; i++) {        c[i] = newComparable(versions[i]);    }    for (int i = 1; i < versions.length; i++) {        Comparable low = c[i - 1];        for (int j = i; j < versions.length; j++) {            Comparable high = c[j];            assertTrue("expected " + low + " < " + high, low.compareTo(high) < 0);            assertTrue("expected " + high + " > " + low, high.compareTo(low) > 0);        }    }}
private void maven_f239_0(String v1, String v2)
{    Comparable c1 = newComparable(v1);    Comparable c2 = newComparable(v2);    assertTrue("expected " + v1 + " == " + v2, c1.compareTo(c2) == 0);    assertTrue("expected " + v2 + " == " + v1, c2.compareTo(c1) == 0);    assertTrue("expected same hashcode for " + v1 + " and " + v2, c1.hashCode() == c2.hashCode());    assertTrue("expected " + v1 + ".equals( " + v2 + " )", c1.equals(c2));    assertTrue("expected " + v2 + ".equals( " + v1 + " )", c2.equals(c1));}
private void maven_f240_0(String[] array)
{        for (int i = 0; i < array.length; ++i) for (int j = i; j < array.length; ++j) checkVersionsEqual(array[i], array[j]);}
private void maven_f241_0(String v1, String v2)
{    Comparable c1 = newComparable(v1);    Comparable c2 = newComparable(v2);    assertTrue("expected " + v1 + " < " + v2, c1.compareTo(c2) < 0);    assertTrue("expected " + v2 + " > " + v1, c2.compareTo(c1) > 0);}
public void maven_f242_0()
{    checkVersionsOrder(VERSIONS_QUALIFIER);}
public void maven_f243_0()
{    checkVersionsOrder(VERSIONS_NUMBER);}
public void maven_f244_0()
{    newComparable("1.0-alpha");    checkVersionsEqual("1", "1");    checkVersionsEqual("1", "1.0");    checkVersionsEqual("1", "1.0.0");    checkVersionsEqual("1.0", "1.0.0");    checkVersionsEqual("1", "1-0");    checkVersionsEqual("1", "1.0-0");    checkVersionsEqual("1.0", "1.0-0");        checkVersionsEqual("1a", "1-a");    checkVersionsEqual("1a", "1.0-a");    checkVersionsEqual("1a", "1.0.0-a");    checkVersionsEqual("1.0a", "1-a");    checkVersionsEqual("1.0.0a", "1-a");    checkVersionsEqual("1x", "1-x");    checkVersionsEqual("1x", "1.0-x");    checkVersionsEqual("1x", "1.0.0-x");    checkVersionsEqual("1.0x", "1-x");    checkVersionsEqual("1.0.0x", "1-x");        checkVersionsEqual("1ga", "1");    checkVersionsEqual("1release", "1");    checkVersionsEqual("1final", "1");    checkVersionsEqual("1cr", "1rc");        checkVersionsEqual("1a1", "1-alpha-1");    checkVersionsEqual("1b2", "1-beta-2");    checkVersionsEqual("1m3", "1-milestone-3");        checkVersionsEqual("1X", "1x");    checkVersionsEqual("1A", "1a");    checkVersionsEqual("1B", "1b");    checkVersionsEqual("1M", "1m");    checkVersionsEqual("1Ga", "1");    checkVersionsEqual("1GA", "1");    checkVersionsEqual("1RELEASE", "1");    checkVersionsEqual("1release", "1");    checkVersionsEqual("1RELeaSE", "1");    checkVersionsEqual("1Final", "1");    checkVersionsEqual("1FinaL", "1");    checkVersionsEqual("1FINAL", "1");    checkVersionsEqual("1Cr", "1Rc");    checkVersionsEqual("1cR", "1rC");    checkVersionsEqual("1m3", "1Milestone3");    checkVersionsEqual("1m3", "1MileStone3");    checkVersionsEqual("1m3", "1MILESTONE3");}
public void maven_f245_0()
{    checkVersionsOrder("1", "2");    checkVersionsOrder("1.5", "2");    checkVersionsOrder("1", "2.5");    checkVersionsOrder("1.0", "1.1");    checkVersionsOrder("1.1", "1.2");    checkVersionsOrder("1.0.0", "1.1");    checkVersionsOrder("1.0.1", "1.1");    checkVersionsOrder("1.1", "1.2.0");    checkVersionsOrder("1.0-alpha-1", "1.0");    checkVersionsOrder("1.0-alpha-1", "1.0-alpha-2");    checkVersionsOrder("1.0-alpha-1", "1.0-beta-1");    checkVersionsOrder("1.0-beta-1", "1.0-SNAPSHOT");    checkVersionsOrder("1.0-SNAPSHOT", "1.0");    checkVersionsOrder("1.0-alpha-1-SNAPSHOT", "1.0-alpha-1");    checkVersionsOrder("1.0", "1.0-1");    checkVersionsOrder("1.0-1", "1.0-2");    checkVersionsOrder("1.0.0", "1.0-1");    checkVersionsOrder("2.0-1", "2.0.1");    checkVersionsOrder("2.0.1-klm", "2.0.1-lmn");    checkVersionsOrder("2.0.1", "2.0.1-xyz");    checkVersionsOrder("2.0.1", "2.0.1-123");    checkVersionsOrder("2.0.1-xyz", "2.0.1-123");}
public void maven_f246_0()
{    String a = "6.1.0";    String b = "6.1.0rc3";        String c = "6.1H.5-beta";        checkVersionsOrder(b, a);        checkVersionsOrder(b, c);    checkVersionsOrder(a, c);}
public void maven_f247_0()
{        String a = "20190126.230843";        String b = "1234567890.12345";        String c = "123456789012345.1H.5-beta";        String d = "12345678901234567890.1H.5-beta";    checkVersionsOrder(a, b);    checkVersionsOrder(b, c);    checkVersionsOrder(a, c);    checkVersionsOrder(c, d);    checkVersionsOrder(b, d);    checkVersionsOrder(a, d);}
public void maven_f248_0()
{        String[] arr = new String[] { "0000000000000000001", "000000000000000001", "00000000000000001", "0000000000000001", "000000000000001", "00000000000001", "0000000000001", "000000000001", "00000000001", "0000000001", "000000001", "00000001", "0000001", "000001", "00001", "0001", "001", "01", "1" };    checkVersionsArrayEqual(arr);}
public void maven_f249_0()
{        String[] arr = new String[] { "0000000000000000000", "000000000000000000", "00000000000000000", "0000000000000000", "000000000000000", "00000000000000", "0000000000000", "000000000000", "00000000000", "0000000000", "000000000", "00000000", "0000000", "000000", "00000", "0000", "000", "00", "0" };    checkVersionsArrayEqual(arr);}
public void maven_f250_0()
{    Locale orig = Locale.getDefault();    Locale[] locales = { Locale.ENGLISH, new Locale("tr"), Locale.getDefault() };    try {        for (Locale locale : locales) {            Locale.setDefault(locale);            checkVersionsEqual("1-abcdefghijklmnopqrstuvwxyz", "1-ABCDEFGHIJKLMNOPQRSTUVWXYZ");        }    } finally {        Locale.setDefault(orig);    }}
public void maven_f251_0()
{    ComparableVersion c1 = new ComparableVersion("1");    c1.parseVersion("2");    Comparable c2 = newComparable("2");    assertEquals("reused instance should be equivalent to new instance", c1, c2);}
private ArtifactVersion maven_f252_0(String version)
{    return new DefaultArtifactVersion(version);}
private void maven_f253_0(String version, int major, int minor, int incremental, int buildnumber, String qualifier)
{    ArtifactVersion artifactVersion = newArtifactVersion(version);    String parsed = "'" + version + "' parsed as ('" + artifactVersion.getMajorVersion() + "', '" + artifactVersion.getMinorVersion() + "', '" + artifactVersion.getIncrementalVersion() + "', '" + artifactVersion.getBuildNumber() + "', '" + artifactVersion.getQualifier() + "'), ";    assertEquals(parsed + "check major version", major, artifactVersion.getMajorVersion());    assertEquals(parsed + "check minor version", minor, artifactVersion.getMinorVersion());    assertEquals(parsed + "check incremental version", incremental, artifactVersion.getIncrementalVersion());    assertEquals(parsed + "check build number", buildnumber, artifactVersion.getBuildNumber());    assertEquals(parsed + "check qualifier", qualifier, artifactVersion.getQualifier());    assertEquals("check " + version + " string value", version, artifactVersion.toString());}
public void maven_f254_0()
{    checkVersionParsing("1", 1, 0, 0, 0, null);    checkVersionParsing("1.2", 1, 2, 0, 0, null);    checkVersionParsing("1.2.3", 1, 2, 3, 0, null);    checkVersionParsing("1.2.3-1", 1, 2, 3, 1, null);    checkVersionParsing("1.2.3-alpha-1", 1, 2, 3, 0, "alpha-1");    checkVersionParsing("1.2-alpha-1", 1, 2, 0, 0, "alpha-1");    checkVersionParsing("1.2-alpha-1-20050205.060708-1", 1, 2, 0, 0, "alpha-1-20050205.060708-1");    checkVersionParsing("RELEASE", 0, 0, 0, 0, "RELEASE");    checkVersionParsing("2.0-1", 2, 0, 0, 1, null);        checkVersionParsing("02", 0, 0, 0, 0, "02");    checkVersionParsing("0.09", 0, 0, 0, 0, "0.09");    checkVersionParsing("0.2.09", 0, 0, 0, 0, "0.2.09");    checkVersionParsing("2.0-01", 2, 0, 0, 0, "01");        checkVersionParsing("1.0.1b", 0, 0, 0, 0, "1.0.1b");    checkVersionParsing("1.0M2", 0, 0, 0, 0, "1.0M2");    checkVersionParsing("1.0RC2", 0, 0, 0, 0, "1.0RC2");    checkVersionParsing("1.1.2.beta1", 1, 1, 2, 0, "beta1");    checkVersionParsing("1.7.3.beta1", 1, 7, 3, 0, "beta1");    checkVersionParsing("1.7.3.0", 0, 0, 0, 0, "1.7.3.0");    checkVersionParsing("1.7.3.0-1", 0, 0, 0, 0, "1.7.3.0-1");    checkVersionParsing("PATCH-1193602", 0, 0, 0, 0, "PATCH-1193602");    checkVersionParsing("5.0.0alpha-2006020117", 0, 0, 0, 0, "5.0.0alpha-2006020117");    checkVersionParsing("1.0.0.-SNAPSHOT", 0, 0, 0, 0, "1.0.0.-SNAPSHOT");    checkVersionParsing("1..0-SNAPSHOT", 0, 0, 0, 0, "1..0-SNAPSHOT");    checkVersionParsing("1.0.-SNAPSHOT", 0, 0, 0, 0, "1.0.-SNAPSHOT");    checkVersionParsing(".1.0-SNAPSHOT", 0, 0, 0, 0, ".1.0-SNAPSHOT");    checkVersionParsing("1.2.3.200705301630", 0, 0, 0, 0, "1.2.3.200705301630");    checkVersionParsing("1.2.3-200705301630", 1, 2, 3, 0, "200705301630");}
public void maven_f255_0()
{    assertVersionEqual("1", "1");    assertVersionOlder("1", "2");    assertVersionOlder("1.5", "2");    assertVersionOlder("1", "2.5");    assertVersionEqual("1", "1.0");    assertVersionEqual("1", "1.0.0");    assertVersionOlder("1.0", "1.1");    assertVersionOlder("1.1", "1.2");    assertVersionOlder("1.0.0", "1.1");    assertVersionOlder("1.1", "1.2.0");    assertVersionOlder("1.1.2.alpha1", "1.1.2");    assertVersionOlder("1.1.2.alpha1", "1.1.2.beta1");    assertVersionOlder("1.1.2.beta1", "1.2");    assertVersionOlder("1.0-alpha-1", "1.0");    assertVersionOlder("1.0-alpha-1", "1.0-alpha-2");    assertVersionOlder("1.0-alpha-2", "1.0-alpha-15");    assertVersionOlder("1.0-alpha-1", "1.0-beta-1");    assertVersionOlder("1.0-beta-1", "1.0-SNAPSHOT");    assertVersionOlder("1.0-SNAPSHOT", "1.0");    assertVersionOlder("1.0-alpha-1-SNAPSHOT", "1.0-alpha-1");    assertVersionOlder("1.0", "1.0-1");    assertVersionOlder("1.0-1", "1.0-2");    assertVersionEqual("2.0-0", "2.0");    assertVersionOlder("2.0", "2.0-1");    assertVersionOlder("2.0.0", "2.0-1");    assertVersionOlder("2.0-1", "2.0.1");    assertVersionOlder("2.0.1-klm", "2.0.1-lmn");    assertVersionOlder("2.0.1", "2.0.1-xyz");    assertVersionOlder("2.0.1-xyz-1", "2.0.1-1-xyz");    assertVersionOlder("2.0.1", "2.0.1-123");    assertVersionOlder("2.0.1-xyz", "2.0.1-123");    assertVersionOlder("1.2.3-10000000000", "1.2.3-10000000001");    assertVersionOlder("1.2.3-1", "1.2.3-10000000001");        assertVersionOlder("2.3.0-v200706262000", "2.3.0-v200706262130");        assertVersionOlder("2.0.0.v200706041905-7C78EK9E_EkMNfNOd2d8qq", "2.0.0.v200706041906-7C78EK9E_EkMNfNOd2d8qq");}
public void maven_f256_0()
{    assertVersionEqual("1-SNAPSHOT", "1-SNAPSHOT");    assertVersionOlder("1-SNAPSHOT", "2-SNAPSHOT");    assertVersionOlder("1.5-SNAPSHOT", "2-SNAPSHOT");    assertVersionOlder("1-SNAPSHOT", "2.5-SNAPSHOT");    assertVersionEqual("1-SNAPSHOT", "1.0-SNAPSHOT");    assertVersionEqual("1-SNAPSHOT", "1.0.0-SNAPSHOT");    assertVersionOlder("1.0-SNAPSHOT", "1.1-SNAPSHOT");    assertVersionOlder("1.1-SNAPSHOT", "1.2-SNAPSHOT");    assertVersionOlder("1.0.0-SNAPSHOT", "1.1-SNAPSHOT");    assertVersionOlder("1.1-SNAPSHOT", "1.2.0-SNAPSHOT");        assertVersionOlder("1.0-alpha-1-SNAPSHOT", "1.0-alpha-2-SNAPSHOT");    assertVersionOlder("1.0-alpha-1-SNAPSHOT", "1.0-beta-1-SNAPSHOT");    assertVersionOlder("1.0-beta-1-SNAPSHOT", "1.0-SNAPSHOT-SNAPSHOT");    assertVersionOlder("1.0-SNAPSHOT-SNAPSHOT", "1.0-SNAPSHOT");    assertVersionOlder("1.0-alpha-1-SNAPSHOT-SNAPSHOT", "1.0-alpha-1-SNAPSHOT");    assertVersionOlder("1.0-SNAPSHOT", "1.0-1-SNAPSHOT");    assertVersionOlder("1.0-1-SNAPSHOT", "1.0-2-SNAPSHOT");        assertVersionOlder("2.0-SNAPSHOT", "2.0-1-SNAPSHOT");    assertVersionOlder("2.0.0-SNAPSHOT", "2.0-1-SNAPSHOT");    assertVersionOlder("2.0-1-SNAPSHOT", "2.0.1-SNAPSHOT");    assertVersionOlder("2.0.1-klm-SNAPSHOT", "2.0.1-lmn-SNAPSHOT");        assertVersionOlder("2.0.1-SNAPSHOT", "2.0.1-123-SNAPSHOT");    assertVersionOlder("2.0.1-xyz-SNAPSHOT", "2.0.1-123-SNAPSHOT");}
public void maven_f257_0()
{    assertVersionOlder("1.0-RC1", "1.0-SNAPSHOT");    assertVersionOlder("1.0-rc1", "1.0-SNAPSHOT");    assertVersionOlder("1.0-rc-1", "1.0-SNAPSHOT");}
public void maven_f258_0()
{    ArtifactVersion v1 = newArtifactVersion("1");    ArtifactVersion v2 = newArtifactVersion("1.0");    assertEquals(true, v1.equals(v2));    assertEquals(v1.hashCode(), v2.hashCode());}
public void maven_f259_0()
{    assertFalse(newArtifactVersion("1").equals(null));}
public void maven_f260_0()
{    assertFalse(newArtifactVersion("1").equals("non-an-artifact-version-instance"));}
public void maven_f261_0()
{    try {        new DefaultArtifactVersion("...");    } catch (Exception e) {        assertTrue("We expect a NumberFormatException to be thrown.", e instanceof NumberFormatException);    }}
private void maven_f262_0(String left, String right)
{    assertTrue(left + " should be older than " + right, newArtifactVersion(left).compareTo(newArtifactVersion(right)) < 0);    assertTrue(right + " should be newer than " + left, newArtifactVersion(right).compareTo(newArtifactVersion(left)) > 0);}
private void maven_f263_0(String left, String right)
{    assertTrue(left + " should be equal to " + right, newArtifactVersion(left).compareTo(newArtifactVersion(right)) == 0);    assertTrue(right + " should be equal to " + left, newArtifactVersion(right).compareTo(newArtifactVersion(left)) == 0);}
public void maven_f264_0() throws InvalidVersionSpecificationException, OverConstrainedVersionException
{    Artifact artifact = null;    VersionRange range = VersionRange.createFromVersionSpec("(,1.0]");    List<Restriction> restrictions = range.getRestrictions();    assertEquals(CHECK_NUM_RESTRICTIONS, 1, restrictions.size());    Restriction restriction = restrictions.get(0);    assertNull(CHECK_LOWER_BOUND, restriction.getLowerBound());    assertFalse(CHECK_LOWER_BOUND_INCLUSIVE, restriction.isLowerBoundInclusive());    assertEquals(CHECK_UPPER_BOUND, "1.0", restriction.getUpperBound().toString());    assertTrue(CHECK_UPPER_BOUND_INCLUSIVE, restriction.isUpperBoundInclusive());    assertNull(CHECK_VERSION_RECOMMENDATION, range.getRecommendedVersion());    assertFalse(CHECK_SELECTED_VERSION_KNOWN, range.isSelectedVersionKnown(artifact));    assertNull(CHECK_SELECTED_VERSION, range.getSelectedVersion(artifact));    range = VersionRange.createFromVersionSpec("1.0");    assertEquals(CHECK_VERSION_RECOMMENDATION, "1.0", range.getRecommendedVersion().toString());    restrictions = range.getRestrictions();    assertEquals(CHECK_NUM_RESTRICTIONS, 1, restrictions.size());    restriction = restrictions.get(0);    assertNull(CHECK_LOWER_BOUND, restriction.getLowerBound());    assertFalse(CHECK_LOWER_BOUND_INCLUSIVE, restriction.isLowerBoundInclusive());    assertNull(CHECK_UPPER_BOUND, restriction.getUpperBound());    assertFalse(CHECK_UPPER_BOUND_INCLUSIVE, restriction.isUpperBoundInclusive());    assertTrue(CHECK_SELECTED_VERSION_KNOWN, range.isSelectedVersionKnown(artifact));    assertEquals(CHECK_SELECTED_VERSION, "1.0", range.getSelectedVersion(artifact).toString());    range = VersionRange.createFromVersionSpec("[1.0]");    restrictions = range.getRestrictions();    assertEquals(CHECK_NUM_RESTRICTIONS, 1, restrictions.size());    restriction = restrictions.get(0);    assertEquals(CHECK_LOWER_BOUND, "1.0", restriction.getLowerBound().toString());    assertTrue(CHECK_LOWER_BOUND_INCLUSIVE, restriction.isLowerBoundInclusive());    assertEquals(CHECK_UPPER_BOUND, "1.0", restriction.getUpperBound().toString());    assertTrue(CHECK_UPPER_BOUND_INCLUSIVE, restriction.isUpperBoundInclusive());    assertNull(CHECK_VERSION_RECOMMENDATION, range.getRecommendedVersion());    assertFalse(CHECK_SELECTED_VERSION_KNOWN, range.isSelectedVersionKnown(artifact));    assertNull(CHECK_SELECTED_VERSION, range.getSelectedVersion(artifact));    range = VersionRange.createFromVersionSpec("[1.2,1.3]");    restrictions = range.getRestrictions();    assertEquals(CHECK_NUM_RESTRICTIONS, 1, restrictions.size());    restriction = restrictions.get(0);    assertEquals(CHECK_LOWER_BOUND, "1.2", restriction.getLowerBound().toString());    assertTrue(CHECK_LOWER_BOUND_INCLUSIVE, restriction.isLowerBoundInclusive());    assertEquals(CHECK_UPPER_BOUND, "1.3", restriction.getUpperBound().toString());    assertTrue(CHECK_UPPER_BOUND_INCLUSIVE, restriction.isUpperBoundInclusive());    assertNull(CHECK_VERSION_RECOMMENDATION, range.getRecommendedVersion());    assertFalse(CHECK_SELECTED_VERSION_KNOWN, range.isSelectedVersionKnown(artifact));    assertNull(CHECK_SELECTED_VERSION, range.getSelectedVersion(artifact));    range = VersionRange.createFromVersionSpec("[1.0,2.0)");    restrictions = range.getRestrictions();    assertEquals(CHECK_NUM_RESTRICTIONS, 1, restrictions.size());    restriction = restrictions.get(0);    assertEquals(CHECK_LOWER_BOUND, "1.0", restriction.getLowerBound().toString());    assertTrue(CHECK_LOWER_BOUND_INCLUSIVE, restriction.isLowerBoundInclusive());    assertEquals(CHECK_UPPER_BOUND, "2.0", restriction.getUpperBound().toString());    assertFalse(CHECK_UPPER_BOUND_INCLUSIVE, restriction.isUpperBoundInclusive());    assertNull(CHECK_VERSION_RECOMMENDATION, range.getRecommendedVersion());    assertFalse(CHECK_SELECTED_VERSION_KNOWN, range.isSelectedVersionKnown(artifact));    assertNull(CHECK_SELECTED_VERSION, range.getSelectedVersion(artifact));    range = VersionRange.createFromVersionSpec("[1.5,)");    restrictions = range.getRestrictions();    assertEquals(CHECK_NUM_RESTRICTIONS, 1, restrictions.size());    restriction = restrictions.get(0);    assertEquals(CHECK_LOWER_BOUND, "1.5", restriction.getLowerBound().toString());    assertTrue(CHECK_LOWER_BOUND_INCLUSIVE, restriction.isLowerBoundInclusive());    assertNull(CHECK_UPPER_BOUND, restriction.getUpperBound());    assertFalse(CHECK_UPPER_BOUND_INCLUSIVE, restriction.isUpperBoundInclusive());    assertNull(CHECK_VERSION_RECOMMENDATION, range.getRecommendedVersion());    assertFalse(CHECK_SELECTED_VERSION_KNOWN, range.isSelectedVersionKnown(artifact));    assertNull(CHECK_SELECTED_VERSION, range.getSelectedVersion(artifact));    range = VersionRange.createFromVersionSpec("(,1.0],[1.2,)");    restrictions = range.getRestrictions();    assertEquals(CHECK_NUM_RESTRICTIONS, 2, restrictions.size());    restriction = restrictions.get(0);    assertNull(CHECK_LOWER_BOUND, restriction.getLowerBound());    assertFalse(CHECK_LOWER_BOUND_INCLUSIVE, restriction.isLowerBoundInclusive());    assertEquals(CHECK_UPPER_BOUND, "1.0", restriction.getUpperBound().toString());    assertTrue(CHECK_UPPER_BOUND_INCLUSIVE, restriction.isUpperBoundInclusive());    assertNull(CHECK_VERSION_RECOMMENDATION, range.getRecommendedVersion());    restriction = restrictions.get(1);    assertEquals(CHECK_LOWER_BOUND, "1.2", restriction.getLowerBound().toString());    assertTrue(CHECK_LOWER_BOUND_INCLUSIVE, restriction.isLowerBoundInclusive());    assertNull(CHECK_UPPER_BOUND, restriction.getUpperBound());    assertFalse(CHECK_UPPER_BOUND_INCLUSIVE, restriction.isUpperBoundInclusive());    assertNull(CHECK_VERSION_RECOMMENDATION, range.getRecommendedVersion());    assertFalse(CHECK_SELECTED_VERSION_KNOWN, range.isSelectedVersionKnown(artifact));    assertNull(CHECK_SELECTED_VERSION, range.getSelectedVersion(artifact));    range = VersionRange.createFromVersionSpec("[1.0,)");    assertFalse(range.containsVersion(new DefaultArtifactVersion("1.0-SNAPSHOT")));    range = VersionRange.createFromVersionSpec("[1.0,1.1-SNAPSHOT]");    assertTrue(range.containsVersion(new DefaultArtifactVersion("1.1-SNAPSHOT")));    range = VersionRange.createFromVersionSpec("[5.0.9.0,5.0.10.0)");    assertTrue(range.containsVersion(new DefaultArtifactVersion("5.0.9.0")));}
public void maven_f265_0()
{    checkInvalidRange("(1.0)");    checkInvalidRange("[1.0)");    checkInvalidRange("(1.0]");    checkInvalidRange("(1.0,1.0]");    checkInvalidRange("[1.0,1.0)");    checkInvalidRange("(1.0,1.0)");    checkInvalidRange("[1.1,1.0]");    checkInvalidRange("[1.0,1.2),1.3");        checkInvalidRange("[1.0,1.2),(1.1,1.3]");        checkInvalidRange("[1.1,1.3),(1.0,1.2]");        checkInvalidRange("(1.1,1.2],[1.0,1.1)");}
public void maven_f266_0() throws InvalidVersionSpecificationException
{    VersionRange range1 = VersionRange.createFromVersionSpec("1.0");    VersionRange range2 = VersionRange.createFromVersionSpec("1.1");    VersionRange mergedRange = range1.restrict(range2);            assertEquals(CHECK_VERSION_RECOMMENDATION, "1.0", mergedRange.getRecommendedVersion().toString());    List<Restriction> restrictions = mergedRange.getRestrictions();    assertEquals(CHECK_NUM_RESTRICTIONS, 1, restrictions.size());    Restriction restriction = restrictions.get(0);    assertNull(CHECK_LOWER_BOUND, restriction.getLowerBound());    assertFalse(CHECK_LOWER_BOUND_INCLUSIVE, restriction.isLowerBoundInclusive());    assertNull(CHECK_UPPER_BOUND, restriction.getUpperBound());    assertFalse(CHECK_UPPER_BOUND_INCLUSIVE, restriction.isUpperBoundInclusive());    mergedRange = range2.restrict(range1);    assertEquals(CHECK_VERSION_RECOMMENDATION, "1.1", mergedRange.getRecommendedVersion().toString());    restrictions = mergedRange.getRestrictions();    assertEquals(CHECK_NUM_RESTRICTIONS, 1, restrictions.size());    restriction = restrictions.get(0);    assertNull(CHECK_LOWER_BOUND, restriction.getLowerBound());    assertFalse(CHECK_LOWER_BOUND_INCLUSIVE, restriction.isLowerBoundInclusive());    assertNull(CHECK_UPPER_BOUND, restriction.getUpperBound());    assertFalse(CHECK_UPPER_BOUND_INCLUSIVE, restriction.isUpperBoundInclusive());        range1 = VersionRange.createFromVersionSpec("[1.0,)");    range2 = VersionRange.createFromVersionSpec("1.1");    mergedRange = range1.restrict(range2);    assertEquals(CHECK_VERSION_RECOMMENDATION, "1.1", mergedRange.getRecommendedVersion().toString());    restrictions = mergedRange.getRestrictions();    assertEquals(CHECK_NUM_RESTRICTIONS, 1, restrictions.size());    restriction = restrictions.get(0);    assertEquals(CHECK_LOWER_BOUND, "1.0", restriction.getLowerBound().toString());    assertTrue(CHECK_LOWER_BOUND_INCLUSIVE, restriction.isLowerBoundInclusive());    assertNull(CHECK_UPPER_BOUND, restriction.getUpperBound());    assertFalse(CHECK_UPPER_BOUND_INCLUSIVE, restriction.isUpperBoundInclusive());    range1 = VersionRange.createFromVersionSpec("[1.1,)");    range2 = VersionRange.createFromVersionSpec("1.1");    mergedRange = range1.restrict(range2);    assertEquals(CHECK_VERSION_RECOMMENDATION, "1.1", mergedRange.getRecommendedVersion().toString());    restrictions = mergedRange.getRestrictions();    assertEquals(CHECK_NUM_RESTRICTIONS, 1, restrictions.size());    restriction = restrictions.get(0);    assertEquals(CHECK_LOWER_BOUND, "1.1", restriction.getLowerBound().toString());    assertTrue(CHECK_LOWER_BOUND_INCLUSIVE, restriction.isLowerBoundInclusive());    assertNull(CHECK_UPPER_BOUND, restriction.getUpperBound());    assertFalse(CHECK_UPPER_BOUND_INCLUSIVE, restriction.isUpperBoundInclusive());    range1 = VersionRange.createFromVersionSpec("[1.1]");    range2 = VersionRange.createFromVersionSpec("1.1");    mergedRange = range1.restrict(range2);    assertEquals(CHECK_VERSION_RECOMMENDATION, "1.1", mergedRange.getRecommendedVersion().toString());    restrictions = mergedRange.getRestrictions();    assertEquals(CHECK_NUM_RESTRICTIONS, 1, restrictions.size());    restriction = restrictions.get(0);    assertEquals(CHECK_LOWER_BOUND, "1.1", restriction.getLowerBound().toString());    assertTrue(CHECK_LOWER_BOUND_INCLUSIVE, restriction.isLowerBoundInclusive());    assertEquals(CHECK_UPPER_BOUND, "1.1", restriction.getLowerBound().toString());    assertTrue(CHECK_UPPER_BOUND_INCLUSIVE, restriction.isUpperBoundInclusive());    range1 = VersionRange.createFromVersionSpec("(1.1,)");    range2 = VersionRange.createFromVersionSpec("1.1");    mergedRange = range1.restrict(range2);    assertNull(CHECK_VERSION_RECOMMENDATION, mergedRange.getRecommendedVersion());    restrictions = mergedRange.getRestrictions();    assertEquals(CHECK_NUM_RESTRICTIONS, 1, restrictions.size());    restriction = restrictions.get(0);    assertEquals(CHECK_LOWER_BOUND, "1.1", restriction.getLowerBound().toString());    assertFalse(CHECK_LOWER_BOUND_INCLUSIVE, restriction.isLowerBoundInclusive());    assertNull(CHECK_UPPER_BOUND, restriction.getUpperBound());    assertFalse(CHECK_UPPER_BOUND_INCLUSIVE, restriction.isUpperBoundInclusive());    range1 = VersionRange.createFromVersionSpec("[1.2,)");    range2 = VersionRange.createFromVersionSpec("1.1");    mergedRange = range1.restrict(range2);    assertNull(CHECK_VERSION_RECOMMENDATION, mergedRange.getRecommendedVersion());    restrictions = mergedRange.getRestrictions();    assertEquals(CHECK_NUM_RESTRICTIONS, 1, restrictions.size());    restriction = restrictions.get(0);    assertEquals(CHECK_LOWER_BOUND, "1.2", restriction.getLowerBound().toString());    assertTrue(CHECK_LOWER_BOUND_INCLUSIVE, restriction.isLowerBoundInclusive());    assertNull(CHECK_UPPER_BOUND, restriction.getUpperBound());    assertFalse(CHECK_UPPER_BOUND_INCLUSIVE, restriction.isUpperBoundInclusive());    range1 = VersionRange.createFromVersionSpec("(,1.2]");    range2 = VersionRange.createFromVersionSpec("1.1");    mergedRange = range1.restrict(range2);    assertEquals(CHECK_VERSION_RECOMMENDATION, "1.1", mergedRange.getRecommendedVersion().toString());    restrictions = mergedRange.getRestrictions();    assertEquals(CHECK_NUM_RESTRICTIONS, 1, restrictions.size());    restriction = restrictions.get(0);    assertNull(CHECK_LOWER_BOUND, restriction.getLowerBound());    assertFalse(CHECK_LOWER_BOUND_INCLUSIVE, restriction.isLowerBoundInclusive());    assertEquals(CHECK_UPPER_BOUND, "1.2", restriction.getUpperBound().toString());    assertTrue(CHECK_UPPER_BOUND_INCLUSIVE, restriction.isUpperBoundInclusive());    range1 = VersionRange.createFromVersionSpec("(,1.1]");    range2 = VersionRange.createFromVersionSpec("1.1");    mergedRange = range1.restrict(range2);    assertEquals(CHECK_VERSION_RECOMMENDATION, "1.1", mergedRange.getRecommendedVersion().toString());    restrictions = mergedRange.getRestrictions();    assertEquals(CHECK_NUM_RESTRICTIONS, 1, restrictions.size());    restriction = restrictions.get(0);    assertNull(CHECK_LOWER_BOUND, restriction.getLowerBound());    assertFalse(CHECK_LOWER_BOUND_INCLUSIVE, restriction.isLowerBoundInclusive());    assertEquals(CHECK_UPPER_BOUND, "1.1", restriction.getUpperBound().toString());    assertTrue(CHECK_UPPER_BOUND_INCLUSIVE, restriction.isUpperBoundInclusive());    range1 = VersionRange.createFromVersionSpec("(,1.1)");    range2 = VersionRange.createFromVersionSpec("1.1");    mergedRange = range1.restrict(range2);    assertNull(CHECK_VERSION_RECOMMENDATION, mergedRange.getRecommendedVersion());    restrictions = mergedRange.getRestrictions();    assertEquals(CHECK_NUM_RESTRICTIONS, 1, restrictions.size());    restriction = restrictions.get(0);    assertNull(CHECK_LOWER_BOUND, restriction.getLowerBound());    assertFalse(CHECK_LOWER_BOUND_INCLUSIVE, restriction.isLowerBoundInclusive());    assertEquals(CHECK_UPPER_BOUND, "1.1", restriction.getUpperBound().toString());    assertFalse(CHECK_UPPER_BOUND_INCLUSIVE, restriction.isUpperBoundInclusive());    range1 = VersionRange.createFromVersionSpec("(,1.0]");    range2 = VersionRange.createFromVersionSpec("1.1");    mergedRange = range1.restrict(range2);    assertNull(CHECK_VERSION_RECOMMENDATION, mergedRange.getRecommendedVersion());    restrictions = mergedRange.getRestrictions();    assertEquals(CHECK_NUM_RESTRICTIONS, 1, restrictions.size());    restriction = restrictions.get(0);    assertNull(CHECK_LOWER_BOUND, restriction.getLowerBound());    assertFalse(CHECK_LOWER_BOUND_INCLUSIVE, restriction.isLowerBoundInclusive());    assertEquals(CHECK_UPPER_BOUND, "1.0", restriction.getUpperBound().toString());    assertTrue(CHECK_UPPER_BOUND_INCLUSIVE, restriction.isUpperBoundInclusive());    range1 = VersionRange.createFromVersionSpec("(,1.0], [1.1,)");    range2 = VersionRange.createFromVersionSpec("1.2");    mergedRange = range1.restrict(range2);    assertEquals(CHECK_VERSION_RECOMMENDATION, "1.2", mergedRange.getRecommendedVersion().toString());    restrictions = mergedRange.getRestrictions();    assertEquals(CHECK_NUM_RESTRICTIONS, 2, restrictions.size());    restriction = restrictions.get(0);    assertNull(CHECK_LOWER_BOUND, restriction.getLowerBound());    assertFalse(CHECK_LOWER_BOUND_INCLUSIVE, restriction.isLowerBoundInclusive());    assertEquals(CHECK_UPPER_BOUND, "1.0", restriction.getUpperBound().toString());    assertTrue(CHECK_UPPER_BOUND_INCLUSIVE, restriction.isUpperBoundInclusive());    restriction = restrictions.get(1);    assertEquals(CHECK_LOWER_BOUND, "1.1", restriction.getLowerBound().toString());    assertTrue(CHECK_LOWER_BOUND_INCLUSIVE, restriction.isLowerBoundInclusive());    assertNull(CHECK_UPPER_BOUND, restriction.getUpperBound());    assertFalse(CHECK_UPPER_BOUND_INCLUSIVE, restriction.isUpperBoundInclusive());    range1 = VersionRange.createFromVersionSpec("(,1.0], [1.1,)");    range2 = VersionRange.createFromVersionSpec("1.0.5");    mergedRange = range1.restrict(range2);    assertNull(CHECK_VERSION_RECOMMENDATION, mergedRange.getRecommendedVersion());    restrictions = mergedRange.getRestrictions();    assertEquals(CHECK_NUM_RESTRICTIONS, 2, restrictions.size());    restriction = restrictions.get(0);    assertNull(CHECK_LOWER_BOUND, restriction.getLowerBound());    assertFalse(CHECK_LOWER_BOUND_INCLUSIVE, restriction.isLowerBoundInclusive());    assertEquals(CHECK_UPPER_BOUND, "1.0", restriction.getUpperBound().toString());    assertTrue(CHECK_UPPER_BOUND_INCLUSIVE, restriction.isUpperBoundInclusive());    restriction = restrictions.get(1);    assertEquals(CHECK_LOWER_BOUND, "1.1", restriction.getLowerBound().toString());    assertTrue(CHECK_LOWER_BOUND_INCLUSIVE, restriction.isLowerBoundInclusive());    assertNull(CHECK_UPPER_BOUND, restriction.getUpperBound());    assertFalse(CHECK_UPPER_BOUND_INCLUSIVE, restriction.isUpperBoundInclusive());    range1 = VersionRange.createFromVersionSpec("(,1.1), (1.1,)");    range2 = VersionRange.createFromVersionSpec("1.1");    mergedRange = range1.restrict(range2);    assertNull(CHECK_VERSION_RECOMMENDATION, mergedRange.getRecommendedVersion());    restrictions = mergedRange.getRestrictions();    assertEquals(CHECK_NUM_RESTRICTIONS, 2, restrictions.size());    restriction = restrictions.get(0);    assertNull(CHECK_LOWER_BOUND, restriction.getLowerBound());    assertFalse(CHECK_LOWER_BOUND_INCLUSIVE, restriction.isLowerBoundInclusive());    assertEquals(CHECK_UPPER_BOUND, "1.1", restriction.getUpperBound().toString());    assertFalse(CHECK_UPPER_BOUND_INCLUSIVE, restriction.isUpperBoundInclusive());    restriction = restrictions.get(1);    assertEquals(CHECK_LOWER_BOUND, "1.1", restriction.getLowerBound().toString());    assertFalse(CHECK_LOWER_BOUND_INCLUSIVE, restriction.isLowerBoundInclusive());    assertNull(CHECK_UPPER_BOUND, restriction.getUpperBound());    assertFalse(CHECK_UPPER_BOUND_INCLUSIVE, restriction.isUpperBoundInclusive());    range1 = VersionRange.createFromVersionSpec("[1.1,1.3]");    range2 = VersionRange.createFromVersionSpec("(1.1,)");    mergedRange = range1.restrict(range2);    assertNull(CHECK_VERSION_RECOMMENDATION, mergedRange.getRecommendedVersion());    restrictions = mergedRange.getRestrictions();    assertEquals(CHECK_NUM_RESTRICTIONS, 1, restrictions.size());    restriction = restrictions.get(0);    assertEquals(CHECK_LOWER_BOUND, "1.1", restriction.getLowerBound().toString());    assertFalse(CHECK_LOWER_BOUND_INCLUSIVE, restriction.isLowerBoundInclusive());    assertEquals(CHECK_UPPER_BOUND, "1.3", restriction.getUpperBound().toString());    assertTrue(CHECK_UPPER_BOUND_INCLUSIVE, restriction.isUpperBoundInclusive());    range1 = VersionRange.createFromVersionSpec("(,1.3)");    range2 = VersionRange.createFromVersionSpec("[1.2,1.3]");    mergedRange = range1.restrict(range2);    assertNull(CHECK_VERSION_RECOMMENDATION, mergedRange.getRecommendedVersion());    restrictions = mergedRange.getRestrictions();    assertEquals(CHECK_NUM_RESTRICTIONS, 1, restrictions.size());    restriction = restrictions.get(0);    assertEquals(CHECK_LOWER_BOUND, "1.2", restriction.getLowerBound().toString());    assertTrue(CHECK_LOWER_BOUND_INCLUSIVE, restriction.isLowerBoundInclusive());    assertEquals(CHECK_UPPER_BOUND, "1.3", restriction.getUpperBound().toString());    assertFalse(CHECK_UPPER_BOUND_INCLUSIVE, restriction.isUpperBoundInclusive());    range1 = VersionRange.createFromVersionSpec("[1.1,1.3]");    range2 = VersionRange.createFromVersionSpec("[1.2,)");    mergedRange = range1.restrict(range2);    assertNull(CHECK_VERSION_RECOMMENDATION, mergedRange.getRecommendedVersion());    restrictions = mergedRange.getRestrictions();    assertEquals(CHECK_NUM_RESTRICTIONS, 1, restrictions.size());    restriction = restrictions.get(0);    assertEquals(CHECK_LOWER_BOUND, "1.2", restriction.getLowerBound().toString());    assertTrue(CHECK_LOWER_BOUND_INCLUSIVE, restriction.isLowerBoundInclusive());    assertEquals(CHECK_UPPER_BOUND, "1.3", restriction.getUpperBound().toString());    assertTrue(CHECK_UPPER_BOUND_INCLUSIVE, restriction.isUpperBoundInclusive());    range1 = VersionRange.createFromVersionSpec("(,1.3]");    range2 = VersionRange.createFromVersionSpec("[1.2,1.4]");    mergedRange = range1.restrict(range2);    assertNull(CHECK_VERSION_RECOMMENDATION, mergedRange.getRecommendedVersion());    restrictions = mergedRange.getRestrictions();    assertEquals(CHECK_NUM_RESTRICTIONS, 1, restrictions.size());    restriction = restrictions.get(0);    assertEquals(CHECK_LOWER_BOUND, "1.2", restriction.getLowerBound().toString());    assertTrue(CHECK_LOWER_BOUND_INCLUSIVE, restriction.isLowerBoundInclusive());    assertEquals(CHECK_UPPER_BOUND, "1.3", restriction.getUpperBound().toString());    assertTrue(CHECK_UPPER_BOUND_INCLUSIVE, restriction.isUpperBoundInclusive());    range1 = VersionRange.createFromVersionSpec("(1.2,1.3]");    range2 = VersionRange.createFromVersionSpec("[1.1,1.4]");    mergedRange = range1.restrict(range2);    assertNull(CHECK_VERSION_RECOMMENDATION, mergedRange.getRecommendedVersion());    restrictions = mergedRange.getRestrictions();    assertEquals(CHECK_NUM_RESTRICTIONS, 1, restrictions.size());    restriction = restrictions.get(0);    assertEquals(CHECK_LOWER_BOUND, "1.2", restriction.getLowerBound().toString());    assertFalse(CHECK_LOWER_BOUND_INCLUSIVE, restriction.isLowerBoundInclusive());    assertEquals(CHECK_UPPER_BOUND, "1.3", restriction.getUpperBound().toString());    assertTrue(CHECK_UPPER_BOUND_INCLUSIVE, restriction.isUpperBoundInclusive());    range1 = VersionRange.createFromVersionSpec("(1.2,1.3)");    range2 = VersionRange.createFromVersionSpec("[1.1,1.4]");    mergedRange = range1.restrict(range2);    assertNull(CHECK_VERSION_RECOMMENDATION, mergedRange.getRecommendedVersion());    restrictions = mergedRange.getRestrictions();    assertEquals(CHECK_NUM_RESTRICTIONS, 1, restrictions.size());    restriction = restrictions.get(0);    assertEquals(CHECK_LOWER_BOUND, "1.2", restriction.getLowerBound().toString());    assertFalse(CHECK_LOWER_BOUND_INCLUSIVE, restriction.isLowerBoundInclusive());    assertEquals(CHECK_UPPER_BOUND, "1.3", restriction.getUpperBound().toString());    assertFalse(CHECK_UPPER_BOUND_INCLUSIVE, restriction.isUpperBoundInclusive());    range1 = VersionRange.createFromVersionSpec("[1.2,1.3)");    range2 = VersionRange.createFromVersionSpec("[1.1,1.4]");    mergedRange = range1.restrict(range2);    assertNull(CHECK_VERSION_RECOMMENDATION, mergedRange.getRecommendedVersion());    restrictions = mergedRange.getRestrictions();    assertEquals(CHECK_NUM_RESTRICTIONS, 1, restrictions.size());    restriction = restrictions.get(0);    assertEquals(CHECK_LOWER_BOUND, "1.2", restriction.getLowerBound().toString());    assertTrue(CHECK_LOWER_BOUND_INCLUSIVE, restriction.isLowerBoundInclusive());    assertEquals(CHECK_UPPER_BOUND, "1.3", restriction.getUpperBound().toString());    assertFalse(CHECK_UPPER_BOUND_INCLUSIVE, restriction.isUpperBoundInclusive());    range1 = VersionRange.createFromVersionSpec("[1.0,1.1]");    range2 = VersionRange.createFromVersionSpec("[1.1,1.4]");    mergedRange = range1.restrict(range2);    assertNull(CHECK_VERSION_RECOMMENDATION, mergedRange.getRecommendedVersion());    restrictions = mergedRange.getRestrictions();    assertEquals(CHECK_NUM_RESTRICTIONS, 1, restrictions.size());    restriction = restrictions.get(0);    assertEquals(CHECK_LOWER_BOUND, "1.1", restriction.getLowerBound().toString());    assertTrue(CHECK_LOWER_BOUND_INCLUSIVE, restriction.isLowerBoundInclusive());    assertEquals(CHECK_UPPER_BOUND, "1.1", restriction.getUpperBound().toString());    assertTrue(CHECK_UPPER_BOUND_INCLUSIVE, restriction.isUpperBoundInclusive());    range1 = VersionRange.createFromVersionSpec("[1.0,1.1)");    range2 = VersionRange.createFromVersionSpec("[1.1,1.4]");    mergedRange = range1.restrict(range2);    assertNull(CHECK_VERSION_RECOMMENDATION, mergedRange.getRecommendedVersion());    restrictions = mergedRange.getRestrictions();    assertEquals(CHECK_NUM_RESTRICTIONS, 0, restrictions.size());    range1 = VersionRange.createFromVersionSpec("[1.0,1.2],[1.3,1.5]");    range2 = VersionRange.createFromVersionSpec("[1.1]");    mergedRange = range1.restrict(range2);    assertNull(CHECK_VERSION_RECOMMENDATION, mergedRange.getRecommendedVersion());    restrictions = mergedRange.getRestrictions();    assertEquals(CHECK_NUM_RESTRICTIONS, 1, restrictions.size());    restriction = restrictions.get(0);    assertEquals(CHECK_LOWER_BOUND, "1.1", restriction.getLowerBound().toString());    assertTrue(CHECK_LOWER_BOUND_INCLUSIVE, restriction.isLowerBoundInclusive());    assertEquals(CHECK_UPPER_BOUND, "1.1", restriction.getUpperBound().toString());    assertTrue(CHECK_UPPER_BOUND_INCLUSIVE, restriction.isUpperBoundInclusive());    range1 = VersionRange.createFromVersionSpec("[1.0,1.2],[1.3,1.5]");    range2 = VersionRange.createFromVersionSpec("[1.4]");    mergedRange = range1.restrict(range2);    assertNull(CHECK_VERSION_RECOMMENDATION, mergedRange.getRecommendedVersion());    restrictions = mergedRange.getRestrictions();    assertEquals(CHECK_NUM_RESTRICTIONS, 1, restrictions.size());    restriction = restrictions.get(0);    assertEquals(CHECK_LOWER_BOUND, "1.4", restriction.getLowerBound().toString());    assertTrue(CHECK_LOWER_BOUND_INCLUSIVE, restriction.isLowerBoundInclusive());    assertEquals(CHECK_UPPER_BOUND, "1.4", restriction.getUpperBound().toString());    assertTrue(CHECK_UPPER_BOUND_INCLUSIVE, restriction.isUpperBoundInclusive());    range1 = VersionRange.createFromVersionSpec("[1.0,1.2],[1.3,1.5]");    range2 = VersionRange.createFromVersionSpec("[1.1,1.4]");    mergedRange = range1.restrict(range2);    assertNull(CHECK_VERSION_RECOMMENDATION, mergedRange.getRecommendedVersion());    restrictions = mergedRange.getRestrictions();    assertEquals(CHECK_NUM_RESTRICTIONS, 2, restrictions.size());    restriction = restrictions.get(0);    assertEquals(CHECK_LOWER_BOUND, "1.1", restriction.getLowerBound().toString());    assertTrue(CHECK_LOWER_BOUND_INCLUSIVE, restriction.isLowerBoundInclusive());    assertEquals(CHECK_UPPER_BOUND, "1.2", restriction.getUpperBound().toString());    assertTrue(CHECK_UPPER_BOUND_INCLUSIVE, restriction.isUpperBoundInclusive());    restriction = restrictions.get(1);    assertEquals(CHECK_LOWER_BOUND, "1.3", restriction.getLowerBound().toString());    assertTrue(CHECK_LOWER_BOUND_INCLUSIVE, restriction.isLowerBoundInclusive());    assertEquals(CHECK_UPPER_BOUND, "1.4", restriction.getUpperBound().toString());    assertTrue(CHECK_UPPER_BOUND_INCLUSIVE, restriction.isUpperBoundInclusive());    range1 = VersionRange.createFromVersionSpec("[1.0,1.2),(1.3,1.5]");    range2 = VersionRange.createFromVersionSpec("[1.1,1.4]");    mergedRange = range1.restrict(range2);    assertNull(CHECK_VERSION_RECOMMENDATION, mergedRange.getRecommendedVersion());    restrictions = mergedRange.getRestrictions();    assertEquals(CHECK_NUM_RESTRICTIONS, 2, restrictions.size());    restriction = restrictions.get(0);    assertEquals(CHECK_LOWER_BOUND, "1.1", restriction.getLowerBound().toString());    assertTrue(CHECK_LOWER_BOUND_INCLUSIVE, restriction.isLowerBoundInclusive());    assertEquals(CHECK_UPPER_BOUND, "1.2", restriction.getUpperBound().toString());    assertFalse(CHECK_UPPER_BOUND_INCLUSIVE, restriction.isUpperBoundInclusive());    restriction = restrictions.get(1);    assertEquals(CHECK_LOWER_BOUND, "1.3", restriction.getLowerBound().toString());    assertFalse(CHECK_LOWER_BOUND_INCLUSIVE, restriction.isLowerBoundInclusive());    assertEquals(CHECK_UPPER_BOUND, "1.4", restriction.getUpperBound().toString());    assertTrue(CHECK_UPPER_BOUND_INCLUSIVE, restriction.isUpperBoundInclusive());    range1 = VersionRange.createFromVersionSpec("[1.0,1.2],[1.3,1.5]");    range2 = VersionRange.createFromVersionSpec("(1.1,1.4)");    mergedRange = range1.restrict(range2);    assertNull(CHECK_VERSION_RECOMMENDATION, mergedRange.getRecommendedVersion());    restrictions = mergedRange.getRestrictions();    assertEquals(CHECK_NUM_RESTRICTIONS, 2, restrictions.size());    restriction = restrictions.get(0);    assertEquals(CHECK_LOWER_BOUND, "1.1", restriction.getLowerBound().toString());    assertFalse(CHECK_LOWER_BOUND_INCLUSIVE, restriction.isLowerBoundInclusive());    assertEquals(CHECK_UPPER_BOUND, "1.2", restriction.getUpperBound().toString());    assertTrue(CHECK_UPPER_BOUND_INCLUSIVE, restriction.isUpperBoundInclusive());    restriction = restrictions.get(1);    assertEquals(CHECK_LOWER_BOUND, "1.3", restriction.getLowerBound().toString());    assertTrue(CHECK_LOWER_BOUND_INCLUSIVE, restriction.isLowerBoundInclusive());    assertEquals(CHECK_UPPER_BOUND, "1.4", restriction.getUpperBound().toString());    assertFalse(CHECK_UPPER_BOUND_INCLUSIVE, restriction.isUpperBoundInclusive());    range1 = VersionRange.createFromVersionSpec("[1.0,1.2),(1.3,1.5]");    range2 = VersionRange.createFromVersionSpec("(1.1,1.4)");    mergedRange = range1.restrict(range2);    assertNull(CHECK_VERSION_RECOMMENDATION, mergedRange.getRecommendedVersion());    restrictions = mergedRange.getRestrictions();    assertEquals(CHECK_NUM_RESTRICTIONS, 2, restrictions.size());    restriction = restrictions.get(0);    assertEquals(CHECK_LOWER_BOUND, "1.1", restriction.getLowerBound().toString());    assertFalse(CHECK_LOWER_BOUND_INCLUSIVE, restriction.isLowerBoundInclusive());    assertEquals(CHECK_UPPER_BOUND, "1.2", restriction.getUpperBound().toString());    assertFalse(CHECK_UPPER_BOUND_INCLUSIVE, restriction.isUpperBoundInclusive());    restriction = restrictions.get(1);    assertEquals(CHECK_LOWER_BOUND, "1.3", restriction.getLowerBound().toString());    assertFalse(CHECK_LOWER_BOUND_INCLUSIVE, restriction.isLowerBoundInclusive());    assertEquals(CHECK_UPPER_BOUND, "1.4", restriction.getUpperBound().toString());    assertFalse(CHECK_UPPER_BOUND_INCLUSIVE, restriction.isUpperBoundInclusive());    range1 = VersionRange.createFromVersionSpec("(,1.1),(1.4,)");    range2 = VersionRange.createFromVersionSpec("[1.1,1.4]");    mergedRange = range1.restrict(range2);    assertNull(CHECK_VERSION_RECOMMENDATION, mergedRange.getRecommendedVersion());    restrictions = mergedRange.getRestrictions();    assertEquals(CHECK_NUM_RESTRICTIONS, 0, restrictions.size());    range1 = VersionRange.createFromVersionSpec("(,1.1],[1.4,)");    range2 = VersionRange.createFromVersionSpec("(1.1,1.4)");    mergedRange = range1.restrict(range2);    assertNull(CHECK_VERSION_RECOMMENDATION, mergedRange.getRecommendedVersion());    restrictions = mergedRange.getRestrictions();    assertEquals(CHECK_NUM_RESTRICTIONS, 0, restrictions.size());    range1 = VersionRange.createFromVersionSpec("[,1.1],[1.4,]");    range2 = VersionRange.createFromVersionSpec("[1.2,1.3]");    mergedRange = range1.restrict(range2);    assertNull(CHECK_VERSION_RECOMMENDATION, mergedRange.getRecommendedVersion());    restrictions = mergedRange.getRestrictions();    assertEquals(CHECK_NUM_RESTRICTIONS, 0, restrictions.size());    range1 = VersionRange.createFromVersionSpec("[1.0,1.2],[1.3,1.5]");    range2 = VersionRange.createFromVersionSpec("[1.1,1.4],[1.6,]");    mergedRange = range1.restrict(range2);    assertNull(CHECK_VERSION_RECOMMENDATION, mergedRange.getRecommendedVersion());    restrictions = mergedRange.getRestrictions();    assertEquals(CHECK_NUM_RESTRICTIONS, 2, restrictions.size());    restriction = restrictions.get(0);    assertEquals(CHECK_LOWER_BOUND, "1.1", restriction.getLowerBound().toString());    assertTrue(CHECK_LOWER_BOUND_INCLUSIVE, restriction.isLowerBoundInclusive());    assertEquals(CHECK_UPPER_BOUND, "1.2", restriction.getUpperBound().toString());    assertTrue(CHECK_UPPER_BOUND_INCLUSIVE, restriction.isUpperBoundInclusive());    restriction = restrictions.get(1);    assertEquals(CHECK_LOWER_BOUND, "1.3", restriction.getLowerBound().toString());    assertTrue(CHECK_LOWER_BOUND_INCLUSIVE, restriction.isLowerBoundInclusive());    assertEquals(CHECK_UPPER_BOUND, "1.4", restriction.getUpperBound().toString());    assertTrue(CHECK_UPPER_BOUND_INCLUSIVE, restriction.isUpperBoundInclusive());    range1 = VersionRange.createFromVersionSpec("[1.0,1.2],[1.3,1.5]");    range2 = VersionRange.createFromVersionSpec("[1.1,1.4],[1.5,]");    mergedRange = range1.restrict(range2);    assertNull(CHECK_VERSION_RECOMMENDATION, mergedRange.getRecommendedVersion());    restrictions = mergedRange.getRestrictions();    assertEquals(CHECK_NUM_RESTRICTIONS, 3, restrictions.size());    restriction = restrictions.get(0);    assertEquals(CHECK_LOWER_BOUND, "1.1", restriction.getLowerBound().toString());    assertTrue(CHECK_LOWER_BOUND_INCLUSIVE, restriction.isLowerBoundInclusive());    assertEquals(CHECK_UPPER_BOUND, "1.2", restriction.getUpperBound().toString());    assertTrue(CHECK_UPPER_BOUND_INCLUSIVE, restriction.isUpperBoundInclusive());    restriction = restrictions.get(1);    assertEquals(CHECK_LOWER_BOUND, "1.3", restriction.getLowerBound().toString());    assertTrue(CHECK_LOWER_BOUND_INCLUSIVE, restriction.isLowerBoundInclusive());    assertEquals(CHECK_UPPER_BOUND, "1.4", restriction.getUpperBound().toString());    assertTrue(CHECK_UPPER_BOUND_INCLUSIVE, restriction.isUpperBoundInclusive());    restriction = restrictions.get(2);    assertEquals(CHECK_LOWER_BOUND, "1.5", restriction.getLowerBound().toString());    assertTrue(CHECK_LOWER_BOUND_INCLUSIVE, restriction.isLowerBoundInclusive());    assertEquals(CHECK_UPPER_BOUND, "1.5", restriction.getUpperBound().toString());    assertTrue(CHECK_UPPER_BOUND_INCLUSIVE, restriction.isUpperBoundInclusive());    range1 = VersionRange.createFromVersionSpec("[1.0,1.2],[1.3,1.7]");    range2 = VersionRange.createFromVersionSpec("[1.1,1.4],[1.5,1.6]");    mergedRange = range1.restrict(range2);    assertNull(CHECK_VERSION_RECOMMENDATION, mergedRange.getRecommendedVersion());    restrictions = mergedRange.getRestrictions();    assertEquals(CHECK_NUM_RESTRICTIONS, 3, restrictions.size());    restriction = restrictions.get(0);    assertEquals(CHECK_LOWER_BOUND, "1.1", restriction.getLowerBound().toString());    assertTrue(CHECK_LOWER_BOUND_INCLUSIVE, restriction.isLowerBoundInclusive());    assertEquals(CHECK_UPPER_BOUND, "1.2", restriction.getUpperBound().toString());    assertTrue(CHECK_UPPER_BOUND_INCLUSIVE, restriction.isUpperBoundInclusive());    restriction = restrictions.get(1);    assertEquals(CHECK_LOWER_BOUND, "1.3", restriction.getLowerBound().toString());    assertTrue(CHECK_LOWER_BOUND_INCLUSIVE, restriction.isLowerBoundInclusive());    assertEquals(CHECK_UPPER_BOUND, "1.4", restriction.getUpperBound().toString());    assertTrue(CHECK_UPPER_BOUND_INCLUSIVE, restriction.isUpperBoundInclusive());    restriction = restrictions.get(2);    assertEquals(CHECK_LOWER_BOUND, "1.5", restriction.getLowerBound().toString());    assertTrue(CHECK_LOWER_BOUND_INCLUSIVE, restriction.isLowerBoundInclusive());    assertEquals(CHECK_UPPER_BOUND, "1.6", restriction.getUpperBound().toString());    assertTrue(CHECK_UPPER_BOUND_INCLUSIVE, restriction.isUpperBoundInclusive());        range1 = VersionRange.createFromVersionSpec("[,1.1],[1.4,]");    range2 = VersionRange.createFromVersionSpec("[1.2,1.3]");    range1 = range1.restrict(range2);    mergedRange = range1.restrict(range2);    assertNull(CHECK_VERSION_RECOMMENDATION, mergedRange.getRecommendedVersion());    restrictions = mergedRange.getRestrictions();    assertEquals(CHECK_NUM_RESTRICTIONS, 0, restrictions.size());    range1 = VersionRange.createFromVersionSpec("[,1.1],[1.4,]");    range2 = VersionRange.createFromVersionSpec("[1.2,1.3]");    range2 = range1.restrict(range2);    mergedRange = range1.restrict(range2);    assertNull(CHECK_VERSION_RECOMMENDATION, mergedRange.getRecommendedVersion());    restrictions = mergedRange.getRestrictions();    assertEquals(CHECK_NUM_RESTRICTIONS, 0, restrictions.size());}
public void maven_f267_0() throws InvalidVersionSpecificationException
{    VersionRange range = VersionRange.createFromVersionSpec("[1.0,1.2]");    assertTrue(range.containsVersion(new DefaultArtifactVersion("1.1-SNAPSHOT")));    assertTrue(range.containsVersion(new DefaultArtifactVersion("1.2-SNAPSHOT")));    assertFalse(range.containsVersion(new DefaultArtifactVersion("1.0-SNAPSHOT")));}
public void maven_f268_0() throws InvalidVersionSpecificationException
{    VersionRange range = VersionRange.createFromVersionSpec("[1.0,1.2-SNAPSHOT]");    assertTrue(range.containsVersion(new DefaultArtifactVersion("1.1-SNAPSHOT")));    assertTrue(range.containsVersion(new DefaultArtifactVersion("1.2-SNAPSHOT")));    range = VersionRange.createFromVersionSpec("[1.0-SNAPSHOT,1.2]");    assertTrue(range.containsVersion(new DefaultArtifactVersion("1.0-SNAPSHOT")));    assertTrue(range.containsVersion(new DefaultArtifactVersion("1.1-SNAPSHOT")));}
public void maven_f269_0() throws InvalidVersionSpecificationException
{    VersionRange range = VersionRange.createFromVersionSpec("1.0-SNAPSHOT");    assertTrue(range.containsVersion(new DefaultArtifactVersion("1.0-SNAPSHOT")));}
private void maven_f270_0(String version)
{    try {        VersionRange.createFromVersionSpec(version);        fail("Version " + version + " should have failed to construct");    } catch (InvalidVersionSpecificationException expected) {        }}
public void maven_f271_0() throws InvalidVersionSpecificationException
{    ArtifactVersion actualVersion = new DefaultArtifactVersion("2.0.5");    assertTrue(enforceVersion("2.0.5", actualVersion));    assertTrue(enforceVersion("2.0.4", actualVersion));    assertTrue(enforceVersion("[2.0.5]", actualVersion));    assertFalse(enforceVersion("[2.0.6,)", actualVersion));    assertFalse(enforceVersion("[2.0.6]", actualVersion));    assertTrue(enforceVersion("[2.0,2.1]", actualVersion));    assertFalse(enforceVersion("[2.0,2.0.3]", actualVersion));    assertTrue(enforceVersion("[2.0,2.0.5]", actualVersion));    assertFalse(enforceVersion("[2.0,2.0.5)", actualVersion));}
public boolean maven_f272_0(String requiredVersionRange, ArtifactVersion actualVersion) throws InvalidVersionSpecificationException
{    VersionRange vr = null;    vr = VersionRange.createFromVersionSpec(requiredVersionRange);    return vr.containsVersion(actualVersion);}
public void maven_f273_0()
{}
public void maven_f274_0() throws InvalidVersionSpecificationException
{    VersionRange range = VersionRange.createFromVersionSpec("[1.0,1.2]");        assertSame(range, VersionRange.createFromVersionSpec("[1.0,1.2]"));    VersionRange spec = VersionRange.createFromVersionSpec("1.0");        assertSame(spec, VersionRange.createFromVersionSpec("1.0"));    List<Restriction> restrictions = spec.getRestrictions();    assertEquals(CHECK_NUM_RESTRICTIONS, 1, restrictions.size());    VersionRange version = VersionRange.createFromVersion("1.0");        assertSame(version, VersionRange.createFromVersion("1.0"));    restrictions = version.getRestrictions();    assertEquals(CHECK_NUM_RESTRICTIONS, 0, restrictions.size());    assertFalse("check !VersionRange.createFromVersionSpec(x).equals(VersionRange.createFromVersion(x))", spec.equals(version));}
public String maven_f275_0()
{    return source;}
public int maven_f276_0()
{    return lineNumber;}
public int maven_f277_0()
{    return columnNumber;}
public String maven_f278_0()
{    StringBuilder buffer = new StringBuilder(256);    if (getSource().length() > 0) {        if (buffer.length() > 0) {            buffer.append(", ");        }        buffer.append(getSource());    }    if (getLineNumber() > 0) {        if (buffer.length() > 0) {            buffer.append(", ");        }        buffer.append("line ").append(getLineNumber());    }    if (getColumnNumber() > 0) {        if (buffer.length() > 0) {            buffer.append(", ");        }        buffer.append("column ").append(getColumnNumber());    }    return buffer.toString();}
public Exception maven_f279_0()
{    return exception;}
public String maven_f280_0()
{    String msg;    if (message != null && message.length() > 0) {        msg = message;    } else {        msg = exception.getMessage();        if (msg == null) {            msg = "";        }    }    return msg;}
public Severity maven_f281_0()
{    return severity;}
public String maven_f282_0()
{    StringBuilder buffer = new StringBuilder(128);    buffer.append('[').append(getSeverity()).append("] ");    buffer.append(getMessage());    buffer.append(" @ ").append(getLocation());    return buffer.toString();}
public List<Problem> maven_f283_0()
{    return problems;}
public void maven_f284_0(String source)
{    this.source = source;}
public void maven_f285_0(Problem.Severity severity, String message, int line, int column, Exception cause)
{    Problem problem = new DefaultProblem(message, severity, source, line, column, cause);    problems.add(problem);}
public InputStream maven_f286_0() throws IOException
{    return new FileInputStream(file);}
public String maven_f287_0()
{    return file.getPath();}
public File maven_f288_0()
{    return file;}
public String maven_f289_0()
{    return getLocation();}
public static ProblemCollector maven_f290_0(List<Problem> problems)
{    return new DefaultProblemCollector(problems);}
public InputStream maven_f291_0() throws IOException
{    return new ByteArrayInputStream(content.getBytes("UTF-8"));}
public String maven_f292_0()
{    return location;}
public String maven_f293_0()
{    return content;}
public String maven_f294_0()
{    return getLocation();}
public InputStream maven_f295_0() throws IOException
{    return url.openStream();}
public String maven_f296_0()
{    return url.toString();}
public URL maven_f297_0()
{    return url;}
public String maven_f298_0()
{    return getLocation();}
public void maven_f299_0()
{    DefaultProblemCollector collector = new DefaultProblemCollector(null);    assertNotNull(collector.getProblems());    assertEquals(0, collector.getProblems().size());    collector.add(null, "MESSAGE1", -1, -1, null);    Exception e2 = new Exception();    collector.add(Severity.WARNING, null, 42, 127, e2);    assertEquals(2, collector.getProblems().size());    Problem p1 = collector.getProblems().get(0);    assertEquals(Severity.ERROR, p1.getSeverity());    assertEquals("MESSAGE1", p1.getMessage());    assertEquals(-1, p1.getLineNumber());    assertEquals(-1, p1.getColumnNumber());    assertEquals(null, p1.getException());    Problem p2 = collector.getProblems().get(1);    assertEquals(Severity.WARNING, p2.getSeverity());    assertEquals("", p2.getMessage());    assertEquals(42, p2.getLineNumber());    assertEquals(127, p2.getColumnNumber());    assertEquals(e2, p2.getException());}
public void maven_f300_0()
{    DefaultProblemCollector collector = new DefaultProblemCollector(null);    collector.add(null, "PROBLEM1", -1, -1, null);    collector.setSource("SOURCE_PROBLEM2");    collector.add(null, "PROBLEM2", -1, -1, null);    collector.setSource("SOURCE_PROBLEM3");    collector.add(null, "PROBLEM3", -1, -1, null);    assertEquals("", collector.getProblems().get(0).getSource());    assertEquals("SOURCE_PROBLEM2", collector.getProblems().get(1).getSource());    assertEquals("SOURCE_PROBLEM3", collector.getProblems().get(2).getSource());}
public void maven_f301_0()
{    DefaultProblem problem = new DefaultProblem(null, null, null, -1, -1, null);    assertEquals(Severity.ERROR, problem.getSeverity());    problem = new DefaultProblem(null, Severity.FATAL, null, -1, -1, null);    assertEquals(Severity.FATAL, problem.getSeverity());    problem = new DefaultProblem(null, Severity.ERROR, null, -1, -1, null);    assertEquals(Severity.ERROR, problem.getSeverity());    problem = new DefaultProblem(null, Severity.WARNING, null, -1, -1, null);    assertEquals(Severity.WARNING, problem.getSeverity());}
public void maven_f302_0()
{    DefaultProblem problem = new DefaultProblem(null, null, null, -1, -1, null);    assertEquals(-1, problem.getLineNumber());    problem = new DefaultProblem(null, null, null, 42, -1, null);    assertEquals(42, problem.getLineNumber());    problem = new DefaultProblem(null, null, null, Integer.MAX_VALUE, -1, null);    assertEquals(Integer.MAX_VALUE, problem.getLineNumber());        problem = new DefaultProblem(null, null, null, Integer.MIN_VALUE, -1, null);    assertEquals(Integer.MIN_VALUE, problem.getLineNumber());}
public void maven_f303_0()
{    DefaultProblem problem = new DefaultProblem(null, null, null, -1, -1, null);    assertEquals(-1, problem.getColumnNumber());    problem = new DefaultProblem(null, null, null, -1, 42, null);    assertEquals(42, problem.getColumnNumber());    problem = new DefaultProblem(null, null, null, -1, Integer.MAX_VALUE, null);    assertEquals(Integer.MAX_VALUE, problem.getColumnNumber());        problem = new DefaultProblem(null, null, null, -1, Integer.MIN_VALUE, null);    assertEquals(Integer.MIN_VALUE, problem.getColumnNumber());}
public void maven_f304_0()
{    DefaultProblem problem = new DefaultProblem(null, null, null, -1, -1, null);    assertEquals(null, problem.getException());    Exception e = new Exception();    problem = new DefaultProblem(null, null, null, -1, -1, e);    assertSame(e, problem.getException());}
public void maven_f305_0()
{    DefaultProblem problem = new DefaultProblem(null, null, null, -1, -1, null);    assertEquals("", problem.getSource());    problem = new DefaultProblem(null, null, "", -1, -1, null);    assertEquals("", problem.getSource());    problem = new DefaultProblem(null, null, "SOURCE", -1, -1, null);    assertEquals("SOURCE", problem.getSource());}
public void maven_f306_0()
{    DefaultProblem problem = new DefaultProblem(null, null, null, -1, -1, null);    assertEquals("", problem.getLocation());    problem = new DefaultProblem(null, null, "SOURCE", -1, -1, null);    assertEquals("SOURCE", problem.getLocation());    problem = new DefaultProblem(null, null, null, 42, -1, null);    assertEquals("line 42", problem.getLocation());    problem = new DefaultProblem(null, null, null, -1, 127, null);    assertEquals("column 127", problem.getLocation());    problem = new DefaultProblem(null, null, "SOURCE", 42, 127, null);    assertEquals("SOURCE, line 42, column 127", problem.getLocation());}
public void maven_f307_0()
{    DefaultProblem problem = new DefaultProblem("MESSAGE", null, null, -1, -1, null);    assertEquals("MESSAGE", problem.getMessage());    problem = new DefaultProblem(null, null, null, -1, -1, new Exception());    assertEquals("", problem.getMessage());    problem = new DefaultProblem(null, null, null, -1, -1, new Exception("EXCEPTION MESSAGE"));    assertEquals("EXCEPTION MESSAGE", problem.getMessage());}
public void maven_f308_0()
{    try {        new FileSource(null);        fail("Should fail, since you must specify a file");    } catch (NullPointerException e) {        assertEquals("file cannot be null", e.getMessage());    }}
public void maven_f309_0() throws Exception
{    File txtFile = new File("target/test-classes/source.txt");    FileSource source = new FileSource(txtFile);    try (InputStream is = source.getInputStream();        Scanner scanner = new Scanner(is)) {        assertEquals("Hello World!", scanner.nextLine());    }}
public void maven_f310_0()
{    File txtFile = new File("target/test-classes/source.txt");    FileSource source = new FileSource(txtFile);    assertEquals(txtFile.getAbsolutePath(), source.getLocation());}
public void maven_f311_0()
{    File txtFile = new File("target/test-classes/source.txt");    FileSource source = new FileSource(txtFile);    assertEquals(txtFile.getAbsoluteFile(), source.getFile());}
public void maven_f312_0()
{    ProblemCollector collector1 = ProblemCollectorFactory.newInstance(null);    Problem problem = new DefaultProblem("MESSAGE1", null, null, -1, -1, null);    ProblemCollector collector2 = ProblemCollectorFactory.newInstance(Collections.singletonList(problem));    assertNotSame(collector1, collector2);    assertEquals(0, collector1.getProblems().size());    assertEquals(1, collector2.getProblems().size());}
public void maven_f313_0() throws Exception
{    StringSource source = new StringSource("Hello World!");    try (InputStream is = source.getInputStream();        Scanner scanner = new Scanner(is)) {        assertEquals("Hello World!", scanner.nextLine());    }}
public void maven_f314_0()
{    StringSource source = new StringSource("Hello World!");    assertEquals("(memory)", source.getLocation());    source = new StringSource("Hello World!", "LOCATION");    assertEquals("LOCATION", source.getLocation());}
public void maven_f315_0()
{    StringSource source = new StringSource(null);    assertEquals("", source.getContent());    source = new StringSource("Hello World!", "LOCATION");    assertEquals("Hello World!", source.getContent());}
public void maven_f316_0()
{    try {        new UrlSource(null);        fail("Should fail, since you must specify a url");    } catch (NullPointerException e) {        assertEquals("url cannot be null", e.getMessage());    }}
public void maven_f317_0() throws Exception
{    URL txtFile = new File("target/test-classes/source.txt").toURI().toURL();    UrlSource source = new UrlSource(txtFile);    try (InputStream is = source.getInputStream();        Scanner scanner = new Scanner(is)) {        assertEquals("Hello World!", scanner.nextLine());    }}
public void maven_f318_0() throws Exception
{    URL txtFile = new File("target/test-classes/source.txt").toURI().toURL();    UrlSource source = new UrlSource(txtFile);    assertEquals(txtFile.toExternalForm(), source.getLocation());}
 int maven_f319_0()
{    return id;}
public static final ArtifactScopeEnum maven_f320_0(ArtifactScopeEnum scope)
{    return scope == null ? DEFAULT_SCOPE : scope;}
public String maven_f321_0()
{    if (id == 1) {        return Artifact.SCOPE_COMPILE;    } else if (id == 2) {        return Artifact.SCOPE_TEST;    } else if (id == 3) {        return Artifact.SCOPE_RUNTIME;    } else if (id == 4) {        return Artifact.SCOPE_PROVIDED;    } else if (id == 5) {        return Artifact.SCOPE_SYSTEM;    } else {        return Artifact.SCOPE_RUNTIME_PLUS_SYSTEM;    }}
public boolean maven_f322_0(ArtifactScopeEnum scope)
{    final ArtifactScopeEnum s = checkScope(scope);        if (id == system.id) {        return scope.id == system.id;    }    for (ArtifactScopeEnum[][] set : COMPLIANCY_SETS) {        if (id == set[0][0].id) {            for (ArtifactScopeEnum ase : set[1]) {                if (s.id == ase.id) {                    return true;                }            }            break;        }    }    return false;}
public static ArtifactStatus maven_f323_0(String status)
{    ArtifactStatus retVal = null;    if (status != null) {        retVal = map.get(status);    }    return retVal != null ? retVal : NONE;}
public boolean maven_f324_0(Object o)
{    if (this == o) {        return true;    }    if (o == null || getClass() != o.getClass()) {        return false;    }    final ArtifactStatus that = (ArtifactStatus) o;    return rank == that.rank;}
public int maven_f325_0()
{    return rank;}
public String maven_f326_0()
{    return key;}
public int maven_f327_0(ArtifactStatus s)
{    return rank - s.rank;}
public void maven_f328_0(String basedir, String finalName, Artifact artifact, ArtifactRepository deploymentRepository, ArtifactRepository localRepository) throws ArtifactDeploymentException
{    String extension = artifact.getArtifactHandler().getExtension();    File source = new File(basedir, finalName + "." + extension);    deploy(source, artifact, deploymentRepository, localRepository);}
public void maven_f329_0(File source, Artifact artifact, ArtifactRepository deploymentRepository, ArtifactRepository localRepository) throws ArtifactDeploymentException
{    RepositorySystemSession session = LegacyLocalRepositoryManager.overlay(localRepository, legacySupport.getRepositorySession(), repoSystem);    DeployRequest request = new DeployRequest();    request.setTrace(RequestTrace.newChild(null, legacySupport.getSession().getCurrentProject()));    org.eclipse.aether.artifact.Artifact mainArtifact = RepositoryUtils.toArtifact(artifact);    mainArtifact = mainArtifact.setFile(source);    request.addArtifact(mainArtifact);    String versionKey = artifact.getGroupId() + ':' + artifact.getArtifactId();    String snapshotKey = null;    if (artifact.isSnapshot()) {        snapshotKey = versionKey + ':' + artifact.getBaseVersion();        request.addMetadata(relatedMetadata.get(snapshotKey));    }    request.addMetadata(relatedMetadata.get(versionKey));    for (ArtifactMetadata metadata : artifact.getMetadataList()) {        if (metadata instanceof ProjectArtifactMetadata) {            org.eclipse.aether.artifact.Artifact pomArtifact = new SubArtifact(mainArtifact, "", "pom");            pomArtifact = pomArtifact.setFile(((ProjectArtifactMetadata) metadata).getFile());            request.addArtifact(pomArtifact);        } else if (metadata instanceof SnapshotArtifactRepositoryMetadata || metadata instanceof ArtifactRepositoryMetadata) {                } else {            request.addMetadata(new MetadataBridge(metadata));        }    }    RemoteRepository remoteRepo = RepositoryUtils.toRepo(deploymentRepository);    /*         * NOTE: This provides backward-compat with maven-deploy-plugin:2.4 which bypasses the repository factory when         * using an alternative deployment location.         */    if (deploymentRepository instanceof DefaultArtifactRepository && deploymentRepository.getAuthentication() == null) {        RemoteRepository.Builder builder = new RemoteRepository.Builder(remoteRepo);        builder.setAuthentication(session.getAuthenticationSelector().getAuthentication(remoteRepo));        builder.setProxy(session.getProxySelector().getProxy(remoteRepo));        remoteRepo = builder.build();    }    request.setRepository(remoteRepo);    DeployResult result;    try {        result = repoSystem.deploy(session, request);    } catch (DeploymentException e) {        throw new ArtifactDeploymentException(e.getMessage(), e);    }    for (Object metadata : result.getMetadata()) {        if (metadata.getClass().getName().endsWith(".internal.VersionsMetadata")) {            relatedMetadata.put(versionKey, (MergeableMetadata) metadata);        }        if (snapshotKey != null && metadata.getClass().getName().endsWith(".internal.RemoteSnapshotMetadata")) {            relatedMetadata.put(snapshotKey, (MergeableMetadata) metadata);        }    }    artifact.setResolvedVersion(result.getArtifacts().iterator().next().getVersion());}
public void maven_f330_0(String basedir, String finalName, Artifact artifact, ArtifactRepository localRepository) throws ArtifactInstallationException
{    String extension = artifact.getArtifactHandler().getExtension();    File source = new File(basedir, finalName + "." + extension);    install(source, artifact, localRepository);}
public void maven_f331_0(File source, Artifact artifact, ArtifactRepository localRepository) throws ArtifactInstallationException
{    RepositorySystemSession session = LegacyLocalRepositoryManager.overlay(localRepository, legacySupport.getRepositorySession(), repoSystem);    InstallRequest request = new InstallRequest();    request.setTrace(RequestTrace.newChild(null, legacySupport.getSession().getCurrentProject()));    org.eclipse.aether.artifact.Artifact mainArtifact = RepositoryUtils.toArtifact(artifact);    mainArtifact = mainArtifact.setFile(source);    request.addArtifact(mainArtifact);    for (ArtifactMetadata metadata : artifact.getMetadataList()) {        if (metadata instanceof ProjectArtifactMetadata) {            org.eclipse.aether.artifact.Artifact pomArtifact = new SubArtifact(mainArtifact, "", "pom");            pomArtifact = pomArtifact.setFile(((ProjectArtifactMetadata) metadata).getFile());            request.addArtifact(pomArtifact);        } else if (metadata instanceof SnapshotArtifactRepositoryMetadata || metadata instanceof ArtifactRepositoryMetadata) {                } else {            request.addMetadata(new MetadataBridge(metadata));        }    }    try {        repoSystem.install(session, request);    } catch (InstallationException e) {        throw new ArtifactInstallationException(e.getMessage(), e);    }    if (artifact.isSnapshot()) {        Snapshot snapshot = new Snapshot();        snapshot.setLocalCopy(true);        artifact.addMetadata(new SnapshotArtifactRepositoryMetadata(artifact, snapshot));    }    Versioning versioning = new Versioning();    versioning.updateTimestamp();    versioning.addVersion(artifact.getBaseVersion());    if (artifact.isRelease()) {        versioning.setRelease(artifact.getBaseVersion());    }    artifact.addMetadata(new ArtifactRepositoryMetadata(artifact, versioning));}
public AuthenticationInfo maven_f332_0(String id)
{    MavenSession session = legacySupport.getSession();    if (session != null && id != null) {        MavenExecutionRequest request = session.getRequest();        if (request != null) {            List<Server> servers = request.getServers();            if (servers != null) {                for (Server server : servers) {                    if (id.equalsIgnoreCase(server.getId())) {                        SettingsDecryptionResult result = settingsDecrypter.decrypt(new DefaultSettingsDecryptionRequest(server));                        server = result.getServer();                        AuthenticationInfo authInfo = new AuthenticationInfo();                        authInfo.setUserName(server.getUsername());                        authInfo.setPassword(server.getPassword());                        authInfo.setPrivateKey(server.getPrivateKey());                        authInfo.setPassphrase(server.getPassphrase());                        return authInfo;                    }                }            }        }    }        return new AuthenticationInfo();}
public ProxyInfo maven_f333_0(String protocol)
{    MavenSession session = legacySupport.getSession();    if (session != null && protocol != null) {        MavenExecutionRequest request = session.getRequest();        if (request != null) {            List<Proxy> proxies = request.getProxies();            if (proxies != null) {                for (Proxy proxy : proxies) {                    if (proxy.isActive() && protocol.equalsIgnoreCase(proxy.getProtocol())) {                        SettingsDecryptionResult result = settingsDecrypter.decrypt(new DefaultSettingsDecryptionRequest(proxy));                        proxy = result.getProxy();                        ProxyInfo proxyInfo = new ProxyInfo();                        proxyInfo.setHost(proxy.getHost());                        proxyInfo.setType(proxy.getProtocol());                        proxyInfo.setPort(proxy.getPort());                        proxyInfo.setNonProxyHosts(proxy.getNonProxyHosts());                        proxyInfo.setUserName(proxy.getUsername());                        proxyInfo.setPassword(proxy.getPassword());                        return proxyInfo;                    }                }            }        }    }    return null;}
public void maven_f334_0(Artifact artifact, ArtifactRepository repository) throws TransferFailedException, ResourceDoesNotExistException
{    getArtifact(artifact, repository, null, false);}
public void maven_f335_0(Artifact artifact, List<ArtifactRepository> remoteRepositories) throws TransferFailedException, ResourceDoesNotExistException
{    getArtifact(artifact, remoteRepositories, null, false);}
public ArtifactRepositoryf336_1ArtifactRepository repository)
{    Mirror mirror = mirrorSelector.getMirror(repository, legacySupport.getSession().getSettings().getMirrors());    if (mirror != null) {        String id = mirror.getId();        if (id == null) {                        id = repository.getId();        }                repository = artifactRepositoryFactory.createArtifactRepository(id, mirror.getUrl(), repository.getLayout(), repository.getSnapshots(), repository.getReleases());    }    return repository;}
public String maven_f337_0(Artifact artifact)
{    return layout.pathOf(artifact);}
public String maven_f338_0(ArtifactMetadata artifactMetadata)
{    return layout.pathOfRemoteRepositoryMetadata(artifactMetadata);}
public String maven_f339_0(ArtifactMetadata metadata, ArtifactRepository repository)
{    return layout.pathOfLocalRepositoryMetadata(metadata, repository);}
public void maven_f340_0(ArtifactRepositoryLayout layout)
{    this.layout = layout;}
public ArtifactRepositoryLayout maven_f341_0()
{    return layout;}
public void maven_f342_0(ArtifactRepositoryPolicy snapshots)
{    this.snapshots = snapshots;}
public ArtifactRepositoryPolicy maven_f343_0()
{    return snapshots;}
public void maven_f344_0(ArtifactRepositoryPolicy releases)
{    this.releases = releases;}
public ArtifactRepositoryPolicy maven_f345_0()
{    return releases;}
public String maven_f346_0()
{    return getId();}
public boolean maven_f347_0()
{    return blacklisted;}
public void maven_f348_0(boolean blacklisted)
{    this.blacklisted = blacklisted;}
public String maven_f349_0()
{    StringBuilder sb = new StringBuilder(256);    sb.append("       id: ").append(getId()).append('\n');    sb.append("      url: ").append(getUrl()).append('\n');    sb.append("   layout: ").append(layout != null ? layout : "none").append('\n');    if (snapshots != null) {        sb.append("snapshots: [enabled => ").append(snapshots.isEnabled());        sb.append(", update => ").append(snapshots.getUpdatePolicy()).append("]\n");    }    if (releases != null) {        sb.append(" releases: [enabled => ").append(releases.isEnabled());        sb.append(", update => ").append(releases.getUpdatePolicy()).append("]\n");    }    return sb.toString();}
public Artifact maven_f350_0(Artifact artifact)
{    File artifactFile = new File(getBasedir(), pathOf(artifact));            artifact.setFile(artifactFile);    if (artifactFile.exists()) {        artifact.setResolved(true);    }    return artifact;}
public List<String> maven_f351_0(Artifact artifact)
{    return Collections.emptyList();}
public boolean maven_f352_0()
{    return false;}
public Authentication maven_f353_0()
{    return authentication;}
public void maven_f354_0(Authentication authentication)
{    this.authentication = authentication;}
public Proxy maven_f355_0()
{    return proxy;}
public void maven_f356_0(Proxy proxy)
{    this.proxy = proxy;}
public boolean maven_f357_0()
{    return true;}
public List<ArtifactRepository> maven_f358_0()
{    return mirroredRepositories;}
public void maven_f359_0(List<ArtifactRepository> mirroredRepositories)
{    if (mirroredRepositories != null) {        this.mirroredRepositories = Collections.unmodifiableList(mirroredRepositories);    } else {        this.mirroredRepositories = Collections.emptyList();    }}
public ArtifactRepositoryLayout maven_f360_0(String layoutId) throws UnknownRepositoryLayoutException
{    return factory.getLayout(layoutId);}
public ArtifactRepository maven_f361_0(String id, String url, String layoutId, boolean uniqueVersion) throws UnknownRepositoryLayoutException
{    return injectSession(factory.createDeploymentArtifactRepository(id, url, layoutId, uniqueVersion), false);}
public ArtifactRepository maven_f362_0(String id, String url, ArtifactRepositoryLayout repositoryLayout, boolean uniqueVersion)
{    return injectSession(factory.createDeploymentArtifactRepository(id, url, repositoryLayout, uniqueVersion), false);}
public ArtifactRepository maven_f363_0(String id, String url, String layoutId, ArtifactRepositoryPolicy snapshots, ArtifactRepositoryPolicy releases) throws UnknownRepositoryLayoutException
{    return injectSession(factory.createArtifactRepository(id, url, layoutId, snapshots, releases), true);}
public ArtifactRepository maven_f364_0(String id, String url, ArtifactRepositoryLayout repositoryLayout, ArtifactRepositoryPolicy snapshots, ArtifactRepositoryPolicy releases)
{    return injectSession(factory.createArtifactRepository(id, url, repositoryLayout, snapshots, releases), true);}
public void maven_f365_0(String updatePolicy)
{    factory.setGlobalUpdatePolicy(updatePolicy);}
public void maven_f366_0(String checksumPolicy)
{    factory.setGlobalChecksumPolicy(checksumPolicy);}
private ArtifactRepository maven_f367_0(ArtifactRepository repository, boolean mirrors)
{    RepositorySystemSession session = legacySupport.getRepositorySession();    if (session != null && repository != null && !isLocalRepository(repository)) {        List<ArtifactRepository> repositories = Arrays.asList(repository);        if (mirrors) {            repositorySystem.injectMirror(session, repositories);        }        repositorySystem.injectProxy(session, repositories);        repositorySystem.injectAuthentication(session, repositories);    }    return repository;}
private boolean maven_f368_0(ArtifactRepository repository)
{        return "local".equals(repository.getId());}
public String maven_f369_0()
{    return "flat";}
public String maven_f370_0(Artifact artifact)
{    ArtifactHandler artifactHandler = artifact.getArtifactHandler();    StringBuilder path = new StringBuilder(128);    path.append(artifact.getArtifactId()).append(ARTIFACT_SEPARATOR).append(artifact.getVersion());    if (artifact.hasClassifier()) {        path.append(ARTIFACT_SEPARATOR).append(artifact.getClassifier());    }    if (artifactHandler.getExtension() != null && artifactHandler.getExtension().length() > 0) {        path.append(GROUP_SEPARATOR).append(artifactHandler.getExtension());    }    return path.toString();}
public String maven_f371_0(ArtifactMetadata metadata, ArtifactRepository repository)
{    return pathOfRepositoryMetadata(metadata.getLocalFilename(repository));}
private String maven_f372_0(String filename)
{    StringBuilder path = new StringBuilder(128);    path.append(filename);    return path.toString();}
public String maven_f373_0(ArtifactMetadata metadata)
{    return pathOfRepositoryMetadata(metadata.getRemoteFilename());}
public String maven_f374_0()
{    return getId();}
public void maven_f375_0(RepositoryMetadata metadata, List<ArtifactRepository> remoteRepositories, ArtifactRepository localRepository) throws RepositoryMetadataResolutionException
{    RepositoryRequest request = new DefaultRepositoryRequest();    request.setLocalRepository(localRepository);    request.setRemoteRepositories(remoteRepositories);    resolve(metadata, request);}
public void maven_f376_0(RepositoryMetadata metadata, RepositoryRequest request) throws RepositoryMetadataResolutionException
{    ArtifactRepository localRepo = request.getLocalRepository();    List<ArtifactRepository> remoteRepositories = request.getRemoteRepositories();    if (!request.isOffline()) {        Date localCopyLastModified = null;        if (metadata.getBaseVersion() != null) {            localCopyLastModified = getLocalCopyLastModified(localRepo, metadata);        }        for (ArtifactRepository repository : remoteRepositories) {            ArtifactRepositoryPolicy policy = metadata.getPolicy(repository);            File file = new File(localRepo.getBasedir(), localRepo.pathOfLocalRepositoryMetadata(metadata, repository));            boolean update;            if (!policy.isEnabled()) {                update = false;                if (getLogger().isDebugEnabled()) {                    getLogger().debug("Skipping update check for " + metadata.getKey() + " (" + file + ") from disabled repository " + repository.getId() + " (" + repository.getUrl() + ")");                }            } else if (request.isForceUpdate()) {                update = true;            } else if (localCopyLastModified != null && !policy.checkOutOfDate(localCopyLastModified)) {                update = false;                if (getLogger().isDebugEnabled()) {                    getLogger().debug("Skipping update check for " + metadata.getKey() + " (" + file + ") from repository " + repository.getId() + " (" + repository.getUrl() + ") in favor of local copy");                }            } else {                update = updateCheckManager.isUpdateRequired(metadata, repository, file);            }            if (update) {                getLogger().info(metadata.getKey() + ": checking for updates from " + repository.getId());                try {                    wagonManager.getArtifactMetadata(metadata, repository, file, policy.getChecksumPolicy());                } catch (ResourceDoesNotExistException e) {                    getLogger().debug(metadata + " could not be found on repository: " + repository.getId());                                        if (file.exists()) {                        if (!file.delete()) {                                                        try {                                Thread.sleep(10);                            } catch (InterruptedException ie) {                                                        }                                                        file.delete();                        }                    }                } catch (TransferFailedException e) {                    getLogger().warn(metadata + " could not be retrieved from repository: " + repository.getId() + " due to an error: " + e.getMessage());                    getLogger().debug("Exception", e);                } finally {                    updateCheckManager.touch(metadata, repository, file);                }            }                        if (file.exists()) {                file.setLastModified(System.currentTimeMillis());            }        }    }    try {        mergeMetadata(metadata, remoteRepositories, localRepo);    } catch (RepositoryMetadataStoreException e) {        throw new RepositoryMetadataResolutionException("Unable to store local copy of metadata: " + e.getMessage(), e);    }}
private Date maven_f377_0(ArtifactRepository localRepository, RepositoryMetadata metadata)
{    String metadataPath = localRepository.pathOfLocalRepositoryMetadata(metadata, localRepository);    File metadataFile = new File(localRepository.getBasedir(), metadataPath);    return metadataFile.isFile() ? new Date(metadataFile.lastModified()) : null;}
private void maven_f378_0(RepositoryMetadata metadata, List<ArtifactRepository> remoteRepositories, ArtifactRepository localRepository) throws RepositoryMetadataStoreException
{                    Map<ArtifactRepository, Metadata> previousMetadata = new HashMap<>();    ArtifactRepository selected = null;    for (ArtifactRepository repository : remoteRepositories) {        ArtifactRepositoryPolicy policy = metadata.getPolicy(repository);        if (policy.isEnabled() && loadMetadata(metadata, repository, localRepository, previousMetadata)) {            metadata.setRepository(repository);            selected = repository;        }    }    if (loadMetadata(metadata, localRepository, localRepository, previousMetadata)) {        metadata.setRepository(null);        selected = localRepository;    }    updateSnapshotMetadata(metadata, previousMetadata, selected, localRepository);}
private void maven_f379_0(RepositoryMetadata metadata, Map<ArtifactRepository, Metadata> previousMetadata, ArtifactRepository selected, ArtifactRepository localRepository) throws RepositoryMetadataStoreException
{        if (metadata.isSnapshot()) {        Metadata prevMetadata = metadata.getMetadata();        for (ArtifactRepository repository : previousMetadata.keySet()) {            Metadata m = previousMetadata.get(repository);            if (repository.equals(selected)) {                if (m.getVersioning() == null) {                    m.setVersioning(new Versioning());                }                if (m.getVersioning().getSnapshot() == null) {                    m.getVersioning().setSnapshot(new Snapshot());                }            } else {                if ((m.getVersioning() != null) && (m.getVersioning().getSnapshot() != null) && m.getVersioning().getSnapshot().isLocalCopy()) {                    m.getVersioning().getSnapshot().setLocalCopy(false);                    metadata.setMetadata(m);                    metadata.storeInLocalRepository(localRepository, repository);                }            }        }        metadata.setMetadata(prevMetadata);    }}
private boolean maven_f380_0(RepositoryMetadata repoMetadata, ArtifactRepository remoteRepository, ArtifactRepository localRepository, Map<ArtifactRepository, Metadata> previousMetadata)
{    boolean setRepository = false;    File metadataFile = new File(localRepository.getBasedir(), localRepository.pathOfLocalRepositoryMetadata(repoMetadata, remoteRepository));    if (metadataFile.exists()) {        Metadata metadata;        try {            metadata = readMetadata(metadataFile);        } catch (RepositoryMetadataReadException e) {            if (getLogger().isDebugEnabled()) {                getLogger().warn(e.getMessage(), e);            } else {                getLogger().warn(e.getMessage());            }            return setRepository;        }        if (repoMetadata.isSnapshot() && (previousMetadata != null)) {            previousMetadata.put(remoteRepository, metadata);        }        if (repoMetadata.getMetadata() != null) {            setRepository = repoMetadata.getMetadata().merge(metadata);        } else {            repoMetadata.setMetadata(metadata);            setRepository = true;        }    }    return setRepository;}
protected Metadata maven_f381_0(File mappingFile) throws RepositoryMetadataReadException
{    Metadata result;    try (Reader reader = ReaderFactory.newXmlReader(mappingFile)) {        MetadataXpp3Reader mappingReader = new MetadataXpp3Reader();        result = mappingReader.read(reader, false);    } catch (FileNotFoundException e) {        throw new RepositoryMetadataReadException("Cannot read metadata from '" + mappingFile + "'", e);    } catch (IOException | XmlPullParserException e) {        throw new RepositoryMetadataReadException("Cannot read metadata from '" + mappingFile + "': " + e.getMessage(), e);    }    return result;}
private void maven_f382_0(File metadataFile, Metadata metadata, Metadata reference)
{    boolean changed = false;    if (metadata != null && reference != null) {        Versioning versioning = metadata.getVersioning();        Versioning versioningRef = reference.getVersioning();        if (versioning != null && versioningRef != null) {            String lastUpdated = versioning.getLastUpdated();            String now = versioningRef.getLastUpdated();            if (lastUpdated != null && now != null && now.compareTo(lastUpdated) < 0) {                getLogger().warn("The last updated timestamp in " + metadataFile + " refers to the future (now = " + now + ", lastUpdated = " + lastUpdated + "). Please verify that the clocks of all" + " deploying machines are reasonably synchronized.");                versioning.setLastUpdated(now);                changed = true;            }        }    }    if (changed) {        getLogger().debug("Repairing metadata in " + metadataFile);        try (Writer writer = WriterFactory.newXmlWriter(metadataFile)) {            new MetadataXpp3Writer().write(writer, metadata);        } catch (IOException e) {            String msg = "Could not write fixed metadata to " + metadataFile + ": " + e.getMessage();            if (getLogger().isDebugEnabled()) {                getLogger().warn(msg, e);            } else {                getLogger().warn(msg);            }        }    }}
public void maven_f383_0(RepositoryMetadata metadata, ArtifactRepository localRepository, ArtifactRepository remoteRepository) throws RepositoryMetadataResolutionException
{    File file;    try {        file = getArtifactMetadataFromDeploymentRepository(metadata, localRepository, remoteRepository);    } catch (TransferFailedException e) {        throw new RepositoryMetadataResolutionException(metadata + " could not be retrieved from repository: " + remoteRepository.getId() + " due to an error: " + e.getMessage(), e);    }    try {        if (file.exists()) {            Metadata prevMetadata = readMetadata(file);            metadata.setMetadata(prevMetadata);        }    } catch (RepositoryMetadataReadException e) {        throw new RepositoryMetadataResolutionException(e.getMessage(), e);    }}
private File maven_f384_0(ArtifactMetadata metadata, ArtifactRepository localRepo, ArtifactRepository remoteRepository) throws TransferFailedException
{    File file = new File(localRepo.getBasedir(), localRepo.pathOfLocalRepositoryMetadata(metadata, remoteRepository));    try {        wagonManager.getArtifactMetadataFromDeploymentRepository(metadata, remoteRepository, file, ArtifactRepositoryPolicy.CHECKSUM_POLICY_WARN);    } catch (ResourceDoesNotExistException e) {        getLogger().info(metadata + " could not be found on repository: " + remoteRepository.getId() + ", so will be created");                if (file.exists()) {            if (!file.delete()) {                                try {                    Thread.sleep(10);                } catch (InterruptedException ie) {                                }                                file.delete();            }        }    } finally {        if (metadata instanceof RepositoryMetadata) {            updateCheckManager.touch((RepositoryMetadata) metadata, remoteRepository, file);        }    }    return file;}
public void maven_f385_0(ArtifactMetadata metadata, ArtifactRepository localRepository, ArtifactRepository deploymentRepository) throws RepositoryMetadataDeploymentException
{    File file;    if (metadata instanceof RepositoryMetadata) {        getLogger().info("Retrieving previous metadata from " + deploymentRepository.getId());        try {            file = getArtifactMetadataFromDeploymentRepository(metadata, localRepository, deploymentRepository);        } catch (TransferFailedException e) {            throw new RepositoryMetadataDeploymentException(metadata + " could not be retrieved from repository: " + deploymentRepository.getId() + " due to an error: " + e.getMessage(), e);        }        if (file.isFile()) {            try {                fixTimestamp(file, readMetadata(file), ((RepositoryMetadata) metadata).getMetadata());            } catch (RepositoryMetadataReadException e) {                        }        }    } else {                file = new File(localRepository.getBasedir(), localRepository.pathOfLocalRepositoryMetadata(metadata, deploymentRepository));    }    try {        metadata.storeInLocalRepository(localRepository, deploymentRepository);    } catch (RepositoryMetadataStoreException e) {        throw new RepositoryMetadataDeploymentException("Error installing metadata: " + e.getMessage(), e);    }    try {        wagonManager.putArtifactMetadata(file, metadata, deploymentRepository);    } catch (TransferFailedException e) {        throw new RepositoryMetadataDeploymentException("Error while deploying metadata: " + e.getMessage(), e);    }}
public void maven_f386_0(ArtifactMetadata metadata, ArtifactRepository localRepository) throws RepositoryMetadataInstallationException
{    try {        metadata.storeInLocalRepository(localRepository, localRepository);    } catch (RepositoryMetadataStoreException e) {        throw new RepositoryMetadataInstallationException("Error installing metadata: " + e.getMessage(), e);    }}
public boolean maven_f387_0()
{    return true;}
public boolean maven_f388_0()
{    return false;}
public String maven_f389_0()
{    return groupId;}
public String maven_f390_0()
{    return null;}
public String maven_f391_0()
{    return null;}
public void maven_f392_0(String goalPrefix, String artifactId)
{    addPluginMapping(goalPrefix, artifactId, artifactId);}
public void maven_f393_0(String goalPrefix, String artifactId, String name)
{    List<Plugin> plugins = getMetadata().getPlugins();    boolean found = false;    for (Iterator<Plugin> i = plugins.iterator(); i.hasNext() && !found; ) {        Plugin plugin = i.next();        if (plugin.getPrefix().equals(goalPrefix)) {            found = true;        }    }    if (!found) {        Plugin plugin = new Plugin();        plugin.setPrefix(goalPrefix);        plugin.setArtifactId(artifactId);        plugin.setName(name);        getMetadata().addPlugin(plugin);    }}
public Object maven_f394_0()
{    return groupId;}
public boolean maven_f395_0()
{    return false;}
public ArtifactRepository maven_f396_0()
{    return null;}
public void maven_f397_0(ArtifactRepository remoteRepository)
{}
public void maven_f398_0(File current, File result) throws RepositoryException
{    try {        if (current.exists()) {            FileUtils.copyFile(current, result);        }        ArtifactRepository localRepo = new MetadataRepository(result);        metadata.storeInLocalRepository(localRepo, localRepo);        merged = true;    } catch (Exception e) {        throw new RepositoryException(e.getMessage(), e);    }}
public boolean maven_f399_0()
{    return merged;}
public String maven_f400_0()
{    return emptify(metadata.getGroupId());}
public String maven_f401_0()
{    return metadata.storedInGroupDirectory() ? "" : emptify(metadata.getArtifactId());}
public String maven_f402_0()
{    return metadata.storedInArtifactVersionDirectory() ? emptify(metadata.getBaseVersion()) : "";}
public String maven_f403_0()
{    return metadata.getRemoteFilename();}
private String maven_f404_0(String string)
{    return (string != null) ? string : "";}
public File maven_f405_0()
{    return null;}
public MetadataBridge maven_f406_0(File file)
{    return this;}
public Nature maven_f407_0()
{    if (metadata instanceof RepositoryMetadata) {        switch(((RepositoryMetadata) metadata).getNature()) {            case RepositoryMetadata.RELEASE_OR_SNAPSHOT:                return Nature.RELEASE_OR_SNAPSHOT;            case RepositoryMetadata.SNAPSHOT:                return Nature.SNAPSHOT;            default:                return Nature.RELEASE;        }    } else {        return Nature.RELEASE;    }}
public Map<String, String> maven_f408_0()
{    return Collections.emptyMap();}
public Metadata maven_f409_0(Map<String, String> properties)
{    return this;}
public String maven_f410_0()
{    return metadataFile.getParent();}
public String maven_f411_0(ArtifactMetadata metadata, ArtifactRepository repository)
{    return metadataFile.getName();}
public static Metadata maven_f412_0(Metadata src)
{    if (src == null) {        return null;    }    return src.clone();}
public boolean maven_f413_0()
{    return false;}
public boolean maven_f414_0()
{    return true;}
public String maven_f415_0()
{    return artifact.getGroupId();}
public String maven_f416_0()
{    return artifact.getArtifactId();}
public String maven_f417_0()
{    return artifact.getBaseVersion();}
public Object maven_f418_0()
{    return "snapshot " + artifact.getGroupId() + ":" + artifact.getArtifactId() + ":" + artifact.getBaseVersion();}
public boolean maven_f419_0()
{    return artifact.isSnapshot();}
public int maven_f420_0()
{    return isSnapshot() ? SNAPSHOT : RELEASE;}
public ArtifactRepository maven_f421_0()
{    return artifact.getRepository();}
public void maven_f422_0(ArtifactRepository remoteRepository)
{    artifact.setRepository(remoteRepository);}
public void maven_f423_0(Artifact node)
{}
public void maven_f424_0(Artifact artifact)
{    indent += "  ";}
public void maven_f425_0(Artifact artifact)
{    indent = indent.substring(2);}
public voidf426_1Artifact artifact)
{    }
public voidf427_1Artifact omitted, Artifact kept)
{    String omittedVersion = omitted.getVersion();    String keptVersion = kept.getVersion();    if (!Objects.equals(omittedVersion, keptVersion)) {            }}
public voidf428_1Artifact omitted)
{    }
public voidf430_1Artifact artifact, String scope)
{    }
public voidf431_1Artifact artifact)
{    }
public voidf432_1Artifact artifact, Artifact replacement, VersionRange newRange)
{    }
public voidf433_1Artifact artifact, Artifact replacement)
{    String msg = indent + artifact;    msg += " (";    if (replacement.getVersion() != null) {        msg += "applying version: " + replacement.getVersion() + ";";    }    if (replacement.getScope() != null) {        msg += "applying artifactScope: " + replacement.getScope();    }    msg += ")";    }
public voidf434_1Artifact artifact, Artifact replacement)
{        if (!replacement.getVersion().equals(artifact.getVersion())) {        String msg = indent + artifact + " (applying version: " + replacement.getVersion() + ")";            }}
public voidf435_1Artifact artifact, Artifact replacement)
{        if (!replacement.getScope().equals(artifact.getScope())) {        String msg = indent + artifact + " (applying artifactScope: " + replacement.getScope() + ")";            }}
public voidf436_1Artifact artifact, Artifact replacement)
{        if (!replacement.getScope().equals(artifact.getScope())) {        String msg = indent + artifact + " (applying system path: " + replacement.getFile() + ")";            }}
public void maven_f437_0(Runnable command)
{    command.run();}
private RepositorySystemSession maven_f438_0(ArtifactRepository localRepository)
{    return LegacyLocalRepositoryManager.overlay(localRepository, legacySupport.getRepositorySession(), repoSystem);}
private void maven_f439_0(RepositoryRequest request, MavenSession session)
{    if (session != null) {        request.setOffline(session.isOffline());        request.setForceUpdate(session.getRequest().isUpdateSnapshots());    }}
private void maven_f440_0(ArtifactResolutionRequest request, MavenSession session)
{    injectSession1(request, session);    if (session != null) {        request.setServers(session.getRequest().getServers());        request.setMirrors(session.getRequest().getMirrors());        request.setProxies(session.getRequest().getProxies());    }}
public void maven_f441_0(Artifact artifact, List<ArtifactRepository> remoteRepositories, ArtifactRepository localRepository, TransferListener resolutionListener) throws ArtifactResolutionException, ArtifactNotFoundException
{    resolve(artifact, remoteRepositories, getSession(localRepository));}
public void maven_f442_0(Artifact artifact, List<ArtifactRepository> remoteRepositories, ArtifactRepository localRepository) throws ArtifactResolutionException, ArtifactNotFoundException
{    resolve(artifact, remoteRepositories, getSession(localRepository));}
private voidf443_1Artifact artifact, List<ArtifactRepository> remoteRepositories, RepositorySystemSession session) throws ArtifactResolutionException, ArtifactNotFoundException
{    if (artifact == null) {        return;    }    if (Artifact.SCOPE_SYSTEM.equals(artifact.getScope())) {        File systemFile = artifact.getFile();        if (systemFile == null) {            throw new ArtifactNotFoundException("System artifact: " + artifact + " has no file attached", artifact);        }        if (!systemFile.exists()) {            throw new ArtifactNotFoundException("System artifact: " + artifact + " not found in path: " + systemFile, artifact);        }        if (!systemFile.isFile()) {            throw new ArtifactNotFoundException("System artifact: " + artifact + " is not a file: " + systemFile, artifact);        }        artifact.setResolved(true);        return;    }    if (!artifact.isResolved()) {        ArtifactResult result;        try {            ArtifactRequest artifactRequest = new ArtifactRequest();            artifactRequest.setArtifact(RepositoryUtils.toArtifact(artifact));            artifactRequest.setRepositories(RepositoryUtils.toRepos(remoteRepositories));                        LocalRepositoryManager lrm = session.getLocalRepositoryManager();            String path = lrm.getPathForLocalArtifact(artifactRequest.getArtifact());            artifact.setFile(new File(lrm.getRepository().getBasedir(), path));            result = repoSystem.resolveArtifact(session, artifactRequest);        } catch (org.eclipse.aether.resolution.ArtifactResolutionException e) {            if (e.getCause() instanceof org.eclipse.aether.transfer.ArtifactNotFoundException) {                throw new ArtifactNotFoundException(e.getMessage(), artifact, remoteRepositories, e);            } else {                throw new ArtifactResolutionException(e.getMessage(), artifact, remoteRepositories, e);            }        }        artifact.selectVersion(result.getArtifact().getVersion());        artifact.setFile(result.getArtifact().getFile());        artifact.setResolved(true);        if (artifact.isSnapshot()) {            Matcher matcher = Artifact.VERSION_FILE_PATTERN.matcher(artifact.getVersion());            if (matcher.matches()) {                Snapshot snapshot = new Snapshot();                snapshot.setTimestamp(matcher.group(2));                try {                    snapshot.setBuildNumber(Integer.parseInt(matcher.group(3)));                    artifact.addMetadata(new SnapshotArtifactRepositoryMetadata(artifact, snapshot));                } catch (NumberFormatException e) {                                    }            }        }    }}
public ArtifactResolutionResult maven_f444_0(Set<Artifact> artifacts, Artifact originatingArtifact, ArtifactRepository localRepository, List<ArtifactRepository> remoteRepositories, ArtifactMetadataSource source, ArtifactFilter filter) throws ArtifactResolutionException, ArtifactNotFoundException
{    return resolveTransitively(artifacts, originatingArtifact, Collections.<String, Artifact>emptyMap(), localRepository, remoteRepositories, source, filter);}
public ArtifactResolutionResult maven_f445_0(Set<Artifact> artifacts, Artifact originatingArtifact, Map<String, Artifact> managedVersions, ArtifactRepository localRepository, List<ArtifactRepository> remoteRepositories, ArtifactMetadataSource source) throws ArtifactResolutionException, ArtifactNotFoundException
{    return resolveTransitively(artifacts, originatingArtifact, managedVersions, localRepository, remoteRepositories, source, null);}
public ArtifactResolutionResult maven_f446_0(Set<Artifact> artifacts, Artifact originatingArtifact, Map<String, Artifact> managedVersions, ArtifactRepository localRepository, List<ArtifactRepository> remoteRepositories, ArtifactMetadataSource source, ArtifactFilter filter) throws ArtifactResolutionException, ArtifactNotFoundException
{    return resolveTransitively(artifacts, originatingArtifact, managedVersions, localRepository, remoteRepositories, source, filter, null);}
public ArtifactResolutionResult maven_f447_0(Set<Artifact> artifacts, Artifact originatingArtifact, List<ArtifactRepository> remoteRepositories, ArtifactRepository localRepository, ArtifactMetadataSource source) throws ArtifactResolutionException, ArtifactNotFoundException
{    return resolveTransitively(artifacts, originatingArtifact, localRepository, remoteRepositories, source, null);}
public ArtifactResolutionResult maven_f448_0(Set<Artifact> artifacts, Artifact originatingArtifact, List<ArtifactRepository> remoteRepositories, ArtifactRepository localRepository, ArtifactMetadataSource source, List<ResolutionListener> listeners) throws ArtifactResolutionException, ArtifactNotFoundException
{    return resolveTransitively(artifacts, originatingArtifact, Collections.<String, Artifact>emptyMap(), localRepository, remoteRepositories, source, null, listeners);}
public ArtifactResolutionResult maven_f449_0(Set<Artifact> artifacts, Artifact originatingArtifact, Map<String, Artifact> managedVersions, ArtifactRepository localRepository, List<ArtifactRepository> remoteRepositories, ArtifactMetadataSource source, ArtifactFilter filter, List<ResolutionListener> listeners) throws ArtifactResolutionException, ArtifactNotFoundException
{    return resolveTransitively(artifacts, originatingArtifact, managedVersions, localRepository, remoteRepositories, source, filter, listeners, null);}
public ArtifactResolutionResult maven_f450_0(Set<Artifact> artifacts, Artifact originatingArtifact, Map<String, Artifact> managedVersions, ArtifactRepository localRepository, List<ArtifactRepository> remoteRepositories, ArtifactMetadataSource source, ArtifactFilter filter, List<ResolutionListener> listeners, List<ConflictResolver> conflictResolvers) throws ArtifactResolutionException, ArtifactNotFoundException
{    ArtifactResolutionRequest request = new ArtifactResolutionRequest().setArtifact(originatingArtifact).setResolveRoot(false).setArtifactDependencies(artifacts).setManagedVersionMap(managedVersions).setLocalRepository(localRepository).setRemoteRepositories(remoteRepositories).setCollectionFilter(filter).setListeners(listeners);    injectSession2(request, legacySupport.getSession());    return resolveWithExceptions(request);}
public ArtifactResolutionResult maven_f451_0(ArtifactResolutionRequest request) throws ArtifactResolutionException, ArtifactNotFoundException
{    ArtifactResolutionResult result = resolve(request);                resolutionErrorHandler.throwErrors(request, result);    return result;}
public ArtifactResolutionResultf452_1ArtifactResolutionRequest request)
{    Artifact rootArtifact = request.getArtifact();    Set<Artifact> artifacts = request.getArtifactDependencies();    Map<String, Artifact> managedVersions = request.getManagedVersionMap();    List<ResolutionListener> listeners = request.getListeners();    ArtifactFilter collectionFilter = request.getCollectionFilter();    ArtifactFilter resolutionFilter = request.getResolutionFilter();    RepositorySystemSession session = getSession(request.getLocalRepository());        if (source == null) {        try {            source = container.lookup(ArtifactMetadataSource.class);        } catch (ComponentLookupException e) {                }    }    if (listeners == null) {        listeners = new ArrayList<>();        if (logger.isDebugEnabled()) {            listeners.add(new DebugResolutionListener(logger));        }        listeners.add(new WarningResolutionListener(logger));    }    ArtifactResolutionResult result = new ArtifactResolutionResult();    if (request.isResolveRoot()) /* && rootArtifact.getFile() == null */    {        try {            resolve(rootArtifact, request.getRemoteRepositories(), session);        } catch (ArtifactResolutionException e) {            result.addErrorArtifactException(e);            return result;        } catch (ArtifactNotFoundException e) {            result.addMissingArtifact(request.getArtifact());            return result;        }    }    ArtifactResolutionRequest collectionRequest = request;    if (request.isResolveTransitively()) {        MetadataResolutionRequest metadataRequest = new DefaultMetadataResolutionRequest(request);        metadataRequest.setArtifact(rootArtifact);        metadataRequest.setResolveManagedVersions(managedVersions == null);        try {            ResolutionGroup resolutionGroup = source.retrieve(metadataRequest);            if (managedVersions == null) {                managedVersions = resolutionGroup.getManagedVersions();            }            Set<Artifact> directArtifacts = resolutionGroup.getArtifacts();            if (artifacts == null || artifacts.isEmpty()) {                artifacts = directArtifacts;            } else {                List<Artifact> allArtifacts = new ArrayList<>();                allArtifacts.addAll(artifacts);                allArtifacts.addAll(directArtifacts);                Map<String, Artifact> mergedArtifacts = new LinkedHashMap<>();                for (Artifact artifact : allArtifacts) {                    String conflictId = artifact.getDependencyConflictId();                    if (!mergedArtifacts.containsKey(conflictId)) {                        mergedArtifacts.put(conflictId, artifact);                    }                }                artifacts = new LinkedHashSet<>(mergedArtifacts.values());            }            collectionRequest = new ArtifactResolutionRequest(request);            collectionRequest.setServers(request.getServers());            collectionRequest.setMirrors(request.getMirrors());            collectionRequest.setProxies(request.getProxies());            collectionRequest.setRemoteRepositories(resolutionGroup.getResolutionRepositories());        } catch (ArtifactMetadataRetrievalException e) {            ArtifactResolutionException are = new ArtifactResolutionException("Unable to get dependency information for " + rootArtifact.getId() + ": " + e.getMessage(), rootArtifact, metadataRequest.getRemoteRepositories(), e);            result.addMetadataResolutionException(are);            return result;        }    }    if (artifacts == null || artifacts.isEmpty()) {        if (request.isResolveRoot()) {            result.addArtifact(rootArtifact);        }        return result;    }        result = artifactCollector.collect(artifacts, rootArtifact, managedVersions, collectionRequest, source, collectionFilter, listeners, null);    if (result.hasMetadataResolutionExceptions() || result.hasVersionRangeViolations() || result.hasCircularDependencyExceptions()) {                return result;    }    if (result.getArtifactResolutionNodes() != null) {        ClassLoader classLoader = Thread.currentThread().getContextClassLoader();        CountDownLatch latch = new CountDownLatch(result.getArtifactResolutionNodes().size());        for (ResolutionNode node : result.getArtifactResolutionNodes()) {            Artifact artifact = node.getArtifact();            if (resolutionFilter == null || resolutionFilter.include(artifact)) {                executor.execute(new ResolveTask(classLoader, latch, artifact, session, node.getRemoteRepositories(), result));            } else {                latch.countDown();            }        }        try {            latch.await();        } catch (InterruptedException e) {            result.addErrorArtifactException(new ArtifactResolutionException("Resolution interrupted", rootArtifact, e));        }    }        if (request.isResolveRoot()) {                Set<Artifact> allArtifacts = new LinkedHashSet<>();        allArtifacts.add(rootArtifact);        allArtifacts.addAll(result.getArtifacts());        result.setArtifacts(allArtifacts);    }    return result;}
public void maven_f453_0(Artifact artifact, List<ArtifactRepository> remoteRepositories, ArtifactRepository localRepository) throws ArtifactResolutionException, ArtifactNotFoundException
{    resolve(artifact, remoteRepositories, localRepository, null);}
public Thread maven_f454_0(Runnable r)
{    Thread newThread = new Thread(GROUP, r, "resolver-" + THREAD_NUMBER.getAndIncrement());    newThread.setDaemon(true);    newThread.setContextClassLoader(null);    return newThread;}
public void maven_f455_0()
{    ClassLoader old = Thread.currentThread().getContextClassLoader();    try {        Thread.currentThread().setContextClassLoader(classLoader);        resolve(artifact, remoteRepositories, session);    } catch (ArtifactNotFoundException anfe) {        synchronized (result) {            result.addMissingArtifact(artifact);        }    } catch (ArtifactResolutionException e) {        synchronized (result) {            result.addErrorArtifactException(e);        }    } finally {        latch.countDown();        Thread.currentThread().setContextClassLoader(old);    }}
public void maven_f456_0()
{    if (executor instanceof ExecutorService) {        ((ExecutorService) executor).shutdownNow();    }}
public boolean maven_f457_0(Artifact artifact)
{    return !toInvert.include(artifact);}
public int maven_f458_0()
{    int hash = 17;    hash = hash * 31 + toInvert.hashCode();    return hash;}
public boolean maven_f459_0(Object obj)
{    if (this == obj) {        return true;    }    if (!(obj instanceof InversionArtifactFilter)) {        return false;    }    InversionArtifactFilter other = (InversionArtifactFilter) obj;    return toInvert.equals(other.toInvert);}
public boolean maven_f460_0(Artifact artifact)
{    for (ArtifactFilter filter : filters) {        if (filter.include(artifact)) {            return true;        }    }    return false;}
public void maven_f461_0(ArtifactFilter artifactFilter)
{    filters.add(artifactFilter);}
public int maven_f462_0()
{    int hash = 17;    hash = hash * 31 + filters.hashCode();    return hash;}
public boolean maven_f463_0(Object obj)
{    if (this == obj) {        return true;    }    if (!(obj instanceof OrArtifactFilter)) {        return false;    }    OrArtifactFilter other = (OrArtifactFilter) obj;    return filters.equals(other.filters);}
public boolean maven_f464_0(Artifact artifact)
{    return type.equals(artifact.getType());}
public int maven_f465_0()
{    int hash = 17;    hash = hash * 31 + type.hashCode();    return hash;}
public boolean maven_f466_0(Object obj)
{    if (this == obj) {        return true;    }    if (!(obj instanceof TypeArtifactFilter)) {        return false;    }    TypeArtifactFilter other = (TypeArtifactFilter) obj;    return type.equals(other.type);}
public Artifact maven_f467_0()
{    return originatingArtifact;}
public List<Artifact> maven_f468_0()
{    return artifacts;}
public List<ArtifactRepository> maven_f469_0()
{    return remoteRepositories;}
public void maven_f470_0(Artifact node)
{}
public void maven_f471_0(Artifact artifact)
{}
public void maven_f472_0(Artifact artifact)
{}
public void maven_f473_0(Artifact artifact)
{}
public void maven_f474_0(Artifact omitted, Artifact kept)
{}
public void maven_f475_0(Artifact omitted)
{}
public void maven_f476_0(Artifact artifact, String scope)
{}
public void maven_f477_0(Artifact artifact, String scope)
{}
public void maven_f478_0(Artifact artifact, Artifact replacement)
{}
public void maven_f479_0(Artifact artifact)
{}
public void maven_f480_0(Artifact artifact, Artifact replacement, VersionRange newRange)
{}
public String maven_f481_0()
{    return layoutId;}
public String maven_f482_0()
{    StringBuilder buffer = new StringBuilder("ManagedVersionMap (" + size() + " entries)\n");    Iterator<String> iter = keySet().iterator();    while (iter.hasNext()) {        String key = iter.next();        buffer.append(key).append('=').append(get(key));        if (iter.hasNext()) {            buffer.append('\n');        }    }    return buffer.toString();}
public ArtifactVersion maven_f483_0()
{    return applicationVersion;}
public void maven_f484_0() throws InitializationException
{    String mavenVersion = rtInfo.getMavenVersion();    if (StringUtils.isEmpty(mavenVersion)) {        throw new InitializationException("Unable to read Maven version from maven-core");    }    applicationVersion = new DefaultArtifactVersion(mavenVersion);}
public boolean maven_f485_0(Profile profile)
{    return canDetectActivation(profile);}
protected boolean maven_f486_0(Profile profile)
{    return profile.getActivation() != null && profile.getActivation().getFile() != null;}
public booleanf487_1Profile profile)
{    Activation activation = profile.getActivation();    ActivationFile actFile = activation.getFile();    if (actFile != null) {                String fileString = actFile.getExists();        RegexBasedInterpolator interpolator = new RegexBasedInterpolator();        try {            interpolator.addValueSource(new EnvarBasedValueSource());        } catch (IOException e) {                }        interpolator.addValueSource(new MapBasedValueSource(System.getProperties()));        try {            if (StringUtils.isNotEmpty(fileString)) {                fileString = StringUtils.replace(interpolator.interpolate(fileString, ""), "\\", "/");                return FileUtils.fileExists(fileString);            }                        fileString = actFile.getMissing();            if (StringUtils.isNotEmpty(fileString)) {                fileString = StringUtils.replace(interpolator.interpolate(fileString, ""), "\\", "/");                return !FileUtils.fileExists(fileString);            }        } catch (InterpolationException e) {            if (logger.isDebugEnabled()) {                            } else {                            }        }    }    return false;}
public void maven_f488_0(Logger logger)
{    this.logger = logger;}
public boolean maven_f489_0(Profile profile) throws ProfileActivationException
{    Activation activation = profile.getActivation();    String jdk = activation.getJdk();        if (jdk.startsWith("[") || jdk.startsWith("(")) {        try {            return matchJdkVersionRange(jdk);        } catch (InvalidVersionSpecificationException e) {            throw new ProfileActivationException("Invalid JDK version in profile '" + profile.getId() + "': " + e.getMessage());        }    }    boolean reverse = false;    if (jdk.startsWith("!")) {        reverse = true;        jdk = jdk.substring(1);    }    if (getJdkVersion().startsWith(jdk)) {        return !reverse;    } else {        return reverse;    }}
private boolean maven_f490_0(String jdk) throws InvalidVersionSpecificationException
{    VersionRange jdkVersionRange = VersionRange.createFromVersionSpec(convertJdkToMavenVersion(jdk));    DefaultArtifactVersion jdkVersion = new DefaultArtifactVersion(convertJdkToMavenVersion(getJdkVersion()));    return jdkVersionRange.containsVersion(jdkVersion);}
private String maven_f491_0(String jdk)
{    return jdk.replaceAll("_", "-");}
protected String maven_f492_0()
{    return JDK_VERSION;}
protected boolean maven_f493_0(Profile profile)
{    return profile.getActivation() != null && StringUtils.isNotEmpty(profile.getActivation().getJdk());}
public boolean maven_f494_0(Profile profile)
{    Activation activation = profile.getActivation();    return activation != null && activation.getOs() != null;}
public boolean maven_f495_0(Profile profile)
{    Activation activation = profile.getActivation();    ActivationOS os = activation.getOs();    boolean result = ensureAtLeastOneNonNull(os);    if (result && os.getFamily() != null) {        result = determineFamilyMatch(os.getFamily());    }    if (result && os.getName() != null) {        result = determineNameMatch(os.getName());    }    if (result && os.getArch() != null) {        result = determineArchMatch(os.getArch());    }    if (result && os.getVersion() != null) {        result = determineVersionMatch(os.getVersion());    }    return result;}
private boolean maven_f496_0(ActivationOS os)
{    return os.getArch() != null || os.getFamily() != null || os.getName() != null || os.getVersion() != null;}
private boolean maven_f497_0(String version)
{    String test = version;    boolean reverse = false;    if (test.startsWith("!")) {        reverse = true;        test = test.substring(1);    }    boolean result = Os.isVersion(test);    if (reverse) {        return !result;    } else {        return result;    }}
private boolean maven_f498_0(String arch)
{    String test = arch;    boolean reverse = false;    if (test.startsWith("!")) {        reverse = true;        test = test.substring(1);    }    boolean result = Os.isArch(test);    if (reverse) {        return !result;    } else {        return result;    }}
private boolean maven_f499_0(String name)
{    String test = name;    boolean reverse = false;    if (test.startsWith("!")) {        reverse = true;        test = test.substring(1);    }    boolean result = Os.isName(test);    if (reverse) {        return !result;    } else {        return result;    }}
private boolean maven_f500_0(String family)
{    String test = family;    boolean reverse = false;    if (test.startsWith("!")) {        reverse = true;        test = test.substring(1);    }    boolean result = Os.isFamily(test);    if (reverse) {        return !result;    } else {        return result;    }}
public void maven_f501_0(Context context) throws ContextException
{    properties = (Properties) context.get("SystemProperties");}
protected boolean maven_f502_0(Profile profile)
{    return profile.getActivation() != null && profile.getActivation().getProperty() != null;}
public boolean maven_f503_0(Profile profile) throws ProfileActivationException
{    Activation activation = profile.getActivation();    ActivationProperty property = activation.getProperty();    if (property != null) {        String name = property.getName();        boolean reverseName = false;        if (name == null) {            throw new ProfileActivationException("The property name is required to activate the profile '" + profile.getId() + "'");        }        if (name.startsWith("!")) {            reverseName = true;            name = name.substring(1);        }        String sysValue = properties.getProperty(name);        String propValue = property.getValue();        if (StringUtils.isNotEmpty(propValue)) {            boolean reverseValue = false;            if (propValue.startsWith("!")) {                reverseValue = true;                propValue = propValue.substring(1);            }                        boolean result = propValue.equals(sysValue);            if (reverseValue) {                return !result;            } else {                return result;            }        } else {            boolean result = StringUtils.isNotEmpty(sysValue);            if (reverseName) {                return !result;            } else {                return result;            }        }    }    return false;}
public ProfilesRoot maven_f504_0(File basedir) throws IOException, XmlPullParserException
{    File profilesXml = new File(basedir, PROFILES_XML_FILE);    ProfilesRoot profilesRoot = null;    if (profilesXml.exists()) {        ProfilesXpp3Reader reader = new ProfilesXpp3Reader();        try (Reader profileReader = ReaderFactory.newXmlReader(profilesXml);            StringWriter sWriter = new StringWriter()) {            IOUtil.copy(profileReader, sWriter);            String rawInput = sWriter.toString();            try {                RegexBasedInterpolator interpolator = new RegexBasedInterpolator();                interpolator.addValueSource(new EnvarBasedValueSource());                rawInput = interpolator.interpolate(rawInput, "settings");            } catch (Exception e) {                getLogger().warn("Failed to initialize environment variable resolver. Skipping environment " + "substitution in " + PROFILES_XML_FILE + ".");                getLogger().debug("Failed to initialize envar resolver. Skipping resolution.", e);            }            StringReader sReader = new StringReader(rawInput);            profilesRoot = reader.read(sReader);        }    }    return profilesRoot;}
public Properties maven_f505_0()
{    return requestProperties;}
public Map<String, Profile> maven_f506_0()
{    return profilesById;}
public voidf507_1Profile profile)
{    String profileId = profile.getId();    Profile existing = profilesById.get(profileId);    if (existing != null) {            }    profilesById.put(profile.getId(), profile);    Activation activation = profile.getActivation();    if (activation != null && activation.isActiveByDefault()) {        activateAsDefault(profileId);    }}
public voidf508_1String profileId)
{    if (!activatedIds.contains(profileId)) {                activatedIds.add(profileId);    }}
public void maven_f509_0(List<String> profileIds)
{    for (String profileId1 : profileIds) {        explicitlyActivate(profileId1);    }}
public voidf510_1String profileId)
{    if (!deactivatedIds.contains(profileId)) {                deactivatedIds.add(profileId);    }}
public void maven_f511_0(List<String> profileIds)
{    for (String profileId1 : profileIds) {        explicitlyDeactivate(profileId1);    }}
public List maven_f512_0() throws ProfileActivationException
{    DefaultProfileActivationContext context = new DefaultProfileActivationContext();    context.setActiveProfileIds(activatedIds);    context.setInactiveProfileIds(deactivatedIds);    context.setSystemProperties(System.getProperties());    context.setUserProperties(requestProperties);    final List<ProfileActivationException> errors = new ArrayList<>();    List<Profile> profiles = profileSelector.getActiveProfiles(profilesById.values(), context, new ModelProblemCollector() {        public void add(ModelProblemCollectorRequest req) {            if (!ModelProblem.Severity.WARNING.equals(req.getSeverity())) {                errors.add(new ProfileActivationException(req.getMessage(), req.getException()));            }        }    });    if (!errors.isEmpty()) {        throw errors.get(0);    }    return profiles;}
public void maven_f513_0(ModelProblemCollectorRequest req)
{    if (!ModelProblem.Severity.WARNING.equals(req.getSeverity())) {        errors.add(new ProfileActivationException(req.getMessage(), req.getException()));    }}
public void maven_f514_0(List<Profile> profiles)
{    for (Profile profile1 : profiles) {        addProfile(profile1);    }}
public void maven_f515_0(String profileId)
{    if (!defaultIds.contains(profileId)) {        defaultIds.add(profileId);    }}
public List<String> maven_f516_0()
{    return activatedIds;}
public List<String> maven_f517_0()
{    return deactivatedIds;}
public List maven_f518_0()
{    return defaultIds;}
public static Profile maven_f519_0(org.apache.maven.profiles.Profile profileXmlProfile)
{    Profile profile = new Profile();    profile.setId(profileXmlProfile.getId());    profile.setSource("profiles.xml");    org.apache.maven.profiles.Activation profileActivation = profileXmlProfile.getActivation();    if (profileActivation != null) {        Activation activation = new Activation();        activation.setActiveByDefault(profileActivation.isActiveByDefault());        activation.setJdk(profileActivation.getJdk());        org.apache.maven.profiles.ActivationProperty profileProp = profileActivation.getProperty();        if (profileProp != null) {            ActivationProperty prop = new ActivationProperty();            prop.setName(profileProp.getName());            prop.setValue(profileProp.getValue());            activation.setProperty(prop);        }        ActivationOS profileOs = profileActivation.getOs();        if (profileOs != null) {            org.apache.maven.model.ActivationOS os = new org.apache.maven.model.ActivationOS();            os.setArch(profileOs.getArch());            os.setFamily(profileOs.getFamily());            os.setName(profileOs.getName());            os.setVersion(profileOs.getVersion());            activation.setOs(os);        }        org.apache.maven.profiles.ActivationFile profileFile = profileActivation.getFile();        if (profileFile != null) {            ActivationFile file = new ActivationFile();            file.setExists(profileFile.getExists());            file.setMissing(profileFile.getMissing());            activation.setFile(file);        }        profile.setActivation(activation);    }    profile.setProperties(profileXmlProfile.getProperties());    List repos = profileXmlProfile.getRepositories();    if (repos != null) {        for (Object repo : repos) {            profile.addRepository(convertFromProfileXmlRepository((org.apache.maven.profiles.Repository) repo));        }    }    List pluginRepos = profileXmlProfile.getPluginRepositories();    if (pluginRepos != null) {        for (Object pluginRepo : pluginRepos) {            profile.addPluginRepository(convertFromProfileXmlRepository((org.apache.maven.profiles.Repository) pluginRepo));        }    }    return profile;}
private static Repository maven_f520_0(org.apache.maven.profiles.Repository profileXmlRepo)
{    Repository repo = new Repository();    repo.setId(profileXmlRepo.getId());    repo.setLayout(profileXmlRepo.getLayout());    repo.setName(profileXmlRepo.getName());    repo.setUrl(profileXmlRepo.getUrl());    if (profileXmlRepo.getSnapshots() != null) {        repo.setSnapshots(convertRepositoryPolicy(profileXmlRepo.getSnapshots()));    }    if (profileXmlRepo.getReleases() != null) {        repo.setReleases(convertRepositoryPolicy(profileXmlRepo.getReleases()));    }    return repo;}
private static org.apache.maven.model.RepositoryPolicy maven_f521_0(RepositoryPolicy profileXmlRepo)
{    org.apache.maven.model.RepositoryPolicy policy = new org.apache.maven.model.RepositoryPolicy();    policy.setEnabled(profileXmlRepo.isEnabled());    policy.setUpdatePolicy(profileXmlRepo.getUpdatePolicy());    policy.setChecksumPolicy(profileXmlRepo.getChecksumPolicy());    return policy;}
private ProjectBuildingRequest maven_f522_0(ProjectBuilderConfiguration configuration)
{    DefaultProjectBuildingRequest request = new DefaultProjectBuildingRequest();    request.setValidationLevel(ModelBuildingRequest.VALIDATION_LEVEL_MAVEN_2_0);    request.setResolveDependencies(false);    request.setLocalRepository(configuration.getLocalRepository());    request.setBuildStartTime(configuration.getBuildStartTime());    request.setUserProperties(configuration.getUserProperties());    request.setSystemProperties(configuration.getExecutionProperties());    ProfileManager profileManager = configuration.getGlobalProfileManager();    if (profileManager != null) {        request.setActiveProfileIds(profileManager.getExplicitlyActivatedIds());        request.setInactiveProfileIds(profileManager.getExplicitlyDeactivatedIds());    } else {        /*             * MNG-4900: Hack to workaround deficiency of legacy API which makes it impossible for plugins to access the             * global profile manager which is required to build a POM like a CLI invocation does. Failure to consider             * the activated profiles can cause repo declarations to be lost which in turn will result in artifact             * resolution failures, in particular when using the enhanced local repo which guards access to local files             * based on the configured remote repos.             */        MavenSession session = legacySupport.getSession();        if (session != null) {            MavenExecutionRequest req = session.getRequest();            if (req != null) {                request.setActiveProfileIds(req.getActiveProfiles());                request.setInactiveProfileIds(req.getInactiveProfiles());            }        }    }    return request;}
private ProjectBuildingRequest maven_f523_0(ProjectBuildingRequest request)
{    MavenSession session = legacySupport.getSession();    if (session != null) {        request.setRepositorySession(session.getRepositorySession());        request.setSystemProperties(session.getSystemProperties());        if (request.getUserProperties().isEmpty()) {            request.setUserProperties(session.getUserProperties());        }        MavenExecutionRequest req = session.getRequest();        if (req != null) {            request.setRemoteRepositories(req.getRemoteRepositories());        }    } else {        Properties props = new Properties();        EnvironmentUtils.addEnvVars(props);        props.putAll(System.getProperties());        request.setSystemProperties(props);    }    return request;}
private List<ArtifactRepository> maven_f524_0(List<?> repositories, ProjectBuildingRequest request) throws ProjectBuildingException
{    if (repositories != null) {        boolean normalized = false;        List<ArtifactRepository> repos = new ArrayList<>(repositories.size());        for (Object repository : repositories) {            if (repository instanceof Repository) {                try {                    ArtifactRepository repo = repositorySystem.buildArtifactRepository((Repository) repository);                    repositorySystem.injectMirror(request.getRepositorySession(), Arrays.asList(repo));                    repositorySystem.injectProxy(request.getRepositorySession(), Arrays.asList(repo));                    repositorySystem.injectAuthentication(request.getRepositorySession(), Arrays.asList(repo));                    repos.add(repo);                } catch (InvalidRepositoryException e) {                    throw new ProjectBuildingException("", "Invalid remote repository " + repository, e);                }                normalized = true;            } else {                repos.add((ArtifactRepository) repository);            }        }        if (normalized) {            return repos;        }    }    return (List<ArtifactRepository>) repositories;}
private ProjectBuildingException maven_f525_0(ProjectBuildingException e)
{    if (e.getCause() instanceof ModelBuildingException) {        return new InvalidProjectModelException(e.getProjectId(), e.getMessage(), e.getPomFile());    }    return e;}
public MavenProject maven_f526_0(File pom, ProjectBuilderConfiguration configuration) throws ProjectBuildingException
{    ProjectBuildingRequest request = injectSession(toRequest(configuration));    try {        return projectBuilder.build(pom, request).getProject();    } catch (ProjectBuildingException e) {        throw transformError(e);    }}
public MavenProject maven_f527_0(File pom, ArtifactRepository localRepository, ProfileManager profileManager) throws ProjectBuildingException
{    ProjectBuilderConfiguration configuration = new DefaultProjectBuilderConfiguration();    configuration.setLocalRepository(localRepository);    configuration.setGlobalProfileManager(profileManager);    return build(pom, configuration);}
public MavenProject maven_f528_0(Artifact artifact, List<ArtifactRepository> remoteRepositories, ProjectBuilderConfiguration configuration, boolean allowStubModel) throws ProjectBuildingException
{    ProjectBuildingRequest request = injectSession(toRequest(configuration));    request.setRemoteRepositories(normalizeToArtifactRepositories(remoteRepositories, request));    request.setProcessPlugins(false);    request.setValidationLevel(ModelBuildingRequest.VALIDATION_LEVEL_MINIMAL);    try {        return projectBuilder.build(artifact, allowStubModel, request).getProject();    } catch (ProjectBuildingException e) {        throw transformError(e);    }}
public MavenProject maven_f529_0(Artifact artifact, List<ArtifactRepository> remoteRepositories, ArtifactRepository localRepository, boolean allowStubModel) throws ProjectBuildingException
{    ProjectBuilderConfiguration configuration = new DefaultProjectBuilderConfiguration();    configuration.setLocalRepository(localRepository);    return buildFromRepository(artifact, remoteRepositories, configuration, allowStubModel);}
public MavenProject maven_f530_0(Artifact artifact, List<ArtifactRepository> remoteRepositories, ArtifactRepository localRepository) throws ProjectBuildingException
{    return buildFromRepository(artifact, remoteRepositories, localRepository, true);}
public MavenProject maven_f531_0(ProjectBuilderConfiguration configuration) throws ProjectBuildingException
{    ProjectBuildingRequest request = injectSession(toRequest(configuration));    request.setProcessPlugins(false);    request.setValidationLevel(ModelBuildingRequest.VALIDATION_LEVEL_MINIMAL);    ModelSource modelSource = new UrlModelSource(getClass().getResource("standalone.xml"));    MavenProject project = projectBuilder.build(modelSource, request).getProject();    project.setExecutionRoot(true);    return project;}
public MavenProject maven_f532_0(ArtifactRepository localRepository) throws ProjectBuildingException
{    return buildStandaloneSuperProject(localRepository, null);}
public MavenProject maven_f533_0(ArtifactRepository localRepository, ProfileManager profileManager) throws ProjectBuildingException
{    ProjectBuilderConfiguration configuration = new DefaultProjectBuilderConfiguration();    configuration.setLocalRepository(localRepository);    configuration.setGlobalProfileManager(profileManager);    return buildStandaloneSuperProject(configuration);}
public MavenProject maven_f534_0(File pom, ArtifactRepository localRepository, ProfileManager profileManager, TransferListener transferListener) throws ProjectBuildingException, ArtifactResolutionException, ArtifactNotFoundException
{    ProjectBuilderConfiguration configuration = new DefaultProjectBuilderConfiguration();    configuration.setLocalRepository(localRepository);    configuration.setGlobalProfileManager(profileManager);    ProjectBuildingRequest request = injectSession(toRequest(configuration));    request.setResolveDependencies(true);    try {        return projectBuilder.build(pom, request).getProject();    } catch (ProjectBuildingException e) {        throw transformError(e);    }}
public MavenProject maven_f535_0(File pom, ArtifactRepository localRepository, ProfileManager profileManager) throws ProjectBuildingException, ArtifactResolutionException, ArtifactNotFoundException
{    return buildWithDependencies(pom, localRepository, profileManager, null);}
public ProjectBuilderConfiguration maven_f536_0(ProfileManager globalProfileManager)
{    this.globalProfileManager = globalProfileManager;    return this;}
public ProfileManager maven_f537_0()
{    return globalProfileManager;}
public ProjectBuilderConfiguration maven_f538_0(ArtifactRepository localRepository)
{    this.localRepository = localRepository;    return this;}
public ArtifactRepository maven_f539_0()
{    return localRepository;}
public ProjectBuilderConfiguration maven_f540_0(Properties userProperties)
{    this.userProperties = userProperties;    return this;}
public Properties maven_f541_0()
{    if (userProperties == null) {        userProperties = new Properties();    }    return userProperties;}
public Properties maven_f542_0()
{    return executionProperties;}
public ProjectBuilderConfiguration maven_f543_0(Properties executionProperties)
{    this.executionProperties = executionProperties;    return this;}
public Date maven_f544_0()
{    return buildStartTime;}
public ProjectBuilderConfiguration maven_f545_0(Date buildStartTime)
{    this.buildStartTime = buildStartTime;    return this;}
public void maven_f546_0(Build childBuild, Build parentBuild, boolean handleAsInheritance)
{    if (childBuild.getSourceDirectory() == null) {        childBuild.setSourceDirectory(parentBuild.getSourceDirectory());    }    if (childBuild.getScriptSourceDirectory() == null) {        childBuild.setScriptSourceDirectory(parentBuild.getScriptSourceDirectory());    }    if (childBuild.getTestSourceDirectory() == null) {        childBuild.setTestSourceDirectory(parentBuild.getTestSourceDirectory());    }    if (childBuild.getOutputDirectory() == null) {        childBuild.setOutputDirectory(parentBuild.getOutputDirectory());    }    if (childBuild.getTestOutputDirectory() == null) {        childBuild.setTestOutputDirectory(parentBuild.getTestOutputDirectory());    }        mergeExtensionLists(childBuild, parentBuild);    if (childBuild.getDirectory() == null) {        childBuild.setDirectory(parentBuild.getDirectory());    }    if (childBuild.getDefaultGoal() == null) {        childBuild.setDefaultGoal(parentBuild.getDefaultGoal());    }    if (childBuild.getFinalName() == null) {        childBuild.setFinalName(parentBuild.getFinalName());    }    ModelUtils.mergeFilterLists(childBuild.getFilters(), parentBuild.getFilters());    List<Resource> resources = childBuild.getResources();    if ((resources == null) || resources.isEmpty()) {        childBuild.setResources(parentBuild.getResources());    }    resources = childBuild.getTestResources();    if ((resources == null) || resources.isEmpty()) {        childBuild.setTestResources(parentBuild.getTestResources());    }        ModelUtils.mergePluginLists(childBuild, parentBuild, handleAsInheritance);        PluginManagement dominantPM = childBuild.getPluginManagement();    PluginManagement recessivePM = parentBuild.getPluginManagement();    if ((dominantPM == null) && (recessivePM != null)) {                childBuild.setPluginManagement(recessivePM);    } else {        ModelUtils.mergePluginLists(childBuild.getPluginManagement(), parentBuild.getPluginManagement(), false);    }}
private void maven_f547_0(Model child, Model parent, String childPathAdjustment, boolean appendPaths)
{    if (parent.getScm() != null) {        Scm parentScm = parent.getScm();        Scm childScm = child.getScm();        if (childScm == null) {            childScm = new Scm();            child.setScm(childScm);        }        if (StringUtils.isEmpty(childScm.getConnection()) && !StringUtils.isEmpty(parentScm.getConnection())) {            childScm.setConnection(appendPath(parentScm.getConnection(), child.getArtifactId(), childPathAdjustment, appendPaths));        }        if (StringUtils.isEmpty(childScm.getDeveloperConnection()) && !StringUtils.isEmpty(parentScm.getDeveloperConnection())) {            childScm.setDeveloperConnection(appendPath(parentScm.getDeveloperConnection(), child.getArtifactId(), childPathAdjustment, appendPaths));        }        if (StringUtils.isEmpty(childScm.getUrl()) && !StringUtils.isEmpty(parentScm.getUrl())) {            childScm.setUrl(appendPath(parentScm.getUrl(), child.getArtifactId(), childPathAdjustment, appendPaths));        }    }}
public void maven_f548_0(Model dest, Model source)
{    assembleModelInheritance(dest, source, null, false);}
public void maven_f549_0(Model child, Model parent, String childPathAdjustment)
{    assembleModelInheritance(child, parent, childPathAdjustment, true);}
public void maven_f550_0(Model child, Model parent)
{    assembleModelInheritance(child, parent, null, true);}
private void maven_f551_0(Model child, Model parent, String childPathAdjustment, boolean appendPaths)
{        if (parent == null) {        return;    }        if (child.getGroupId() == null) {        child.setGroupId(parent.getGroupId());    }        if (child.getVersion() == null) {        if (child.getParent() != null) {            child.setVersion(child.getParent().getVersion());        }    }        if (child.getInceptionYear() == null) {        child.setInceptionYear(parent.getInceptionYear());    }        if (child.getUrl() == null) {        if (parent.getUrl() != null) {            child.setUrl(appendPath(parent.getUrl(), child.getArtifactId(), childPathAdjustment, appendPaths));        } else {            child.setUrl(parent.getUrl());        }    }    assembleDistributionInheritance(child, parent, childPathAdjustment, appendPaths);        if (child.getIssueManagement() == null) {        child.setIssueManagement(parent.getIssueManagement());    }        if (child.getDescription() == null) {        child.setDescription(parent.getDescription());    }        if (child.getOrganization() == null) {        child.setOrganization(parent.getOrganization());    }        assembleScmInheritance(child, parent, childPathAdjustment, appendPaths);        if (child.getCiManagement() == null) {        child.setCiManagement(parent.getCiManagement());    }        if (child.getDevelopers().size() == 0) {        child.setDevelopers(parent.getDevelopers());    }        if (child.getLicenses().size() == 0) {        child.setLicenses(parent.getLicenses());    }        if (child.getContributors().size() == 0) {        child.setContributors(parent.getContributors());    }        if (child.getMailingLists().size() == 0) {        child.setMailingLists(parent.getMailingLists());    }        assembleBuildInheritance(child, parent);    assembleDependencyInheritance(child, parent);    child.setRepositories(ModelUtils.mergeRepositoryLists(child.getRepositories(), parent.getRepositories()));            assembleReportingInheritance(child, parent);    assembleDependencyManagementInheritance(child, parent);    Properties props = new Properties();    props.putAll(parent.getProperties());    props.putAll(child.getProperties());    child.setProperties(props);}
private void maven_f552_0(Model child, Model parent)
{    DependencyManagement parentDepMgmt = parent.getDependencyManagement();    DependencyManagement childDepMgmt = child.getDependencyManagement();    if (parentDepMgmt != null) {        if (childDepMgmt == null) {            child.setDependencyManagement(parentDepMgmt);        } else {            List<Dependency> childDeps = childDepMgmt.getDependencies();            Map<String, Dependency> mappedChildDeps = new TreeMap<>();            for (Dependency dep : childDeps) {                mappedChildDeps.put(dep.getManagementKey(), dep);            }            for (Dependency dep : parentDepMgmt.getDependencies()) {                if (!mappedChildDeps.containsKey(dep.getManagementKey())) {                    childDepMgmt.addDependency(dep);                }            }        }    }}
private void maven_f553_0(Model child, Model parent)
{        Reporting childReporting = child.getReporting();    Reporting parentReporting = parent.getReporting();    if (parentReporting != null) {        if (childReporting == null) {            childReporting = new Reporting();            child.setReporting(childReporting);        }        childReporting.setExcludeDefaults(parentReporting.isExcludeDefaults());        if (StringUtils.isEmpty(childReporting.getOutputDirectory())) {            childReporting.setOutputDirectory(parentReporting.getOutputDirectory());        }        mergeReportPluginLists(childReporting, parentReporting, true);    }}
private static void maven_f554_0(Reporting child, Reporting parent, boolean handleAsInheritance)
{    if ((child == null) || (parent == null)) {                return;    }    List<ReportPlugin> parentPlugins = parent.getPlugins();    if ((parentPlugins != null) && !parentPlugins.isEmpty()) {        Map<String, ReportPlugin> assembledPlugins = new TreeMap<>();        Map<String, ReportPlugin> childPlugins = child.getReportPluginsAsMap();        for (ReportPlugin parentPlugin : parentPlugins) {            String parentInherited = parentPlugin.getInherited();            if (!handleAsInheritance || (parentInherited == null) || Boolean.valueOf(parentInherited)) {                ReportPlugin assembledPlugin = parentPlugin;                ReportPlugin childPlugin = childPlugins.get(parentPlugin.getKey());                if (childPlugin != null) {                    assembledPlugin = childPlugin;                    mergeReportPluginDefinitions(childPlugin, parentPlugin, handleAsInheritance);                }                if (handleAsInheritance && (parentInherited == null)) {                    assembledPlugin.unsetInheritanceApplied();                }                assembledPlugins.put(assembledPlugin.getKey(), assembledPlugin);            }        }        for (ReportPlugin childPlugin : childPlugins.values()) {            if (!assembledPlugins.containsKey(childPlugin.getKey())) {                assembledPlugins.put(childPlugin.getKey(), childPlugin);            }        }        child.setPlugins(new ArrayList<>(assembledPlugins.values()));        child.flushReportPluginMap();    }}
private static void maven_f555_0(ReportSet child, ReportSet parent)
{    List<String> parentReports = parent.getReports();    List<String> childReports = child.getReports();    List<String> reports = new ArrayList<>();    if ((childReports != null) && !childReports.isEmpty()) {        reports.addAll(childReports);    }    if (parentReports != null) {        for (String report : parentReports) {            if (!reports.contains(report)) {                reports.add(report);            }        }    }    child.setReports(reports);    Xpp3Dom childConfiguration = (Xpp3Dom) child.getConfiguration();    Xpp3Dom parentConfiguration = (Xpp3Dom) parent.getConfiguration();    childConfiguration = Xpp3Dom.mergeXpp3Dom(childConfiguration, parentConfiguration);    child.setConfiguration(childConfiguration);}
public static void maven_f556_0(ReportPlugin child, ReportPlugin parent, boolean handleAsInheritance)
{    if ((child == null) || (parent == null)) {                return;    }    if ((child.getVersion() == null) && (parent.getVersion() != null)) {        child.setVersion(parent.getVersion());    }        String parentInherited = parent.getInherited();    boolean parentIsInherited = (parentInherited == null) || Boolean.valueOf(parentInherited);    List<ReportSet> parentReportSets = parent.getReportSets();    if ((parentReportSets != null) && !parentReportSets.isEmpty()) {        Map<String, ReportSet> assembledReportSets = new TreeMap<>();        Map<String, ReportSet> childReportSets = child.getReportSetsAsMap();        for (Object parentReportSet1 : parentReportSets) {            ReportSet parentReportSet = (ReportSet) parentReportSet1;            if (!handleAsInheritance || parentIsInherited) {                ReportSet assembledReportSet = parentReportSet;                ReportSet childReportSet = childReportSets.get(parentReportSet.getId());                if (childReportSet != null) {                    mergeReportSetDefinitions(childReportSet, parentReportSet);                    assembledReportSet = childReportSet;                } else if (handleAsInheritance && (parentInherited == null)) {                    parentReportSet.unsetInheritanceApplied();                }                assembledReportSets.put(assembledReportSet.getId(), assembledReportSet);            }        }        for (Map.Entry<String, ReportSet> entry : childReportSets.entrySet()) {            String id = entry.getKey();            if (!assembledReportSets.containsKey(id)) {                assembledReportSets.put(id, entry.getValue());            }        }        child.setReportSets(new ArrayList<>(assembledReportSets.values()));        child.flushReportSetMap();    }}
private void maven_f557_0(Model child, Model parent)
{    Map<String, Dependency> depsMap = new LinkedHashMap<>();    List<Dependency> deps = parent.getDependencies();    if (deps != null) {        for (Dependency dependency : deps) {            depsMap.put(dependency.getManagementKey(), dependency);        }    }    deps = child.getDependencies();    if (deps != null) {        for (Dependency dependency : deps) {            depsMap.put(dependency.getManagementKey(), dependency);        }    }    child.setDependencies(new ArrayList<>(depsMap.values()));}
private void maven_f558_0(Model child, Model parent)
{    Build childBuild = child.getBuild();    Build parentBuild = parent.getBuild();    if (parentBuild != null) {        if (childBuild == null) {            childBuild = new Build();            child.setBuild(childBuild);        }        assembleBuildInheritance(childBuild, parentBuild, true);    }}
private void maven_f559_0(Model child, Model parent, String childPathAdjustment, boolean appendPaths)
{    if (parent.getDistributionManagement() != null) {        DistributionManagement parentDistMgmt = parent.getDistributionManagement();        DistributionManagement childDistMgmt = child.getDistributionManagement();        if (childDistMgmt == null) {            childDistMgmt = new DistributionManagement();            child.setDistributionManagement(childDistMgmt);        }        if (childDistMgmt.getSite() == null) {            if (parentDistMgmt.getSite() != null) {                Site site = new Site();                childDistMgmt.setSite(site);                site.setId(parentDistMgmt.getSite().getId());                site.setName(parentDistMgmt.getSite().getName());                site.setUrl(parentDistMgmt.getSite().getUrl());                if (site.getUrl() != null) {                    site.setUrl(appendPath(site.getUrl(), child.getArtifactId(), childPathAdjustment, appendPaths));                }            }        }        if (childDistMgmt.getRepository() == null) {            if (parentDistMgmt.getRepository() != null) {                DeploymentRepository repository = copyDistributionRepository(parentDistMgmt.getRepository());                childDistMgmt.setRepository(repository);            }        }        if (childDistMgmt.getSnapshotRepository() == null) {            if (parentDistMgmt.getSnapshotRepository() != null) {                DeploymentRepository repository = copyDistributionRepository(parentDistMgmt.getSnapshotRepository());                childDistMgmt.setSnapshotRepository(repository);            }        }        if (StringUtils.isEmpty(childDistMgmt.getDownloadUrl())) {            childDistMgmt.setDownloadUrl(parentDistMgmt.getDownloadUrl());        }            }}
private static DeploymentRepository maven_f560_0(DeploymentRepository parentRepository)
{    DeploymentRepository repository = new DeploymentRepository();    repository.setId(parentRepository.getId());    repository.setName(parentRepository.getName());    repository.setUrl(parentRepository.getUrl());    repository.setLayout(parentRepository.getLayout());    repository.setUniqueVersion(parentRepository.isUniqueVersion());    return repository;}
protected String maven_f561_0(String parentPath, String childPath, String pathAdjustment, boolean appendPaths)
{    String uncleanPath = parentPath;    if (appendPaths) {        if (pathAdjustment != null) {            uncleanPath += "/" + pathAdjustment;        }        if (childPath != null) {            uncleanPath += "/" + childPath;        }    }    String cleanedPath = "";    int protocolIdx = uncleanPath.indexOf("://");    if (protocolIdx > -1) {        cleanedPath = uncleanPath.substring(0, protocolIdx + 3);        uncleanPath = uncleanPath.substring(protocolIdx + 3);    }    if (uncleanPath.startsWith("/")) {        cleanedPath += "/";    }    return cleanedPath + resolvePath(uncleanPath);}
private static String maven_f562_0(String uncleanPath)
{    LinkedList<String> pathElements = new LinkedList<>();    StringTokenizer tokenizer = new StringTokenizer(uncleanPath, "/");    while (tokenizer.hasMoreTokens()) {        String token = tokenizer.nextToken();        switch(token) {            case "":                                break;            case "..":                if (pathElements.isEmpty()) {                                                                } else {                    pathElements.removeLast();                }                break;            default:                pathElements.addLast(token);                break;        }    }    StringBuilder cleanedPath = new StringBuilder();    while (!pathElements.isEmpty()) {        cleanedPath.append(pathElements.removeFirst());        if (!pathElements.isEmpty()) {            cleanedPath.append('/');        }    }    return cleanedPath.toString();}
private static void maven_f563_0(Build childBuild, Build parentBuild)
{    for (Extension e : parentBuild.getExtensions()) {        if (!childBuild.getExtensions().contains(e)) {            childBuild.addExtension(e);        }    }}
public Model maven_f564_0(Model model, Map<String, ?> context) throws ModelInterpolationException
{    return interpolate(model, context, true);}
public Model maven_f565_0(Model model, Map<String, ?> context, boolean strict) throws ModelInterpolationException
{    Properties props = new Properties();    props.putAll(context);    return interpolate(model, null, new DefaultProjectBuilderConfiguration().setExecutionProperties(props), true);}
public Model maven_f566_0(Model model, File projectDir, ProjectBuilderConfiguration config, boolean debugEnabled) throws ModelInterpolationException
{    StringWriter sWriter = new StringWriter(1024);    MavenXpp3Writer writer = new MavenXpp3Writer();    try {        writer.write(sWriter, model);    } catch (IOException e) {        throw new ModelInterpolationException("Cannot serialize project model for interpolation.", e);    }    String serializedModel = sWriter.toString();    serializedModel = interpolate(serializedModel, model, projectDir, config, debugEnabled);    StringReader sReader = new StringReader(serializedModel);    MavenXpp3Reader modelReader = new MavenXpp3Reader();    try {        model = modelReader.read(sReader);    } catch (IOException | XmlPullParserException e) {        throw new ModelInterpolationException("Cannot read project model from interpolating filter of serialized version.", e);    }    return model;}
public String maven_f567_0(String src, Model model, final File projectDir, ProjectBuilderConfiguration config, boolean debug) throws ModelInterpolationException
{    try {        List<ValueSource> valueSources = createValueSources(model, projectDir, config);        List<InterpolationPostProcessor> postProcessors = createPostProcessors(model, projectDir, config);        return interpolateInternal(src, valueSources, postProcessors, debug);    } finally {        interpolator.clearAnswers();    }}
protected List<ValueSource> maven_f568_0(final Model model, final File projectDir, final ProjectBuilderConfiguration config)
{    String timestampFormat = DEFAULT_BUILD_TIMESTAMP_FORMAT;    Properties modelProperties = model.getProperties();    if (modelProperties != null) {        timestampFormat = modelProperties.getProperty(BUILD_TIMESTAMP_FORMAT_PROPERTY, timestampFormat);    }    ValueSource modelValueSource1 = new PrefixedObjectValueSource(PROJECT_PREFIXES, model, false);    ValueSource modelValueSource2 = new ObjectBasedValueSource(model);    ValueSource basedirValueSource = new PrefixedValueSourceWrapper(new AbstractValueSource(false) {        public Object getValue(String expression) {            if (projectDir != null && "basedir".equals(expression)) {                return projectDir.getAbsolutePath();            }            return null;        }    }, PROJECT_PREFIXES, true);    ValueSource baseUriValueSource = new PrefixedValueSourceWrapper(new AbstractValueSource(false) {        public Object getValue(String expression) {            if (projectDir != null && "baseUri".equals(expression)) {                return projectDir.getAbsoluteFile().toPath().toUri().toASCIIString();            }            return null;        }    }, PROJECT_PREFIXES, false);    List<ValueSource> valueSources = new ArrayList<>(9);        valueSources.add(basedirValueSource);    valueSources.add(baseUriValueSource);    valueSources.add(new BuildTimestampValueSource(config.getBuildStartTime(), timestampFormat));    valueSources.add(modelValueSource1);    valueSources.add(new MapBasedValueSource(config.getUserProperties()));    valueSources.add(new MapBasedValueSource(modelProperties));    valueSources.add(new MapBasedValueSource(config.getExecutionProperties()));    valueSources.add(new AbstractValueSource(false) {        public Object getValue(String expression) {            return config.getExecutionProperties().getProperty("env." + expression);        }    });    valueSources.add(modelValueSource2);    return valueSources;}
public Object maven_f569_0(String expression)
{    if (projectDir != null && "basedir".equals(expression)) {        return projectDir.getAbsolutePath();    }    return null;}
public Object maven_f570_0(String expression)
{    if (projectDir != null && "baseUri".equals(expression)) {        return projectDir.getAbsoluteFile().toPath().toUri().toASCIIString();    }    return null;}
public Object maven_f571_0(String expression)
{    return config.getExecutionProperties().getProperty("env." + expression);}
protected List<InterpolationPostProcessor> maven_f572_0(final Model model, final File projectDir, final ProjectBuilderConfiguration config)
{    return Collections.singletonList((InterpolationPostProcessor) new PathTranslatingPostProcessor(PROJECT_PREFIXES, TRANSLATED_PATH_EXPRESSIONS, projectDir, pathTranslator));}
protected Stringf573_1String src, List<ValueSource> valueSources, List<InterpolationPostProcessor> postProcessors, boolean debug) throws ModelInterpolationException
{    if (!src.contains("${")) {        return src;    }    Logger logger = getLogger();    String result = src;    synchronized (this) {        for (ValueSource vs : valueSources) {            interpolator.addValueSource(vs);        }        for (InterpolationPostProcessor postProcessor : postProcessors) {            interpolator.addPostProcessor(postProcessor);        }        try {            try {                result = interpolator.interpolate(result, recursionInterceptor);            } catch (InterpolationException e) {                throw new ModelInterpolationException(e.getMessage(), e);            }            if (debug) {                List<Object> feedback = interpolator.getFeedback();                if (feedback != null && !feedback.isEmpty()) {                                        Object last = null;                    for (Object next : feedback) {                        if (next instanceof Throwable) {                            if (last == null) {                                                            } else {                                                            }                        } else {                            if (last != null) {                                                            }                            last = next;                        }                    }                    if (last != null) {                                            }                }            }            interpolator.clearFeedback();        } finally {            for (ValueSource vs : valueSources) {                interpolator.removeValuesSource(vs);            }            for (InterpolationPostProcessor postProcessor : postProcessors) {                interpolator.removePostProcessor(postProcessor);            }        }    }    return result;}
protected RecursionInterceptor maven_f574_0()
{    return recursionInterceptor;}
protected void maven_f575_0(RecursionInterceptor recursionInterceptor)
{    this.recursionInterceptor = recursionInterceptor;}
public void maven_f576_0() throws InitializationException
{    interpolator = createInterpolator();    recursionInterceptor = new PrefixAwareRecursionInterceptor(PROJECT_PREFIXES);}
protected final Interpolator maven_f577_0()
{    return interpolator;}
public Object maven_f578_0(String expression)
{    if ("build.timestamp".equals(expression) || "maven.build.timestamp".equals(expression)) {        if (formattedDate == null && startTime != null) {            formattedDate = new SimpleDateFormat(format).format(startTime);        }        return formattedDate;    }    return null;}
public String maven_f579_0()
{    return expression;}
public String maven_f580_0()
{    return originalMessage;}
public Object maven_f581_0(String expression, Object value)
{    expression = ValueSourceUtils.trimPrefix(expression, expressionPrefixes, true);    if (projectDir != null && value != null && unprefixedPathKeys.contains(expression)) {        return pathTranslator.alignToBaseDirectory(String.valueOf(value), projectDir);    }    return value;}
protected Interpolator maven_f582_0()
{    return new RegexBasedInterpolator(true);}
public Model maven_f583_0(Model model, File projectDir, ProjectBuilderConfiguration config, boolean debugEnabled) throws ModelInterpolationException
{    interpolateObject(model, model, projectDir, config, debugEnabled);    return model;}
protected void maven_f584_0(Object obj, Model model, File projectDir, ProjectBuilderConfiguration config, boolean debugEnabled) throws ModelInterpolationException
{    try {        List<ValueSource> valueSources = createValueSources(model, projectDir, config);        List<InterpolationPostProcessor> postProcessors = createPostProcessors(model, projectDir, config);        InterpolateObjectAction action = new InterpolateObjectAction(obj, valueSources, postProcessors, debugEnabled, this, getLogger());        ModelInterpolationException error = AccessController.doPrivileged(action);        if (error != null) {            throw error;        }    } finally {        getInterpolator().clearAnswers();    }}
protected Interpolator maven_f585_0()
{    StringSearchInterpolator interpolator = new StringSearchInterpolator();    interpolator.setCacheAnswers(true);    return interpolator;}
public ModelInterpolationException maven_f586_0()
{    while (!interpolationTargets.isEmpty()) {        Object obj = interpolationTargets.removeFirst();        try {            traverseObjectWithParents(obj.getClass(), obj);        } catch (ModelInterpolationException e) {            return e;        }    }    return null;}
private boolean maven_f588_0(Class<?> cls)
{    return !cls.getPackage().getName().startsWith("java");}
private boolean maven_f589_0(Field field, Class<?> fieldType)
{    if (!PRIMITIVE_BY_CLASS.containsKey(fieldType)) {        PRIMITIVE_BY_CLASS.put(fieldType, fieldType.isPrimitive());    }    if (PRIMITIVE_BY_CLASS.get(fieldType)) {        return false;    }    if ("parent".equals(field.getName())) {        return false;    }    return true;}
private void maven_f590_0(Object target) throws ModelInterpolationException
{    int len = Array.getLength(target);    for (int i = 0; i < len; i++) {        Object value = Array.get(target, i);        if (value != null) {            if (String.class == value.getClass()) {                String interpolated = modelInterpolator.interpolateInternal((String) value, valueSources, postProcessors, debugEnabled);                if (!interpolated.equals(value)) {                    Array.set(target, i, interpolated);                }            } else {                interpolationTargets.add(value);            }        }    }}
public final ModelValidationResult maven_f591_0()
{    return validationResult;}
public static void maven_f592_0(PluginContainer childContainer, PluginContainer parentContainer, boolean handleAsInheritance)
{    if ((childContainer == null) || (parentContainer == null)) {                return;    }    List<Plugin> parentPlugins = parentContainer.getPlugins();    if ((parentPlugins != null) && !parentPlugins.isEmpty()) {        parentPlugins = new ArrayList<>(parentPlugins);                if (handleAsInheritance) {            for (Iterator<Plugin> it = parentPlugins.iterator(); it.hasNext(); ) {                Plugin plugin = it.next();                String inherited = plugin.getInherited();                if ((inherited != null) && !Boolean.valueOf(inherited)) {                    it.remove();                }            }        }        List<Plugin> assembledPlugins = new ArrayList<>();        Map<String, Plugin> childPlugins = childContainer.getPluginsAsMap();        for (Plugin parentPlugin : parentPlugins) {            String parentInherited = parentPlugin.getInherited();                        if (!handleAsInheritance || (parentInherited == null) || Boolean.valueOf(parentInherited)) {                Plugin childPlugin = childPlugins.get(parentPlugin.getKey());                if ((childPlugin != null) && !assembledPlugins.contains(childPlugin)) {                    Plugin assembledPlugin = childPlugin;                    mergePluginDefinitions(childPlugin, parentPlugin, handleAsInheritance);                                        assembledPlugins.add(assembledPlugin);                }                                if (handleAsInheritance && (parentInherited == null)) {                    parentPlugin.unsetInheritanceApplied();                }            }                                    List<Plugin> results = ModelUtils.orderAfterMerge(assembledPlugins, parentPlugins, childContainer.getPlugins());            childContainer.setPlugins(results);            childContainer.flushPluginMap();        }    }}
public static List<Plugin> maven_f593_0(List<Plugin> merged, List<Plugin> highPrioritySource, List<Plugin> lowPrioritySource)
{    List<Plugin> results = new ArrayList<>();    if (!merged.isEmpty()) {        results.addAll(merged);    }    List<Plugin> missingFromResults = new ArrayList<>();    List<List<Plugin>> sources = new ArrayList<>();    sources.add(highPrioritySource);    sources.add(lowPrioritySource);    for (List<Plugin> source : sources) {        for (Plugin item : source) {            if (results.contains(item)) {                if (!missingFromResults.isEmpty()) {                    int idx = results.indexOf(item);                    if (idx < 0) {                        idx = 0;                    }                    results.addAll(idx, missingFromResults);                    missingFromResults.clear();                }            } else {                missingFromResults.add(item);            }        }        if (!missingFromResults.isEmpty()) {            results.addAll(missingFromResults);            missingFromResults.clear();        }    }    return results;}
public static void maven_f594_0(Plugin child, Plugin parent, boolean handleAsInheritance)
{    if ((child == null) || (parent == null)) {                return;    }    if (parent.isExtensions()) {        child.setExtensions(true);    }    if ((child.getVersion() == null) && (parent.getVersion() != null)) {        child.setVersion(parent.getVersion());    }    Xpp3Dom childConfiguration = (Xpp3Dom) child.getConfiguration();    Xpp3Dom parentConfiguration = (Xpp3Dom) parent.getConfiguration();    childConfiguration = Xpp3Dom.mergeXpp3Dom(childConfiguration, parentConfiguration);    child.setConfiguration(childConfiguration);    child.setDependencies(mergeDependencyList(child.getDependencies(), parent.getDependencies()));        String parentInherited = parent.getInherited();    boolean parentIsInherited = (parentInherited == null) || Boolean.valueOf(parentInherited);    List<PluginExecution> parentExecutions = parent.getExecutions();    if ((parentExecutions != null) && !parentExecutions.isEmpty()) {        List<PluginExecution> mergedExecutions = new ArrayList<>();        Map<String, PluginExecution> assembledExecutions = new TreeMap<>();        Map<String, PluginExecution> childExecutions = child.getExecutionsAsMap();        for (PluginExecution parentExecution : parentExecutions) {            String inherited = parentExecution.getInherited();            boolean parentExecInherited = parentIsInherited && ((inherited == null) || Boolean.valueOf(inherited));            if (!handleAsInheritance || parentExecInherited) {                PluginExecution assembled = parentExecution;                PluginExecution childExecution = childExecutions.get(parentExecution.getId());                if (childExecution != null) {                    mergePluginExecutionDefinitions(childExecution, parentExecution);                    assembled = childExecution;                } else if (handleAsInheritance && (parentInherited == null)) {                    parentExecution.unsetInheritanceApplied();                }                assembledExecutions.put(assembled.getId(), assembled);                mergedExecutions.add(assembled);            }        }        for (PluginExecution childExecution : child.getExecutions()) {            if (!assembledExecutions.containsKey(childExecution.getId())) {                mergedExecutions.add(childExecution);            }        }        child.setExecutions(mergedExecutions);        child.flushExecutionMap();    }}
private static void maven_f595_0(PluginExecution child, PluginExecution parent)
{    if (child.getPhase() == null) {        child.setPhase(parent.getPhase());    }    List<String> parentGoals = parent.getGoals();    List<String> childGoals = child.getGoals();    List<String> goals = new ArrayList<>();    if ((childGoals != null) && !childGoals.isEmpty()) {        goals.addAll(childGoals);    }    if (parentGoals != null) {        for (String goal : parentGoals) {            if (!goals.contains(goal)) {                goals.add(goal);            }        }    }    child.setGoals(goals);    Xpp3Dom childConfiguration = (Xpp3Dom) child.getConfiguration();    Xpp3Dom parentConfiguration = (Xpp3Dom) parent.getConfiguration();    childConfiguration = Xpp3Dom.mergeXpp3Dom(childConfiguration, parentConfiguration);    child.setConfiguration(childConfiguration);}
public static List<Repository> maven_f596_0(List<Repository> dominant, List<Repository> recessive)
{    List<Repository> repositories = new ArrayList<>(dominant);    for (Repository repository : recessive) {        if (!repositories.contains(repository)) {            repositories.add(repository);        }    }    return repositories;}
public static void maven_f597_0(List<String> childFilters, List<String> parentFilters)
{    for (String f : parentFilters) {        if (!childFilters.contains(f)) {            childFilters.add(f);        }    }}
private static List<Dependency> maven_f598_0(List<Dependency> child, List<Dependency> parent)
{    Map<String, Dependency> depsMap = new LinkedHashMap<>();    if (parent != null) {        for (Dependency dependency : parent) {            depsMap.put(dependency.getManagementKey(), dependency);        }    }    if (child != null) {        for (Dependency dependency : child) {            depsMap.put(dependency.getManagementKey(), dependency);        }    }    return new ArrayList<>(depsMap.values());}
public void maven_f599_0(Model model, File basedir)
{    if (basedir == null) {        return;    }    Build build = model.getBuild();    if (build != null) {        build.setDirectory(alignToBaseDirectory(build.getDirectory(), basedir));        build.setSourceDirectory(alignToBaseDirectory(build.getSourceDirectory(), basedir));        build.setTestSourceDirectory(alignToBaseDirectory(build.getTestSourceDirectory(), basedir));        for (Resource resource : build.getResources()) {            resource.setDirectory(alignToBaseDirectory(resource.getDirectory(), basedir));        }        for (Resource resource : build.getTestResources()) {            resource.setDirectory(alignToBaseDirectory(resource.getDirectory(), basedir));        }        if (build.getFilters() != null) {            List<String> filters = new ArrayList<>();            for (String filter : build.getFilters()) {                filters.add(alignToBaseDirectory(filter, basedir));            }            build.setFilters(filters);        }        build.setOutputDirectory(alignToBaseDirectory(build.getOutputDirectory(), basedir));        build.setTestOutputDirectory(alignToBaseDirectory(build.getTestOutputDirectory(), basedir));    }    Reporting reporting = model.getReporting();    if (reporting != null) {        reporting.setOutputDirectory(alignToBaseDirectory(reporting.getOutputDirectory(), basedir));    }}
public String maven_f600_0(String path, File basedir)
{    if (basedir == null) {        return path;    }    if (path == null) {        return null;    }    String s = stripBasedirToken(path);    File file = new File(s);    if (file.isAbsolute()) {                s = file.getPath();    } else if (file.getPath().startsWith(File.separator)) {                s = file.getAbsolutePath();    } else {                s = new File(new File(basedir, s).toURI().normalize()).getAbsolutePath();    }    return s;}
private String maven_f601_0(String s)
{    if (s != null) {        String basedirExpr = null;        for (String expression : BASEDIR_EXPRESSIONS) {            if (s.startsWith(expression)) {                basedirExpr = expression;                break;            }        }        if (basedirExpr != null) {            if (s.length() > basedirExpr.length()) {                                s = chopLeadingFileSeparator(s.substring(basedirExpr.length()));            } else {                s = ".";            }        }    }    return s;}
private String maven_f602_0(String path)
{    if (path != null) {        if (path.startsWith("/") || path.startsWith("\\")) {            path = path.substring(1);        }    }    return path;}
public void maven_f603_0(Model model, File basedir)
{    if (basedir == null) {        return;    }    Build build = model.getBuild();    if (build != null) {        build.setDirectory(unalignFromBaseDirectory(build.getDirectory(), basedir));        build.setSourceDirectory(unalignFromBaseDirectory(build.getSourceDirectory(), basedir));        build.setTestSourceDirectory(unalignFromBaseDirectory(build.getTestSourceDirectory(), basedir));        for (Resource resource : build.getResources()) {            resource.setDirectory(unalignFromBaseDirectory(resource.getDirectory(), basedir));        }        for (Resource resource : build.getTestResources()) {            resource.setDirectory(unalignFromBaseDirectory(resource.getDirectory(), basedir));        }        if (build.getFilters() != null) {            List<String> filters = new ArrayList<>();            for (String filter : build.getFilters()) {                filters.add(unalignFromBaseDirectory(filter, basedir));            }            build.setFilters(filters);        }        build.setOutputDirectory(unalignFromBaseDirectory(build.getOutputDirectory(), basedir));        build.setTestOutputDirectory(unalignFromBaseDirectory(build.getTestOutputDirectory(), basedir));    }    Reporting reporting = model.getReporting();    if (reporting != null) {        reporting.setOutputDirectory(unalignFromBaseDirectory(reporting.getOutputDirectory(), basedir));    }}
public String maven_f604_0(String path, File basedir)
{    if (basedir == null) {        return path;    }    if (path == null) {        return null;    }    path = path.trim();    String base = basedir.getAbsolutePath();    if (path.startsWith(base)) {        path = chopLeadingFileSeparator(path.substring(base.length()));    }    if (path.length() <= 0) {        path = ".";    }    if (!new File(path).isAbsolute()) {        path = path.replace('\\', '/');    }    return path;}
public static List<ArtifactRepository> maven_f605_0(List<Repository> repositories, ArtifactRepositoryFactory artifactRepositoryFactory, PlexusContainer c) throws InvalidRepositoryException
{    List<ArtifactRepository> remoteRepositories = new ArrayList<>();    for (Repository r : repositories) {        remoteRepositories.add(buildArtifactRepository(r, artifactRepositoryFactory, c));    }    return remoteRepositories;}
public static ArtifactRepository maven_f606_0(DeploymentRepository repo, ArtifactRepositoryFactory artifactRepositoryFactory, PlexusContainer c) throws InvalidRepositoryException
{    return buildArtifactRepository(repo, artifactRepositoryFactory, c);}
public static ArtifactRepository maven_f607_0(Repository repo, ArtifactRepositoryFactory artifactRepositoryFactory, PlexusContainer c) throws InvalidRepositoryException
{    RepositorySystem repositorySystem = rs(c);    RepositorySystemSession session = rss(c);    ArtifactRepository repository = repositorySystem.buildArtifactRepository(repo);    if (session != null) {        repositorySystem.injectMirror(session, Arrays.asList(repository));        repositorySystem.injectProxy(session, Arrays.asList(repository));        repositorySystem.injectAuthentication(session, Arrays.asList(repository));    }    return repository;}
private static RepositorySystem maven_f608_0(PlexusContainer c)
{    try {        return c.lookup(RepositorySystem.class);    } catch (ComponentLookupException e) {        throw new IllegalStateException(e);    }}
private static RepositorySystemSession maven_f609_0(PlexusContainer c)
{    try {        LegacySupport legacySupport = c.lookup(LegacySupport.class);        return legacySupport.getRepositorySession();    } catch (ComponentLookupException e) {        throw new IllegalStateException(e);    }}
public ModelValidationResult maven_f610_0(Model model)
{    ModelValidationResult result = new ModelValidationResult();    ModelBuildingRequest request = new DefaultModelBuildingRequest().setValidationLevel(ModelBuildingRequest.VALIDATION_LEVEL_MAVEN_2_0);    SimpleModelProblemCollector problems = new SimpleModelProblemCollector(result);    modelValidator.validateEffectiveModel(model, request, problems);    return result;}
public void maven_f611_0(ModelProblemCollectorRequest req)
{    if (!ModelProblem.Severity.WARNING.equals(req.getSeverity())) {        result.addMessage(req.getMessage());    }}
public int maven_f612_0()
{    return messages.size();}
public String maven_f613_0(int i)
{    return messages.get(i);}
public List<String> maven_f614_0()
{    return Collections.unmodifiableList(messages);}
public void maven_f615_0(String message)
{    messages.add(message);}
public String maven_f616_0()
{    return render("");}
public String maven_f617_0(String indentation)
{    if (messages.size() == 0) {        return indentation + "There were no validation errors.";    }    StringBuilder message = new StringBuilder();        for (int i = 0; i < messages.size(); i++) {        message.append(indentation).append('[').append(i).append("]  ").append(messages.get(i)).append(NEWLINE);    }    return message.toString();}
public Mirror maven_f618_0(ArtifactRepository repository, List<Mirror> mirrors)
{    String repoId = repository.getId();    if (repoId != null && mirrors != null) {        for (Mirror mirror : mirrors) {            if (repoId.equals(mirror.getMirrorOf()) && matchesLayout(repository, mirror)) {                return mirror;            }        }        for (Mirror mirror : mirrors) {            if (matchPattern(repository, mirror.getMirrorOf()) && matchesLayout(repository, mirror)) {                return mirror;            }        }    }    return null;}
 static boolean maven_f619_0(ArtifactRepository originalRepository, String pattern)
{    boolean result = false;    String originalId = originalRepository.getId();        if (WILDCARD.equals(pattern) || pattern.equals(originalId)) {        result = true;    } else {                String[] repos = pattern.split(",");        for (String repo : repos) {            repo = repo.trim();                        if (repo.length() > 1 && repo.startsWith("!")) {                if (repo.substring(1).equals(originalId)) {                                        result = false;                    break;                }            } else             if (repo.equals(originalId)) {                result = true;                break;            } else             if (EXTERNAL_WILDCARD.equals(repo) && isExternalRepo(originalRepository)) {                result = true;                        } else if (WILDCARD.equals(repo)) {                result = true;                        }        }    }    return result;}
 static boolean maven_f620_0(ArtifactRepository originalRepository)
{    try {        URL url = new URL(originalRepository.getUrl());        return !(url.getHost().equals("localhost") || url.getHost().equals("127.0.0.1") || url.getProtocol().equals("file"));    } catch (MalformedURLException e) {                return false;    }}
 static boolean maven_f621_0(ArtifactRepository repository, Mirror mirror)
{    return matchesLayout(RepositoryUtils.getLayout(repository), mirror.getMirrorOfLayouts());}
 static boolean maven_f622_0(String repoLayout, String mirrorLayout)
{    boolean result = false;        if (StringUtils.isEmpty(mirrorLayout) || WILDCARD.equals(mirrorLayout)) {        result = true;    } else if (mirrorLayout.equals(repoLayout)) {        result = true;    } else {                String[] layouts = mirrorLayout.split(",");        for (String layout : layouts) {                        if (layout.length() > 1 && layout.startsWith("!")) {                if (layout.substring(1).equals(repoLayout)) {                                        result = false;                    break;                }            } else             if (layout.equals(repoLayout)) {                result = true;                break;            } else if (WILDCARD.equals(layout)) {                result = true;                        }        }    }    return result;}
public boolean maven_f623_0(Artifact artifact, ArtifactRepository repository)
{    File file = artifact.getFile();    ArtifactRepositoryPolicy policy = artifact.isSnapshot() ? repository.getSnapshots() : repository.getReleases();    if (!policy.isEnabled()) {        if (getLogger().isDebugEnabled()) {            getLogger().debug("Skipping update check for " + artifact + " (" + file + ") from " + repository.getId() + " (" + repository.getUrl() + ")");        }        return false;    }    if (getLogger().isDebugEnabled()) {        getLogger().debug("Determining update check for " + artifact + " (" + file + ") from " + repository.getId() + " (" + repository.getUrl() + ")");    }    if (file == null) {                return true;    }    Date lastCheckDate;    if (file.exists()) {        lastCheckDate = new Date(file.lastModified());    } else {        File touchfile = getTouchfile(artifact);        lastCheckDate = readLastUpdated(touchfile, getRepositoryKey(repository));    }    return (lastCheckDate == null) || policy.checkOutOfDate(lastCheckDate);}
public boolean maven_f624_0(RepositoryMetadata metadata, ArtifactRepository repository, File file)
{                            ArtifactRepositoryPolicy policy = metadata.getPolicy(repository);    if (!policy.isEnabled()) {        if (getLogger().isDebugEnabled()) {            getLogger().debug("Skipping update check for " + metadata.getKey() + " (" + file + ") from " + repository.getId() + " (" + repository.getUrl() + ")");        }        return false;    }    if (getLogger().isDebugEnabled()) {        getLogger().debug("Determining update check for " + metadata.getKey() + " (" + file + ") from " + repository.getId() + " (" + repository.getUrl() + ")");    }    if (file == null) {                return true;    }    Date lastCheckDate = readLastUpdated(metadata, repository, file);    return (lastCheckDate == null) || policy.checkOutOfDate(lastCheckDate);}
private Date maven_f625_0(RepositoryMetadata metadata, ArtifactRepository repository, File file)
{    File touchfile = getTouchfile(metadata, file);    String key = getMetadataKey(repository, file);    return readLastUpdated(touchfile, key);}
public String maven_f626_0(Artifact artifact, ArtifactRepository repository)
{    File touchFile = getTouchfile(artifact);    return getError(touchFile, getRepositoryKey(repository));}
public void maven_f627_0(Artifact artifact, ArtifactRepository repository, String error)
{    File file = artifact.getFile();    File touchfile = getTouchfile(artifact);    if (file.exists()) {        touchfile.delete();    } else {        writeLastUpdated(touchfile, getRepositoryKey(repository), error);    }}
public void maven_f628_0(RepositoryMetadata metadata, ArtifactRepository repository, File file)
{    File touchfile = getTouchfile(metadata, file);    String key = getMetadataKey(repository, file);    writeLastUpdated(touchfile, key, null);}
 String maven_f629_0(ArtifactRepository repository, File file)
{    return repository.getId() + '.' + file.getName() + LAST_UPDATE_TAG;}
 String maven_f630_0(ArtifactRepository repository)
{    StringBuilder buffer = new StringBuilder(256);    Proxy proxy = repository.getProxy();    if (proxy != null) {        if (proxy.getUserName() != null) {            int hash = (proxy.getUserName() + proxy.getPassword()).hashCode();            buffer.append(hash).append('@');        }        buffer.append(proxy.getHost()).append(':').append(proxy.getPort()).append('>');    }        Authentication auth = repository.getAuthentication();    if (auth != null) {        int hash = (auth.getUsername() + auth.getPassword()).hashCode();        buffer.append(hash).append('@');    }        buffer.append(repository.getUrl());    return buffer.toString();}
private void maven_f631_0(File touchfile, String key, String error)
{    synchronized (touchfile.getAbsolutePath().intern()) {        if (!touchfile.getParentFile().exists() && !touchfile.getParentFile().mkdirs()) {            getLogger().debug("Failed to create directory: " + touchfile.getParent() + " for tracking artifact metadata resolution.");            return;        }        FileChannel channel = null;        FileLock lock = null;        try {            Properties props = new Properties();            channel = new RandomAccessFile(touchfile, "rw").getChannel();            lock = channel.lock();            if (touchfile.canRead()) {                getLogger().debug("Reading resolution-state from: " + touchfile);                props.load(Channels.newInputStream(channel));            }            props.setProperty(key, Long.toString(System.currentTimeMillis()));            if (error != null) {                props.setProperty(key + ERROR_KEY_SUFFIX, error);            } else {                props.remove(key + ERROR_KEY_SUFFIX);            }            getLogger().debug("Writing resolution-state to: " + touchfile);            channel.truncate(0);            props.store(Channels.newOutputStream(channel), "Last modified on: " + new Date());            lock.release();            lock = null;            channel.close();            channel = null;        } catch (IOException e) {            getLogger().debug("Failed to record lastUpdated information for resolution.\nFile: " + touchfile.toString() + "; key: " + key, e);        } finally {            if (lock != null) {                try {                    lock.release();                } catch (IOException e) {                    getLogger().debug("Error releasing exclusive lock for resolution tracking file: " + touchfile, e);                }            }            if (channel != null) {                try {                    channel.close();                } catch (IOException e) {                    getLogger().debug("Error closing FileChannel for resolution tracking file: " + touchfile, e);                }            }        }    }}
 Date maven_f632_0(File touchfile, String key)
{    getLogger().debug("Searching for " + key + " in resolution tracking file.");    Properties props = read(touchfile);    if (props != null) {        String rawVal = props.getProperty(key);        if (rawVal != null) {            try {                return new Date(Long.parseLong(rawVal));            } catch (NumberFormatException e) {                getLogger().debug("Cannot parse lastUpdated date: \'" + rawVal + "\'. Ignoring.", e);            }        }    }    return null;}
private String maven_f633_0(File touchFile, String key)
{    Properties props = read(touchFile);    if (props != null) {        return props.getProperty(key + ERROR_KEY_SUFFIX);    }    return null;}
private Properties maven_f634_0(File touchfile)
{    if (!touchfile.canRead()) {        getLogger().debug("Skipped unreadable resolution tracking file " + touchfile);        return null;    }    synchronized (touchfile.getAbsolutePath().intern()) {        FileInputStream in = null;        FileLock lock = null;        try {            Properties props = new Properties();            in = new FileInputStream(touchfile);            lock = in.getChannel().lock(0, Long.MAX_VALUE, true);            getLogger().debug("Reading resolution-state from: " + touchfile);            props.load(in);            lock.release();            lock = null;            in.close();            in = null;            return props;        } catch (IOException e) {            getLogger().debug("Failed to read resolution tracking file " + touchfile, e);            return null;        } finally {            if (lock != null) {                try {                    lock.release();                } catch (IOException e) {                    getLogger().debug("Error releasing shared lock for resolution tracking file: " + touchfile, e);                }            }            if (in != null) {                try {                    in.close();                } catch (IOException e) {                    getLogger().debug("Error closing FileChannel for resolution tracking file: " + touchfile, e);                }            }        }    }}
 File maven_f635_0(Artifact artifact)
{    StringBuilder sb = new StringBuilder(128);    sb.append(artifact.getArtifactId());    sb.append('-').append(artifact.getBaseVersion());    if (artifact.getClassifier() != null) {        sb.append('-').append(artifact.getClassifier());    }    sb.append('.').append(artifact.getType()).append(LAST_UPDATE_TAG);    return new File(artifact.getFile().getParentFile(), sb.toString());}
 File maven_f636_0(RepositoryMetadata metadata, File file)
{    return new File(file.getParent(), TOUCHFILE_NAME);}
public voidf637_1Artifact artifact, ArtifactRepository repository, TransferListener downloadMonitor, boolean force) throws TransferFailedException, ResourceDoesNotExistException
{    String remotePath = repository.pathOf(artifact);    ArtifactRepositoryPolicy policy = artifact.isSnapshot() ? repository.getSnapshots() : repository.getReleases();    if (!policy.isEnabled()) {            } else if (artifact.isSnapshot() || !artifact.getFile().exists()) {        if (force || updateCheckManager.isUpdateRequired(artifact, repository)) {                        try {                getRemoteFile(repository, artifact.getFile(), remotePath, downloadMonitor, policy.getChecksumPolicy(), false);                updateCheckManager.touch(artifact, repository, null);            } catch (ResourceDoesNotExistException e) {                updateCheckManager.touch(artifact, repository, null);                throw e;            } catch (TransferFailedException e) {                String error = (e.getMessage() != null) ? e.getMessage() : e.getClass().getSimpleName();                updateCheckManager.touch(artifact, repository, error);                throw e;            }                        artifact.setResolved(true);        } else if (!artifact.getFile().exists()) {            String error = updateCheckManager.getError(artifact, repository);            if (error != null) {                throw new TransferFailedException("Failure to resolve " + remotePath + " from " + repository.getUrl() + " was cached in the local repository. " + "Resolution will not be reattempted until the update interval of " + repository.getId() + " has elapsed or updates are forced. Original error: " + error);            } else {                throw new ResourceDoesNotExistException("Failure to resolve " + remotePath + " from " + repository.getUrl() + " was cached in the local repository. " + "Resolution will not be reattempted until the update interval of " + repository.getId() + " has elapsed or updates are forced.");            }        }    }}
public voidf638_1Artifact artifact, List<ArtifactRepository> remoteRepositories, TransferListener downloadMonitor, boolean force) throws TransferFailedException, ResourceDoesNotExistException
{    TransferFailedException tfe = null;    for (ArtifactRepository repository : remoteRepositories) {        try {            getArtifact(artifact, repository, downloadMonitor, force);            if (artifact.isResolved()) {                artifact.setRepository(repository);                break;            }        } catch (ResourceDoesNotExistException e) {                                            } catch (TransferFailedException e) {            tfe = e;            String msg = "Unable to get artifact " + artifact.getId() + " from repository " + repository.getId() + " (" + repository.getUrl() + "): " + e.getMessage();            if (logger.isDebugEnabled()) {                            } else {                            }        }    }        if (!artifact.getFile().exists()) {        if (tfe != null) {            throw tfe;        } else {            throw new ResourceDoesNotExistException("Unable to download the artifact from any repository");        }    }}
public void maven_f639_0(ArtifactMetadata metadata, ArtifactRepository repository, File destination, String checksumPolicy) throws TransferFailedException, ResourceDoesNotExistException
{    String remotePath = repository.pathOfRemoteRepositoryMetadata(metadata);    getRemoteFile(repository, destination, remotePath, null, checksumPolicy, true);}
public void maven_f640_0(ArtifactMetadata metadata, ArtifactRepository repository, File destination, String checksumPolicy) throws TransferFailedException, ResourceDoesNotExistException
{    String remotePath = repository.pathOfRemoteRepositoryMetadata(metadata);    getRemoteFile(repository, destination, remotePath, null, checksumPolicy, true);}
private voidf641_1Wagon wagon, ArtifactRepository repository) throws ConnectionException, AuthenticationException
{        if (legacySupport.getRepositorySession() != null) {        String userAgent = ConfigUtils.getString(legacySupport.getRepositorySession(), null, ConfigurationProperties.USER_AGENT);        if (userAgent == null) {            Properties headers = new Properties();            headers.put("User-Agent", ConfigUtils.getString(legacySupport.getRepositorySession(), "Maven", ConfigurationProperties.USER_AGENT));            try {                Method setHttpHeaders = wagon.getClass().getMethod("setHttpHeaders", Properties.class);                setHttpHeaders.invoke(wagon, headers);            } catch (NoSuchMethodException e) {                        } catch (Exception e) {                            }        }    }    if (repository.getProxy() != null && logger.isDebugEnabled()) {            }    if (repository.getAuthentication() != null && repository.getProxy() != null) {        wagon.connect(new Repository(repository.getId(), repository.getUrl()), authenticationInfo(repository), proxyInfo(repository));    } else if (repository.getAuthentication() != null) {        wagon.connect(new Repository(repository.getId(), repository.getUrl()), authenticationInfo(repository));    } else if (repository.getProxy() != null) {        wagon.connect(new Repository(repository.getId(), repository.getUrl()), proxyInfo(repository));    } else {        wagon.connect(new Repository(repository.getId(), repository.getUrl()));    }}
private AuthenticationInfo maven_f642_0(ArtifactRepository repository)
{    AuthenticationInfo ai = new AuthenticationInfo();    ai.setUserName(repository.getAuthentication().getUsername());    ai.setPassword(repository.getAuthentication().getPassword());    return ai;}
private ProxyInfo maven_f643_0(ArtifactRepository repository)
{    ProxyInfo proxyInfo = new ProxyInfo();    proxyInfo.setHost(repository.getProxy().getHost());    proxyInfo.setType(repository.getProxy().getProtocol());    proxyInfo.setPort(repository.getProxy().getPort());    proxyInfo.setNonProxyHosts(repository.getProxy().getNonProxyHosts());    proxyInfo.setUserName(repository.getProxy().getUserName());    proxyInfo.setPassword(repository.getProxy().getPassword());    return proxyInfo;}
public voidf644_1ArtifactRepository repository, File destination, String remotePath, TransferListener downloadMonitor, String checksumPolicy, boolean force) throws TransferFailedException, ResourceDoesNotExistException
{    String protocol = repository.getProtocol();    Wagon wagon;    try {        wagon = getWagon(protocol);    } catch (UnsupportedProtocolException e) {        throw new TransferFailedException("Unsupported Protocol: '" + protocol + "': " + e.getMessage(), e);    }    if (downloadMonitor != null) {        wagon.addTransferListener(downloadMonitor);    }    File temp = new File(destination + ".tmp");    temp.deleteOnExit();    boolean downloaded = false;    try {        connectWagon(wagon, repository);        boolean firstRun = true;        boolean retry = true;                while (firstRun || retry) {            ChecksumObserver md5ChecksumObserver = null;            ChecksumObserver sha1ChecksumObserver = null;            try {                                int i = 0;                md5ChecksumObserver = addChecksumObserver(wagon, CHECKSUM_ALGORITHMS[i++]);                sha1ChecksumObserver = addChecksumObserver(wagon, CHECKSUM_ALGORITHMS[i++]);                                retry = false;                                if (destination.exists() && !force) {                    try {                        downloaded = wagon.getIfNewer(remotePath, temp, destination.lastModified());                        if (!downloaded) {                                                        destination.setLastModified(System.currentTimeMillis());                        }                    } catch (UnsupportedOperationException e) {                                                wagon.get(remotePath, temp);                        downloaded = true;                    }                } else {                    wagon.get(remotePath, temp);                    downloaded = true;                }            } finally {                wagon.removeTransferListener(md5ChecksumObserver);                wagon.removeTransferListener(sha1ChecksumObserver);            }            if (downloaded) {                                if (downloadMonitor != null) {                    wagon.removeTransferListener(downloadMonitor);                }                                try {                    verifyChecksum(sha1ChecksumObserver, destination, temp, remotePath, ".sha1", wagon);                } catch (ChecksumFailedException e) {                                        if (firstRun) {                                                retry = true;                    } else {                        handleChecksumFailure(checksumPolicy, e.getMessage(), e.getCause());                    }                } catch (ResourceDoesNotExistException sha1TryException) {                                                            try {                        verifyChecksum(md5ChecksumObserver, destination, temp, remotePath, ".md5", wagon);                    } catch (ChecksumFailedException e) {                                                if (firstRun) {                            retry = true;                        } else {                            handleChecksumFailure(checksumPolicy, e.getMessage(), e.getCause());                        }                    } catch (ResourceDoesNotExistException md5TryException) {                                                handleChecksumFailure(checksumPolicy, "Error retrieving checksum file for " + remotePath, md5TryException);                    }                }                                if (downloadMonitor != null) {                    wagon.addTransferListener(downloadMonitor);                }            }                        firstRun = false;        }    } catch (ConnectionException e) {        throw new TransferFailedException("Connection failed: " + e.getMessage(), e);    } catch (AuthenticationException e) {        throw new TransferFailedException("Authentication failed: " + e.getMessage(), e);    } catch (AuthorizationException e) {        throw new TransferFailedException("Authorization failed: " + e.getMessage(), e);    } finally {                if (downloadMonitor != null) {            wagon.removeTransferListener(downloadMonitor);        }        disconnectWagon(wagon);        releaseWagon(protocol, wagon);    }    if (downloaded) {        if (!temp.exists()) {            throw new ResourceDoesNotExistException("Downloaded file does not exist: " + temp);        }                if (!temp.renameTo(destination)) {            try {                FileUtils.copyFile(temp, destination);                if (!temp.delete()) {                    temp.deleteOnExit();                }            } catch (IOException e) {                throw new TransferFailedException("Error copying temporary file to the final destination: " + e.getMessage(), e);            }        }    }}
public void maven_f645_0(File source, Artifact artifact, ArtifactRepository deploymentRepository, TransferListener downloadMonitor) throws TransferFailedException
{    putRemoteFile(deploymentRepository, source, deploymentRepository.pathOf(artifact), downloadMonitor);}
public voidf646_1File source, ArtifactMetadata artifactMetadata, ArtifactRepository repository) throws TransferFailedException
{        putRemoteFile(repository, source, repository.pathOfRemoteRepositoryMetadata(artifactMetadata), null);}
public void maven_f647_0(ArtifactRepository repository, File source, String remotePath, TransferListener downloadMonitor) throws TransferFailedException
{    String protocol = repository.getProtocol();    Wagon wagon;    try {        wagon = getWagon(protocol);    } catch (UnsupportedProtocolException e) {        throw new TransferFailedException("Unsupported Protocol: '" + protocol + "': " + e.getMessage(), e);    }    if (downloadMonitor != null) {        wagon.addTransferListener(downloadMonitor);    }    Map<String, ChecksumObserver> checksums = new HashMap<>(2);    Map<String, String> sums = new HashMap<>(2);        for (int i = 0; i < CHECKSUM_IDS.length; i++) {        checksums.put(CHECKSUM_IDS[i], addChecksumObserver(wagon, CHECKSUM_ALGORITHMS[i]));    }    List<File> temporaryFiles = new ArrayList<>();    try {        try {            connectWagon(wagon, repository);            wagon.put(source, remotePath);        } finally {            if (downloadMonitor != null) {                wagon.removeTransferListener(downloadMonitor);            }        }                for (String extension : checksums.keySet()) {            ChecksumObserver observer = checksums.get(extension);            sums.put(extension, observer.getActualChecksum());        }                for (String extension : checksums.keySet()) {                        File temp = File.createTempFile("maven-artifact", null);            temp.deleteOnExit();            FileUtils.fileWrite(temp.getAbsolutePath(), "UTF-8", sums.get(extension));            temporaryFiles.add(temp);            wagon.put(temp, remotePath + "." + extension);        }    } catch (ConnectionException e) {        throw new TransferFailedException("Connection failed: " + e.getMessage(), e);    } catch (AuthenticationException e) {        throw new TransferFailedException("Authentication failed: " + e.getMessage(), e);    } catch (AuthorizationException e) {        throw new TransferFailedException("Authorization failed: " + e.getMessage(), e);    } catch (ResourceDoesNotExistException e) {        throw new TransferFailedException("Resource to deploy not found: " + e.getMessage(), e);    } catch (IOException e) {        throw new TransferFailedException("Error creating temporary file for deployment: " + e.getMessage(), e);    } finally {                cleanupTemporaryFiles(temporaryFiles);                for (String id : CHECKSUM_IDS) {            TransferListener checksumListener = checksums.get(id);            if (checksumListener != null) {                wagon.removeTransferListener(checksumListener);            }        }        disconnectWagon(wagon);        releaseWagon(protocol, wagon);    }}
private voidf648_1List<File> files)
{    for (File file : files) {                if (!file.delete()) {                        file.deleteOnExit();        }    }}
private ChecksumObserver maven_f649_0(Wagon wagon, String algorithm) throws TransferFailedException
{    try {        ChecksumObserver checksumObserver = new ChecksumObserver(algorithm);        wagon.addTransferListener(checksumObserver);        return checksumObserver;    } catch (NoSuchAlgorithmException e) {        throw new TransferFailedException("Unable to add checksum for unsupported algorithm " + algorithm, e);    }}
private voidf650_1String checksumPolicy, String message, Throwable cause) throws ChecksumFailedException
{    if (ArtifactRepositoryPolicy.CHECKSUM_POLICY_FAIL.equals(checksumPolicy)) {        throw new ChecksumFailedException(message, cause);    } else if (!ArtifactRepositoryPolicy.CHECKSUM_POLICY_IGNORE.equals(checksumPolicy)) {                    }}
private void maven_f651_0(ChecksumObserver checksumObserver, File destination, File tempDestination, String remotePath, String checksumFileExtension, Wagon wagon) throws ResourceDoesNotExistException, TransferFailedException, AuthorizationException
{    try {                String actualChecksum = checksumObserver.getActualChecksum();        File tempChecksumFile = new File(tempDestination + checksumFileExtension + ".tmp");        tempChecksumFile.deleteOnExit();        wagon.get(remotePath + checksumFileExtension, tempChecksumFile);        String expectedChecksum = FileUtils.fileRead(tempChecksumFile, "UTF-8");                expectedChecksum = expectedChecksum.trim();                if (expectedChecksum.regionMatches(true, 0, "MD", 0, 2) || expectedChecksum.regionMatches(true, 0, "SHA", 0, 3)) {            int lastSpacePos = expectedChecksum.lastIndexOf(' ');            expectedChecksum = expectedChecksum.substring(lastSpacePos + 1);        } else {                        int spacePos = expectedChecksum.indexOf(' ');            if (spacePos != -1) {                expectedChecksum = expectedChecksum.substring(0, spacePos);            }        }        if (expectedChecksum.equalsIgnoreCase(actualChecksum)) {            File checksumFile = new File(destination + checksumFileExtension);            if (checksumFile.exists()) {                                checksumFile.delete();            }            FileUtils.copyFile(tempChecksumFile, checksumFile);            if (!tempChecksumFile.delete()) {                tempChecksumFile.deleteOnExit();            }        } else {            throw new ChecksumFailedException("Checksum failed on download: local = '" + actualChecksum + "'; remote = '" + expectedChecksum + "'");        }    } catch (IOException e) {        throw new ChecksumFailedException("Invalid checksum file", e);    }}
private voidf652_1Wagon wagon)
{    try {        wagon.disconnect();    } catch (ConnectionException e) {            }}
private voidf653_1String protocol, Wagon wagon)
{    try {        container.release(wagon);    } catch (ComponentLifecycleException e) {                    }}
public Wagon maven_f654_0(Repository repository) throws UnsupportedProtocolException
{    return getWagon(repository.getProtocol());}
public Wagon maven_f655_0(String protocol) throws UnsupportedProtocolException
{    if (protocol == null) {        throw new UnsupportedProtocolException("Unspecified protocol");    }    String hint = protocol.toLowerCase(java.util.Locale.ENGLISH);    Wagon wagon;    try {        wagon = container.lookup(Wagon.class, hint);    } catch (ComponentLookupException e) {        throw new UnsupportedProtocolException("Cannot find wagon which supports the requested protocol: " + protocol, e);    }    return wagon;}
public Artifact maven_f656_0(String groupId, String artifactId, String version, String scope, String type)
{    return artifactFactory.createArtifact(groupId, artifactId, version, scope, type);}
public Artifact maven_f657_0(String groupId, String artifactId, String version, String packaging)
{    return artifactFactory.createBuildArtifact(groupId, artifactId, version, packaging);}
public Artifact maven_f658_0(String groupId, String artifactId, String version, String type, String classifier)
{    return artifactFactory.createArtifactWithClassifier(groupId, artifactId, version, type, classifier);}
public Artifact maven_f659_0(String groupId, String artifactId, String metaVersionId)
{    return artifactFactory.createProjectArtifact(groupId, artifactId, metaVersionId);}
public Artifact maven_f662_0(String groupId, String artifactId, String version)
{    return artifactFactory.createParentArtifact(groupId, artifactId, version);}
public ArtifactRepositoryPolicy maven_f664_0(RepositoryPolicy policy)
{    boolean enabled = true;    String updatePolicy = null;    String checksumPolicy = null;    if (policy != null) {        enabled = policy.isEnabled();        if (policy.getUpdatePolicy() != null) {            updatePolicy = policy.getUpdatePolicy();        }        if (policy.getChecksumPolicy() != null) {            checksumPolicy = policy.getChecksumPolicy();        }    }    return new ArtifactRepositoryPolicy(enabled, updatePolicy, checksumPolicy);}
public ArtifactRepository maven_f665_0() throws InvalidRepositoryException
{    return createLocalRepository(RepositorySystem.defaultUserLocalRepository);}
public ArtifactRepository maven_f666_0(File localRepository) throws InvalidRepositoryException
{    return createRepository("file://" + localRepository.toURI().getRawPath(), RepositorySystem.DEFAULT_LOCAL_REPO_ID, true, ArtifactRepositoryPolicy.UPDATE_POLICY_ALWAYS, true, ArtifactRepositoryPolicy.UPDATE_POLICY_ALWAYS, ArtifactRepositoryPolicy.CHECKSUM_POLICY_IGNORE);}
public ArtifactRepository maven_f667_0() throws InvalidRepositoryException
{    return createRepository(RepositorySystem.DEFAULT_REMOTE_REPO_URL, RepositorySystem.DEFAULT_REMOTE_REPO_ID, true, ArtifactRepositoryPolicy.UPDATE_POLICY_DAILY, false, ArtifactRepositoryPolicy.UPDATE_POLICY_DAILY, ArtifactRepositoryPolicy.CHECKSUM_POLICY_WARN);}
public ArtifactRepository maven_f668_0(String url, String repositoryId) throws IOException
{    return createRepository(canonicalFileUrl(url), repositoryId, true, ArtifactRepositoryPolicy.UPDATE_POLICY_ALWAYS, true, ArtifactRepositoryPolicy.UPDATE_POLICY_ALWAYS, ArtifactRepositoryPolicy.CHECKSUM_POLICY_IGNORE);}
private String maven_f669_0(String url) throws IOException
{    if (!url.startsWith("file:")) {        url = "file://" + url;    } else if (url.startsWith("file:") && !url.startsWith("file://")) {        url = "file://" + url.substring("file:".length());    }                        File localRepository = new File(url.substring("file://".length()));    if (!localRepository.isAbsolute()) {        url = "file://" + localRepository.getCanonicalPath();    }    return url;}
public ArtifactResolutionResult maven_f670_0(ArtifactResolutionRequest request)
{    /*         * Probably is not worth it, but here I make sure I restore request         * to its original state.         */    try {        LocalArtifactRepository ideWorkspace = plexus.lookup(LocalArtifactRepository.class, LocalArtifactRepository.IDE_WORKSPACE);        if (request.getLocalRepository() instanceof DelegatingLocalArtifactRepository) {            DelegatingLocalArtifactRepository delegatingLocalRepository = (DelegatingLocalArtifactRepository) request.getLocalRepository();            LocalArtifactRepository orig = delegatingLocalRepository.getIdeWorkspace();            delegatingLocalRepository.setIdeWorkspace(ideWorkspace);            try {                return artifactResolver.resolve(request);            } finally {                delegatingLocalRepository.setIdeWorkspace(orig);            }        } else {            ArtifactRepository localRepository = request.getLocalRepository();            DelegatingLocalArtifactRepository delegatingLocalRepository = new DelegatingLocalArtifactRepository(localRepository);            delegatingLocalRepository.setIdeWorkspace(ideWorkspace);            request.setLocalRepository(delegatingLocalRepository);            try {                return artifactResolver.resolve(request);            } finally {                request.setLocalRepository(localRepository);            }        }    } catch (ComponentLookupException e) {        }    return artifactResolver.resolve(request);}
public List<ArtifactRepository> maven_f671_0(List<ArtifactRepository> repositories)
{    if (repositories == null) {        return null;    }    Map<String, List<ArtifactRepository>> reposByKey = new LinkedHashMap<>();    for (ArtifactRepository repository : repositories) {        String key = repository.getId();        List<ArtifactRepository> aliasedRepos = reposByKey.get(key);        if (aliasedRepos == null) {            aliasedRepos = new ArrayList<>();            reposByKey.put(key, aliasedRepos);        }        aliasedRepos.add(repository);    }    List<ArtifactRepository> effectiveRepositories = new ArrayList<>();    for (List<ArtifactRepository> aliasedRepos : reposByKey.values()) {        List<ArtifactRepository> mirroredRepos = new ArrayList<>();        List<ArtifactRepositoryPolicy> releasePolicies = new ArrayList<>(aliasedRepos.size());        for (ArtifactRepository aliasedRepo : aliasedRepos) {            releasePolicies.add(aliasedRepo.getReleases());            mirroredRepos.addAll(aliasedRepo.getMirroredRepositories());        }        ArtifactRepositoryPolicy releasePolicy = getEffectivePolicy(releasePolicies);        List<ArtifactRepositoryPolicy> snapshotPolicies = new ArrayList<>(aliasedRepos.size());        for (ArtifactRepository aliasedRepo : aliasedRepos) {            snapshotPolicies.add(aliasedRepo.getSnapshots());        }        ArtifactRepositoryPolicy snapshotPolicy = getEffectivePolicy(snapshotPolicies);        ArtifactRepository aliasedRepo = aliasedRepos.get(0);        ArtifactRepository effectiveRepository = createArtifactRepository(aliasedRepo.getId(), aliasedRepo.getUrl(), aliasedRepo.getLayout(), snapshotPolicy, releasePolicy);        effectiveRepository.setAuthentication(aliasedRepo.getAuthentication());        effectiveRepository.setProxy(aliasedRepo.getProxy());        effectiveRepository.setMirroredRepositories(mirroredRepos);        effectiveRepositories.add(effectiveRepository);    }    return effectiveRepositories;}
private ArtifactRepositoryPolicy maven_f672_0(Collection<ArtifactRepositoryPolicy> policies)
{    ArtifactRepositoryPolicy effectivePolicy = null;    for (ArtifactRepositoryPolicy policy : policies) {        if (effectivePolicy == null) {            effectivePolicy = new ArtifactRepositoryPolicy(policy);        } else {            effectivePolicy.merge(policy);        }    }    return effectivePolicy;}
public Mirror maven_f673_0(ArtifactRepository repository, List<Mirror> mirrors)
{    return mirrorSelector.getMirror(repository, mirrors);}
public void maven_f674_0(List<ArtifactRepository> repositories, List<Mirror> mirrors)
{    if (repositories != null && mirrors != null) {        for (ArtifactRepository repository : repositories) {            Mirror mirror = getMirror(repository, mirrors);            injectMirror(repository, mirror);        }    }}
private Mirror maven_f675_0(RepositorySystemSession session, ArtifactRepository repository)
{    if (session != null) {        org.eclipse.aether.repository.MirrorSelector selector = session.getMirrorSelector();        if (selector != null) {            RemoteRepository repo = selector.getMirror(RepositoryUtils.toRepo(repository));            if (repo != null) {                Mirror mirror = new Mirror();                mirror.setId(repo.getId());                mirror.setUrl(repo.getUrl());                mirror.setLayout(repo.getContentType());                return mirror;            }        }    }    return null;}
public void maven_f676_0(RepositorySystemSession session, List<ArtifactRepository> repositories)
{    if (repositories != null && session != null) {        for (ArtifactRepository repository : repositories) {            Mirror mirror = getMirror(session, repository);            injectMirror(repository, mirror);        }    }}
private void maven_f677_0(ArtifactRepository repository, Mirror mirror)
{    if (mirror != null) {        ArtifactRepository original = createArtifactRepository(repository.getId(), repository.getUrl(), repository.getLayout(), repository.getSnapshots(), repository.getReleases());        repository.setMirroredRepositories(Collections.singletonList(original));        repository.setId(mirror.getId());        repository.setUrl(mirror.getUrl());        if (StringUtils.isNotEmpty(mirror.getLayout())) {            repository.setLayout(getLayout(mirror.getLayout()));        }    }}
public voidf678_1List<ArtifactRepository> repositories, List<Server> servers)
{    if (repositories != null) {        Map<String, Server> serversById = new HashMap<>();        if (servers != null) {            for (Server server : servers) {                if (!serversById.containsKey(server.getId())) {                    serversById.put(server.getId(), server);                }            }        }        for (ArtifactRepository repository : repositories) {            Server server = serversById.get(repository.getId());            if (server != null) {                SettingsDecryptionRequest request = new DefaultSettingsDecryptionRequest(server);                SettingsDecryptionResult result = settingsDecrypter.decrypt(request);                server = result.getServer();                if (logger.isDebugEnabled()) {                    for (SettingsProblem problem : result.getProblems()) {                                            }                }                Authentication authentication = new Authentication(server.getUsername(), server.getPassword());                authentication.setPrivateKey(server.getPrivateKey());                authentication.setPassphrase(server.getPassphrase());                repository.setAuthentication(authentication);            } else {                repository.setAuthentication(null);            }        }    }}
private Authentication maven_f679_0(RepositorySystemSession session, ArtifactRepository repository)
{    if (session != null) {        AuthenticationSelector selector = session.getAuthenticationSelector();        if (selector != null) {            RemoteRepository repo = RepositoryUtils.toRepo(repository);            org.eclipse.aether.repository.Authentication auth = selector.getAuthentication(repo);            if (auth != null) {                repo = new RemoteRepository.Builder(repo).setAuthentication(auth).build();                AuthenticationContext authCtx = AuthenticationContext.forRepository(session, repo);                Authentication result = new Authentication(authCtx.get(AuthenticationContext.USERNAME), authCtx.get(AuthenticationContext.PASSWORD));                result.setPrivateKey(authCtx.get(AuthenticationContext.PRIVATE_KEY_PATH));                result.setPassphrase(authCtx.get(AuthenticationContext.PRIVATE_KEY_PASSPHRASE));                authCtx.close();                return result;            }        }    }    return null;}
public void maven_f680_0(RepositorySystemSession session, List<ArtifactRepository> repositories)
{    if (repositories != null && session != null) {        for (ArtifactRepository repository : repositories) {            repository.setAuthentication(getAuthentication(session, repository));        }    }}
private org.apache.maven.settings.Proxy maven_f681_0(ArtifactRepository repository, List<org.apache.maven.settings.Proxy> proxies)
{    if (proxies != null && repository.getProtocol() != null) {        for (org.apache.maven.settings.Proxy proxy : proxies) {            if (proxy.isActive() && repository.getProtocol().equalsIgnoreCase(proxy.getProtocol())) {                if (StringUtils.isNotEmpty(proxy.getNonProxyHosts())) {                    ProxyInfo pi = new ProxyInfo();                    pi.setNonProxyHosts(proxy.getNonProxyHosts());                    org.apache.maven.wagon.repository.Repository repo = new org.apache.maven.wagon.repository.Repository(repository.getId(), repository.getUrl());                    if (!ProxyUtils.validateNonProxyHosts(pi, repo.getHost())) {                        return proxy;                    }                } else {                    return proxy;                }            }        }    }    return null;}
public voidf682_1List<ArtifactRepository> repositories, List<org.apache.maven.settings.Proxy> proxies)
{    if (repositories != null) {        for (ArtifactRepository repository : repositories) {            org.apache.maven.settings.Proxy proxy = getProxy(repository, proxies);            if (proxy != null) {                SettingsDecryptionRequest request = new DefaultSettingsDecryptionRequest(proxy);                SettingsDecryptionResult result = settingsDecrypter.decrypt(request);                proxy = result.getProxy();                if (logger.isDebugEnabled()) {                    for (SettingsProblem problem : result.getProblems()) {                                            }                }                Proxy p = new Proxy();                p.setHost(proxy.getHost());                p.setProtocol(proxy.getProtocol());                p.setPort(proxy.getPort());                p.setNonProxyHosts(proxy.getNonProxyHosts());                p.setUserName(proxy.getUsername());                p.setPassword(proxy.getPassword());                repository.setProxy(p);            } else {                repository.setProxy(null);            }        }    }}
private Proxy maven_f683_0(RepositorySystemSession session, ArtifactRepository repository)
{    if (session != null) {        ProxySelector selector = session.getProxySelector();        if (selector != null) {            RemoteRepository repo = RepositoryUtils.toRepo(repository);            org.eclipse.aether.repository.Proxy proxy = selector.getProxy(repo);            if (proxy != null) {                Proxy p = new Proxy();                p.setHost(proxy.getHost());                p.setProtocol(proxy.getType());                p.setPort(proxy.getPort());                if (proxy.getAuthentication() != null) {                    repo = new RemoteRepository.Builder(repo).setProxy(proxy).build();                    AuthenticationContext authCtx = AuthenticationContext.forProxy(session, repo);                    p.setUserName(authCtx.get(AuthenticationContext.USERNAME));                    p.setPassword(authCtx.get(AuthenticationContext.PASSWORD));                    p.setNtlmDomain(authCtx.get(AuthenticationContext.NTLM_DOMAIN));                    p.setNtlmHost(authCtx.get(AuthenticationContext.NTLM_WORKSTATION));                    authCtx.close();                }                return p;            }        }    }    return null;}
public void maven_f684_0(RepositorySystemSession session, List<ArtifactRepository> repositories)
{    if (repositories != null && session != null) {        for (ArtifactRepository repository : repositories) {            repository.setProxy(getProxy(session, repository));        }    }}
public void maven_f685_0(ArtifactRepository repository, File destination, String remotePath, ArtifactTransferListener transferListener) throws ArtifactTransferFailedException, ArtifactDoesNotExistException
{    try {        wagonManager.getRemoteFile(repository, destination, remotePath, TransferListenerAdapter.newAdapter(transferListener), ArtifactRepositoryPolicy.CHECKSUM_POLICY_WARN, true);    } catch (org.apache.maven.wagon.TransferFailedException e) {        throw new ArtifactTransferFailedException(getMessage(e, "Error transferring artifact."), e);    } catch (org.apache.maven.wagon.ResourceDoesNotExistException e) {        throw new ArtifactDoesNotExistException(getMessage(e, "Requested artifact does not exist."), e);    }}
public void maven_f686_0(ArtifactRepository repository, File source, String remotePath, ArtifactTransferListener transferListener) throws ArtifactTransferFailedException
{    try {        wagonManager.putRemoteFile(repository, source, remotePath, TransferListenerAdapter.newAdapter(transferListener));    } catch (org.apache.maven.wagon.TransferFailedException e) {        throw new ArtifactTransferFailedException(getMessage(e, "Error transferring artifact."), e);    }}
public ArtifactRepository maven_f687_0(Repository repo) throws InvalidRepositoryException
{    if (repo != null) {        String id = repo.getId();        if (StringUtils.isEmpty(id)) {            throw new InvalidRepositoryException("Repository identifier missing", "");        }        String url = repo.getUrl();        if (StringUtils.isEmpty(url)) {            throw new InvalidRepositoryException("URL missing for repository " + id, id);        }        ArtifactRepositoryPolicy snapshots = buildArtifactRepositoryPolicy(repo.getSnapshots());        ArtifactRepositoryPolicy releases = buildArtifactRepositoryPolicy(repo.getReleases());        return createArtifactRepository(id, url, getLayout(repo.getLayout()), snapshots, releases);    } else {        return null;    }}
private ArtifactRepository maven_f688_0(String url, String repositoryId, boolean releases, String releaseUpdates, boolean snapshots, String snapshotUpdates, String checksumPolicy)
{    ArtifactRepositoryPolicy snapshotsPolicy = new ArtifactRepositoryPolicy(snapshots, snapshotUpdates, checksumPolicy);    ArtifactRepositoryPolicy releasesPolicy = new ArtifactRepositoryPolicy(releases, releaseUpdates, checksumPolicy);    return createArtifactRepository(repositoryId, url, null, snapshotsPolicy, releasesPolicy);}
public ArtifactRepository maven_f689_0(String repositoryId, String url, ArtifactRepositoryLayout repositoryLayout, ArtifactRepositoryPolicy snapshots, ArtifactRepositoryPolicy releases)
{    if (repositoryLayout == null) {        repositoryLayout = layouts.get("default");    }    ArtifactRepository artifactRepository = artifactRepositoryFactory.createArtifactRepository(repositoryId, url, repositoryLayout, snapshots, releases);    return artifactRepository;}
private static String maven_f690_0(Throwable error, String def)
{    if (error == null) {        return def;    }    String msg = error.getMessage();    if (StringUtils.isNotEmpty(msg)) {        return msg;    }    return getMessage(error.getCause(), def);}
private ArtifactRepositoryLayout maven_f691_0(String id)
{    ArtifactRepositoryLayout layout = layouts.get(id);    if (layout == null) {        layout = new UnknownRepositoryLayout(id, layouts.get("default"));    }    return layout;}
public String maven_f692_0()
{    return id;}
public String maven_f693_0(Artifact artifact)
{    return fallback.pathOf(artifact);}
public String maven_f694_0(ArtifactMetadata metadata, ArtifactRepository repository)
{    return fallback.pathOfLocalRepositoryMetadata(metadata, repository);}
public String maven_f695_0(ArtifactMetadata metadata)
{    return fallback.pathOfRemoteRepositoryMetadata(metadata);}
public String maven_f696_0()
{    return getId();}
public String maven_f697_0()
{    return repositoryUrl;}
public String maven_f698_0()
{    String name = resource.getName();    if (name == null) {        name = "";    } else if (name.startsWith("/")) {        name = name.substring(1);    }    return name;}
public String maven_f699_0()
{    return getRepositoryUrl() + getName();}
public long maven_f700_0()
{    return resource.getContentLength();}
public long maven_f701_0()
{    return transferStartTime;}
public String maven_f702_0()
{    return getUrl();}
public ArtifactRepositoryLayout maven_f703_0(String layoutId) throws UnknownRepositoryLayoutException
{    return repositoryLayouts.get(layoutId);}
public ArtifactRepository maven_f704_0(String id, String url, String layoutId, boolean uniqueVersion) throws UnknownRepositoryLayoutException
{    ArtifactRepositoryLayout layout = repositoryLayouts.get(layoutId);    checkLayout(id, layoutId, layout);    return createDeploymentArtifactRepository(id, url, layout, uniqueVersion);}
private void maven_f705_0(String repositoryId, String layoutId, ArtifactRepositoryLayout layout) throws UnknownRepositoryLayoutException
{    if (layout == null) {        throw new UnknownRepositoryLayoutException(repositoryId, layoutId);    }}
public ArtifactRepository maven_f706_0(String id, String url, ArtifactRepositoryLayout repositoryLayout, boolean uniqueVersion)
{    return createArtifactRepository(id, url, repositoryLayout, null, null);}
public ArtifactRepository maven_f707_0(String id, String url, String layoutId, ArtifactRepositoryPolicy snapshots, ArtifactRepositoryPolicy releases) throws UnknownRepositoryLayoutException
{    ArtifactRepositoryLayout layout = repositoryLayouts.get(layoutId);    checkLayout(id, layoutId, layout);    return createArtifactRepository(id, url, layout, snapshots, releases);}
public ArtifactRepository maven_f708_0(String id, String url, ArtifactRepositoryLayout repositoryLayout, ArtifactRepositoryPolicy snapshots, ArtifactRepositoryPolicy releases)
{    if (snapshots == null) {        snapshots = new ArtifactRepositoryPolicy();    }    if (releases == null) {        releases = new ArtifactRepositoryPolicy();    }    if (globalUpdatePolicy != null) {        snapshots.setUpdatePolicy(globalUpdatePolicy);        releases.setUpdatePolicy(globalUpdatePolicy);    }    if (globalChecksumPolicy != null) {        snapshots.setChecksumPolicy(globalChecksumPolicy);        releases.setChecksumPolicy(globalChecksumPolicy);    }    ArtifactRepository repository;    if (repositoryLayout instanceof ArtifactRepositoryLayout2) {        repository = ((ArtifactRepositoryLayout2) repositoryLayout).newMavenArtifactRepository(id, url, snapshots, releases);    } else {        repository = new MavenArtifactRepository(id, url, repositoryLayout, snapshots, releases);    }    return repository;}
public void maven_f709_0(String updatePolicy)
{    globalUpdatePolicy = updatePolicy;}
public void maven_f710_0(String checksumPolicy)
{    globalChecksumPolicy = checksumPolicy;}
public ConflictResolver maven_f711_0(String type) throws ConflictResolverNotFoundException
{    try {        return (ConflictResolver) container.lookup(ConflictResolver.ROLE, type);    } catch (ComponentLookupException exception) {        throw new ConflictResolverNotFoundException("Cannot find conflict resolver of type: " + type);    }}
public void maven_f712_0(Context context) throws ContextException
{    container = (PlexusContainer) context.get(PlexusConstants.PLEXUS_KEY);}
public ResolutionNode maven_f713_0(ResolutionNode node1, ResolutionNode node2)
{    return node1.getDepth() >= node2.getDepth() ? node1 : node2;}
public ResolutionNode maven_f714_0(ResolutionNode node1, ResolutionNode node2)
{    return node1.getDepth() <= node2.getDepth() ? node1 : node2;}
public ResolutionNode maven_f715_0(ResolutionNode node1, ResolutionNode node2)
{    try {        ArtifactVersion version1 = node1.getArtifact().getSelectedVersion();        ArtifactVersion version2 = node2.getArtifact().getSelectedVersion();        return version1.compareTo(version2) > 0 ? node1 : node2;    } catch (OverConstrainedVersionException exception) {        return null;    }}
public ResolutionNode maven_f716_0(ResolutionNode node1, ResolutionNode node2)
{    try {        ArtifactVersion version1 = node1.getArtifact().getSelectedVersion();        ArtifactVersion version2 = node2.getArtifact().getSelectedVersion();        return version1.compareTo(version2) <= 0 ? node1 : node2;    } catch (OverConstrainedVersionException exception) {        return null;    }}
private void maven_f717_0(ArtifactResolutionRequest request)
{    MavenSession session = legacySupport.getSession();    if (session != null) {        request.setOffline(session.isOffline());        request.setForceUpdate(session.getRequest().isUpdateSnapshots());        request.setServers(session.getRequest().getServers());        request.setMirrors(session.getRequest().getMirrors());        request.setProxies(session.getRequest().getProxies());    }}
public ArtifactResolutionResult maven_f718_0(Set<Artifact> artifacts, Artifact originatingArtifact, Map<String, Artifact> managedVersions, ArtifactRepository localRepository, List<ArtifactRepository> remoteRepositories, ArtifactMetadataSource source, ArtifactFilter filter, List<ResolutionListener> listeners, List<ConflictResolver> conflictResolvers)
{    ArtifactResolutionRequest request = new ArtifactResolutionRequest();    request.setLocalRepository(localRepository);    request.setRemoteRepositories(remoteRepositories);    injectSession(request);    return collect(artifacts, originatingArtifact, managedVersions, request, source, filter, listeners, conflictResolvers);}
public ArtifactResolutionResultf719_1Set<Artifact> artifacts, Artifact originatingArtifact, Map<String, Artifact> managedVersions, ArtifactResolutionRequest repositoryRequest, ArtifactMetadataSource source, ArtifactFilter filter, List<ResolutionListener> listeners, List<ConflictResolver> conflictResolvers)
{    ArtifactResolutionResult result = new ArtifactResolutionResult();    result.setOriginatingArtifact(originatingArtifact);    if (conflictResolvers == null) {        conflictResolvers = Collections.singletonList(defaultConflictResolver);    }    Map<Object, List<ResolutionNode>> resolvedArtifacts = new LinkedHashMap<>();    ResolutionNode root = new ResolutionNode(originatingArtifact, repositoryRequest.getRemoteRepositories());    try {        root.addDependencies(artifacts, repositoryRequest.getRemoteRepositories(), filter);    } catch (CyclicDependencyException e) {        result.addCircularDependencyException(e);        return result;    } catch (OverConstrainedVersionException e) {        result.addVersionRangeViolation(e);        return result;    }    ManagedVersionMap versionMap = getManagedVersionsMap(originatingArtifact, managedVersions);    try {        recurse(result, root, resolvedArtifacts, versionMap, repositoryRequest, source, filter, listeners, conflictResolvers);    } catch (CyclicDependencyException e) {                result.addCircularDependencyException(e);    } catch (OverConstrainedVersionException e) {                result.addVersionRangeViolation(e);    } catch (ArtifactResolutionException e) {                result.addErrorArtifactException(e);    }    Set<ResolutionNode> set = new LinkedHashSet<>();    for (List<ResolutionNode> nodes : resolvedArtifacts.values()) {        for (ResolutionNode node : nodes) {            if (!node.equals(root) && node.isActive()) {                Artifact artifact = node.getArtifact();                try {                    if (node.filterTrail(filter)) {                                                if (node.isChildOfRootNode() || !artifact.isOptional()) {                            artifact.setDependencyTrail(node.getDependencyTrail());                            set.add(node);                                                        result.addArtifact(artifact);                        }                    }                } catch (OverConstrainedVersionException e) {                    result.addVersionRangeViolation(e);                }            }        }    }    result.setArtifactResolutionNodes(set);    return result;}
private ManagedVersionMap maven_f720_0(Artifact originatingArtifact, Map<String, Artifact> managedVersions)
{    ManagedVersionMap versionMap;    if ((managedVersions != null) && (managedVersions instanceof ManagedVersionMap)) {        versionMap = (ManagedVersionMap) managedVersions;    } else {        versionMap = new ManagedVersionMap(managedVersions);    }        Artifact managedOriginatingArtifact = versionMap.get(originatingArtifact.getDependencyConflictId());    if (managedOriginatingArtifact != null) {                if (managedVersions instanceof ManagedVersionMap) {            /* avoid modifying the managedVersions parameter creating a new map */            versionMap = new ManagedVersionMap(managedVersions);        }        versionMap.remove(originatingArtifact.getDependencyConflictId());    }    return versionMap;}
private void maven_f721_0(ArtifactResolutionResult result, ResolutionNode node, Map<Object, List<ResolutionNode>> resolvedArtifacts, ManagedVersionMap managedVersions, ArtifactResolutionRequest request, ArtifactMetadataSource source, ArtifactFilter filter, List<ResolutionListener> listeners, List<ConflictResolver> conflictResolvers) throws ArtifactResolutionException
{    fireEvent(ResolutionListener.TEST_ARTIFACT, listeners, node);    Object key = node.getKey();        if (managedVersions.containsKey(key)) {        manageArtifact(node, managedVersions, listeners);    }    List<ResolutionNode> previousNodes = resolvedArtifacts.get(key);    if (previousNodes != null) {        for (ResolutionNode previous : previousNodes) {            try {                if (previous.isActive()) {                                        VersionRange previousRange = previous.getArtifact().getVersionRange();                    VersionRange currentRange = node.getArtifact().getVersionRange();                    if ((previousRange != null) && (currentRange != null)) {                                                                                                VersionRange newRange = previousRange.restrict(currentRange);                                                if (newRange.isSelectedVersionKnown(previous.getArtifact())) {                            fireEvent(ResolutionListener.RESTRICT_RANGE, listeners, node, previous.getArtifact(), newRange);                        }                        previous.getArtifact().setVersionRange(newRange);                        node.getArtifact().setVersionRange(currentRange.restrict(previousRange));                                                                                                ResolutionNode[] resetNodes = { previous, node };                        for (int j = 0; j < 2; j++) {                            Artifact resetArtifact = resetNodes[j].getArtifact();                                                        if (resetArtifact.getVersion() == null && resetArtifact.getVersionRange() != null) {                                                                List<ArtifactVersion> versions = resetArtifact.getAvailableVersions();                                if (versions == null) {                                    try {                                        MetadataResolutionRequest metadataRequest = new DefaultMetadataResolutionRequest(request);                                        metadataRequest.setArtifact(resetArtifact);                                        versions = source.retrieveAvailableVersions(metadataRequest);                                        resetArtifact.setAvailableVersions(versions);                                    } catch (ArtifactMetadataRetrievalException e) {                                        resetArtifact.setDependencyTrail(node.getDependencyTrail());                                        throw new ArtifactResolutionException("Unable to get dependency information: " + e.getMessage(), resetArtifact, request.getRemoteRepositories(), e);                                    }                                }                                                                                                ArtifactVersion selectedVersion = resetArtifact.getVersionRange().matchVersion(resetArtifact.getAvailableVersions());                                if (selectedVersion != null) {                                    resetArtifact.selectVersion(selectedVersion.toString());                                } else {                                    throw new OverConstrainedVersionException("Unable to find a version in " + resetArtifact.getAvailableVersions() + " to match the range " + resetArtifact.getVersionRange(), resetArtifact);                                }                                fireEvent(ResolutionListener.SELECT_VERSION_FROM_RANGE, listeners, resetNodes[j]);                            }                        }                    }                                        ResolutionNode resolved = null;                    for (Iterator<ConflictResolver> j = conflictResolvers.iterator(); resolved == null && j.hasNext(); ) {                        ConflictResolver conflictResolver = j.next();                        resolved = conflictResolver.resolveConflict(previous, node);                    }                    if (resolved == null) {                                                ArtifactResolutionException are = new ArtifactResolutionException("Cannot resolve artifact version conflict between " + previous.getArtifact().getVersion() + " and " + node.getArtifact().getVersion(), previous.getArtifact());                        result.addVersionRangeViolation(are);                    }                    if ((resolved != previous) && (resolved != node)) {                                                result.addVersionRangeViolation(new ArtifactResolutionException("Conflict resolver returned unknown resolution node: ", resolved.getArtifact()));                    }                                                            ResolutionNode nearest;                    ResolutionNode farthest;                    if (resolved == previous) {                        nearest = previous;                        farthest = node;                    } else {                        nearest = node;                        farthest = previous;                    }                    if (checkScopeUpdate(farthest, nearest, listeners)) {                                                                        nearest.disable();                        farthest.getArtifact().setVersion(nearest.getArtifact().getVersion());                        fireEvent(ResolutionListener.OMIT_FOR_NEARER, listeners, nearest, farthest.getArtifact());                    } else {                        farthest.disable();                        fireEvent(ResolutionListener.OMIT_FOR_NEARER, listeners, farthest, nearest.getArtifact());                    }                }            } catch (OverConstrainedVersionException e) {                result.addVersionRangeViolation(e);            }        }    } else {        previousNodes = new ArrayList<>();        resolvedArtifacts.put(key, previousNodes);    }    previousNodes.add(node);    if (node.isActive()) {        fireEvent(ResolutionListener.INCLUDE_ARTIFACT, listeners, node);    }        if (node.isActive() && !Artifact.SCOPE_SYSTEM.equals(node.getArtifact().getScope())) {        fireEvent(ResolutionListener.PROCESS_CHILDREN, listeners, node);        Artifact parentArtifact = node.getArtifact();        for (Iterator<ResolutionNode> i = node.getChildrenIterator(); i.hasNext(); ) {            ResolutionNode child = i.next();            try {                                if (!child.isResolved() && (!child.getArtifact().isOptional() || child.isChildOfRootNode())) {                    Artifact artifact = child.getArtifact();                    artifact.setDependencyTrail(node.getDependencyTrail());                    List<ArtifactRepository> childRemoteRepositories = child.getRemoteRepositories();                    MetadataResolutionRequest metadataRequest = new DefaultMetadataResolutionRequest(request);                    metadataRequest.setArtifact(artifact);                    metadataRequest.setRemoteRepositories(childRemoteRepositories);                    try {                        ResolutionGroup rGroup;                        Object childKey;                        do {                            childKey = child.getKey();                            if (managedVersions.containsKey(childKey)) {                                                                                                                                                                                                manageArtifact(child, managedVersions, listeners);                                                                                                                                                                Artifact ma = managedVersions.get(childKey);                                ArtifactFilter managedExclusionFilter = ma.getDependencyFilter();                                if (null != managedExclusionFilter) {                                    if (null != artifact.getDependencyFilter()) {                                        AndArtifactFilter aaf = new AndArtifactFilter();                                        aaf.add(artifact.getDependencyFilter());                                        aaf.add(managedExclusionFilter);                                        artifact.setDependencyFilter(aaf);                                    } else {                                        artifact.setDependencyFilter(managedExclusionFilter);                                    }                                }                            }                            if (artifact.getVersion() == null) {                                                                                                                                ArtifactVersion version;                                if (!artifact.isSelectedVersionKnown()) {                                    List<ArtifactVersion> versions = artifact.getAvailableVersions();                                    if (versions == null) {                                        versions = source.retrieveAvailableVersions(metadataRequest);                                        artifact.setAvailableVersions(versions);                                    }                                    Collections.sort(versions);                                    VersionRange versionRange = artifact.getVersionRange();                                    version = versionRange.matchVersion(versions);                                    if (version == null) {                                        if (versions.isEmpty()) {                                            throw new OverConstrainedVersionException("No versions are present in the repository for the artifact" + " with a range " + versionRange, artifact, childRemoteRepositories);                                        }                                        throw new OverConstrainedVersionException("Couldn't find a version in " + versions + " to match range " + versionRange, artifact, childRemoteRepositories);                                    }                                } else {                                    version = artifact.getSelectedVersion();                                }                                artifact.selectVersion(version.toString());                                fireEvent(ResolutionListener.SELECT_VERSION_FROM_RANGE, listeners, child);                            }                            rGroup = source.retrieve(metadataRequest);                            if (rGroup == null) {                                break;                            }                        } while (!childKey.equals(child.getKey()));                        if (parentArtifact != null && parentArtifact.getDependencyFilter() != null && !parentArtifact.getDependencyFilter().include(artifact)) {                                                        continue;                        }                                                if (rGroup == null) {                                                        continue;                        }                        child.addDependencies(rGroup.getArtifacts(), rGroup.getResolutionRepositories(), filter);                    } catch (CyclicDependencyException e) {                                                fireEvent(ResolutionListener.OMIT_FOR_CYCLE, listeners, new ResolutionNode(e.getArtifact(), childRemoteRepositories, child));                    } catch (ArtifactMetadataRetrievalException e) {                        artifact.setDependencyTrail(node.getDependencyTrail());                        throw new ArtifactResolutionException("Unable to get dependency information for " + artifact.getId() + ": " + e.getMessage(), artifact, childRemoteRepositories, e);                    }                    ArtifactResolutionRequest subRequest = new ArtifactResolutionRequest(metadataRequest);                    subRequest.setServers(request.getServers());                    subRequest.setMirrors(request.getMirrors());                    subRequest.setProxies(request.getProxies());                    recurse(result, child, resolvedArtifacts, managedVersions, subRequest, source, filter, listeners, conflictResolvers);                }            } catch (OverConstrainedVersionException e) {                result.addVersionRangeViolation(e);            } catch (ArtifactResolutionException e) {                result.addMetadataResolutionException(e);            }        }        fireEvent(ResolutionListener.FINISH_PROCESSING_CHILDREN, listeners, node);    }}
private void maven_f722_0(ResolutionNode node, ManagedVersionMap managedVersions, List<ResolutionListener> listeners)
{    Artifact artifact = managedVersions.get(node.getKey());        if ((artifact.getVersion() != null) && (!node.isChildOfRootNode() || node.getArtifact().getVersion() == null)) {        fireEvent(ResolutionListener.MANAGE_ARTIFACT_VERSION, listeners, node, artifact);        node.getArtifact().setVersion(artifact.getVersion());    }    if ((artifact.getScope() != null) && (!node.isChildOfRootNode() || node.getArtifact().getScope() == null)) {        fireEvent(ResolutionListener.MANAGE_ARTIFACT_SCOPE, listeners, node, artifact);        node.getArtifact().setScope(artifact.getScope());    }    if (Artifact.SCOPE_SYSTEM.equals(node.getArtifact().getScope()) && (node.getArtifact().getFile() == null) && (artifact.getFile() != null)) {        fireEvent(ResolutionListener.MANAGE_ARTIFACT_SYSTEM_PATH, listeners, node, artifact);        node.getArtifact().setFile(artifact.getFile());    }}
 boolean maven_f723_0(ResolutionNode farthest, ResolutionNode nearest, List<ResolutionListener> listeners)
{    boolean updateScope = false;    Artifact farthestArtifact = farthest.getArtifact();    Artifact nearestArtifact = nearest.getArtifact();    /* farthest is runtime and nearest has lower priority, change to runtime */    if (Artifact.SCOPE_RUNTIME.equals(farthestArtifact.getScope()) && (Artifact.SCOPE_TEST.equals(nearestArtifact.getScope()) || Artifact.SCOPE_PROVIDED.equals(nearestArtifact.getScope()))) {        updateScope = true;    }    /* farthest is compile and nearest is not (has lower priority), change to compile */    if (Artifact.SCOPE_COMPILE.equals(farthestArtifact.getScope()) && !Artifact.SCOPE_COMPILE.equals(nearestArtifact.getScope())) {        updateScope = true;    }    /* current POM rules all, if nearest is in current pom, do not update its artifactScope */    if ((nearest.getDepth() < 2) && updateScope) {        updateScope = false;        fireEvent(ResolutionListener.UPDATE_SCOPE_CURRENT_POM, listeners, nearest, farthestArtifact);    }    if (updateScope) {        fireEvent(ResolutionListener.UPDATE_SCOPE, listeners, nearest, farthestArtifact);                                        nearestArtifact.setScope(farthestArtifact.getScope());    }    return updateScope;}
private void maven_f724_0(int event, List<ResolutionListener> listeners, ResolutionNode node)
{    fireEvent(event, listeners, node, null);}
private void maven_f725_0(int event, List<ResolutionListener> listeners, ResolutionNode node, Artifact replacement)
{    fireEvent(event, listeners, node, replacement, null);}
private void maven_f726_0(int event, List<ResolutionListener> listeners, ResolutionNode node, Artifact replacement, VersionRange newRange)
{    for (ResolutionListener listener : listeners) {        switch(event) {            case ResolutionListener.TEST_ARTIFACT:                listener.testArtifact(node.getArtifact());                break;            case ResolutionListener.PROCESS_CHILDREN:                listener.startProcessChildren(node.getArtifact());                break;            case ResolutionListener.FINISH_PROCESSING_CHILDREN:                listener.endProcessChildren(node.getArtifact());                break;            case ResolutionListener.INCLUDE_ARTIFACT:                listener.includeArtifact(node.getArtifact());                break;            case ResolutionListener.OMIT_FOR_NEARER:                listener.omitForNearer(node.getArtifact(), replacement);                break;            case ResolutionListener.OMIT_FOR_CYCLE:                listener.omitForCycle(node.getArtifact());                break;            case ResolutionListener.UPDATE_SCOPE:                listener.updateScope(node.getArtifact(), replacement.getScope());                break;            case ResolutionListener.UPDATE_SCOPE_CURRENT_POM:                listener.updateScopeCurrentPom(node.getArtifact(), replacement.getScope());                break;            case ResolutionListener.MANAGE_ARTIFACT_VERSION:                if (listener instanceof ResolutionListenerForDepMgmt) {                    ResolutionListenerForDepMgmt asImpl = (ResolutionListenerForDepMgmt) listener;                    asImpl.manageArtifactVersion(node.getArtifact(), replacement);                } else {                    listener.manageArtifact(node.getArtifact(), replacement);                }                break;            case ResolutionListener.MANAGE_ARTIFACT_SCOPE:                if (listener instanceof ResolutionListenerForDepMgmt) {                    ResolutionListenerForDepMgmt asImpl = (ResolutionListenerForDepMgmt) listener;                    asImpl.manageArtifactScope(node.getArtifact(), replacement);                } else {                    listener.manageArtifact(node.getArtifact(), replacement);                }                break;            case ResolutionListener.MANAGE_ARTIFACT_SYSTEM_PATH:                if (listener instanceof ResolutionListenerForDepMgmt) {                    ResolutionListenerForDepMgmt asImpl = (ResolutionListenerForDepMgmt) listener;                    asImpl.manageArtifactSystemPath(node.getArtifact(), replacement);                } else {                    listener.manageArtifact(node.getArtifact(), replacement);                }                break;            case ResolutionListener.SELECT_VERSION_FROM_RANGE:                listener.selectVersionFromRange(node.getArtifact());                break;            case ResolutionListener.RESTRICT_RANGE:                if (node.getArtifact().getVersionRange().hasRestrictions() || replacement.getVersionRange().hasRestrictions()) {                    listener.restrictRange(node.getArtifact(), replacement, newRange);                }                break;            default:                throw new IllegalStateException("Unknown event: " + event);        }    }}
public ArtifactResolutionResult maven_f727_0(Set<Artifact> artifacts, Artifact originatingArtifact, Map<String, Artifact> managedVersions, ArtifactRepository localRepository, List<ArtifactRepository> remoteRepositories, ArtifactMetadataSource source, ArtifactFilter filter, List<ResolutionListener> listeners)
{    return collect(artifacts, originatingArtifact, managedVersions, localRepository, remoteRepositories, source, filter, listeners, null);}
public ArtifactResolutionResult maven_f728_0(Set<Artifact> artifacts, Artifact originatingArtifact, ArtifactRepository localRepository, List<ArtifactRepository> remoteRepositories, ArtifactMetadataSource source, ArtifactFilter filter, List<ResolutionListener> listeners)
{    return collect(artifacts, originatingArtifact, null, localRepository, remoteRepositories, source, filter, listeners);}
public void maven_f729_0(Artifact artifact, List<ArtifactRepository> remoteRepositories, ArtifactRepository localRepository) throws ArtifactResolutionException, ArtifactNotFoundException
{    RepositoryRequest request = new DefaultRepositoryRequest();    request.setLocalRepository(localRepository);    request.setRemoteRepositories(remoteRepositories);    transformForResolve(artifact, request);}
protected String maven_f730_0(Artifact artifact, ArtifactRepository localRepository, List<ArtifactRepository> remoteRepositories) throws RepositoryMetadataResolutionException
{    RepositoryRequest request = new DefaultRepositoryRequest();    request.setLocalRepository(localRepository);    request.setRemoteRepositories(remoteRepositories);    return resolveVersion(artifact, request);}
protected String maven_f731_0(Artifact artifact, RepositoryRequest request) throws RepositoryMetadataResolutionException
{    RepositoryMetadata metadata;        if (!artifact.isSnapshot() || Artifact.LATEST_VERSION.equals(artifact.getBaseVersion())) {        metadata = new ArtifactRepositoryMetadata(artifact);    } else {        metadata = new SnapshotArtifactRepositoryMetadata(artifact);    }    repositoryMetadataManager.resolve(metadata, request);    artifact.addMetadata(metadata);    Metadata repoMetadata = metadata.getMetadata();    String version = null;    if (repoMetadata != null && repoMetadata.getVersioning() != null) {        version = constructVersion(repoMetadata.getVersioning(), artifact.getBaseVersion());    }    if (version == null) {                version = artifact.getBaseVersion();    }        if (getLogger().isDebugEnabled()) {        if (!version.equals(artifact.getBaseVersion())) {            String message = artifact.getArtifactId() + ": resolved to version " + version;            if (artifact.getRepository() != null) {                message += " from repository " + artifact.getRepository().getId();            } else {                message += " from local repository";            }            getLogger().debug(message);        } else {                        getLogger().debug(artifact.getArtifactId() + ": using locally installed snapshot");        }    }    return version;}
public void maven_f732_0(Artifact artifact, RepositoryRequest request) throws ArtifactResolutionException, ArtifactNotFoundException
{    for (ArtifactTransformation transform : artifactTransformations) {        transform.transformForResolve(artifact, request);    }}
public void maven_f733_0(Artifact artifact, List<ArtifactRepository> remoteRepositories, ArtifactRepository localRepository) throws ArtifactResolutionException, ArtifactNotFoundException
{    for (ArtifactTransformation transform : artifactTransformations) {        transform.transformForResolve(artifact, remoteRepositories, localRepository);    }}
public void maven_f734_0(Artifact artifact, ArtifactRepository localRepository) throws ArtifactInstallationException
{    for (ArtifactTransformation transform : artifactTransformations) {        transform.transformForInstall(artifact, localRepository);    }}
public void maven_f735_0(Artifact artifact, ArtifactRepository remoteRepository, ArtifactRepository localRepository) throws ArtifactDeploymentException
{    for (ArtifactTransformation transform : artifactTransformations) {        transform.transformForDeployment(artifact, remoteRepository, localRepository);    }}
public List<ArtifactTransformation> maven_f736_0()
{    return artifactTransformations;}
public void maven_f737_0(Artifact artifact, RepositoryRequest request) throws ArtifactResolutionException, ArtifactNotFoundException
{    if (Artifact.LATEST_VERSION.equals(artifact.getVersion())) {        try {            String version = resolveVersion(artifact, request);            if (Artifact.LATEST_VERSION.equals(version)) {                throw new ArtifactNotFoundException("Unable to determine the latest version", artifact);            }            artifact.setBaseVersion(version);            artifact.updateVersion(version, request.getLocalRepository());        } catch (RepositoryMetadataResolutionException e) {            throw new ArtifactResolutionException(e.getMessage(), artifact, e);        }    }}
public void maven_f738_0(Artifact artifact, ArtifactRepository localRepository)
{}
public void maven_f739_0(Artifact artifact, ArtifactRepository remoteRepository, ArtifactRepository localRepository)
{}
protected String maven_f740_0(Versioning versioning, String baseVersion)
{    return versioning.getLatest();}
public void maven_f741_0(Artifact artifact, RepositoryRequest request) throws ArtifactResolutionException, ArtifactNotFoundException
{    if (Artifact.RELEASE_VERSION.equals(artifact.getVersion())) {        try {            String version = resolveVersion(artifact, request);            if (Artifact.RELEASE_VERSION.equals(version)) {                throw new ArtifactNotFoundException("Unable to determine the release version", artifact);            }            artifact.setBaseVersion(version);            artifact.updateVersion(version, request.getLocalRepository());        } catch (RepositoryMetadataResolutionException e) {            throw new ArtifactResolutionException(e.getMessage(), artifact, e);        }    }}
public void maven_f742_0(Artifact artifact, ArtifactRepository localRepository)
{    ArtifactMetadata metadata = createMetadata(artifact);    artifact.addMetadata(metadata);}
public void maven_f743_0(Artifact artifact, ArtifactRepository remoteRepository, ArtifactRepository localRepository)
{    ArtifactMetadata metadata = createMetadata(artifact);    artifact.addMetadata(metadata);}
private ArtifactMetadata maven_f744_0(Artifact artifact)
{    Versioning versioning = new Versioning();    versioning.updateTimestamp();    versioning.addVersion(artifact.getVersion());    if (artifact.isRelease()) {        versioning.setRelease(artifact.getVersion());    }    return new ArtifactRepositoryMetadata(artifact, versioning);}
protected String maven_f745_0(Versioning versioning, String baseVersion)
{    return versioning.getRelease();}
public void maven_f746_0(Artifact artifact, RepositoryRequest request) throws ArtifactResolutionException
{        if (artifact.isSnapshot() && artifact.getBaseVersion().equals(artifact.getVersion())) {        try {            String version = resolveVersion(artifact, request);            artifact.updateVersion(version, request.getLocalRepository());        } catch (RepositoryMetadataResolutionException e) {            throw new ArtifactResolutionException(e.getMessage(), artifact, e);        }    }}
public void maven_f747_0(Artifact artifact, ArtifactRepository localRepository)
{    if (artifact.isSnapshot()) {        Snapshot snapshot = new Snapshot();        snapshot.setLocalCopy(true);        RepositoryMetadata metadata = new SnapshotArtifactRepositoryMetadata(artifact, snapshot);        artifact.addMetadata(metadata);    }}
public void maven_f748_0(Artifact artifact, ArtifactRepository remoteRepository, ArtifactRepository localRepository) throws ArtifactDeploymentException
{    if (artifact.isSnapshot()) {        Snapshot snapshot = new Snapshot();        snapshot.setTimestamp(getDeploymentTimestamp());                try {            int buildNumber = resolveLatestSnapshotBuildNumber(artifact, localRepository, remoteRepository);            snapshot.setBuildNumber(buildNumber + 1);        } catch (RepositoryMetadataResolutionException e) {            throw new ArtifactDeploymentException("Error retrieving previous build number for artifact '" + artifact.getDependencyConflictId() + "': " + e.getMessage(), e);        }        RepositoryMetadata metadata = new SnapshotArtifactRepositoryMetadata(artifact, snapshot);        artifact.setResolvedVersion(constructVersion(metadata.getMetadata().getVersioning(), artifact.getBaseVersion()));        artifact.addMetadata(metadata);    }}
public String maven_f749_0()
{    if (deploymentTimestamp == null) {        deploymentTimestamp = getUtcDateFormatter().format(new Date());    }    return deploymentTimestamp;}
protected String maven_f750_0(Versioning versioning, String baseVersion)
{    String version = null;    Snapshot snapshot = versioning.getSnapshot();    if (snapshot != null) {        if (snapshot.getTimestamp() != null && snapshot.getBuildNumber() > 0) {            String newVersion = snapshot.getTimestamp() + "-" + snapshot.getBuildNumber();            version = StringUtils.replace(baseVersion, Artifact.SNAPSHOT_VERSION, newVersion);        } else {            version = baseVersion;        }    }    return version;}
private int maven_f751_0(Artifact artifact, ArtifactRepository localRepository, ArtifactRepository remoteRepository) throws RepositoryMetadataResolutionException
{    RepositoryMetadata metadata = new SnapshotArtifactRepositoryMetadata(artifact);    getLogger().info("Retrieving previous build number from " + remoteRepository.getId());    repositoryMetadataManager.resolveAlways(metadata, localRepository, remoteRepository);    int buildNumber = 0;    Metadata repoMetadata = metadata.getMetadata();    if ((repoMetadata != null) && (repoMetadata.getVersioning() != null && repoMetadata.getVersioning().getSnapshot() != null)) {        buildNumber = repoMetadata.getVersioning().getSnapshot().getBuildNumber();    }    return buildNumber;}
public static DateFormat maven_f752_0()
{    DateFormat utcDateFormatter = new SimpleDateFormat(DEFAULT_SNAPSHOT_TIMESTAMP_FORMAT);    utcDateFormatter.setCalendar(new GregorianCalendar());    utcDateFormatter.setTimeZone(DEFAULT_SNAPSHOT_TIME_ZONE);    return utcDateFormatter;}
public static TransferListener maven_f753_0(ArtifactTransferListener listener)
{    if (listener == null) {        return null;    } else {        return new TransferListenerAdapter(listener);    }}
public void maven_f754_0(String message)
{}
public void maven_f755_0(TransferEvent transferEvent)
{    ArtifactTransferEvent event = wrap(transferEvent);    Long transferred;    synchronized (transfers) {        transferred = transfers.remove(transferEvent.getResource());    }    if (transferred != null) {        event.setTransferredBytes(transferred);    }    synchronized (artifacts) {        artifacts.remove(transferEvent.getResource());    }    listener.transferCompleted(event);}
public void maven_f756_0(TransferEvent transferEvent)
{    synchronized (transfers) {        transfers.remove(transferEvent.getResource());    }    synchronized (artifacts) {        artifacts.remove(transferEvent.getResource());    }}
public void maven_f757_0(TransferEvent transferEvent)
{    listener.transferInitiated(wrap(transferEvent));}
public void maven_f758_0(TransferEvent transferEvent, byte[] buffer, int length)
{    Long transferred;    synchronized (transfers) {        transferred = transfers.get(transferEvent.getResource());        if (transferred == null) {            transferred = (long) length;        } else {            transferred = transferred + length;        }        transfers.put(transferEvent.getResource(), transferred);    }    ArtifactTransferEvent event = wrap(transferEvent);    event.setDataBuffer(buffer);    event.setDataOffset(0);    event.setDataLength(length);    event.setTransferredBytes(transferred);    listener.transferProgress(event);}
public void maven_f759_0(TransferEvent transferEvent)
{    listener.transferStarted(wrap(transferEvent));}
private ArtifactTransferEvent maven_f760_0(TransferEvent event)
{    if (event == null) {        return null;    } else {        String wagon = event.getWagon().getClass().getName();        ArtifactTransferResource artifact = wrap(event.getWagon().getRepository(), event.getResource());        ArtifactTransferEvent evt;        if (event.getException() != null) {            evt = new ArtifactTransferEvent(wagon, event.getException(), event.getRequestType(), artifact);        } else {            evt = new ArtifactTransferEvent(wagon, event.getEventType(), event.getRequestType(), artifact);        }        evt.setLocalFile(event.getLocalFile());        return evt;    }}
private ArtifactTransferResource maven_f761_0(Repository repository, Resource resource)
{    if (resource == null) {        return null;    } else {        synchronized (artifacts) {            ArtifactTransferResource artifact = artifacts.get(resource);            if (artifact == null) {                artifact = new MavenArtifact(repository.getUrl(), resource);                artifacts.put(resource, artifact);            }            return artifact;        }    }}
public final String maven_f762_0()
{    return repositoryId;}
public final String maven_f763_0()
{    return originalMessage;}
public String maven_f764_0()
{    return groupId;}
public void maven_f765_0(String groupId)
{    this.groupId = groupId;}
public String maven_f766_0()
{    return artifactId;}
public void maven_f767_0(String artifactId)
{    this.artifactId = artifactId;}
public String maven_f768_0()
{    return version;}
public void maven_f769_0(String version)
{    this.version = version;}
public String maven_f770_0()
{    return classifier;}
public void maven_f771_0(String classifier)
{    this.classifier = classifier;}
public String maven_f772_0()
{    return type;}
public void maven_f773_0(String type)
{    this.type = type;}
public Object maven_f774_0()
{    return datum;}
public void maven_f775_0(Object datum)
{    this.datum = datum;}
public String maven_f776_0()
{    return scope;}
public void maven_f777_0(String scope)
{    this.scope = scope;}
public String maven_f778_0()
{    return getGroupId() + ":" + getArtifactId() + ":" + getVersion() + ":" + (getClassifier() == null ? "" : getClassifier()) + ":" + (getType() == null ? DEFAULT_TYPE : getType());}
public String maven_f779_0()
{    return groupId + ":" + artifactId + ":" + version;}
public String maven_f780_0()
{    return groupId + ":" + artifactId;}
public String maven_f781_0()
{    return groupId;}
public void maven_f782_0(String groupId)
{    this.groupId = groupId;}
public String maven_f783_0()
{    return artifactId;}
public void maven_f784_0(String name)
{    this.artifactId = name;}
public String maven_f785_0()
{    return version;}
public void maven_f786_0(String version)
{    this.version = version;}
public String maven_f787_0()
{    return type;}
public String maven_f788_0()
{    return type == null ? "jar" : type;}
public void maven_f789_0(String type)
{    this.type = type;}
public ArtifactScopeEnum maven_f790_0()
{    return artifactScope == null ? ArtifactScopeEnum.DEFAULT_SCOPE : artifactScope;}
public void maven_f791_0(ArtifactScopeEnum artifactScope)
{    this.artifactScope = artifactScope;}
public void maven_f792_0(String scope)
{    this.artifactScope = scope == null ? ArtifactScopeEnum.DEFAULT_SCOPE : ArtifactScopeEnum.valueOf(scope);}
public String maven_f793_0()
{    return classifier;}
public void maven_f794_0(String classifier)
{    this.classifier = classifier;}
public boolean maven_f795_0()
{    return resolved;}
public void maven_f796_0(boolean resolved)
{    this.resolved = resolved;}
public String maven_f797_0()
{    return uri;}
public void maven_f798_0(String uri)
{    this.uri = uri;}
public String maven_f799_0()
{    return getArtifactScope().getScope();}
public ArtifactScopeEnum maven_f800_0()
{    return artifactScope == null ? ArtifactScopeEnum.DEFAULT_SCOPE : artifactScope;}
public boolean maven_f801_0()
{    return artifactExists;}
public void maven_f802_0(boolean artifactExists)
{    this.artifactExists = artifactExists;}
public Collection<ArtifactMetadata> maven_f803_0()
{    return dependencies;}
public void maven_f804_0(Collection<ArtifactMetadata> dependencies)
{    this.dependencies = dependencies;}
public String maven_f805_0()
{    return artifactUri;}
public void maven_f806_0(String artifactUri)
{    this.artifactUri = artifactUri;}
public String maven_f807_0()
{    return why;}
public void maven_f808_0(String why)
{    this.why = why;}
public String maven_f809_0()
{    return error;}
public void maven_f810_0(String error)
{    this.error = error;}
public boolean maven_f811_0()
{    return error == null;}
public String maven_f812_0()
{    return groupId + ":" + artifactId;}
public Iterator<ArtifactMetadata> maven_f813_0()
{    return classpath == null ? null : classpath.iterator();}
public ClasspathContainer maven_f814_0(ArtifactMetadata md)
{    if (classpath == null) {        classpath = new ArrayList<>(16);    }    classpath.add(md);    return this;}
public List<ArtifactMetadata> maven_f815_0()
{    return classpath;}
public MetadataTreeNode maven_f816_0() throws MetadataResolutionException
{    if (classpath == null || classpath.size() < 1) {        return null;    }    MetadataTreeNode tree = null;    MetadataTreeNode parent = null;    for (ArtifactMetadata md : classpath) {        MetadataTreeNode node = new MetadataTreeNode(md, parent, md.isResolved(), md.getArtifactScope());        if (tree == null) {            tree = node;        }        if (parent != null) {            parent.setNChildren(1);            parent.addChild(0, node);        }        parent = node;    }    return tree;}
public void maven_f817_0(List<ArtifactMetadata> classpath)
{    this.classpath = classpath;}
public ArtifactScopeEnum maven_f818_0()
{    return scope;}
public void maven_f819_0(ArtifactScopeEnum scope)
{    this.scope = scope;}
public String maven_f820_0()
{    StringBuilder sb = new StringBuilder(256);    sb.append("[scope=").append(scope.getScope());    if (classpath != null) {        for (ArtifactMetadata md : classpath) {            sb.append(": ").append(md.toString()).append('{').append(md.getArtifactUri()).append('}');        }    }    sb.append(']');    return sb.toString();}
public ClasspathContainer maven_f821_0(MetadataGraph dirtyGraph, ArtifactScopeEnum scope, boolean resolve) throws MetadataGraphTransformationException
{    try {        if (dirtyGraph == null || dirtyGraph.isEmpty()) {            return null;        }        MetadataGraph cleanGraph = conflictResolver.resolveConflicts(dirtyGraph, scope);        if (cleanGraph == null || cleanGraph.isEmpty()) {            return null;        }        ClasspathContainer cpc = new ClasspathContainer(scope);        if (cleanGraph.isEmptyEdges()) {                        ArtifactMetadata amd = cleanGraph.getEntry().getMd();            cpc.add(amd);        } else {            ClasspathGraphVisitor v = new ClasspathGraphVisitor(cleanGraph, cpc);            MetadataGraphVertex entry = cleanGraph.getEntry();                        v.visit(entry);        }        return cpc;    } catch (GraphConflictResolutionException e) {        throw new MetadataGraphTransformationException(e);    }}
protected void maven_f822_0(MetadataGraphVertex node)
{    ArtifactMetadata md = node.getMd();    if (visited.contains(node)) {        return;    }    cpc.add(md);                                                                                    List<MetadataGraphEdge> exits = graph.getExcidentEdges(node);    if (exits != null && exits.size() > 0) {        MetadataGraphEdge[] sortedExits = exits.toArray(new MetadataGraphEdge[0]);        Arrays.sort(sortedExits, new Comparator<MetadataGraphEdge>() {            public int compare(MetadataGraphEdge e1, MetadataGraphEdge e2) {                if (e1.getDepth() == e2.getDepth()) {                    if (e2.getPomOrder() == e1.getPomOrder()) {                        return e1.getTarget().toString().compareTo(e2.getTarget().toString());                    }                    return e2.getPomOrder() - e1.getPomOrder();                }                return e2.getDepth() - e1.getDepth();            }        });        for (MetadataGraphEdge e : sortedExits) {            MetadataGraphVertex targetNode = e.getTarget();            targetNode.getMd().setArtifactScope(e.getScope());            targetNode.getMd().setWhy(e.getSource().getMd().toString());            visit(targetNode);        }    }}
public int maven_f823_0(MetadataGraphEdge e1, MetadataGraphEdge e2)
{    if (e1.getDepth() == e2.getDepth()) {        if (e2.getPomOrder() == e1.getPomOrder()) {            return e1.getTarget().toString().compareTo(e2.getTarget().toString());        }        return e2.getPomOrder() - e1.getPomOrder();    }    return e2.getDepth() - e1.getDepth();}
public MetadataGraphEdge maven_f824_0(MetadataGraphEdge e1, MetadataGraphEdge e2)
{    int depth1 = e1.getDepth();    int depth2 = e2.getDepth();    if (depth1 == depth2) {        ArtifactVersion v1 = new DefaultArtifactVersion(e1.getVersion());        ArtifactVersion v2 = new DefaultArtifactVersion(e2.getVersion());        if (newerFirst) {            return v1.compareTo(v2) > 0 ? e1 : e2;        }        return v1.compareTo(v2) > 0 ? e2 : e1;    }    if (closerFirst) {        return depth1 < depth2 ? e1 : e2;    }    return depth1 < depth2 ? e2 : e1;}
public MetadataGraph maven_f825_0(MetadataGraph graph, ArtifactScopeEnum scope) throws GraphConflictResolutionException
{    if (policy == null) {        throw new GraphConflictResolutionException("no GraphConflictResolutionPolicy injected");    }    if (graph == null) {        return null;    }    final MetadataGraphVertex entry = graph.getEntry();    if (entry == null) {        return null;    }    if (graph.isEmpty()) {        throw new GraphConflictResolutionException("graph with an entry, but not vertices do not exist");    }    if (graph.isEmptyEdges()) {                return null;    }    final TreeSet<MetadataGraphVertex> vertices = graph.getVertices();    try {                if (vertices.size() == 1) {            return new MetadataGraph(entry);        }        final ArtifactScopeEnum requestedScope = ArtifactScopeEnum.checkScope(scope);        MetadataGraph res = new MetadataGraph(vertices.size());        res.setVersionedVertices(false);        res.setScopedVertices(false);        MetadataGraphVertex resEntry = res.addVertex(entry.getMd());        res.setEntry(resEntry);        res.setScope(requestedScope);        for (MetadataGraphVertex v : vertices) {            final List<MetadataGraphEdge> ins = graph.getIncidentEdges(v);            final MetadataGraphEdge edge = cleanEdges(v, ins, requestedScope);            if (edge == null) {                                if (entry.equals(v)) {                                                            res.getEntry().getMd().setWhy("This is a graph entry point. No links.");                } else {                                                                                                }            } else {                                                ArtifactMetadata md = v.getMd();                ArtifactMetadata newMd = new ArtifactMetadata(md.getGroupId(), md.getArtifactId(), edge.getVersion(), md.getType(), md.getScopeAsEnum(), md.getClassifier(), edge.getArtifactUri(), edge.getSource() == null ? "" : edge.getSource().getMd().toString(), edge.isResolved(), edge.getTarget() == null ? null : edge.getTarget().getMd().getError());                MetadataGraphVertex newV = res.addVertex(newMd);                MetadataGraphVertex sourceV = res.addVertex(edge.getSource().getMd());                res.addEdge(sourceV, newV, edge);            }        }        MetadataGraph linkedRes = findLinkedSubgraph(res);                return linkedRes;    } catch (MetadataResolutionException e) {        throw new GraphConflictResolutionException(e);    }}
private MetadataGraph maven_f826_0(MetadataGraph g)
{    if (g.getVertices().size() == 1) {        return g;    }    List<MetadataGraphVertex> visited = new ArrayList<>(g.getVertices().size());    visit(g.getEntry(), visited, g);    List<MetadataGraphVertex> dropList = new ArrayList<>(g.getVertices().size());        for (MetadataGraphVertex v : g.getVertices()) {        if (!visited.contains(v)) {            dropList.add(v);        }    }    if (dropList.size() < 1) {        return g;    }        TreeSet<MetadataGraphVertex> vertices = g.getVertices();    for (MetadataGraphVertex v : dropList) {        vertices.remove(v);    }    return g;}
private void maven_f827_0(MetadataGraphVertex from, List<MetadataGraphVertex> visited, MetadataGraph graph)
{    if (visited.contains(from)) {        return;    }    visited.add(from);    List<MetadataGraphEdge> exitList = graph.getExcidentEdges(from);        if (exitList != null && exitList.size() > 0) {        for (MetadataGraphEdge e : graph.getExcidentEdges(from)) {            visit(e.getTarget(), visited, graph);        }    }}
private MetadataGraphEdge maven_f828_0(MetadataGraphVertex v, List<MetadataGraphEdge> edges, ArtifactScopeEnum scope)
{    if (edges == null || edges.isEmpty()) {        return null;    }    if (edges.size() == 1) {        MetadataGraphEdge e = edges.get(0);        if (scope.encloses(e.getScope())) {            return e;        }        return null;    }    MetadataGraphEdge res = null;    for (MetadataGraphEdge e : edges) {        if (!scope.encloses(e.getScope())) {            continue;        }        if (res == null) {            res = e;        } else {            res = policy.apply(e, res);        }    }    return res;}
private void maven_f829_0(MetadataGraphVertex parentVertex, MetadataTreeNode node, int depth, int pomOrder) throws MetadataResolutionException
{    if (node == null) {        return;    }    MetadataGraphVertex vertex = new MetadataGraphVertex(node.md, versionedVertices, scopedVertices);    if (!vertices.contains(vertex)) {        vertices.add(vertex);    }    if (    parentVertex != null) {        ArtifactMetadata md = node.getMd();        MetadataGraphEdge e = new MetadataGraphEdge(md.version, md.resolved, md.artifactScope, md.artifactUri, depth, pomOrder);        addEdge(parentVertex, vertex, e);    } else {        entry = vertex;    }    MetadataTreeNode[] kids = node.getChildren();    if (kids == null || kids.length < 1) {        return;    }    for (int i = 0; i < kids.length; i++) {        MetadataTreeNode n = kids[i];        processTreeNodes(vertex, n, depth + 1, i);    }}
public MetadataGraphVertex maven_f830_0(ArtifactMetadata md)
{    if (md == null || vertices == null || vertices.size() < 1) {        return null;    }    MetadataGraphVertex v = new MetadataGraphVertex(md);    v.setCompareVersion(versionedVertices);    v.setCompareScope(scopedVertices);    for (MetadataGraphVertex gv : vertices) {        if (gv.equals(v)) {            return gv;        }    }    return null;}
public MetadataGraphVertex maven_f831_0(ArtifactMetadata md)
{    if (md == null) {        return null;    }    checkVertices();    MetadataGraphVertex v = findVertex(md);    if (v != null) {        return v;    }    v = new MetadataGraphVertex(md);    v.setCompareVersion(versionedVertices);    v.setCompareScope(scopedVertices);    vertices.add(v);    return v;}
private void maven_f832_0(int nVertices, int nEdges)
{    int nV = nVertices;    if (nVertices < 1) {        nV = 1;    }    checkVertices(nV);    int nE = nVertices;    if (nEdges <= nV) {        nE = 2 * nE;    }    checkEdges(nE);}
private void maven_f833_0()
{    checkVertices(DEFAULT_VERTICES);}
private void maven_f834_0(int nVertices)
{    if (vertices == null) {        vertices = new TreeSet<>();    }}
private void maven_f835_0()
{    int count = DEFAULT_EDGES;    if (vertices != null) {        count = vertices.size() + vertices.size() / 2;    }    checkEdges(count);}
private void maven_f836_0(int nEdges)
{    if (incidentEdges == null) {        incidentEdges = new HashMap<>(nEdges);    }    if (excidentEdges == null) {        excidentEdges = new HashMap<>(nEdges);    }}
private static void maven_f837_0(MetadataGraphVertex v) throws MetadataResolutionException
{    if (v == null) {        throw new MetadataResolutionException("null vertex");    }    if (v.getMd() == null) {        throw new MetadataResolutionException("vertex without metadata");    }}
private static void maven_f838_0(MetadataGraphEdge e) throws MetadataResolutionException
{    if (e == null) {        throw new MetadataResolutionException("badly formed edge");    }}
public List<MetadataGraphEdge> maven_f839_0(MetadataGraphVertex vFrom, MetadataGraphVertex vTo)
{    List<MetadataGraphEdge> edges = getIncidentEdges(vTo);    if (edges == null || edges.isEmpty()) {        return null;    }    List<MetadataGraphEdge> res = new ArrayList<>(edges.size());    for (MetadataGraphEdge e : edges) {        if (e.getSource().equals(vFrom)) {            res.add(e);        }    }    return res;}
public MetadataGraph maven_f840_0(MetadataGraphVertex vFrom, MetadataGraphVertex vTo, MetadataGraphEdge e) throws MetadataResolutionException
{    checkVertex(vFrom);    checkVertex(vTo);    checkVertices();    checkEdge(e);    checkEdges();    e.setSource(vFrom);    e.setTarget(vTo);    vFrom.setCompareVersion(versionedVertices);    vFrom.setCompareScope(scopedVertices);    List<MetadataGraphEdge> exList = excidentEdges.get(vFrom);    if (exList == null) {        exList = new ArrayList<>();        excidentEdges.put(vFrom, exList);    }    if (!exList.contains(e)) {        exList.add(e);    }    List<MetadataGraphEdge> inList = incidentEdges.get(vTo);    if (inList == null) {        inList = new ArrayList<>();        incidentEdges.put(vTo, inList);    }    if (!inList.contains(e)) {        inList.add(e);    }    return this;}
public MetadataGraph maven_f841_0(MetadataGraphVertex v)
{    if (vertices != null && v != null) {        vertices.remove(v);    }    if (incidentEdges != null) {        incidentEdges.remove(v);    }    if (excidentEdges != null) {        excidentEdges.remove(v);    }    return this;}
private static int maven_f842_0(MetadataTreeNode tree)
{    if (tree == null) {        return 0;    }    int count = 1;    MetadataTreeNode[] kids = tree.getChildren();    if (kids == null || kids.length < 1) {        return count;    }    for (MetadataTreeNode n : kids) {        count += countNodes(n);    }    return count;}
public MetadataGraphVertex maven_f843_0()
{    return entry;}
public void maven_f844_0(MetadataGraphVertex entry)
{    this.entry = entry;}
public TreeSet<MetadataGraphVertex> maven_f845_0()
{    return vertices;}
public List<MetadataGraphEdge> maven_f846_0(MetadataGraphVertex vertex)
{    checkEdges();    return incidentEdges.get(vertex);}
public List<MetadataGraphEdge> maven_f847_0(MetadataGraphVertex vertex)
{    checkEdges();    return excidentEdges.get(vertex);}
public boolean maven_f848_0()
{    return versionedVertices;}
public void maven_f849_0(boolean versionedVertices)
{    this.versionedVertices = versionedVertices;}
public boolean maven_f850_0()
{    return scopedVertices;}
public void maven_f851_0(boolean scopedVertices)
{    this.scopedVertices = scopedVertices;        if (scopedVertices) {        versionedVertices = true;    }}
public ArtifactScopeEnum maven_f852_0()
{    return scope;}
public void maven_f853_0(ArtifactScopeEnum scope)
{    this.scope = scope;}
public boolean maven_f854_0()
{    return entry == null || vertices == null || vertices.isEmpty();}
public boolean maven_f855_0()
{    return isEmpty() || incidentEdges == null || incidentEdges.isEmpty();}
public String maven_f856_0()
{    StringBuilder sb = new StringBuilder(512);    if (isEmpty()) {        return "empty";    }    for (MetadataGraphVertex v : vertices) {        sb.append("Vertex:  ").append(v.getMd().toString()).append('\n');        List<MetadataGraphEdge> ins = getIncidentEdges(v);        if (ins != null) {            for (MetadataGraphEdge e : ins) {                sb.append("       from :  ").append(e.toString()).append('\n');            }        } else {            sb.append("      no entries\n");        }        List<MetadataGraphEdge> outs = getExcidentEdges(v);        if (outs != null) {            for (MetadataGraphEdge e : outs) {                sb.append("        to :  ").append(e.toString()).append('\n');            }        } else {            sb.append("      no exit\n");        }        sb.append("-------------------------------------------------\n");    }    sb.append("=============================================================\n");    return sb.toString();}
private static boolean maven_f857_0(Object o1, Object o2)
{    if (o1 == null && o2 == null) {        return true;    }    if (o1 == null || o2 == null) {                return false;    }    return o1.equals(o2);}
public boolean maven_f858_0(Object o)
{    if (o instanceof MetadataGraphEdge) {        MetadataGraphEdge e = (MetadataGraphEdge) o;        return objectsEqual(version, e.version) && ArtifactScopeEnum.checkScope(scope).getScope().equals(ArtifactScopeEnum.checkScope(e.scope).getScope()) && depth == e.depth;    }    return false;}
public String maven_f859_0()
{    return version;}
public void maven_f860_0(String version)
{    this.version = version;}
public ArtifactScopeEnum maven_f861_0()
{    return scope;}
public void maven_f862_0(ArtifactScopeEnum scope)
{    this.scope = scope;}
public int maven_f863_0()
{    return depth;}
public void maven_f864_0(int depth)
{    this.depth = depth;}
public boolean maven_f865_0()
{    return resolved;}
public void maven_f866_0(boolean resolved)
{    this.resolved = resolved;}
public int maven_f867_0()
{    return pomOrder;}
public void maven_f868_0(int pomOrder)
{    this.pomOrder = pomOrder;}
public String maven_f869_0()
{    return artifactUri;}
public void maven_f870_0(String artifactUri)
{    this.artifactUri = artifactUri;}
public MetadataGraphVertex maven_f871_0()
{    return source;}
public void maven_f872_0(MetadataGraphVertex source)
{    this.source = source;}
public MetadataGraphVertex maven_f873_0()
{    return target;}
public void maven_f874_0(MetadataGraphVertex target)
{    this.target = target;}
public String maven_f875_0()
{    return "[ " + "FROM:(" + (source == null ? "no source" : (source.md == null ? "no source MD" : source.md.toString())) + ") " + "TO:(" + (target == null ? "no target" : (target.md == null ? "no target MD" : target.md.toString())) + ") " + "version=" + version + ", scope=" + (scope == null ? "null" : scope.getScope()) + ", depth=" + depth + "]";}
public ArtifactMetadata maven_f876_0()
{    return md;}
public void maven_f877_0(ArtifactMetadata md)
{    this.md = md;}
public boolean maven_f878_0()
{    return compareVersion;}
public void maven_f879_0(boolean compareVersion)
{    this.compareVersion = compareVersion;}
public boolean maven_f880_0()
{    return compareScope;}
public void maven_f881_0(boolean compareScope)
{    this.compareScope = compareScope;}
public String maven_f882_0()
{    return "[" + (md == null ? "no metadata" : md.toString()) + "]";}
private static int maven_f883_0(String s1, String s2)
{    if (s1 == null && s2 == null) {        return 0;    }    if (s1 == null) /* && s2 != null */    {        return -1;    }    if (/* s1 != null && */    s2 == null) {        return 1;    }    return s1.compareTo(s2);}
public int maven_f884_0(MetadataGraphVertex vertex)
{    if (vertex == null || vertex.getMd() == null) {        return 1;    }    ArtifactMetadata vmd = vertex.getMd();    if (vmd == null) {        if (md == null) {            return 0;        } else {            return 1;        }    }    int g = compareStrings(md.groupId, vmd.groupId);    if (g == 0) {        int a = compareStrings(md.artifactId, vmd.artifactId);        if (a == 0) {            if (compareVersion) {                int v = compareStrings(md.version, vmd.version);                if (v == 0) {                    if (compareScope) {                        String s1 = ArtifactScopeEnum.checkScope(md.artifactScope).getScope();                        String s2 = ArtifactScopeEnum.checkScope(vmd.artifactScope).getScope();                        return s1.compareTo(s2);                    } else {                        return 0;                    }                } else {                    return v;                }            } else {                return 0;            }        } else {            return a;        }    }    return g;}
public boolean maven_f885_0(Object vo)
{    if (vo == null || !(vo instanceof MetadataGraphVertex)) {        return false;    }    return compareTo((MetadataGraphVertex) vo) == 0;}
public int maven_f886_0()
{    if (md == null) {        return super.hashCode();    }    StringBuilder hashString = new StringBuilder(128);    hashString.append(md.groupId).append('|');    hashString.append(md.artifactId).append('|');    if (compareVersion) {        hashString.append(md.version).append('|');    }    if (compareScope) {        hashString.append(md.getArtifactScope()).append('|');    }    return hashString.toString().hashCode();}
public Collection<ArtifactRepository> maven_f887_0()
{    return metadataRepositories;}
public void maven_f888_0(Collection<ArtifactRepository> metadataRepositories)
{    this.metadataRepositories = metadataRepositories;}
public ArtifactMetadata maven_f889_0()
{    return artifactMetadata;}
public void maven_f890_0(ArtifactMetadata artifactMetadata)
{    this.artifactMetadata = artifactMetadata;}
public ArtifactMetadata maven_f891_0()
{    return query;}
public void maven_f892_0(ArtifactMetadata query)
{    this.query = query;}
public ArtifactRepository maven_f893_0()
{    return localRepository;}
public void maven_f894_0(ArtifactRepository localRepository)
{    this.localRepository = localRepository;}
public List<ArtifactRepository> maven_f895_0()
{    return remoteRepositories;}
public void maven_f896_0(List<ArtifactRepository> remoteRepositories)
{    this.remoteRepositories = remoteRepositories;}
 int maven_f897_0()
{    return id;}
public MetadataTreeNode maven_f898_0()
{    return treeRoot;}
public void maven_f899_0(MetadataTreeNode root)
{    this.treeRoot = root;}
public void maven_f900_0(PlexusContainer plexus) throws ComponentLookupException
{    classpathTransformation = plexus.lookup(ClasspathTransformation.class);    conflictResolver = plexus.lookup(GraphConflictResolver.class);}
public MetadataGraph maven_f901_0() throws MetadataResolutionException
{    return treeRoot == null ? null : new MetadataGraph(treeRoot);}
public MetadataGraph maven_f902_0(ArtifactScopeEnum scope) throws MetadataResolutionException, GraphConflictResolutionException
{    if (treeRoot == null) {        return null;    }    if (conflictResolver == null) {        return null;    }    return conflictResolver.resolveConflicts(getGraph(), scope);}
public MetadataGraph maven_f903_0(MetadataResolutionRequestTypeEnum requestType) throws MetadataResolutionException, GraphConflictResolutionException
{    if (requestType == null) {        return null;    }    if (treeRoot == null) {        return null;    }    if (conflictResolver == null) {        return null;    }    if (requestType.equals(MetadataResolutionRequestTypeEnum.classpathCompile)) {        return conflictResolver.resolveConflicts(getGraph(), ArtifactScopeEnum.compile);    } else if (requestType.equals(MetadataResolutionRequestTypeEnum.classpathRuntime)) {        return conflictResolver.resolveConflicts(getGraph(), ArtifactScopeEnum.runtime);    } else if (requestType.equals(MetadataResolutionRequestTypeEnum.classpathTest)) {        return conflictResolver.resolveConflicts(getGraph(), ArtifactScopeEnum.test);    } else if (requestType.equals(MetadataResolutionRequestTypeEnum.graph)) {        return getGraph();    } else if (requestType.equals(MetadataResolutionRequestTypeEnum.versionedGraph)) {        return new MetadataGraph(getTree(), true, false);    } else if (requestType.equals(MetadataResolutionRequestTypeEnum.scopedGraph)) {        return new MetadataGraph(getTree(), true, true);    }    return null;}
public ClasspathContainer maven_f904_0(ArtifactScopeEnum scope) throws MetadataGraphTransformationException, MetadataResolutionException
{    if (classpathTransformation == null) {        return null;    }    MetadataGraph dirtyGraph = getGraph();    if (dirtyGraph == null) {        return null;    }    return classpathTransformation.transform(dirtyGraph, scope, false);}
public MetadataTreeNode maven_f905_0(ArtifactScopeEnum scope) throws MetadataGraphTransformationException, MetadataResolutionException
{    ClasspathContainer cpc = getClasspath(scope);    if (cpc == null) {        return null;    }    return cpc.getClasspathAsTree();}
public ArtifactMetadata maven_f906_0()
{    return artifact;}
public int maven_f907_0()
{    return nChildren;}
public void maven_f908_0(int children)
{    nChildren = children;}
public void maven_f909_0(int index, MetadataTreeNode kid)
{    if (kid == null) {        return;    }    if (children == null) {        children = new MetadataTreeNode[nChildren];    }    children[index % nChildren] = kid;}
public String maven_f910_0()
{    return md == null ? "no metadata" : md.toString();}
public String maven_f911_0() throws MetadataResolutionException
{    if (md == null) {        throw new MetadataResolutionException("treenode without metadata, parent: " + (parent == null ? "null" : parent.toString()));    }    return md.groupId + ":" + md.artifactId;}
public boolean maven_f912_0()
{    return children != null;}
public ArtifactMetadata maven_f913_0()
{    return md;}
public void maven_f914_0(ArtifactMetadata md)
{    this.md = md;}
public MetadataTreeNode maven_f915_0()
{    return parent;}
public void maven_f916_0(MetadataTreeNode parent)
{    this.parent = parent;}
public MetadataTreeNode[] maven_f917_0()
{    return children;}
public void maven_f918_0(MetadataTreeNode[] children)
{    this.children = children;}
public void maven_f919_0(MetadataGraphNode node)
{    nodes.add(node);}
public MetadataGraphNode maven_f920_0(MavenArtifactMetadata md)
{    for (MetadataGraphNode mgn : nodes) {        if (mgn.metadata.equals(md)) {            return mgn;        }    }    MetadataGraphNode node = new MetadataGraphNode(md);    addNode(node);    return node;}
public MetadataGraphNode maven_f921_0()
{    return entry;}
public Collection<MetadataGraphNode> maven_f922_0()
{    return nodes;}
public MetadataGraphNode maven_f923_0(MetadataGraphNode node)
{    inNodes.add(node);    return this;}
public MetadataGraphNode maven_f924_0(MetadataGraphNode node)
{    exNodes.add(node);    return this;}
public boolean maven_f925_0(Object obj)
{    if (obj == null) {        return false;    }    if (MetadataGraphNode.class.isAssignableFrom(obj.getClass())) {        MetadataGraphNode node2 = (MetadataGraphNode) obj;        if (node2.metadata == null) {            return metadata == null;        }        return metadata != null && metadata.toString().equals(node2.metadata.toString());    } else {        return super.equals(obj);    }}
public int maven_f926_0()
{    if (metadata == null) {        return super.hashCode();    }    return metadata.toString().hashCode();}
public MavenArtifactMetadata maven_f927_0()
{    return mad;}
public MetadataResolutionRequest maven_f928_0(MavenArtifactMetadata md)
{    this.mad = md;    return this;}
public MetadataResolutionRequest maven_f929_0(Set<Artifact> artifactDependencies)
{    this.artifactDependencies = artifactDependencies;    return this;}
public Set<Artifact> maven_f930_0()
{    return artifactDependencies;}
public ArtifactRepository maven_f931_0()
{    return localRepository;}
public MetadataResolutionRequest maven_f932_0(ArtifactRepository localRepository)
{    this.localRepository = localRepository;    return this;}
public List<ArtifactRepository> maven_f933_0()
{    return remoteRepositories;}
public List<ArtifactRepository> maven_f934_0()
{    return getRemoteRepostories();}
public MetadataResolutionRequest maven_f935_0(List<ArtifactRepository> remoteRepostories)
{    this.remoteRepositories = remoteRepostories;    return this;}
public MetadataResolutionRequest maven_f936_0(List<ArtifactRepository> remoteRepositories)
{    return setRemoteRepostories(remoteRepositories);}
public Map maven_f937_0()
{    return managedVersionMap;}
public MetadataResolutionRequest maven_f938_0(Map managedVersionMap)
{    this.managedVersionMap = managedVersionMap;    return this;}
public String maven_f939_0()
{    StringBuilder sb = new StringBuilder().append("REQUEST: ").append("\n").append("artifact: ").append(mad).append("\n").append(artifactDependencies).append("\n").append("localRepository: ").append(localRepository).append("\n").append("remoteRepositories: ").append(remoteRepositories).append("\n");    return sb.toString();}
public boolean maven_f940_0()
{    return asList;}
public MetadataResolutionRequest maven_f941_0(boolean asList)
{    this.asList = asList;    return this;}
public boolean maven_f942_0()
{    return asDirtyTree;}
public MetadataResolutionRequest maven_f943_0(boolean asDirtyTree)
{    this.asDirtyTree = asDirtyTree;    return this;}
public boolean maven_f944_0()
{    return asResolvedTree;}
public MetadataResolutionRequest maven_f945_0(boolean asResolvedTree)
{    this.asResolvedTree = asResolvedTree;    return this;}
public boolean maven_f946_0()
{    return asGraph;}
public MetadataResolutionRequest maven_f947_0(boolean asGraph)
{    this.asGraph = asGraph;    return this;}
public MetadataResolutionRequest maven_f948_0(String scope)
{    this.scope = scope;    return this;}
public String maven_f949_0()
{    return scope;}
public Artifact maven_f950_0()
{    return originatingArtifact;}
public MetadataResolutionResult maven_f951_0(final Artifact originatingArtifact)
{    this.originatingArtifact = originatingArtifact;    return this;}
public void maven_f952_0(Artifact artifact)
{    if (artifacts == null) {        artifacts = new LinkedHashSet<>();    }    artifacts.add(artifact);}
public Set<Artifact> maven_f953_0()
{    return artifacts;}
public void maven_f954_0(Artifact artifact)
{    if (requestedArtifacts == null) {        requestedArtifacts = new LinkedHashSet<>();    }    requestedArtifacts.add(artifact);}
public Set<Artifact> maven_f955_0()
{    return requestedArtifacts;}
public boolean maven_f956_0()
{    return missingArtifacts != null && !missingArtifacts.isEmpty();}
public List<Artifact> maven_f957_0()
{    return missingArtifacts == null ? Collections.<Artifact>emptyList() : Collections.unmodifiableList(missingArtifacts);}
public MetadataResolutionResult maven_f958_0(Artifact artifact)
{    missingArtifacts = initList(missingArtifacts);    missingArtifacts.add(artifact);    return this;}
public MetadataResolutionResult maven_f959_0(final List<Artifact> unresolvedArtifacts)
{    this.missingArtifacts = unresolvedArtifacts;    return this;}
public boolean maven_f960_0()
{    return exceptions != null && !exceptions.isEmpty();}
public List<Exception> maven_f961_0()
{    return exceptions == null ? Collections.<Exception>emptyList() : Collections.unmodifiableList(exceptions);}
public boolean maven_f962_0()
{    return versionRangeViolations != null;}
public MetadataResolutionResult maven_f963_0(Exception e)
{    versionRangeViolations = initList(versionRangeViolations);    versionRangeViolations.add(e);    exceptions = initList(exceptions);    exceptions.add(e);    return this;}
public OverConstrainedVersionException maven_f964_0(int i)
{    return (OverConstrainedVersionException) versionRangeViolations.get(i);}
public List<Exception> maven_f965_0()
{    return versionRangeViolations == null ? Collections.<Exception>emptyList() : Collections.unmodifiableList(versionRangeViolations);}
public boolean maven_f966_0()
{    return metadataResolutionExceptions != null;}
public MetadataResolutionResult maven_f967_0(ArtifactResolutionException e)
{    metadataResolutionExceptions = initList(metadataResolutionExceptions);    metadataResolutionExceptions.add(e);    exceptions = initList(exceptions);    exceptions.add(e);    return this;}
public ArtifactResolutionException maven_f968_0(int i)
{    return metadataResolutionExceptions.get(i);}
public List<ArtifactResolutionException> maven_f969_0()
{    return metadataResolutionExceptions == null ? Collections.<ArtifactResolutionException>emptyList() : Collections.unmodifiableList(metadataResolutionExceptions);}
public boolean maven_f970_0()
{    return errorArtifactExceptions != null;}
public MetadataResolutionResult maven_f971_0(Exception e)
{    exceptions = initList(exceptions);    exceptions.add(e);    return this;}
public List<ArtifactResolutionException> maven_f972_0()
{    if (errorArtifactExceptions == null) {        return Collections.emptyList();    }    return Collections.unmodifiableList(errorArtifactExceptions);}
public boolean maven_f973_0()
{    return circularDependencyExceptions != null;}
public MetadataResolutionResult maven_f974_0(CyclicDependencyException e)
{    circularDependencyExceptions = initList(circularDependencyExceptions);    circularDependencyExceptions.add(e);    exceptions = initList(exceptions);    exceptions.add(e);    return this;}
public CyclicDependencyException maven_f975_0(int i)
{    return circularDependencyExceptions.get(i);}
public List<CyclicDependencyException> maven_f976_0()
{    if (circularDependencyExceptions == null) {        return Collections.emptyList();    }    return Collections.unmodifiableList(circularDependencyExceptions);}
public List<ArtifactRepository> maven_f977_0()
{    if (repositories == null) {        return Collections.emptyList();    }    return Collections.unmodifiableList(repositories);}
public MetadataResolutionResult maven_f978_0(final List<ArtifactRepository> repositories)
{    this.repositories = repositories;    return this;}
private List<T> maven_f979_0(final List<T> l)
{    if (l == null) {        return new ArrayList<>();    }    return l;}
public String maven_f980_0()
{    if (artifacts == null) {        return "";    }    StringBuilder sb = new StringBuilder(256);    int i = 1;    sb.append("---------\n");    sb.append(artifacts.size()).append('\n');    for (Artifact a : artifacts) {        sb.append(i).append(' ').append(a).append('\n');        i++;    }    sb.append("---------\n");    return sb.toString();}
public MetadataGraph maven_f981_0()
{    return resolvedTree;}
public void maven_f982_0(MetadataGraph resolvedTree)
{    this.resolvedTree = resolvedTree;}
public Artifact maven_f983_0(Artifact artifact)
{    File artifactFile = new File(localRepository.getBasedir(), pathOf(artifact));            artifact.setFile(artifactFile);    return artifact;}
public String maven_f984_0()
{    return localRepository.getId();}
public String maven_f985_0(ArtifactMetadata metadata, ArtifactRepository repository)
{    return localRepository.pathOfLocalRepositoryMetadata(metadata, repository);}
public String maven_f986_0(Artifact artifact)
{    return localRepository.pathOf(artifact);}
public boolean maven_f987_0()
{    return true;}
private static String maven_f988_0(Dependency dependency)
{    return "Dependency: " + ArtifactUtils.versionlessKey(dependency.getGroupId(), dependency.getArtifactId());}
public Dependency maven_f989_0()
{    return dependency;}
public String maven_f990_0()
{    return projectId;}
public File maven_f991_0()
{    return pomFile;}
public InvalidVersionSpecificationException maven_f992_0()
{    return cause;}
public static Map<String, Expression> maven_f993_0() throws ExpressionDocumentationException
{    if (expressionDocumentation == null) {        expressionDocumentation = new HashMap<>();        ClassLoader docLoader = initializeDocLoader();        for (String root : EXPRESSION_ROOTS) {            try (InputStream docStream = docLoader.getResourceAsStream(EXPRESSION_DOCO_ROOTPATH + root + ".paramdoc.xml")) {                if (docStream != null) {                    Map<String, Expression> doco = parseExpressionDocumentation(docStream);                    expressionDocumentation.putAll(doco);                }            } catch (IOException e) {                throw new ExpressionDocumentationException("Failed to read documentation for expression root: " + root, e);            } catch (XmlPullParserException e) {                throw new ExpressionDocumentationException("Failed to parse documentation for expression root: " + root, e);            }        }    }    return expressionDocumentation;}
private static Map<String, Expression> maven_f994_0(InputStream docStream) throws IOException, XmlPullParserException
{    Reader reader = new BufferedReader(ReaderFactory.newXmlReader(docStream));    ParamdocXpp3Reader paramdocReader = new ParamdocXpp3Reader();    ExpressionDocumentation documentation = paramdocReader.read(reader, true);    List<Expression> expressions = documentation.getExpressions();    Map<String, Expression> bySyntax = new HashMap<>();    if (expressions != null && !expressions.isEmpty()) {        for (Expression expression : expressions) {            bySyntax.put(expression.getSyntax(), expression);        }    }    return bySyntax;}
private static ClassLoader maven_f995_0() throws ExpressionDocumentationException
{    String myResourcePath = ExpressionDocumenter.class.getName().replace('.', '/') + ".class";    URL myResource = ExpressionDocumenter.class.getClassLoader().getResource(myResourcePath);    assert myResource != null : "The resource is this class itself loaded by its own classloader and must exist";    String myClasspathEntry = myResource.getPath();    myClasspathEntry = myClasspathEntry.substring(0, myClasspathEntry.length() - (myResourcePath.length() + 2));    if (myClasspathEntry.startsWith("file:")) {        myClasspathEntry = myClasspathEntry.substring("file:".length());    }    URL docResource;    try {        docResource = new File(myClasspathEntry).toURL();    } catch (MalformedURLException e) {        throw new ExpressionDocumentationException("Cannot construct expression documentation classpath" + " resource base.", e);    }    return new URLClassLoader(new URL[] { docResource });}
protected void maven_f996_0(ContainerConfiguration containerConfiguration)
{    super.customizeContainerConfiguration(containerConfiguration);    containerConfiguration.setAutoWiring(true);    containerConfiguration.setClassPathScanning(PlexusConstants.SCANNING_INDEX);}
protected void maven_f997_0() throws Exception
{    super.setUp();    artifactFactory = lookup(ArtifactFactory.class);    artifactRepositoryFactory = lookup(ArtifactRepositoryFactory.class);    RepositorySystemSession repoSession = initRepoSession();    MavenSession session = new MavenSession(getContainer(), repoSession, new DefaultMavenExecutionRequest(), new DefaultMavenExecutionResult());    LegacySupport legacySupport = lookup(LegacySupport.class);    legacySupport.setSession(session);}
protected void maven_f998_0() throws Exception
{    release(artifactFactory);    super.tearDown();}
protected ArtifactRepository maven_f999_0() throws Exception
{    String path = "target/test-repositories/" + component() + "/bad-local-repository";    File f = new File(getBasedir(), path);    f.createNewFile();    ArtifactRepositoryLayout repoLayout = (ArtifactRepositoryLayout) lookup(ArtifactRepositoryLayout.ROLE, "default");    return artifactRepositoryFactory.createArtifactRepository("test", "file://" + f.getPath(), repoLayout, null, null);}
protected String maven_f1000_0()
{    return "default";}
protected ArtifactRepository maven_f1001_0() throws Exception
{    String path = "target/test-repositories/" + component() + "/local-repository";    File f = new File(getBasedir(), path);    ArtifactRepositoryLayout repoLayout = (ArtifactRepositoryLayout) lookup(ArtifactRepositoryLayout.ROLE, "default");    return artifactRepositoryFactory.createArtifactRepository("local", "file://" + f.getPath(), repoLayout, null, null);}
protected ArtifactRepository maven_f1002_0() throws Exception
{    String path = "target/test-repositories/" + component() + "/remote-repository";    File f = new File(getBasedir(), path);    ArtifactRepositoryLayout repoLayout = (ArtifactRepositoryLayout) lookup(ArtifactRepositoryLayout.ROLE, "default");    return artifactRepositoryFactory.createArtifactRepository("test", "file://" + f.getPath(), repoLayout, new ArtifactRepositoryPolicy(), new ArtifactRepositoryPolicy());}
protected ArtifactRepository maven_f1003_0() throws Exception
{    ArtifactRepositoryLayout repoLayout = (ArtifactRepositoryLayout) lookup(ArtifactRepositoryLayout.ROLE, "default");    return artifactRepositoryFactory.createArtifactRepository("test", "http://foo.bar/repository", repoLayout, null, null);}
protected void maven_f1004_0(Artifact artifact) throws Exception
{    ArtifactRepository remoteRepo = remoteRepository();    String path = remoteRepo.pathOf(artifact);    File file = new File(remoteRepo.getBasedir(), path);    if (!file.exists()) {        fail("Remote artifact " + file + " should be present.");    }}
protected void maven_f1005_0(Artifact artifact) throws Exception
{    ArtifactRepository localRepo = localRepository();    String path = localRepo.pathOf(artifact);    File file = new File(localRepo.getBasedir(), path);    if (!file.exists()) {        fail("Local artifact " + file + " should be present.");    }}
protected void maven_f1006_0(Artifact artifact) throws Exception
{    ArtifactRepository remoteRepo = remoteRepository();    String path = remoteRepo.pathOf(artifact);    File file = new File(remoteRepo.getBasedir(), path);    if (file.exists()) {        fail("Remote artifact " + file + " should not be present.");    }}
protected void maven_f1007_0(Artifact artifact) throws Exception
{    ArtifactRepository localRepo = localRepository();    String path = localRepo.pathOf(artifact);    File file = new File(localRepo.getBasedir(), path);    if (file.exists()) {        fail("Local artifact " + file + " should not be present.");    }}
protected List<ArtifactRepository> maven_f1008_0() throws Exception
{    List<ArtifactRepository> remoteRepositories = new ArrayList<>();    remoteRepositories.add(remoteRepository());    return remoteRepositories;}
protected Artifact maven_f1009_0(String artifactId, String version) throws Exception
{    Artifact artifact = createArtifact(artifactId, version);    createArtifact(artifact, localRepository());    return artifact;}
protected Artifact maven_f1010_0(String artifactId, String version) throws Exception
{    Artifact artifact = createArtifact(artifactId, version);    createArtifact(artifact, remoteRepository());    return artifact;}
protected void maven_f1011_0(Artifact artifact) throws Exception
{    createArtifact(artifact, localRepository());}
protected void maven_f1012_0(Artifact artifact) throws Exception
{    createArtifact(artifact, remoteRepository());}
protected void maven_f1013_0(Artifact artifact, ArtifactRepository repository) throws Exception
{    String path = repository.pathOf(artifact);    File artifactFile = new File(repository.getBasedir(), path);    if (!artifactFile.getParentFile().exists()) {        artifactFile.getParentFile().mkdirs();    }    try (Writer writer = new OutputStreamWriter(new FileOutputStream(artifactFile), "ISO-8859-1")) {        writer.write(artifact.getId());    }}
protected Artifact maven_f1014_0(String artifactId, String version) throws Exception
{    return createArtifact(artifactId, version, "jar");}
protected Artifact maven_f1015_0(String artifactId, String version, String type) throws Exception
{    return createArtifact("org.apache.maven", artifactId, version, type);}
protected Artifact maven_f1016_0(String groupId, String artifactId, String version, String type) throws Exception
{    Artifact a = artifactFactory.createBuildArtifact(groupId, artifactId, version, type);    return a;}
protected void maven_f1017_0(Artifact artifact) throws Exception
{    deleteArtifact(artifact, localRepository());}
protected void maven_f1018_0(Artifact artifact, ArtifactRepository repository) throws Exception
{    String path = repository.pathOf(artifact);    File artifactFile = new File(repository.getBasedir(), path);    if (artifactFile.exists()) {        if (!artifactFile.delete()) {            throw new IOException("Failure while attempting to delete artifact " + artifactFile);        }    }}
protected RepositorySystemSession maven_f1019_0() throws Exception
{    DefaultRepositorySystemSession session = new DefaultRepositorySystemSession();    session.setArtifactDescriptorPolicy(new SimpleArtifactDescriptorPolicy(true, true));    DependencyTraverser depTraverser = new FatArtifactTraverser();    session.setDependencyTraverser(depTraverser);    DependencyManager depManager = new ClassicDependencyManager();    session.setDependencyManager(depManager);    DependencySelector depFilter = new AndDependencySelector(new ScopeDependencySelector("test", "provided"), new OptionalDependencySelector(), new ExclusionDependencySelector());    session.setDependencySelector(depFilter);    DependencyGraphTransformer transformer = new ConflictResolver(new NearestVersionSelector(), new JavaScopeSelector(), new SimpleOptionalitySelector(), new JavaScopeDeriver());    transformer = new ChainedDependencyGraphTransformer(transformer, new JavaDependencyContextRefiner());    session.setDependencyGraphTransformer(transformer);    LocalRepository localRepo = new LocalRepository(localRepository().getBasedir());    session.setLocalRepositoryManager(new SimpleLocalRepositoryManagerFactory().newInstance(session, localRepo));    return session;}
protected void maven_f1020_0() throws Exception
{    super.setUp();    artifactDeployer = (ArtifactDeployer) lookup(ArtifactDeployer.ROLE);}
protected String maven_f1021_0()
{    return "deployer";}
public void maven_f1022_0() throws Exception
{    String artifactBasedir = new File(getBasedir(), "src/test/resources/artifact-install").getAbsolutePath();    Artifact artifact = createArtifact("artifact", "1.0");    File file = new File(artifactBasedir, "artifact-1.0.jar");    assertEquals("dummy", FileUtils.fileRead(file, "UTF-8").trim());    artifactDeployer.deploy(file, artifact, remoteRepository(), localRepository());    ArtifactRepository remoteRepository = remoteRepository();    File deployedFile = new File(remoteRepository.getBasedir(), remoteRepository.pathOf(artifact));    assertTrue(deployedFile.exists());    assertEquals("dummy", FileUtils.fileRead(deployedFile, "UTF-8").trim());}
public ResolutionGroup maven_f1023_0(Artifact artifact, ArtifactRepository localRepository, List<ArtifactRepository> remoteRepositories) throws ArtifactMetadataRetrievalException
{    throw new UnsupportedOperationException("Cannot retrieve metadata in this test case");}
public List<ArtifactVersion> maven_f1024_0(Artifact artifact, ArtifactRepository localRepository, List<ArtifactRepository> remoteRepositories) throws ArtifactMetadataRetrievalException
{    return Collections.<ArtifactVersion>singletonList(new DefaultArtifactVersion("10.1.3"));}
public List<ArtifactVersion> maven_f1025_0(Artifact artifact, ArtifactRepository localRepository, ArtifactRepository remoteRepository) throws ArtifactMetadataRetrievalException
{    return Collections.<ArtifactVersion>singletonList(new DefaultArtifactVersion("10.1.3"));}
public ResolutionGroup maven_f1026_0(MetadataResolutionRequest request) throws ArtifactMetadataRetrievalException
{    return retrieve(request.getArtifact(), request.getLocalRepository(), request.getRemoteRepositories());}
public void maven_f1027_0() throws Exception
{    ArtifactFactory factory = (ArtifactFactory) lookup(ArtifactFactory.ROLE);    Artifact artifact = factory.createDependencyArtifact("test-grp", "test-artifact", VersionRange.createFromVersion("1.0"), "type", null, "system", "provided");    Artifact artifact2 = factory.createDependencyArtifact("test-grp", "test-artifact-2", VersionRange.createFromVersion("1.0"), "type", null, "system", "test");    Artifact artifact3 = factory.createDependencyArtifact("test-grp", "test-artifact-3", VersionRange.createFromVersion("1.0"), "type", null, "system", "runtime");    Artifact artifact4 = factory.createDependencyArtifact("test-grp", "test-artifact-4", VersionRange.createFromVersion("1.0"), "type", null, "system", "compile");        Artifact artifact5 = factory.createDependencyArtifact("test-grp", "test-artifact-5", VersionRange.createFromVersion("1.0"), "type", null, "system", "system");    assertEquals("system", artifact.getScope());    assertEquals("system", artifact2.getScope());    assertEquals("system", artifact3.getScope());    assertEquals("system", artifact4.getScope());    assertEquals("system", artifact5.getScope());}
protected void maven_f1028_0() throws Exception
{    super.setUp();    artifactInstaller = (ArtifactInstaller) lookup(ArtifactInstaller.ROLE);}
protected String maven_f1029_0()
{    return "installer";}
public void maven_f1030_0() throws Exception
{    String artifactBasedir = new File(getBasedir(), "src/test/resources/artifact-install").getAbsolutePath();    Artifact artifact = createArtifact("artifact", "1.0");    File source = new File(artifactBasedir, "artifact-1.0.jar");    artifactInstaller.install(source, artifact, localRepository());    assertLocalArtifactPresent(artifact);}
public ResolutionGroup maven_f1031_0(Artifact artifact, ArtifactRepository localRepository, List<ArtifactRepository> remoteRepositories) throws ArtifactMetadataRetrievalException
{    Set<Artifact> dependencies = new HashSet<>();    if ("g".equals(artifact.getArtifactId())) {        Artifact a = null;        try {            a = factory.createBuildArtifact("org.apache.maven", "h", "1.0", "jar");            dependencies.add(a);        } catch (Exception e) {            throw new ArtifactMetadataRetrievalException("Error retrieving metadata", e, a);        }    }    if ("i".equals(artifact.getArtifactId())) {        Artifact a = null;        try {            a = factory.createBuildArtifact("org.apache.maven", "j", "1.0-SNAPSHOT", "jar");            dependencies.add(a);        } catch (Exception e) {            throw new ArtifactMetadataRetrievalException("Error retrieving metadata", e, a);        }    }    return new ResolutionGroup(artifact, dependencies, remoteRepositories);}
public List<ArtifactVersion> maven_f1032_0(Artifact artifact, ArtifactRepository localRepository, List<ArtifactRepository> remoteRepositories) throws ArtifactMetadataRetrievalException
{    throw new UnsupportedOperationException("Cannot get available versions in this test case");}
public List<ArtifactVersion> maven_f1033_0(Artifact artifact, ArtifactRepository localRepository, ArtifactRepository remoteRepository) throws ArtifactMetadataRetrievalException
{    throw new UnsupportedOperationException("Cannot get available versions in this test case");}
public ResolutionGroup maven_f1034_0(MetadataResolutionRequest request) throws ArtifactMetadataRetrievalException
{    return retrieve(request.getArtifact(), request.getLocalRepository(), request.getRemoteRepositories());}
public List<ArtifactVersion> maven_f1035_0(MetadataResolutionRequest request) throws ArtifactMetadataRetrievalException
{    return retrieveAvailableVersions(request.getArtifact(), request.getLocalRepository(), request.getRemoteRepositories());}
public String maven_f1036_0()
{    return id;}
public void maven_f1037_0()
{    MavenArtifactRepositorySubclass r1 = new MavenArtifactRepositorySubclass("foo");    MavenArtifactRepositorySubclass r2 = new MavenArtifactRepositorySubclass("foo");    MavenArtifactRepositorySubclass r3 = new MavenArtifactRepositorySubclass("bar");    assertTrue(r1.hashCode() == r2.hashCode());    assertFalse(r1.hashCode() == r3.hashCode());    assertTrue(r1.equals(r2));    assertTrue(r2.equals(r1));    assertFalse(r1.equals(r3));    assertFalse(r3.equals(r1));}
public void maven_f1038_0()
{    String message = "Missing artifact";    String indentation = "  ";    String groupId = "aGroupId";    String artifactId = "anArtifactId";    String version = "aVersion";    String type = "jar";    String classifier = "aClassifier";    String downloadUrl = "http://somewhere.com/download";    List<String> path = Arrays.asList("dependency1", "dependency2");    String expected = "Missing artifact" + LS + LS + "  Try downloading the file manually from: " + LS + "      http://somewhere.com/download" + LS + LS + "  Then, install it using the command: " + LS + "      mvn install:install-file -DgroupId=aGroupId -DartifactId=anArtifactId -Dversion=aVersion " + "-Dclassifier=aClassifier -Dpackaging=jar -Dfile=/path/to/file" + LS + LS + "  Alternatively, if you host your own repository you can deploy the file there: " + LS + "      mvn deploy:deploy-file -DgroupId=aGroupId -DartifactId=anArtifactId" + " -Dversion=aVersion -Dclassifier=aClassifier -Dpackaging=jar -Dfile=/path/to/file" + " -Durl=[url] -DrepositoryId=[id]" + LS + LS + "  Path to dependency: " + LS + "  \t1) dependency1" + LS + "  \t2) dependency2" + LS + LS;    String actual = AbstractArtifactResolutionException.constructMissingArtifactMessage(message, indentation, groupId, artifactId, version, type, classifier, downloadUrl, path);    assertEquals(expected, actual);}
protected void maven_f1039_0() throws Exception
{    super.setUp();    artifactResolver = (DefaultArtifactResolver) lookup(ArtifactResolver.class);    projectArtifact = createLocalArtifact("project", "3.0");}
protected void maven_f1040_0() throws Exception
{    artifactFactory = null;    projectArtifact = null;    super.tearDown();}
protected String maven_f1041_0()
{    return "resolver";}
public void maven_f1042_0() throws Exception
{    Artifact a = createLocalArtifact("a", "1.0");    artifactResolver.resolve(a, remoteRepositories(), localRepository());    assertLocalArtifactPresent(a);}
public void maven_f1043_0() throws Exception
{    Artifact b = createRemoteArtifact("b", "1.0-SNAPSHOT");    deleteLocalArtifact(b);    artifactResolver.resolve(b, remoteRepositories(), localRepository());    assertLocalArtifactPresent(b);}
protected Artifact maven_f1044_0(String groupId, String artifactId, String version, String type) throws Exception
{        return super.createArtifact(groupId, artifactId, version, type);}
public void maven_f1045_0() throws Exception
{    Artifact g = createLocalArtifact("g", "1.0");    Artifact h = createLocalArtifact("h", "1.0");    ArtifactResolutionResult result = artifactResolver.resolveTransitively(Collections.singleton(g), projectArtifact, remoteRepositories(), localRepository(), null);    printErrors(result);    assertEquals(2, result.getArtifacts().size());    assertTrue(result.getArtifacts().contains(g));    assertTrue(result.getArtifacts().contains(h));    assertLocalArtifactPresent(g);    assertLocalArtifactPresent(h);}
public void maven_f1046_0() throws Exception
{    Artifact i = createRemoteArtifact("i", "1.0-SNAPSHOT");    deleteLocalArtifact(i);    Artifact j = createRemoteArtifact("j", "1.0-SNAPSHOT");    deleteLocalArtifact(j);    ArtifactResolutionResult result = artifactResolver.resolveTransitively(Collections.singleton(i), projectArtifact, remoteRepositories(), localRepository(), null);    printErrors(result);    assertEquals(2, result.getArtifacts().size());    assertTrue(result.getArtifacts().contains(i));    assertTrue(result.getArtifacts().contains(j));    assertLocalArtifactPresent(i);    assertLocalArtifactPresent(j);}
public void maven_f1047_0() throws Exception
{    Artifact k = createArtifact("k", "1.0");    try {        artifactResolver.resolve(k, remoteRepositories(), localRepository());        fail("Resolution succeeded when it should have failed");    } catch (ArtifactNotFoundException expected) {        assertTrue(true);    }}
public void maven_f1048_0() throws Exception
{    Artifact l = createRemoteArtifact("l", "1.0-SNAPSHOT");    deleteLocalArtifact(l);    List<ArtifactRepository> repositories = new ArrayList<>();    repositories.add(remoteRepository());    repositories.add(badRemoteRepository());    artifactResolver.resolve(l, repositories, localRepository());    assertLocalArtifactPresent(l);}
public void maven_f1049_0() throws Exception
{    Artifact m = createLocalArtifact("m", "1.0");    Artifact n = createLocalArtifact("n", "1.0");    ArtifactMetadataSource mds = new ArtifactMetadataSource() {        public ResolutionGroup retrieve(Artifact artifact, ArtifactRepository localRepository, List<ArtifactRepository> remoteRepositories) throws ArtifactMetadataRetrievalException {            Set<Artifact> dependencies = new HashSet<>();            return new ResolutionGroup(artifact, dependencies, remoteRepositories);        }        public List<ArtifactVersion> retrieveAvailableVersions(Artifact artifact, ArtifactRepository localRepository, List<ArtifactRepository> remoteRepositories) throws ArtifactMetadataRetrievalException {            throw new UnsupportedOperationException("Cannot get available versions in this test case");        }        public List<ArtifactVersion> retrieveAvailableVersionsFromDeploymentRepository(Artifact artifact, ArtifactRepository localRepository, ArtifactRepository remoteRepository) throws ArtifactMetadataRetrievalException {            throw new UnsupportedOperationException("Cannot get available versions in this test case");        }        public ResolutionGroup retrieve(MetadataResolutionRequest request) throws ArtifactMetadataRetrievalException {            return retrieve(request.getArtifact(), request.getLocalRepository(), request.getRemoteRepositories());        }        public List<ArtifactVersion> retrieveAvailableVersions(MetadataResolutionRequest request) throws ArtifactMetadataRetrievalException {            return retrieveAvailableVersions(request.getArtifact(), request.getLocalRepository(), request.getRemoteRepositories());        }    };    ArtifactResolutionResult result = null;    Set<Artifact> set = new LinkedHashSet<>();    set.add(n);    set.add(m);    result = artifactResolver.resolveTransitively(set, projectArtifact, remoteRepositories(), localRepository(), mds);    printErrors(result);    Iterator<Artifact> i = result.getArtifacts().iterator();    assertEquals("n should be first", n, i.next());    assertEquals("m should be second", m, i.next());        set = new LinkedHashSet<>();    set.add(m);    set.add(n);    result = artifactResolver.resolveTransitively(set, projectArtifact, remoteRepositories(), localRepository(), mds);    printErrors(result);    i = result.getArtifacts().iterator();    assertEquals("m should be first", m, i.next());    assertEquals("n should be second", n, i.next());}
public ResolutionGroup maven_f1050_0(Artifact artifact, ArtifactRepository localRepository, List<ArtifactRepository> remoteRepositories) throws ArtifactMetadataRetrievalException
{    Set<Artifact> dependencies = new HashSet<>();    return new ResolutionGroup(artifact, dependencies, remoteRepositories);}
public List<ArtifactVersion> maven_f1051_0(Artifact artifact, ArtifactRepository localRepository, List<ArtifactRepository> remoteRepositories) throws ArtifactMetadataRetrievalException
{    throw new UnsupportedOperationException("Cannot get available versions in this test case");}
public List<ArtifactVersion> maven_f1052_0(Artifact artifact, ArtifactRepository localRepository, ArtifactRepository remoteRepository) throws ArtifactMetadataRetrievalException
{    throw new UnsupportedOperationException("Cannot get available versions in this test case");}
public ResolutionGroup maven_f1053_0(MetadataResolutionRequest request) throws ArtifactMetadataRetrievalException
{    return retrieve(request.getArtifact(), request.getLocalRepository(), request.getRemoteRepositories());}
public List<ArtifactVersion> maven_f1054_0(MetadataResolutionRequest request) throws ArtifactMetadataRetrievalException
{    return retrieveAvailableVersions(request.getArtifact(), request.getLocalRepository(), request.getRemoteRepositories());}
private void maven_f1055_0(ArtifactResolutionResult result)
{    if (result.hasMissingArtifacts()) {        for (Artifact artifact : result.getMissingArtifacts()) {            System.err.println("Missing: " + artifact);        }    }    if (result.hasExceptions()) {        for (Exception e : result.getExceptions()) {            e.printStackTrace();        }    }}
protected void maven_f1056_0() throws Exception
{    super.setUp();    artifactResolver = (DefaultArtifactResolver) lookup(ArtifactResolver.class);    projectArtifact = createLocalArtifact("project", "3.0");}
protected void maven_f1057_0() throws Exception
{    artifactFactory = null;    projectArtifact = null;    super.tearDown();}
protected String maven_f1058_0()
{    return "resolver";}
public void maven_f1059_0() throws Exception
{    Artifact g = createLocalArtifact("g", "1.0");    createLocalArtifact("h", "1.0");    artifactResolver.resolveTransitively(Collections.singleton(g), projectArtifact, remoteRepositories(), localRepository(), null);        ThreadGroup tg = Thread.currentThread().getThreadGroup();    while (tg.getParent() == null) {        tg = tg.getParent();    }    ThreadGroup[] tgList = new ThreadGroup[tg.activeGroupCount()];    tg.enumerate(tgList);    boolean seen = false;    for (ThreadGroup aTgList : tgList) {        if (!aTgList.getName().equals(DaemonThreadCreator.THREADGROUP_NAME)) {            continue;        }        seen = true;        tg = aTgList;        Thread[] ts = new Thread[tg.activeCount()];        tg.enumerate(ts);        for (Thread active : ts) {            String name = active.getName();            boolean daemon = active.isDaemon();            assertTrue(name + " is no daemon Thread.", daemon);        }    }    assertTrue("Could not find ThreadGroup: " + DaemonThreadCreator.THREADGROUP_NAME, seen);}
public void maven_f1060_0() throws Exception
{    ArtifactResolver resolver = lookup(ArtifactResolver.class, "default");}
private ArtifactFilter maven_f1061_0()
{    return new ArtifactFilter() {        public boolean include(Artifact artifact) {            return false;        }    };}
public boolean maven_f1062_0(Artifact artifact)
{    return false;}
public void maven_f1063_0()
{    AndArtifactFilter filter1 = new AndArtifactFilter();    AndArtifactFilter filter2 = new AndArtifactFilter(Arrays.asList(newSubFilter()));    assertFalse(filter1.equals(null));    assertTrue(filter1.equals(filter1));    assertEquals(filter1.hashCode(), filter1.hashCode());    assertFalse(filter1.equals(filter2));    assertFalse(filter2.equals(filter1));}
public void maven_f1064_0()
{    List<String> patterns = Arrays.asList("c", "d", "e");    IncludesArtifactFilter f1 = new IncludesArtifactFilter(patterns);    IncludesArtifactFilter f2 = new IncludesArtifactFilter(patterns);    assertTrue(f1.equals(f2));    assertTrue(f2.equals(f1));    assertTrue(f1.hashCode() == f2.hashCode());    IncludesArtifactFilter f3 = new IncludesArtifactFilter(Arrays.asList("d", "c", "e"));    assertTrue(f1.equals(f3));    assertTrue(f1.hashCode() == f3.hashCode());}
private ArtifactFilter maven_f1065_0()
{    return new ArtifactFilter() {        public boolean include(Artifact artifact) {            return false;        }    };}
public boolean maven_f1066_0(Artifact artifact)
{    return false;}
public void maven_f1067_0()
{    OrArtifactFilter filter1 = new OrArtifactFilter();    OrArtifactFilter filter2 = new OrArtifactFilter(Arrays.asList(newSubFilter()));    assertFalse(filter1.equals(null));    assertTrue(filter1.equals(filter1));    assertEquals(filter1.hashCode(), filter1.hashCode());    assertFalse(filter1.equals(filter2));    assertFalse(filter2.equals(filter1));}
private Artifact maven_f1068_0(String scope)
{    return new DefaultArtifact("g", "a", "1.0", scope, "jar", "", null);}
public void maven_f1069_0()
{    ScopeArtifactFilter filter = new ScopeArtifactFilter(Artifact.SCOPE_COMPILE);    assertTrue(filter.include(newArtifact(Artifact.SCOPE_COMPILE)));    assertTrue(filter.include(newArtifact(Artifact.SCOPE_SYSTEM)));    assertTrue(filter.include(newArtifact(Artifact.SCOPE_PROVIDED)));    assertFalse(filter.include(newArtifact(Artifact.SCOPE_RUNTIME)));    assertFalse(filter.include(newArtifact(Artifact.SCOPE_TEST)));}
public void maven_f1070_0()
{    ScopeArtifactFilter filter = new ScopeArtifactFilter(Artifact.SCOPE_COMPILE_PLUS_RUNTIME);    assertTrue(filter.include(newArtifact(Artifact.SCOPE_COMPILE)));    assertTrue(filter.include(newArtifact(Artifact.SCOPE_SYSTEM)));    assertTrue(filter.include(newArtifact(Artifact.SCOPE_PROVIDED)));    assertTrue(filter.include(newArtifact(Artifact.SCOPE_RUNTIME)));    assertFalse(filter.include(newArtifact(Artifact.SCOPE_TEST)));}
public void maven_f1071_0()
{    ScopeArtifactFilter filter = new ScopeArtifactFilter(Artifact.SCOPE_RUNTIME);    assertTrue(filter.include(newArtifact(Artifact.SCOPE_COMPILE)));    assertFalse(filter.include(newArtifact(Artifact.SCOPE_SYSTEM)));    assertFalse(filter.include(newArtifact(Artifact.SCOPE_PROVIDED)));    assertTrue(filter.include(newArtifact(Artifact.SCOPE_RUNTIME)));    assertFalse(filter.include(newArtifact(Artifact.SCOPE_TEST)));}
public void maven_f1072_0()
{    ScopeArtifactFilter filter = new ScopeArtifactFilter(Artifact.SCOPE_RUNTIME_PLUS_SYSTEM);    assertTrue(filter.include(newArtifact(Artifact.SCOPE_COMPILE)));    assertTrue(filter.include(newArtifact(Artifact.SCOPE_SYSTEM)));    assertFalse(filter.include(newArtifact(Artifact.SCOPE_PROVIDED)));    assertTrue(filter.include(newArtifact(Artifact.SCOPE_RUNTIME)));    assertFalse(filter.include(newArtifact(Artifact.SCOPE_TEST)));}
public void maven_f1073_0()
{    ScopeArtifactFilter filter = new ScopeArtifactFilter(Artifact.SCOPE_TEST);    assertTrue(filter.include(newArtifact(Artifact.SCOPE_COMPILE)));    assertTrue(filter.include(newArtifact(Artifact.SCOPE_SYSTEM)));    assertTrue(filter.include(newArtifact(Artifact.SCOPE_PROVIDED)));    assertTrue(filter.include(newArtifact(Artifact.SCOPE_RUNTIME)));    assertTrue(filter.include(newArtifact(Artifact.SCOPE_TEST)));}
protected void maven_f1074_0(Resource resource, File destination, InputStream input, boolean closeInput, int maxSize) throws TransferFailedException
{    addTransfer("getTransfer " + resource.getName());    super.getTransfer(resource, destination, input, closeInput, maxSize);}
public void maven_f1075_0(String resourceName, File destination) throws TransferFailedException, ResourceDoesNotExistException, AuthorizationException
{    addTransfer("get " + resourceName);    insideGet = true;    super.get(resourceName, destination);    insideGet = false;}
private void maven_f1076_0(String resourceName)
{    if (testTransferListener != null) {        testTransferListener.addTransfer(resourceName);    }}
public boolean maven_f1077_0(String resourceName, File destination, long timestamp) throws TransferFailedException, ResourceDoesNotExistException, AuthorizationException
{    if (!insideGet) {        addTransfer("getIfNewer " + resourceName);    }    return super.getIfNewer(resourceName, destination, timestamp);}
public void maven_f1078_0(TransferListener listener)
{    if (listener instanceof TestTransferListener) {        testTransferListener = (TestTransferListener) listener;    }    super.addTransferListener(listener);}
public List<String> maven_f1079_0()
{    return transfers;}
public void maven_f1080_0(String name)
{    transfers.add(name);}
private void maven_f1081_0()
{    callerInfo = new NullPointerException().getStackTrace()[2];    Runnable warning = new Runnable() {        public void run() {            maybeWarnAboutCleanUp();        }    };    cleanupWarning = new Thread(warning);    Runtime.getRuntime().addShutdownHook(cleanupWarning);}
public void maven_f1082_0()
{    maybeWarnAboutCleanUp();}
private void maven_f1083_0()
{    if (warnAboutCleanup) {        System.out.println("[WARNING] TestFileManager from: " + callerInfo.getClassName() + " not cleaned up!");    }}
public void maven_f1084_0(File toDelete)
{    filesToDelete.add(toDelete);    warnAboutCleanup = true;}
public synchronized File maven_f1085_0()
{    try {        Thread.sleep(20);    } catch (InterruptedException e) {        }    File dir = new File(TEMP_DIR_PATH, baseFilename + System.currentTimeMillis());    dir.mkdirs();    markForDeletion(dir);    return dir;}
public synchronized File maven_f1086_0() throws IOException
{    File tempFile = File.createTempFile(baseFilename, fileSuffix);    tempFile.deleteOnExit();    markForDeletion(tempFile);    return tempFile;}
public void maven_f1087_0() throws IOException
{    for (Iterator it = filesToDelete.iterator(); it.hasNext(); ) {        File file = (File) it.next();        if (file.exists()) {            if (file.isDirectory()) {                FileUtils.deleteDirectory(file);            } else {                file.delete();            }        }        it.remove();    }    warnAboutCleanup = false;}
public void maven_f1088_0(File dir, String filename, boolean shouldExist)
{    File file = new File(dir, filename);    if (shouldExist) {        Assert.assertTrue(file.exists());    } else {        Assert.assertFalse(file.exists());    }}
public void maven_f1089_0(File dir, String filename, String contentsTest, String encoding) throws IOException
{    assertFileExistence(dir, filename, true);    File file = new File(dir, filename);    String contents = FileUtils.fileRead(file, encoding);    Assert.assertEquals(contentsTest, contents);}
public File maven_f1090_0(File dir, String filename, String contents, String encoding) throws IOException
{    File file = new File(dir, filename);    file.getParentFile().mkdirs();    FileUtils.fileWrite(file.getPath(), encoding, contents);    markForDeletion(file);    return file;}
public String maven_f1091_0(File file, String encoding) throws IOException
{    return FileUtils.fileRead(file, encoding);}
protected void maven_f1092_0() throws Throwable
{    maybeWarnAboutCleanUp();    super.finalize();}
public File maven_f1093_0(String filename, String content, String encoding) throws IOException
{    File dir = createTempDir();    return createFile(dir, filename, content, encoding);}
public void maven_f1094_0() throws Exception
{    ArtifactTransformationManager tm = lookup(ArtifactTransformationManager.class);    List tms = tm.getArtifactTransformations();    assertEquals(3, tms.size());    assertTrue("We expected the release transformation and got " + tms.get(0), tms.get(0) instanceof ReleaseArtifactTransformation);    assertTrue("We expected the latest transformation and got " + tms.get(1), tms.get(1) instanceof LatestArtifactTransformation);    assertTrue("We expected the snapshot transformation and got " + tms.get(2), tms.get(2) instanceof SnapshotTransformation);}
protected void maven_f1095_0(ContainerConfiguration configuration)
{    super.customizeContainerConfiguration(configuration);    configuration.setAutoWiring(true);    configuration.setClassPathScanning(PlexusConstants.SCANNING_ON);}
public void maven_f1096_0() throws Exception
{    Profile notActivated = new Profile();    notActivated.setId("notActivated");    Activation nonActivation = new Activation();    nonActivation.setJdk("19.2");    notActivated.setActivation(nonActivation);    Profile defaultActivated = new Profile();    defaultActivated.setId("defaultActivated");    Activation defaultActivation = new Activation();    defaultActivation.setActiveByDefault(true);    defaultActivated.setActivation(defaultActivation);    Properties props = System.getProperties();    ProfileManager profileManager = new DefaultProfileManager(getContainer(), props);    profileManager.addProfile(notActivated);    profileManager.addProfile(defaultActivated);    List active = profileManager.getActiveProfiles();    assertNotNull(active);    assertEquals(1, active.size());    assertEquals("defaultActivated", ((Profile) active.get(0)).getId());}
public void maven_f1097_0() throws Exception
{    Profile syspropActivated = new Profile();    syspropActivated.setId("syspropActivated");    Activation syspropActivation = new Activation();    ActivationProperty syspropProperty = new ActivationProperty();    syspropProperty.setName("java.version");    syspropActivation.setProperty(syspropProperty);    syspropActivated.setActivation(syspropActivation);    Profile defaultActivated = new Profile();    defaultActivated.setId("defaultActivated");    Activation defaultActivation = new Activation();    defaultActivation.setActiveByDefault(true);    defaultActivated.setActivation(defaultActivation);    Properties props = System.getProperties();    ProfileManager profileManager = new DefaultProfileManager(getContainer(), props);    profileManager.addProfile(syspropActivated);    profileManager.addProfile(defaultActivated);    List active = profileManager.getActiveProfiles();    assertNotNull(active);    assertEquals(1, active.size());    assertEquals("syspropActivated", ((Profile) active.get(0)).getId());}
public void maven_f1098_0() throws Exception
{    Profile syspropActivated = new Profile();    syspropActivated.setId("syspropActivated");    Activation syspropActivation = new Activation();    ActivationProperty syspropProperty = new ActivationProperty();    syspropProperty.setName("!java.version");    syspropActivation.setProperty(syspropProperty);    syspropActivated.setActivation(syspropActivation);    Properties props = System.getProperties();    ProfileManager profileManager = new DefaultProfileManager(getContainer(), props);    profileManager.addProfile(syspropActivated);    List active = profileManager.getActiveProfiles();    assertNotNull(active);    assertEquals(0, active.size());}
public void maven_f1099_0() throws Exception
{    Profile syspropActivated = new Profile();    syspropActivated.setId("syspropActivated");    Activation syspropActivation = new Activation();    ActivationProperty syspropProperty = new ActivationProperty();    syspropProperty.setName("!java.version");    syspropActivation.setProperty(syspropProperty);    syspropActivated.setActivation(syspropActivation);    Properties props = System.getProperties();    ProfileManager profileManager = new DefaultProfileManager(getContainer(), props);    profileManager.addProfile(syspropActivated);    profileManager.explicitlyActivate("syspropActivated");    List active = profileManager.getActiveProfiles();    assertNotNull(active);    assertEquals(1, active.size());    assertEquals("syspropActivated", ((Profile) active.get(0)).getId());}
public void maven_f1100_0() throws Exception
{    Profile syspropActivated = new Profile();    syspropActivated.setId("syspropActivated");    Activation syspropActivation = new Activation();    ActivationProperty syspropProperty = new ActivationProperty();    syspropProperty.setName("java.version");    syspropActivation.setProperty(syspropProperty);    syspropActivated.setActivation(syspropActivation);    Properties props = System.getProperties();    ProfileManager profileManager = new DefaultProfileManager(getContainer(), props);    profileManager.addProfile(syspropActivated);    profileManager.explicitlyDeactivate("syspropActivated");    List active = profileManager.getActiveProfiles();    assertNotNull(active);    assertEquals(0, active.size());}
protected void maven_f1101_0(ContainerConfiguration containerConfiguration)
{    super.customizeContainerConfiguration(containerConfiguration);    containerConfiguration.setAutoWiring(true);    containerConfiguration.setClassPathScanning(PlexusConstants.SCANNING_INDEX);}
protected void maven_f1102_0() throws Exception
{    super.setUp();    if (getContainer().hasComponent(ProjectBuilder.class, "test")) {        projectBuilder = lookup(ProjectBuilder.class, "test");    } else {                projectBuilder = lookup(ProjectBuilder.class);    }    repositorySystem = lookup(RepositorySystem.class);}
protected void maven_f1103_0() throws Exception
{    projectBuilder = null;    super.tearDown();}
protected ProjectBuilder maven_f1104_0()
{    return projectBuilder;}
protected String maven_f1105_0()
{    String name = AbstractMavenProjectTestCase.class.getName().replace('.', '/') + ".xml";    System.out.println(name);    return name;}
protected File maven_f1106_0() throws FileNotFoundException, URISyntaxException
{    File markerFile = getFileForClasspathResource("local-repo/marker.txt");    return markerFile.getAbsoluteFile().getParentFile();}
protected static File maven_f1107_0(String resource) throws FileNotFoundException
{    ClassLoader cloader = Thread.currentThread().getContextClassLoader();    URL resourceUrl = cloader.getResource(resource);    if (resourceUrl == null) {        throw new FileNotFoundException("Unable to find: " + resource);    }    return new File(URI.create(resourceUrl.toString().replaceAll(" ", "%20")));}
protected ArtifactRepository maven_f1108_0() throws Exception
{    ArtifactRepositoryLayout repoLayout = lookup(ArtifactRepositoryLayout.class, "legacy");    ArtifactRepository r = repositorySystem.createArtifactRepository("local", "file://" + getLocalRepositoryPath().getAbsolutePath(), repoLayout, null, null);    return r;}
protected MavenProject maven_f1109_0(File pom) throws Exception
{    ProjectBuildingRequest configuration = new DefaultProjectBuildingRequest();    configuration.setLocalRepository(getLocalRepository());    configuration.setRemoteRepositories(Arrays.asList(new ArtifactRepository[] {}));    configuration.setProcessPlugins(false);    configuration.setResolveDependencies(true);    initRepoSession(configuration);    try {        return projectBuilder.build(pom, configuration).getProject();    } catch (Exception e) {        Throwable cause = e.getCause();        if (cause instanceof ModelBuildingException) {            String message = "In: " + pom + "\n\n";            for (ModelProblem problem : ((ModelBuildingException) cause).getProblems()) {                message += problem + "\n";            }            System.out.println(message);            fail(message);        }        throw e;    }}
protected MavenProject maven_f1110_0(File pom) throws Exception
{    ProjectBuildingRequest configuration = new DefaultProjectBuildingRequest();    configuration.setLocalRepository(getLocalRepository());    initRepoSession(configuration);    return projectBuilder.build(pom, configuration).getProject();}
protected void maven_f1111_0(ProjectBuildingRequest request)
{    File localRepo = new File(request.getLocalRepository().getBasedir());    DefaultRepositorySystemSession session = MavenRepositorySystemUtils.newSession();    session.setLocalRepositoryManager(new LegacyLocalRepositoryManager(localRepo));    request.setRepositorySession(session);}
public List<ArtifactResult> maven_f1112_0(RepositorySystemSession session, Collection<? extends ArtifactRequest> requests) throws ArtifactResolutionException
{    List<ArtifactResult> results = new ArrayList<>();    for (ArtifactRequest request : requests) {        ArtifactResult result = new ArtifactResult(request);        results.add(result);        Artifact artifact = request.getArtifact();        if ("maven-test".equals(artifact.getGroupId())) {            String scope = artifact.getArtifactId().substring("scope-".length());            try {                artifact = artifact.setFile(ProjectClasspathTest.getFileForClasspathResource(ProjectClasspathTest.dir + "transitive-" + scope + "-dep.xml"));                result.setArtifact(artifact);            } catch (FileNotFoundException e) {                throw new IllegalStateException("Missing test POM for " + artifact);            }        } else {            result.addException(new ArtifactNotFoundException(artifact, null));            throw new ArtifactResolutionException(results);        }    }    return results;}
public ArtifactResult maven_f1113_0(RepositorySystemSession session, ArtifactRequest request) throws ArtifactResolutionException
{    return resolveArtifacts(session, Collections.singleton(request)).get(0);}
public MavenExecutionPlan maven_f1114_0(MavenSession session, String... tasks)
{    return new MavenExecutionPlan(null, new DefaultLifecycles());}
public MavenExecutionPlan maven_f1115_0(MavenSession session, boolean setup, String... tasks)
{    return new MavenExecutionPlan(null, new DefaultLifecycles());}
public void maven_f1116_0(MavenSession session)
{}
public Set<Plugin> maven_f1117_0(String packaging)
{    Set<Plugin> plugins;        if ("JAR".equals(packaging)) {        plugins = new LinkedHashSet<>();        plugins.add(newPlugin("maven-compiler-plugin", "compile", "testCompile"));        plugins.add(newPlugin("maven-resources-plugin", "resources", "testResources"));        plugins.add(newPlugin("maven-surefire-plugin", "test"));        plugins.add(newPlugin("maven-jar-plugin", "jar"));        plugins.add(newPlugin("maven-install-plugin", "install"));        plugins.add(newPlugin("maven-deploy-plugin", "deploy"));    } else {        plugins = Collections.emptySet();    }    return plugins;}
private Plugin maven_f1118_0(String artifactId, String... goals)
{    Plugin plugin = new Plugin();    plugin.setGroupId("org.apache.maven.plugins");    plugin.setArtifactId(artifactId);    for (String goal : goals) {        PluginExecution pluginExecution = new PluginExecution();        pluginExecution.setId("default-" + goal);        pluginExecution.addGoal(goal);        plugin.addExecution(pluginExecution);    }    return plugin;}
public void maven_f1119_0(MojoExecution mojoExecution, MavenSession session)
{}
public List<MavenProject> maven_f1120_0(MojoExecution mojoExecution, MavenSession session)
{    return Collections.emptyList();}
public Set<Plugin> maven_f1121_0(String packaging)
{    Set<Plugin> plugins;        if ("JAR".equals(packaging)) {        plugins = new LinkedHashSet<>();        plugins.add(newPlugin("maven-compiler-plugin", "compile", "testCompile"));        plugins.add(newPlugin("maven-resources-plugin", "resources", "testResources"));        plugins.add(newPlugin("maven-surefire-plugin", "test"));        plugins.add(newPlugin("maven-jar-plugin", "jar"));        plugins.add(newPlugin("maven-install-plugin", "install"));        plugins.add(newPlugin("maven-deploy-plugin", "deploy"));    } else {        plugins = Collections.emptySet();    }    return plugins;}
private Plugin maven_f1122_0(String artifactId, String... goals)
{    Plugin plugin = new Plugin();    plugin.setGroupId("org.apache.maven.plugins");    plugin.setArtifactId(artifactId);    for (String goal : goals) {        PluginExecution pluginExecution = new PluginExecution();        pluginExecution.setId("default-" + goal);        pluginExecution.addGoal(goal);        plugin.addExecution(pluginExecution);    }    return plugin;}
protected String maven_f1123_0()
{    String className = getClass().getPackage().getName();    return className.substring(className.lastIndexOf('.') + 1);}
protected File maven_f1124_0(String name)
{    return projectFile("maven", name);}
protected File maven_f1125_0(String groupId, String artifactId)
{    return new File(getLocalRepositoryPath(), "/" + groupId + "/poms/" + artifactId + "-1.0.pom");}
protected File maven_f1126_0()
{    return getTestFile("src/test/resources/inheritance-repo/" + getTestSeries());}
public void maven_f1127_0() throws Exception
{    MavenProject p4 = getProject(projectFile("p4"));    assertEquals("p4", p4.getName());                assertEquals("2000", p4.getInceptionYear());                assertEquals("mailing-list", p4.getMailingLists().get(0).getName());                assertEquals("scm-url/p2/p3/p4", p4.getScm().getUrl());                assertEquals("Codehaus", p4.getOrganization().getName());                assertEquals("4.0.0", p4.getModelVersion());    assertEquals("4.0.0", p4.getModelVersion());}
public void maven_f1128_0() throws Exception
{                MavenProject p0 = getProject(projectFile("maven.t01", "p0"));    assertEquals("p0-org", p0.getOrganization().getName());                MavenProject p1 = getProject(projectFile("maven.t01", "p1"));    assertEquals("p1-org", p1.getOrganization().getName());                MavenProject p2 = getProject(projectFile("maven.t01", "p2"));    assertEquals("p2-org", p2.getOrganization().getName());                MavenProject p3 = getProject(projectFile("maven.t01", "p3"));    assertEquals("p3-org", p3.getOrganization().getName());                MavenProject p4 = getProject(projectFile("maven.t01", "p4"));    assertEquals("p4-org", p4.getOrganization().getName());}
public void maven_f1129_0() throws Exception
{    File localRepo = getLocalRepositoryPath();    System.out.println("Local repository is at: " + localRepo.getAbsolutePath());    File pom0 = new File(localRepo, "p0/pom.xml");    File pom1 = new File(pom0.getParentFile(), "p1/pom.xml");    File pom2 = new File(pom1.getParentFile(), "p2/pom.xml");    File pom3 = new File(pom2.getParentFile(), "p3/pom.xml");    File pom4 = new File(pom3.getParentFile(), "p4/pom.xml");    File pom5 = new File(pom4.getParentFile(), "p5/pom.xml");    System.out.println("Location of project-4's POM: " + pom4.getPath());        MavenProject project0 = getProject(pom0);    MavenProject project1 = getProject(pom1);    MavenProject project2 = getProject(pom2);    MavenProject project3 = getProject(pom3);    MavenProject project4 = getProject(pom4);    MavenProject project5 = getProject(pom5);    assertEquals("p4", project4.getName());                assertEquals("2000", project4.getInceptionYear());                assertEquals("mailing-list", project4.getMailingLists().get(0).getName());                assertEquals("scm-url/p2/p3/p4", project4.getScm().getUrl());                assertEquals("Codehaus", project4.getOrganization().getName());                assertEquals("4.0.0", project4.getModelVersion());    Build build = project4.getBuild();    List<Plugin> plugins = build.getPlugins();    Map<String, Integer> validPluginCounts = new HashMap<>();    String testPluginArtifactId = "maven-compiler-plugin";        validPluginCounts.put(testPluginArtifactId, 0);        validPluginCounts.put("maven-deploy-plugin", 0);    validPluginCounts.put("maven-javadoc-plugin", 0);    validPluginCounts.put("maven-source-plugin", 0);    Plugin testPlugin = null;    for (Plugin plugin : plugins) {        String pluginArtifactId = plugin.getArtifactId();        if (!validPluginCounts.containsKey(pluginArtifactId)) {            fail("Illegal plugin found: " + pluginArtifactId);        } else {            if (pluginArtifactId.equals(testPluginArtifactId)) {                testPlugin = plugin;            }            Integer count = validPluginCounts.get(pluginArtifactId);            if (count > 0) {                fail("Multiple copies of plugin: " + pluginArtifactId + " found in POM.");            } else {                count = count + 1;                validPluginCounts.put(pluginArtifactId, count);            }        }    }    List executions = testPlugin.getExecutions();    assertEquals(1, executions.size());}
public void maven_f1130_0() throws Exception
{    File localRepo = getLocalRepositoryPath();    File pom0 = new File(localRepo, "p0/pom.xml");    File pom0Basedir = pom0.getParentFile();    File pom1 = new File(pom0Basedir, "p1/pom.xml");        MavenProject project0 = getProject(pom0);    MavenProject project1 = getProject(pom1);    assertEquals(pom0Basedir, project1.getParent().getBasedir());}
public void maven_f1131_0() throws Exception
{    File localRepo = getLocalRepositoryPath();    File pom0 = new File(localRepo, "p0/pom.xml");    File pom0Basedir = pom0.getParentFile();    File pom1 = new File(pom0Basedir, "p1/pom.xml");        MavenProject project0 = getProjectWithDependencies(pom0);    MavenProject project1 = getProjectWithDependencies(pom1);    assertEquals(pom0Basedir, project1.getParent().getBasedir());    Set set = project1.getArtifacts();    assertNotNull("No artifacts", set);    assertTrue("No Artifacts", set.size() > 0);    assertTrue("Set size should be 3, is " + set.size(), set.size() == 3);    for (Object aSet : set) {        Artifact artifact = (Artifact) aSet;        System.out.println("Artifact: " + artifact.getDependencyConflictId() + " " + artifact.getVersion() + " Optional=" + (artifact.isOptional() ? "true" : "false"));        assertTrue("Incorrect version for " + artifact.getDependencyConflictId(), artifact.getVersion().equals("1.0"));    }}
public void maven_f1132_0() throws Exception
{    File localRepo = getLocalRepositoryPath();    File pom0 = new File(localRepo, "p0/pom.xml");    File pom0Basedir = pom0.getParentFile();    File pom1 = new File(pom0Basedir, "p1/pom.xml");        MavenProject project0 = getProjectWithDependencies(pom0);    MavenProject project1 = getProjectWithDependencies(pom1);    assertEquals(pom0Basedir, project1.getParent().getBasedir());    Set set = project1.getArtifacts();    assertNotNull("No artifacts", set);    assertTrue("No Artifacts", set.size() > 0);    for (Object aSet : set) {        Artifact artifact = (Artifact) aSet;        System.out.println("Artifact: " + artifact.getDependencyConflictId() + " " + artifact.getVersion() + " Scope: " + artifact.getScope());        assertTrue("Incorrect version for " + artifact.getDependencyConflictId(), artifact.getVersion().equals("1.0"));    }}
public void maven_f1133_0() throws Exception
{    File localRepo = getLocalRepositoryPath();    File pom0 = new File(localRepo, "p0/pom.xml");    File pom0Basedir = pom0.getParentFile();    File pom1 = new File(pom0Basedir, "p1/pom.xml");        MavenProject project0 = getProjectWithDependencies(pom0);    MavenProject project1 = getProjectWithDependencies(pom1);    assertEquals(pom0Basedir, project1.getParent().getBasedir());    Set set = project1.getArtifacts();    assertNotNull("No artifacts", set);    assertTrue("No Artifacts", set.size() > 0);    Iterator iter = set.iterator();    assertTrue("Set size should be 4, is " + set.size(), set.size() == 4);    while (iter.hasNext()) {        Artifact artifact = (Artifact) iter.next();        System.out.println("Artifact: " + artifact.getDependencyConflictId() + " " + artifact.getVersion() + " Optional=" + (artifact.isOptional() ? "true" : "false"));        assertTrue("Incorrect version for " + artifact.getDependencyConflictId(), artifact.getVersion().equals("1.0"));    }}
public void maven_f1134_0() throws Exception
{    File localRepo = getLocalRepositoryPath();    File pom0 = new File(localRepo, "p0/pom.xml");    File pom0Basedir = pom0.getParentFile();    File pom1 = new File(pom0Basedir, "p1/pom.xml");        MavenProject project1 = getProjectWithDependencies(pom1);    assertEquals(pom0Basedir, project1.getParent().getBasedir());    System.out.println("Project " + project1.getId() + " " + project1);    Set set = project1.getArtifacts();    assertNotNull("No artifacts", set);    assertTrue("No Artifacts", set.size() > 0);    assertTrue("Set size should be 3, is " + set.size(), set.size() == 3);    for (Object aSet : set) {        Artifact artifact = (Artifact) aSet;        assertFalse("", artifact.getArtifactId().equals("t07-d"));        System.out.println("Artifact: " + artifact.getDependencyConflictId() + " " + artifact.getVersion() + " Optional=" + (artifact.isOptional() ? "true" : "false"));        assertTrue("Incorrect version for " + artifact.getDependencyConflictId(), artifact.getVersion().equals("1.0"));    }}
public void maven_f1135_0() throws Exception
{    File localRepo = getLocalRepositoryPath();    File pom0 = new File(localRepo, "p0/pom.xml");    File pom0Basedir = pom0.getParentFile();    File pom1 = new File(pom0Basedir, "p1/pom.xml");        MavenProject project0 = getProjectWithDependencies(pom0);    MavenProject project1 = getProjectWithDependencies(pom1);    assertEquals(pom0Basedir, project1.getParent().getBasedir());    System.out.println("Project " + project1.getId() + " " + project1);    Set set = project1.getArtifacts();    assertNotNull("No artifacts", set);    assertTrue("No Artifacts", set.size() > 0);    Iterator iter = set.iterator();    assertTrue("Set size should be 4, is " + set.size(), set.size() == 4);    while (iter.hasNext()) {        Artifact artifact = (Artifact) iter.next();        System.out.println("Artifact: " + artifact.getDependencyConflictId() + " " + artifact.getVersion() + " Optional=" + (artifact.isOptional() ? "true" : "false"));        assertTrue("Incorrect version for " + artifact.getDependencyConflictId(), artifact.getVersion().equals("1.0"));    }}
public void maven_f1136_0() throws Exception
{    File localRepo = getLocalRepositoryPath();    File pom0 = new File(localRepo, "p0/pom.xml");    File pom0Basedir = pom0.getParentFile();    File pom1 = new File(pom0Basedir, "p1/pom.xml");        MavenProject project0 = getProjectWithDependencies(pom0);    MavenProject project1 = getProjectWithDependencies(pom1);    assertNotNull("Parent is null", project1.getParent());    assertEquals(pom0Basedir, project1.getParent().getBasedir());    Map map = project1.getArtifactMap();    assertNotNull("No artifacts", map);    assertTrue("No Artifacts", map.size() > 0);    assertTrue("Set size should be 2, is " + map.size(), map.size() == 2);    assertTrue("maven-test:t09-a is not in the project", map.containsKey("maven-test:t09-a"));    assertTrue("maven-test:t09-b is not in the project", map.containsKey("maven-test:t09-b"));    assertFalse("maven-test:t09-c is in the project", map.containsKey("maven-test:t09-c"));}
public void maven_f1137_0() throws Exception
{    File localRepo = getLocalRepositoryPath();    File pom0 = new File(localRepo, "p0/pom.xml");    File pom0Basedir = pom0.getParentFile();    File pom2 = new File(pom0Basedir, "p2/pom.xml");        MavenProject project0 = getProjectWithDependencies(pom0);    MavenProject project2 = getProjectWithDependencies(pom2);    assertEquals(pom0Basedir, project2.getParent().getBasedir());    Map map = project2.getArtifactMap();    assertNotNull("No artifacts", map);    assertTrue("No Artifacts", map.size() > 0);    assertTrue("Set size should be 4, is " + map.size(), map.size() == 4);    assertTrue("maven-test:t09-a is not in the project", map.containsKey("maven-test:t09-a"));    assertTrue("maven-test:t09-b is not in the project", map.containsKey("maven-test:t09-b"));    assertTrue("maven-test:t09-c is not in the project", map.containsKey("maven-test:t09-c"));    assertTrue("maven-test:t09-d is not in the project", map.containsKey("maven-test:t09-d"));}
public void maven_f1138_0() throws Exception
{    File localRepo = getLocalRepositoryPath();    File pom0 = new File(localRepo, "p0/pom.xml");    File pom0Basedir = pom0.getParentFile();    File pom1 = new File(pom0Basedir, "p1/pom.xml");        MavenProject project0 = getProjectWithDependencies(pom0);    MavenProject project1 = getProjectWithDependencies(pom1);    assertEquals(pom0Basedir, project1.getParent().getBasedir());    System.out.println("Project " + project1.getId() + " " + project1);    Map map = project1.getArtifactMap();    assertNotNull("No artifacts", map);    assertTrue("No Artifacts", map.size() > 0);    assertTrue("Set size should be 3, is " + map.size(), map.size() == 3);    Artifact a = (Artifact) map.get("maven-test:t10-a");    Artifact b = (Artifact) map.get("maven-test:t10-b");    Artifact c = (Artifact) map.get("maven-test:t10-c");    assertNotNull(a);    assertNotNull(b);    assertNotNull(c);        System.out.println(a.getScope());    assertTrue("Incorrect scope for " + a.getDependencyConflictId(), a.getScope().equals("test"));        assertTrue("Incorrect scope for " + b.getDependencyConflictId(), b.getScope().equals("runtime"));        assertTrue("Incorrect scope for " + c.getDependencyConflictId(), c.getScope().equals("runtime"));}
public void maven_f1139_0() throws Exception
{    File localRepo = getLocalRepositoryPath();    File pom0 = new File(localRepo, "p0/pom.xml");    File pom0Basedir = pom0.getParentFile();    File pom1 = new File(pom0Basedir, "p1/pom.xml");        MavenProject project0 = getProjectWithDependencies(pom0);    MavenProject project1 = getProjectWithDependencies(pom1);    assertEquals(pom0Basedir, project1.getParent().getBasedir());    assertNull("dependencyManagement has overwritten the scope of the currently building child project", project1.getArtifact().getScope());}
public void maven_f1140_0() throws Exception
{    File localRepo = getLocalRepositoryPath();    File pom0 = new File(localRepo, "p0/pom.xml");    File pom0Basedir = pom0.getParentFile();    File pom1 = new File(pom0Basedir, "p1/pom.xml");    getProjectWithDependencies(pom0);    MavenProject project1 = getProjectWithDependencies(pom1);    Map pluginMap = project1.getBuild().getPluginsAsMap();    Plugin compilerPlugin = (Plugin) pluginMap.get("org.apache.maven.plugins:maven-compiler-plugin");    assertNotNull(compilerPlugin);    Map executionMap = compilerPlugin.getExecutionsAsMap();    assertNull("Plugin execution: \'test\' should NOT exist in the compiler plugin specification for the child project!", executionMap.get("test"));}
public void maven_f1141_0() throws Exception
{    File localRepo = getLocalRepositoryPath();    File pom0 = new File(localRepo, "p0/pom.xml");    File pom0Basedir = pom0.getParentFile();    File pom1 = new File(pom0Basedir, "modules/p1/pom.xml");        MavenProject project0 = getProject(pom0);    MavenProject project1 = getProject(pom1);    System.out.println("\n\n");    System.out.println("Parent SCM URL is: " + project0.getScm().getUrl());    System.out.println("Child SCM URL is: " + project1.getScm().getUrl());    System.out.println();    System.out.println("Parent SCM connection is: " + project0.getScm().getConnection());    System.out.println("Child SCM connection is: " + project1.getScm().getConnection());    System.out.println();    System.out.println("Parent SCM developer connection is: " + project0.getScm().getDeveloperConnection());    System.out.println("Child SCM developer connection is: " + project1.getScm().getDeveloperConnection());    assertEquals(project1.getScm().getUrl(), project0.getScm().getUrl() + "/modules/p1");    assertEquals(project1.getScm().getConnection(), project0.getScm().getConnection() + "/modules/p1");    assertEquals(project1.getScm().getDeveloperConnection(), project0.getScm().getDeveloperConnection() + "/modules/p1");}
public void maven_f1142_0() throws Exception
{    File localRepo = getLocalRepositoryPath();    File pom1 = new File(localRepo, "p0/modules/p1/pom.xml");        MavenProject project1 = getProject(pom1);    System.out.println("\n\n");    System.out.println("Child SCM URL is: " + project1.getScm().getUrl());    System.out.println("Child SCM connection is: " + project1.getScm().getConnection());    System.out.println("Child SCM developer connection is: " + project1.getScm().getDeveloperConnection());    assertEquals("http://host/viewer?path=/p0/modules/p1", project1.getScm().getUrl());    assertEquals("scm:svn:http://host/p0/modules/p1", project1.getScm().getConnection());    assertEquals("scm:svn:https://host/p0/modules/p1", project1.getScm().getDeveloperConnection());}
public LocalRepository maven_f1143_0()
{    return repository;}
public String maven_f1144_0(Artifact artifact)
{    StringBuilder path = new StringBuilder(128);    path.append(artifact.getGroupId()).append('/');    path.append(artifact.getExtension()).append("s/");    path.append(artifact.getArtifactId()).append('-').append(artifact.getVersion());    if (artifact.getClassifier().length() > 0) {        path.append('-').append(artifact.getClassifier());    }    path.append('.').append(artifact.getExtension());    return path.toString();}
public String maven_f1145_0(Artifact artifact, RemoteRepository repository, String context)
{    return getPathForLocalArtifact(artifact);}
public String maven_f1146_0(Metadata metadata)
{    return getPath(metadata, "local");}
public String maven_f1147_0(Metadata metadata, RemoteRepository repository, String context)
{    return getPath(metadata, getRepositoryKey(repository, context));}
 String maven_f1148_0(RemoteRepository repository, String context)
{    return repository.getId();}
private String maven_f1149_0(Metadata metadata, String repositoryKey)
{    StringBuilder path = new StringBuilder(128);    if (metadata.getGroupId().length() > 0) {        path.append(metadata.getGroupId().replace('.', '/')).append('/');        if (metadata.getArtifactId().length() > 0) {            path.append(metadata.getArtifactId()).append('/');            if (metadata.getVersion().length() > 0) {                path.append(metadata.getVersion()).append('/');            }        }    }    path.append(insertRepositoryKey(metadata.getType(), repositoryKey));    return path.toString();}
private String maven_f1150_0(String filename, String repositoryKey)
{    String result;    int idx = filename.indexOf('.');    if (idx < 0) {        result = filename + '-' + repositoryKey;    } else {        result = filename.substring(0, idx) + '-' + repositoryKey + filename.substring(idx);    }    return result;}
public LocalArtifactResult maven_f1151_0(RepositorySystemSession session, LocalArtifactRequest request)
{    String path = getPathForLocalArtifact(request.getArtifact());    File file = new File(getRepository().getBasedir(), path);    LocalArtifactResult result = new LocalArtifactResult(request);    if (file.isFile()) {        result.setFile(file);        result.setAvailable(true);    }    return result;}
public void maven_f1152_0(RepositorySystemSession session, LocalArtifactRegistration request)
{}
public LocalMetadataResult maven_f1153_0(RepositorySystemSession session, LocalMetadataRequest request)
{    LocalMetadataResult result = new LocalMetadataResult(request);    String path;    Metadata metadata = request.getMetadata();    String context = request.getContext();    RemoteRepository remote = request.getRepository();    if (remote != null) {        path = getPathForRemoteMetadata(metadata, remote, context);    } else {        path = getPathForLocalMetadata(metadata);    }    File file = new File(getRepository().getBasedir(), path);    if (file.isFile()) {        result.setFile(file);    }    return result;}
public void maven_f1154_0(RepositorySystemSession session, LocalMetadataRegistration request)
{}
public String maven_f1155_0()
{    return String.valueOf(getRepository());}
public void maven_f1156_0()
{    Plugin mgtPlugin = createPlugin("group", "artifact", "1", Collections.EMPTY_MAP);    Dependency mgtDep = createDependency("g", "a", "2");    mgtPlugin.addDependency(mgtDep);    Plugin plugin = createPlugin("group", "artifact", "1", Collections.EMPTY_MAP);    Dependency dep = createDependency("g", "a", "1");    plugin.addDependency(dep);    ModelUtils.mergePluginDefinitions(plugin, mgtPlugin, false);    assertEquals(dep.getVersion(), plugin.getDependencies().get(0).getVersion());}
private Dependency maven_f1157_0(String gid, String aid, String ver)
{    Dependency dep = new Dependency();    dep.setGroupId(gid);    dep.setArtifactId(aid);    dep.setVersion(ver);    return dep;}
public void maven_f1158_0()
{    PluginContainer parent = new PluginContainer();    Plugin parentPlugin = createPlugin("group", "artifact", "1.0", Collections.EMPTY_MAP);    parentPlugin.setInherited("false");    parent.addPlugin(parentPlugin);    PluginContainer child = new PluginContainer();    child.addPlugin(createPlugin("group3", "artifact3", "1.0", Collections.EMPTY_MAP));    ModelUtils.mergePluginLists(child, parent, true);    List results = child.getPlugins();    assertEquals(1, results.size());    Plugin result1 = (Plugin) results.get(0);    assertEquals("group3", result1.getGroupId());    assertEquals("artifact3", result1.getArtifactId());}
public void maven_f1159_0()
{    PluginContainer parent = new PluginContainer();    parent.addPlugin(createPlugin("group", "artifact", "1.0", Collections.EMPTY_MAP));    parent.addPlugin(createPlugin("group2", "artifact2", "1.0", Collections.singletonMap("key", "value")));    PluginContainer child = new PluginContainer();    child.addPlugin(createPlugin("group3", "artifact3", "1.0", Collections.EMPTY_MAP));    child.addPlugin(createPlugin("group2", "artifact2", "1.0", Collections.singletonMap("key2", "value2")));    ModelUtils.mergePluginLists(child, parent, true);    List results = child.getPlugins();    assertEquals(3, results.size());    Plugin result1 = (Plugin) results.get(0);    assertEquals("group", result1.getGroupId());    assertEquals("artifact", result1.getArtifactId());    Plugin result2 = (Plugin) results.get(1);    assertEquals("group3", result2.getGroupId());    assertEquals("artifact3", result2.getArtifactId());    Plugin result3 = (Plugin) results.get(2);    assertEquals("group2", result3.getGroupId());    assertEquals("artifact2", result3.getArtifactId());    Xpp3Dom result3Config = (Xpp3Dom) result3.getConfiguration();    assertNotNull(result3Config);    assertEquals("value", result3Config.getChild("key").getValue());    assertEquals("value2", result3Config.getChild("key2").getValue());}
private Plugin maven_f1160_0(String groupId, String artifactId, String version, Map configuration)
{    Plugin plugin = new Plugin();    plugin.setGroupId(groupId);    plugin.setArtifactId(artifactId);    plugin.setVersion(version);    Xpp3Dom config = new Xpp3Dom("configuration");    if (configuration != null) {        for (Object o : configuration.entrySet()) {            Map.Entry entry = (Map.Entry) o;            Xpp3Dom param = new Xpp3Dom(String.valueOf(entry.getKey()));            param.setValue(String.valueOf(entry.getValue()));            config.addChild(param);        }    }    plugin.setConfiguration(config);    return plugin;}
public void maven_f1161_0()
{    Plugin parent = new Plugin();    parent.setArtifactId("testArtifact");    parent.setGroupId("testGroup");    parent.setVersion("1.0");    PluginExecution parentExecution = new PluginExecution();    parentExecution.setId("testExecution");    parent.addExecution(parentExecution);    Plugin child = new Plugin();    child.setArtifactId("testArtifact");    child.setGroupId("testGroup");    child.setVersion("1.0");    ModelUtils.mergePluginDefinitions(child, parent, false);    assertEquals(1, child.getExecutions().size());}
public void maven_f1162_0()
{    Plugin parent = new Plugin();    parent.setArtifactId("testArtifact");    parent.setGroupId("testGroup");    parent.setVersion("1.0");    PluginExecution parentExecution = new PluginExecution();    parentExecution.setId("testExecution");    parent.addExecution(parentExecution);    Plugin child = new Plugin();    child.setArtifactId("testArtifact");    child.setGroupId("testGroup");    child.setVersion("1.0");    PluginExecution childExecution = new PluginExecution();    childExecution.setId("testExecution2");    child.addExecution(childExecution);    ModelUtils.mergePluginDefinitions(child, parent, false);    assertEquals(2, child.getExecutions().size());}
public void maven_f1163_0()
{    Plugin parent = new Plugin();    parent.setArtifactId("testArtifact");    parent.setGroupId("testGroup");    parent.setVersion("1.0");    PluginExecution parentExecution = new PluginExecution();    parentExecution.setId("testExecution");    parent.addExecution(parentExecution);    Build parentContainer = new Build();    parentContainer.addPlugin(parent);    Plugin child = new Plugin();    child.setArtifactId("testArtifact");    child.setGroupId("testGroup");    child.setVersion("1.0");    Build childContainer = new Build();    childContainer.addPlugin(child);    ModelUtils.mergePluginLists(childContainer, parentContainer, true);    List plugins = childContainer.getPlugins();    assertEquals(1, plugins.size());    Plugin plugin = (Plugin) plugins.get(0);    assertEquals(1, plugin.getExecutions().size());}
public void maven_f1164_0()
{    Plugin parent = new Plugin();    parent.setArtifactId("testArtifact");    parent.setGroupId("testGroup");    parent.setVersion("1.0");    PluginExecution parentExecution = new PluginExecution();    parentExecution.setId("testExecution");    parent.addExecution(parentExecution);    Build parentContainer = new Build();    parentContainer.addPlugin(parent);    Plugin child = new Plugin();    child.setArtifactId("testArtifact");    child.setGroupId("testGroup");    child.setVersion("1.0");    PluginExecution childExecution = new PluginExecution();    childExecution.setId("testExecution2");    child.addExecution(childExecution);    Build childContainer = new Build();    childContainer.addPlugin(child);    ModelUtils.mergePluginLists(childContainer, parentContainer, true);    List plugins = childContainer.getPlugins();    assertEquals(1, plugins.size());    Plugin plugin = (Plugin) plugins.get(0);    assertEquals(2, plugin.getExecutions().size());}
public void maven_f1165_0()
{    Plugin parent = new Plugin();    parent.setArtifactId("testArtifact");    parent.setGroupId("testGroup");    parent.setVersion("1.0");    parent.setInherited("false");    PluginExecution parentExecution = new PluginExecution();    parentExecution.setId("testExecution");    parent.addExecution(parentExecution);    Plugin child = new Plugin();    child.setArtifactId("testArtifact");    child.setGroupId("testGroup");    child.setVersion("1.0");    ModelUtils.mergePluginDefinitions(child, parent, true);    assertEquals(0, child.getExecutions().size());}
public void maven_f1166_0()
{    Plugin parentPlugin1 = new Plugin();    parentPlugin1.setArtifactId("testArtifact");        parentPlugin1.setGroupId("zzz");    parentPlugin1.setVersion("1.0");    PluginExecution parentExecution1 = new PluginExecution();    parentExecution1.setId("testExecution");    parentPlugin1.addExecution(parentExecution1);    Plugin parentPlugin2 = new Plugin();    parentPlugin2.setArtifactId("testArtifact");    parentPlugin2.setGroupId("yyy");    parentPlugin2.setVersion("1.0");    PluginExecution parentExecution2 = new PluginExecution();    parentExecution2.setId("testExecution");    parentPlugin2.addExecution(parentExecution2);    PluginContainer parentContainer = new PluginContainer();    parentContainer.addPlugin(parentPlugin1);    parentContainer.addPlugin(parentPlugin2);    Plugin childPlugin1 = new Plugin();    childPlugin1.setArtifactId("testArtifact");    childPlugin1.setGroupId("bbb");    childPlugin1.setVersion("1.0");    PluginExecution childExecution1 = new PluginExecution();    childExecution1.setId("testExecution");    childPlugin1.addExecution(childExecution1);    Plugin childPlugin2 = new Plugin();    childPlugin2.setArtifactId("testArtifact");    childPlugin2.setGroupId("aaa");    childPlugin2.setVersion("1.0");    PluginExecution childExecution2 = new PluginExecution();    childExecution2.setId("testExecution");    childPlugin2.addExecution(childExecution2);    PluginContainer childContainer = new PluginContainer();    childContainer.addPlugin(childPlugin1);    childContainer.addPlugin(childPlugin2);    ModelUtils.mergePluginLists(childContainer, parentContainer, true);    assertEquals(4, childContainer.getPlugins().size());    assertSame(parentPlugin1, childContainer.getPlugins().get(0));    assertSame(parentPlugin2, childContainer.getPlugins().get(1));    assertSame(childPlugin1, childContainer.getPlugins().get(2));    assertSame(childPlugin2, childContainer.getPlugins().get(3));}
public void maven_f1167_0()
{    Plugin parent = new Plugin();    parent.setArtifactId("testArtifact");    parent.setGroupId("testGroup");    parent.setVersion("1.0");    PluginExecution parentExecution1 = new PluginExecution();        parentExecution1.setId("zzz");    PluginExecution parentExecution2 = new PluginExecution();        parentExecution2.setId("yyy");    parent.addExecution(parentExecution1);    parent.addExecution(parentExecution2);        Dependency dep = new Dependency();    dep.setGroupId("depGroupId");    dep.setArtifactId("depArtifactId");    dep.setVersion("depVersion");    parent.setDependencies(Collections.singletonList(dep));    Plugin child = new Plugin();    child.setArtifactId("testArtifact");    child.setGroupId("testGroup");    child.setVersion("1.0");    PluginExecution childExecution1 = new PluginExecution();    childExecution1.setId("bbb");    PluginExecution childExecution2 = new PluginExecution();    childExecution2.setId("aaa");    child.addExecution(childExecution1);    child.addExecution(childExecution2);    ModelUtils.mergePluginDefinitions(child, parent, false);    assertEquals(4, child.getExecutions().size());    assertSame(parentExecution1, child.getExecutions().get(0));    assertSame(parentExecution2, child.getExecutions().get(1));    assertSame(childExecution1, child.getExecutions().get(2));    assertSame(childExecution2, child.getExecutions().get(3));        assertEquals(1, child.getDependencies().size());    Dependency dep2 = child.getDependencies().get(0);    assertEquals(dep.getManagementKey(), dep2.getManagementKey());}
public void maven_f1168_0() throws XmlPullParserException, IOException
{    String parentConfigStr = "<configuration><items><item>one</item><item>two</item></items></configuration>";    Xpp3Dom parentConfig = Xpp3DomBuilder.build(new StringReader(parentConfigStr));    Plugin parentPlugin = createPlugin("group", "artifact", "1", null);    parentPlugin.setConfiguration(parentConfig);    String childConfigStr = "<configuration><items><item>three</item></items></configuration>";    Xpp3Dom childConfig = Xpp3DomBuilder.build(new StringReader(childConfigStr));    Plugin childPlugin = createPlugin("group", "artifact", "1", null);    childPlugin.setConfiguration(childConfig);    ModelUtils.mergePluginDefinitions(childPlugin, parentPlugin, true);    Xpp3Dom result = (Xpp3Dom) childPlugin.getConfiguration();    Xpp3Dom items = result.getChild("items");    assertEquals(1, items.getChildCount());    Xpp3Dom item = items.getChild(0);    assertEquals("three", item.getValue());}
public void maven_f1169_0() throws XmlPullParserException, IOException
{    String parentConfigStr = "<configuration><items><item>one</item><item>two</item></items></configuration>";    Xpp3Dom parentConfig = Xpp3DomBuilder.build(new StringReader(parentConfigStr));    Plugin parentPlugin = createPlugin("group", "artifact", "1", null);    parentPlugin.setConfiguration(parentConfig);    String childConfigStr = "<configuration><items combine.children=\"append\"><item>three</item></items></configuration>";    Xpp3Dom childConfig = Xpp3DomBuilder.build(new StringReader(childConfigStr));    Plugin childPlugin = createPlugin("group", "artifact", "1", null);    childPlugin.setConfiguration(childConfig);    ModelUtils.mergePluginDefinitions(childPlugin, parentPlugin, true);    Xpp3Dom result = (Xpp3Dom) childPlugin.getConfiguration();    Xpp3Dom items = result.getChild("items");    assertEquals(3, items.getChildCount());    Xpp3Dom[] item = items.getChildren();    List<String> actual = Arrays.asList(item[0].getValue(), item[1].getValue(), item[2].getValue());    List<String> expected = Arrays.asList("one", "two", "three");    Collections.sort(actual);    Collections.sort(expected);    assertEquals(expected, actual);}
public void maven_f1170_0()
{    String gid = "group";    String aid = "artifact";    String ver = "1";    PluginContainer parent = new PluginContainer();    Plugin pParent = createPlugin(gid, aid, ver, Collections.EMPTY_MAP);    pParent.setInherited(Boolean.toString(true));    PluginExecution eParent = new PluginExecution();    String testId = "test";    eParent.setId(testId);    eParent.addGoal("run");    eParent.setPhase("initialize");    eParent.setInherited(Boolean.toString(false));    pParent.addExecution(eParent);    parent.addPlugin(pParent);    PluginContainer child = new PluginContainer();    Plugin pChild = createPlugin(gid, aid, ver, Collections.EMPTY_MAP);    PluginExecution eChild = new PluginExecution();    eChild.setId("child-specified");    eChild.addGoal("child");    eChild.setPhase("compile");    pChild.addExecution(eChild);    child.addPlugin(pChild);    ModelUtils.mergePluginDefinitions(pChild, pParent, true);    Map executionMap = pChild.getExecutionsAsMap();    assertNull("test execution should not be inherited from parent.", executionMap.get(testId));}
public void maven_f1171_0()
{    String gid = "group";    String aid = "artifact";    String ver = "1";    PluginContainer parent = new PluginContainer();    Plugin pParent = createPlugin(gid, aid, ver, Collections.EMPTY_MAP);    pParent.setInherited(Boolean.toString(false));    PluginExecution eParent = new PluginExecution();    String testId = "test";    eParent.setId(testId);    eParent.addGoal("run");    eParent.setPhase("initialize");    eParent.setInherited(Boolean.toString(true));    pParent.addExecution(eParent);    parent.addPlugin(pParent);    PluginContainer child = new PluginContainer();    Plugin pChild = createPlugin(gid, aid, ver, Collections.EMPTY_MAP);    PluginExecution eChild = new PluginExecution();    eChild.setId("child-specified");    eChild.addGoal("child");    eChild.setPhase("compile");    pChild.addExecution(eChild);    child.addPlugin(pChild);    ModelUtils.mergePluginDefinitions(pChild, pParent, true);    Map executionMap = pChild.getExecutionsAsMap();    assertNull("test execution should not be inherited from parent.", executionMap.get(testId));}
public void maven_f1172_0()
{    String gid = "group";    String aid = "artifact";    String ver = "1";    PluginContainer parent = new PluginContainer();    Plugin pParent = createPlugin(gid, aid, ver, Collections.EMPTY_MAP);    pParent.setInherited(Boolean.toString(true));    PluginExecution eParent = new PluginExecution();    String testId = "test";    eParent.setId(testId);    eParent.addGoal("run");    eParent.setPhase("initialize");    eParent.setInherited(Boolean.toString(true));    pParent.addExecution(eParent);    parent.addPlugin(pParent);    PluginContainer child = new PluginContainer();    Plugin pChild = createPlugin(gid, aid, ver, Collections.EMPTY_MAP);    PluginExecution eChild = new PluginExecution();    eChild.setId("child-specified");    eChild.addGoal("child");    eChild.setPhase("compile");    pChild.addExecution(eChild);    child.addPlugin(pChild);    ModelUtils.mergePluginDefinitions(pChild, pParent, true);    Map executionMap = pChild.getExecutionsAsMap();    assertNotNull("test execution should be inherited from parent.", executionMap.get(testId));}
public void maven_f1173_0()
{    File basedir = new File(System.getProperty("java.io.tmpdir"), "test").getAbsoluteFile();    String aligned = new DefaultPathTranslator().alignToBaseDirectory("${basedir}", basedir);    assertEquals(basedir.getAbsolutePath(), aligned);}
public void maven_f1174_0()
{    File basedir = new File(System.getProperty("java.io.tmpdir"), "test").getAbsoluteFile();    String aligned = new DefaultPathTranslator().alignToBaseDirectory("${basedir}/dir", basedir);    assertEquals(new File(basedir, "dir").getAbsolutePath(), aligned);}
public void maven_f1175_0()
{    File basedir = new File(System.getProperty("java.io.tmpdir"), "test").getAbsoluteFile();    String unaligned = new DefaultPathTranslator().unalignFromBaseDirectory(basedir.getAbsolutePath(), basedir);    assertEquals(".", unaligned);}
public void maven_f1176_0() throws Exception
{    ArtifactResolver resolver = lookup(ArtifactResolver.class, "classpath");    DefaultArtifactDescriptorReader pomReader = (DefaultArtifactDescriptorReader) lookup(ArtifactDescriptorReader.class);    pomReader.setArtifactResolver(resolver);    projectBuilder = lookup(ProjectBuilder.class, "classpath");        getContainer().addComponent(projectBuilder, ProjectBuilder.class, "default");    repositorySystem = lookup(RepositorySystem.class);}
protected String maven_f1177_0()
{    return null;}
public void maven_f1178_0() throws Exception
{    File f = getFileForClasspathResource(dir + "project-with-scoped-dependencies.xml");    MavenProject project = getProjectWithDependencies(f);    Artifact artifact;    assertNotNull("Test project can't be null!", project);    checkArtifactIdScope(project, "provided", "provided");    checkArtifactIdScope(project, "test", "test");    checkArtifactIdScope(project, "compile", "compile");    checkArtifactIdScope(project, "runtime", "runtime");    checkArtifactIdScope(project, "default", "compile");        artifact = getArtifact(project, "maven-test-test", "scope-provided");    assertNull("Check no provided dependencies are transitive", artifact);    artifact = getArtifact(project, "maven-test-test", "scope-test");    assertNull("Check no test dependencies are transitive", artifact);    artifact = getArtifact(project, "maven-test-test", "scope-compile");    assertNotNull(artifact);    System.out.println("a = " + artifact);    System.out.println("b = " + artifact.getScope());    assertEquals("Check scope", "test", artifact.getScope());    artifact = getArtifact(project, "maven-test-test", "scope-default");    assertEquals("Check scope", "test", artifact.getScope());    artifact = getArtifact(project, "maven-test-test", "scope-runtime");    assertEquals("Check scope", "test", artifact.getScope());        checkGroupIdScope(project, "provided", "maven-test-provided");    artifact = getArtifact(project, "maven-test-provided", "scope-runtime");    assertEquals("Check scope", "provided", artifact.getScope());        checkGroupIdScope(project, "runtime", "maven-test-runtime");    artifact = getArtifact(project, "maven-test-runtime", "scope-runtime");    assertEquals("Check scope", "runtime", artifact.getScope());        checkGroupIdScope(project, "compile", "maven-test-compile");    artifact = getArtifact(project, "maven-test-compile", "scope-runtime");    assertEquals("Check scope", "runtime", artifact.getScope());        checkGroupIdScope(project, "compile", "maven-test-default");    artifact = getArtifact(project, "maven-test-default", "scope-runtime");    assertEquals("Check scope", "runtime", artifact.getScope());}
private void maven_f1179_0(MavenProject project, String scopeValue, String groupId)
{    Artifact artifact;    artifact = getArtifact(project, groupId, "scope-compile");    assertEquals("Check scope", scopeValue, artifact.getScope());    artifact = getArtifact(project, groupId, "scope-test");    assertNull("Check test dependency is not transitive", artifact);    artifact = getArtifact(project, groupId, "scope-provided");    assertNull("Check provided dependency is not transitive", artifact);    artifact = getArtifact(project, groupId, "scope-default");    assertEquals("Check scope", scopeValue, artifact.getScope());}
private void maven_f1180_0(MavenProject project, String scope, String scopeValue)
{    String artifactId = "scope-" + scope;    Artifact artifact = getArtifact(project, "maven-test", artifactId);    assertNotNull(artifact);    assertEquals("Check scope", scopeValue, artifact.getScope());}
private Artifact maven_f1181_0(MavenProject project, String groupId, String artifactId)
{    System.out.println("[ Looking for " + groupId + ":" + artifactId + " ]");    for (Artifact a : project.getArtifacts()) {        System.out.println(a.toString());        if (artifactId.equals(a.getArtifactId()) && a.getGroupId().equals(groupId)) {            System.out.println("RETURN");            return a;        }    }    System.out.println("Return null");    return null;}
public ProjectBuildingResult maven_f1182_0(Artifact artifact, ProjectBuildingRequest request) throws ProjectBuildingException
{    if ("maven-test".equals(artifact.getGroupId())) {        String scope = artifact.getArtifactId().substring("scope-".length());        try {            artifact.setFile(ProjectClasspathTest.getFileForClasspathResource(ProjectClasspathTest.dir + "transitive-" + scope + "-dep.xml"));        } catch (FileNotFoundException e) {            throw new IllegalStateException("Missing test POM for " + artifact);        }    }    if (artifact.getFile() == null) {        MavenProject project = new MavenProject();        project.setArtifact(artifact);        return new DefaultProjectBuildingResult(project, null, null);    }    return build(artifact.getFile(), request);}
public ProjectBuildingResult maven_f1183_0(File pomFile, ProjectBuildingRequest configuration) throws ProjectBuildingException
{    ProjectBuildingResult result = super.build(pomFile, configuration);    result.getProject().setRemoteArtifactRepositories(Collections.<ArtifactRepository>emptyList());    return result;}
public void maven_f1184_0()
{    ArtifactRepository repository = new DefaultArtifactRepository("snapshots.repo", "http://whatever", null);    String pattern = "external:*, !snapshots.repo";    boolean matches = DefaultMirrorSelector.matchPattern(repository, pattern);    System.out.println(matches);    assertFalse(matches);}
protected String maven_f1185_0()
{    return "updateCheckManager";}
protected void maven_f1186_0() throws Exception
{    super.setUp();    updateCheckManager = new DefaultUpdateCheckManager(new ConsoleLogger(Logger.LEVEL_DEBUG, "test"));}
public void maven_f1187_0() throws Exception
{    ArtifactRepository remoteRepository = remoteRepository();    ArtifactRepository localRepository = localRepository();    Artifact a = createArtifact("a", "0.0.1-SNAPSHOT");    File file = new File(localRepository.getBasedir(), localRepository.pathOf(a));    file.delete();    a.setFile(file);    File touchFile = updateCheckManager.getTouchfile(a);    touchFile.delete();    assertTrue(updateCheckManager.isUpdateRequired(a, remoteRepository));    file.getParentFile().mkdirs();    file.createNewFile();    updateCheckManager.touch(a, remoteRepository, null);    assertFalse(updateCheckManager.isUpdateRequired(a, remoteRepository));    assertNull(updateCheckManager.readLastUpdated(touchFile, updateCheckManager.getRepositoryKey(remoteRepository)));    assertFalse(updateCheckManager.getTouchfile(a).exists());}
public void maven_f1188_0() throws Exception
{    ArtifactRepository remoteRepository = remoteRepository();    ArtifactRepository localRepository = localRepository();    Artifact a = createArtifact("a", "0.0.1-SNAPSHOT");    File file = new File(localRepository.getBasedir(), localRepository.pathOf(a));    file.delete();    a.setFile(file);    File touchFile = updateCheckManager.getTouchfile(a);    touchFile.delete();    assertTrue(updateCheckManager.isUpdateRequired(a, remoteRepository));    updateCheckManager.touch(a, remoteRepository, null);    assertFalse(updateCheckManager.isUpdateRequired(a, remoteRepository));    assertFalse(file.exists());    assertNotNull(updateCheckManager.readLastUpdated(touchFile, updateCheckManager.getRepositoryKey(remoteRepository)));}
public void maven_f1189_0() throws Exception
{    ArtifactRepository remoteRepository = remoteRepository();    ArtifactRepository localRepository = localRepository();    Artifact a = createArtifact("a", "0.0.1", "pom");    File file = new File(localRepository.getBasedir(), localRepository.pathOf(a));    file.delete();    a.setFile(file);    File touchFile = updateCheckManager.getTouchfile(a);    touchFile.delete();    assertTrue(updateCheckManager.isUpdateRequired(a, remoteRepository));    file.getParentFile().mkdirs();    file.createNewFile();    updateCheckManager.touch(a, remoteRepository, null);    assertFalse(updateCheckManager.isUpdateRequired(a, remoteRepository));    assertNull(updateCheckManager.readLastUpdated(touchFile, updateCheckManager.getRepositoryKey(remoteRepository)));    assertFalse(updateCheckManager.getTouchfile(a).exists());}
public void maven_f1190_0() throws Exception
{    ArtifactRepository remoteRepository = remoteRepository();    ArtifactRepository localRepository = localRepository();    Artifact a = createArtifact("a", "0.0.1", "pom");    File file = new File(localRepository.getBasedir(), localRepository.pathOf(a));    file.delete();    a.setFile(file);    File touchFile = updateCheckManager.getTouchfile(a);    touchFile.delete();    assertTrue(updateCheckManager.isUpdateRequired(a, remoteRepository));    updateCheckManager.touch(a, remoteRepository, null);    assertFalse(updateCheckManager.isUpdateRequired(a, remoteRepository));    assertFalse(file.exists());    assertNotNull(updateCheckManager.readLastUpdated(touchFile, updateCheckManager.getRepositoryKey(remoteRepository)));}
public void maven_f1191_0() throws Exception
{    ArtifactRepository remoteRepository = remoteRepository();    ArtifactRepository localRepository = localRepository();    Artifact a = createRemoteArtifact("a", "0.0.1-SNAPSHOT");    RepositoryMetadata metadata = new ArtifactRepositoryMetadata(a);    File file = new File(localRepository.getBasedir(), localRepository.pathOfLocalRepositoryMetadata(metadata, localRepository));    file.delete();    File touchFile = updateCheckManager.getTouchfile(metadata, file);    touchFile.delete();    assertTrue(updateCheckManager.isUpdateRequired(metadata, remoteRepository, file));    file.getParentFile().mkdirs();    file.createNewFile();    updateCheckManager.touch(metadata, remoteRepository, file);    assertFalse(updateCheckManager.isUpdateRequired(metadata, remoteRepository, file));    assertNotNull(updateCheckManager.readLastUpdated(touchFile, updateCheckManager.getMetadataKey(remoteRepository, file)));}
public void maven_f1192_0() throws Exception
{    ArtifactRepository remoteRepository = remoteRepository();    ArtifactRepository localRepository = localRepository();    Artifact a = createRemoteArtifact("a", "0.0.1-SNAPSHOT");    RepositoryMetadata metadata = new ArtifactRepositoryMetadata(a);    File file = new File(localRepository.getBasedir(), localRepository.pathOfLocalRepositoryMetadata(metadata, localRepository));    file.delete();    File touchFile = updateCheckManager.getTouchfile(metadata, file);    touchFile.delete();    assertTrue(updateCheckManager.isUpdateRequired(metadata, remoteRepository, file));    updateCheckManager.touch(metadata, remoteRepository, file);    assertFalse(updateCheckManager.isUpdateRequired(metadata, remoteRepository, file));    assertNotNull(updateCheckManager.readLastUpdated(touchFile, updateCheckManager.getMetadataKey(remoteRepository, file)));}
public void maven_f1193_0() throws Exception
{    ArtifactFactory artifactFactory = (ArtifactFactory) lookup(ArtifactFactory.ROLE);    ArtifactRepository localRepository = localRepository();    Artifact a = artifactFactory.createArtifactWithClassifier("groupdId", "a", "0.0.1-SNAPSHOT", "jar", null);    File file = new File(localRepository.getBasedir(), localRepository.pathOf(a));    a.setFile(file);    assertEquals("a-0.0.1-SNAPSHOT.jar.lastUpdated", updateCheckManager.getTouchfile(a).getName());    a = artifactFactory.createArtifactWithClassifier("groupdId", "a", "0.0.1-SNAPSHOT", "jar", "classifier");    file = new File(localRepository.getBasedir(), localRepository.pathOf(a));    a.setFile(file);    assertEquals("a-0.0.1-SNAPSHOT-classifier.jar.lastUpdated", updateCheckManager.getTouchfile(a).getName());}
protected void maven_f1194_0() throws Exception
{    super.setUp();    wagonManager = (DefaultWagonManager) lookup(WagonManager.class);    artifactFactory = lookup(ArtifactFactory.class);    artifactRepositoryFactory = lookup(ArtifactRepositoryFactory.class);}
protected void maven_f1195_0() throws Exception
{    wagonManager = null;    artifactFactory = null;    super.tearDown();}
public void maven_f1196_0() throws Exception
{    Artifact artifact = createTestPomArtifact("target/test-data/get-missing-pom");    List<ArtifactRepository> repos = new ArrayList<>();    repos.add(artifactRepositoryFactory.createArtifactRepository("repo1", "string://url1", new ArtifactRepositoryLayoutStub(), null, null));    repos.add(artifactRepositoryFactory.createArtifactRepository("repo2", "string://url2", new ArtifactRepositoryLayoutStub(), null, null));    StringWagon wagon = (StringWagon) wagonManager.getWagon("string");    wagon.addExpectedContent(repos.get(0).getLayout().pathOf(artifact), "expected");    wagon.addExpectedContent(repos.get(1).getLayout().pathOf(artifact), "expected");    class TransferListener extends AbstractTransferListener {        public List<TransferEvent> events = new ArrayList<>();        @Override        public void transferInitiated(TransferEvent transferEvent) {            events.add(transferEvent);        }    }    TransferListener listener = new TransferListener();    wagonManager.getArtifact(artifact, repos, listener, false);    assertEquals(1, listener.events.size());}
public void maven_f1197_0(TransferEvent transferEvent)
{    events.add(transferEvent);}
public void maven_f1198_0() throws TransferFailedException, UnsupportedProtocolException, IOException
{    Artifact artifact = createTestArtifact("target/test-data/get-missing-jar", "jar");    ArtifactRepository repo = createStringRepo();    try {        wagonManager.getArtifact(artifact, repo, null, false);        fail();    } catch (ResourceDoesNotExistException e) {        assertTrue(true);    }    assertFalse(artifact.getFile().exists());}
public void maven_f1199_0() throws TransferFailedException, UnsupportedProtocolException, IOException
{    Artifact artifact = createTestArtifact("target/test-data/get-missing-jar", "jar");    ArtifactRepository repo = createStringRepo();    try {        wagonManager.getArtifact(artifact, repo, null, true);        fail();    } catch (ResourceDoesNotExistException e) {        assertTrue(true);    }    assertFalse(artifact.getFile().exists());}
public void maven_f1200_0() throws TransferFailedException, ResourceDoesNotExistException, UnsupportedProtocolException, IOException, AuthorizationException
{    Artifact artifact = createTestArtifact("target/test-data/get-remote-jar", "jar");    ArtifactRepository repo = createStringRepo();    StringWagon wagon = (StringWagon) wagonManager.getWagon("string");    wagon.addExpectedContent(repo.getLayout().pathOf(artifact), "expected");    wagonManager.getArtifact(artifact, repo, null, false);    assertTrue(artifact.getFile().exists());    assertEquals("expected", FileUtils.fileRead(artifact.getFile(), "UTF-8"));}
private Artifact maven_f1201_0(String directory) throws IOException
{    File testData = getTestFile(directory);    FileUtils.deleteDirectory(testData);    testData.mkdirs();    Artifact artifact = artifactFactory.createProjectArtifact("test", "test", "1.0");    artifact.setFile(new File(testData, "test-1.0.pom"));    assertFalse(artifact.getFile().exists());    return artifact;}
private Artifact maven_f1202_0(String directory, String type) throws IOException
{    return createTestArtifact(directory, "1.0", type);}
private Artifact maven_f1203_0(String directory, String version, String type) throws IOException
{    File testData = getTestFile(directory);    FileUtils.deleteDirectory(testData);    testData.mkdirs();    Artifact artifact = artifactFactory.createBuildArtifact("test", "test", version, type);    artifact.setFile(new File(testData, "test-" + version + "." + artifact.getArtifactHandler().getExtension()));    assertFalse(artifact.getFile().exists());    return artifact;}
private ArtifactRepository maven_f1204_0()
{    return artifactRepositoryFactory.createArtifactRepository("id", "string://url", new ArtifactRepositoryLayoutStub(), null, null);}
private ArtifactRepository maven_f1205_0(String id, String url)
{    return artifactRepositoryFactory.createArtifactRepository(id, url, new DefaultRepositoryLayout(), null, null);}
private ArtifactRepository maven_f1206_0(String id)
{    return getRepo(id, "http://something");}
public void maven_f1207_0() throws Exception
{    assertWagon("a");    assertWagon("b");    assertWagon("c");    assertWagon("string");    try {        assertWagon("d");        fail("Expected :" + UnsupportedProtocolException.class.getName());    } catch (UnsupportedProtocolException e) {                assertTrue(true);    }}
public void maven_f1208_0() throws Exception
{    Artifact artifact = createTestArtifact("target/test-data/transfer-listener", "jar");    ArtifactRepository repo = createStringRepo();    StringWagon wagon = (StringWagon) wagonManager.getWagon("string");    wagon.addExpectedContent(repo.getLayout().pathOf(artifact), "expected");    /* getArtifact */    assertFalse("Transfer listener is registered before test", wagon.getTransferEventSupport().hasTransferListener(transferListener));    wagonManager.getArtifact(artifact, repo, transferListener, false);    assertFalse("Transfer listener still registered after getArtifact", wagon.getTransferEventSupport().hasTransferListener(transferListener));    /* putArtifact */    File sampleFile = getTestFile("target/test-file");    FileUtils.fileWrite(sampleFile.getAbsolutePath(), "sample file");    assertFalse("Transfer listener is registered before test", wagon.getTransferEventSupport().hasTransferListener(transferListener));    wagonManager.putArtifact(sampleFile, artifact, repo, transferListener);    assertFalse("Transfer listener still registered after putArtifact", wagon.getTransferEventSupport().hasTransferListener(transferListener));}
public void maven_f1209_0() throws Exception
{    ArtifactRepositoryPolicy policy = new ArtifactRepositoryPolicy(true, ArtifactRepositoryPolicy.UPDATE_POLICY_ALWAYS, ArtifactRepositoryPolicy.CHECKSUM_POLICY_FAIL);    ArtifactRepository repo = artifactRepositoryFactory.createArtifactRepository("id", "string://url", new ArtifactRepositoryLayoutStub(), policy, policy);    Artifact artifact = new DefaultArtifact("sample.group", "sample-art", VersionRange.createFromVersion("1.0"), "scope", "jar", "classifier", null);    artifact.setFile(getTestFile("target/sample-art"));    StringWagon wagon = (StringWagon) wagonManager.getWagon("string");    wagon.clearExpectedContent();    wagon.addExpectedContent("path", "lower-case-checksum");    wagon.addExpectedContent("path.sha1", "2a25dc564a3b34f68237fc849066cbc7bb7a36a1");    try {        wagonManager.getArtifact(artifact, repo, null, false);    } catch (ChecksumFailedException e) {        fail("Checksum verification did not pass: " + e.getMessage());    }    wagon.clearExpectedContent();    wagon.addExpectedContent("path", "upper-case-checksum");    wagon.addExpectedContent("path.sha1", "B7BB97D7D0B9244398D9B47296907F73313663E6");    try {        wagonManager.getArtifact(artifact, repo, null, false);    } catch (ChecksumFailedException e) {        fail("Checksum verification did not pass: " + e.getMessage());    }    wagon.clearExpectedContent();    wagon.addExpectedContent("path", "expected-failure");    wagon.addExpectedContent("path.sha1", "b7bb97d7d0b9244398d9b47296907f73313663e6");    try {        wagonManager.getArtifact(artifact, repo, null, false);        fail("Checksum verification did not fail");    } catch (ChecksumFailedException e) {        }    wagon.clearExpectedContent();    wagon.addExpectedContent("path", "lower-case-checksum");    wagon.addExpectedContent("path.md5", "50b2cf50a103a965efac62b983035cac");    try {        wagonManager.getArtifact(artifact, repo, null, false);    } catch (ChecksumFailedException e) {        fail("Checksum verification did not pass: " + e.getMessage());    }    wagon.clearExpectedContent();    wagon.addExpectedContent("path", "upper-case-checksum");    wagon.addExpectedContent("path.md5", "842F568FCCFEB7E534DC72133D42FFDC");    try {        wagonManager.getArtifact(artifact, repo, null, false);    } catch (ChecksumFailedException e) {        fail("Checksum verification did not pass: " + e.getMessage());    }    wagon.clearExpectedContent();    wagon.addExpectedContent("path", "expected-failure");    wagon.addExpectedContent("path.md5", "b7bb97d7d0b9244398d9b47296907f73313663e6");    try {        wagonManager.getArtifact(artifact, repo, null, false);        fail("Checksum verification did not fail");    } catch (ChecksumFailedException e) {        }}
public void maven_f1210_0() throws Exception
{    String protocol = "perlookup";    Wagon one = wagonManager.getWagon(protocol);    Wagon two = wagonManager.getWagon(protocol);    assertNotSame(one, two);}
private void maven_f1211_0(String protocol) throws Exception
{    Wagon wagon = wagonManager.getWagon(protocol);    assertNotNull("Check wagon, protocol=" + protocol, wagon);}
public String maven_f1212_0()
{    return "test";}
public String maven_f1213_0(ArtifactMetadata metadata)
{    return "path";}
public String maven_f1214_0(ArtifactMetadata metadata, ArtifactRepository repository)
{    return "path";}
public String maven_f1215_0(Artifact artifact)
{    return "path";}
protected void maven_f1216_0(ContainerConfiguration containerConfiguration)
{    super.customizeContainerConfiguration(containerConfiguration);    containerConfiguration.setAutoWiring(true);    containerConfiguration.setClassPathScanning(PlexusConstants.SCANNING_INDEX);}
protected void maven_f1217_0() throws Exception
{    super.setUp();    repositorySystem = lookup(RepositorySystem.class, "default");}
protected void maven_f1218_0() throws Exception
{    repositorySystem = null;    super.tearDown();}
public void maven_f1219_0() throws Exception
{    File basedir = new File("target/spacy path").getAbsoluteFile();    ArtifactRepository repo = repositorySystem.createLocalRepository(basedir);    assertEquals(basedir, new File(repo.getBasedir()));}
public void maven_f1220_0() throws Exception
{    Server server = new Server();    server.setId("repository");    server.setUsername("jason");    server.setPassword("abc123");    ArtifactRepository repository = repositorySystem.createArtifactRepository("repository", "http://foo", null, null, null);    repositorySystem.injectAuthentication(Arrays.asList(repository), Arrays.asList(server));    Authentication authentication = repository.getAuthentication();    assertNotNull(authentication);    assertEquals("jason", authentication.getUsername());    assertEquals("abc123", authentication.getPassword());}
public String[] maven_f1221_0()
{    return new String[] { "perlookup" };}
protected void maven_f1222_0() throws Exception
{    super.setUp();    artifactFactory = (ArtifactFactory) lookup(ArtifactFactory.ROLE);    conflictResolver = (ConflictResolver) lookup(ConflictResolver.ROLE, roleHint);    a1 = createArtifact("a", "1.0");    a2 = createArtifact("a", "2.0");    b1 = createArtifact("b", "1.0");}
protected void maven_f1223_0() throws Exception
{    a1 = null;    a2 = null;    b1 = null;    artifactFactory = null;    conflictResolver = null;    super.tearDown();}
protected ConflictResolver maven_f1224_0()
{    return conflictResolver;}
protected void maven_f1225_0(ResolutionNode expectedNode, ResolutionNode actualNode1, ResolutionNode actualNode2)
{    ResolutionNode resolvedNode = getConflictResolver().resolveConflict(actualNode1, actualNode2);    assertNotNull("Expected resolvable", resolvedNode);    assertEquals("Resolution node", expectedNode, resolvedNode);}
protected Artifact maven_f1226_0(String id, String version) throws InvalidVersionSpecificationException
{    return createArtifact(id, version, Artifact.SCOPE_COMPILE);}
protected Artifact maven_f1227_0(String id, String version, String scope) throws InvalidVersionSpecificationException
{    return createArtifact(id, version, scope, null, false);}
protected Artifact maven_f1228_0(String id, String version, String scope, String inheritedScope, boolean optional) throws InvalidVersionSpecificationException
{    VersionRange versionRange = VersionRange.createFromVersionSpec(version);    return artifactFactory.createDependencyArtifact(GROUP_ID, id, versionRange, "jar", null, scope, inheritedScope, optional);}
protected ResolutionNode maven_f1229_0(Artifact Artifact)
{    return new ResolutionNode(Artifact, Collections.<ArtifactRepository>emptyList());}
protected ResolutionNode maven_f1230_0(Artifact Artifact, ResolutionNode parent)
{    return new ResolutionNode(Artifact, Collections.<ArtifactRepository>emptyList(), parent);}
public void maven_f1231_0()
{    ResolutionNode a1n = createResolutionNode(a1);    ResolutionNode b1n = createResolutionNode(b1);    ResolutionNode a2n = createResolutionNode(a2, b1n);    assertResolveConflict(a2n, a1n, a2n);}
public void maven_f1232_0()
{    ResolutionNode b1n = createResolutionNode(b1);    ResolutionNode a2n = createResolutionNode(a2, b1n);    ResolutionNode a1n = createResolutionNode(a1);    assertResolveConflict(a2n, a2n, a1n);}
public void maven_f1233_0()
{    ResolutionNode a1n = createResolutionNode(a1);    ResolutionNode a2n = createResolutionNode(a2);    assertResolveConflict(a1n, a1n, a2n);}
public void maven_f1234_0()
{    ResolutionNode a2n = createResolutionNode(a2);    ResolutionNode a1n = createResolutionNode(a1);    assertResolveConflict(a2n, a2n, a1n);}
public void maven_f1235_0()
{    ResolutionNode a1n = createResolutionNode(a1);    ResolutionNode b1n = createResolutionNode(b1);    ResolutionNode a2n = createResolutionNode(a2, b1n);    assertResolveConflict(a1n, a1n, a2n);}
public void maven_f1236_0()
{    ResolutionNode b1n = createResolutionNode(b1);    ResolutionNode a2n = createResolutionNode(a2, b1n);    ResolutionNode a1n = createResolutionNode(a1);    assertResolveConflict(a1n, a2n, a1n);}
public void maven_f1237_0()
{    ResolutionNode a1n = createResolutionNode(a1);    ResolutionNode a2n = createResolutionNode(a2);    assertResolveConflict(a1n, a1n, a2n);}
public void maven_f1238_0()
{    ResolutionNode a2n = createResolutionNode(a2);    ResolutionNode a1n = createResolutionNode(a1);    assertResolveConflict(a2n, a2n, a1n);}
public void maven_f1239_0()
{    ResolutionNode a1n = createResolutionNode(a1);    ResolutionNode b1n = createResolutionNode(b1);    ResolutionNode a2n = createResolutionNode(a2, b1n);    assertResolveConflict(a2n, a1n, a2n);}
public void maven_f1240_0()
{    ResolutionNode b1n = createResolutionNode(b1);    ResolutionNode a2n = createResolutionNode(a2, b1n);    ResolutionNode a1n = createResolutionNode(a1);    assertResolveConflict(a2n, a2n, a1n);}
public void maven_f1241_0()
{    ResolutionNode a1n = createResolutionNode(a1);    ResolutionNode a2n = createResolutionNode(a2);    assertResolveConflict(a2n, a1n, a2n);}
public void maven_f1242_0()
{    ResolutionNode a2n = createResolutionNode(a2);    ResolutionNode a1n = createResolutionNode(a1);    assertResolveConflict(a2n, a2n, a1n);}
public void maven_f1243_0()
{    ResolutionNode a1n = createResolutionNode(a1);    ResolutionNode b1n = createResolutionNode(b1);    ResolutionNode a2n = createResolutionNode(a2, b1n);    assertResolveConflict(a1n, a1n, a2n);}
public void maven_f1244_0()
{    ResolutionNode b1n = createResolutionNode(b1);    ResolutionNode a2n = createResolutionNode(a2, b1n);    ResolutionNode a1n = createResolutionNode(a1);    assertResolveConflict(a1n, a2n, a1n);}
public void maven_f1245_0()
{    ResolutionNode a1n = createResolutionNode(a1);    ResolutionNode a2n = createResolutionNode(a2);    assertResolveConflict(a1n, a1n, a2n);}
public void maven_f1246_0()
{    ResolutionNode a2n = createResolutionNode(a2);    ResolutionNode a1n = createResolutionNode(a1);    assertResolveConflict(a1n, a2n, a1n);}
protected void maven_f1247_0() throws Exception
{    super.setUp();    source = new Source();    artifactFactory = (ArtifactFactory) lookup(ArtifactFactory.ROLE);    artifactCollector = lookup(LegacyArtifactCollector.class);    projectArtifact = createArtifactSpec("project", "1.0", null);}
protected void maven_f1248_0() throws Exception
{    artifactCollector = null;    artifactFactory = null;    super.tearDown();}
public void maven_f1249_0() throws ArtifactResolutionException, InvalidVersionSpecificationException
{    ArtifactSpec a = createArtifactSpec("a", "1.0");    ArtifactSpec b = a.addDependency("b", "1.0");    b.addDependency("a", "1.0");    try {        collect(a);        fail("Should have failed on cyclic dependency not involving project");    } catch (CyclicDependencyException expected) {        assertTrue(true);    }}
public void maven_f1250_0() throws ArtifactResolutionException, InvalidVersionSpecificationException
{    ArtifactSpec a = createArtifactSpec("a", "1.0");    ArtifactSpec b = a.addDependency("b", "1.0");    b.addDependency("project", "1.0");    try {        collect(a);        fail("Should have failed on cyclic dependency involving project");    } catch (CyclicDependencyException expected) {        assertTrue(true);    }}
public void maven_f1251_0() throws ArtifactResolutionException, InvalidVersionSpecificationException
{    ArtifactSpec a = createArtifactSpec("a", "1.0");    ArtifactSpec b = a.addDependency("b", "1.0");    ArtifactSpec c = a.addDependency("c", "3.0");    b.addDependency("c", "2.0");    ArtifactSpec d = b.addDependency("d", "4.0");    ArtifactResolutionResult res = collect(a);    assertEquals("Check artifact list", createSet(new Object[] { a.artifact, b.artifact, c.artifact, d.artifact }), res.getArtifacts());    ArtifactFilter filter = new ExclusionSetFilter(new String[] { "b" });    res = collect(a, filter);    assertEquals("Check artifact list", createSet(new Object[] { a.artifact, c.artifact }), res.getArtifacts());}
public void maven_f1252_0() throws ArtifactResolutionException, InvalidVersionSpecificationException
{    ArtifactSpec a = createArtifactSpec("a", "1.0");    ArtifactSpec b = a.addDependency("b", "1.0");    ArtifactSpec c2 = b.addDependency("c", "2.0");    c2.addDependency("d", "1.0");    ArtifactSpec e = createArtifactSpec("e", "1.0");    ArtifactSpec c1 = e.addDependency("c", "1.0");    ArtifactSpec f = c1.addDependency("f", "1.0");    ArtifactResolutionResult res = collect(createSet(new Object[] { a.artifact, e.artifact }));    assertEquals("Check artifact list", createSet(new Object[] { a.artifact, b.artifact, e.artifact, c1.artifact, f.artifact }), res.getArtifacts());    assertEquals("Check version", "1.0", getArtifact("c", res.getArtifacts()).getVersion());}
public void maven_f1253_0() throws ArtifactResolutionException, InvalidVersionSpecificationException
{        ArtifactSpec a = createArtifactSpec("a", "1.0");    ArtifactSpec b = a.addDependency("b", "1.0");    ArtifactSpec c2 = b.addDependency("c", "2.0");    ArtifactSpec d = c2.addDependency("d", "1.0");    ArtifactSpec e = createArtifactSpec("e", "1.0");    ArtifactSpec c1 = e.addDependency("c", "1.0");    c1.addDependency("f", "1.0");    ArtifactResolutionResult res = collect(createSet(new Object[] { a.artifact, e.artifact }));    assertEquals("Check artifact list", createSet(new Object[] { a.artifact, b.artifact, e.artifact, c2.artifact, d.artifact }), res.getArtifacts());    assertEquals("Check version", "2.0", getArtifact("c", res.getArtifacts()).getVersion());}
public void maven_f1254_0() throws ArtifactResolutionException, InvalidVersionSpecificationException
{        ArtifactSpec a = createArtifactSpec("a", "1.0");    ArtifactSpec b1 = a.addDependency("b", "1.0");    ArtifactSpec c = a.addDependency("c", "1.0");    ArtifactSpec d2 = b1.addDependency("d", "2.0");    d2.addDependency("h", "1.0");    ArtifactSpec d1 = c.addDependency("d", "1.0");    ArtifactSpec b2 = c.addDependency("b", "2.0");    ArtifactSpec e = b2.addDependency("e", "1.0");    ArtifactSpec g = d1.addDependency("g", "1.0");    ArtifactResolutionResult res = collect(createSet(new Object[] { a.artifact }));    Object[] artifacts = new Object[] { a.artifact, c.artifact, d1.artifact, b2.artifact, e.artifact, g.artifact };    assertEquals("Check artifact list", createSet(artifacts), res.getArtifacts());    assertEquals("Check version", "1.0", getArtifact("d", res.getArtifacts()).getVersion());    assertEquals("Check version", "2.0", getArtifact("b", res.getArtifacts()).getVersion());}
public void maven_f1255_0() throws ArtifactResolutionException, InvalidVersionSpecificationException
{    ArtifactSpec a = createArtifactSpec("a", "1.0");    ArtifactSpec b = a.addDependency("b", "1.0");    ArtifactSpec c = a.addDependency("c", "3.0");    b.addDependency("c", "2.0");    ArtifactResolutionResult res = collect(a);    assertEquals("Check artifact list", createSet(new Object[] { a.artifact, b.artifact, c.artifact }), res.getArtifacts());    assertEquals("Check version", "3.0", getArtifact("c", res.getArtifacts()).getVersion());}
public void maven_f1256_0() throws ArtifactResolutionException, InvalidVersionSpecificationException
{    ArtifactSpec a = createArtifactSpec("a", "1.0");    ArtifactSpec b = a.addDependency("b", "1.0");    ArtifactSpec c = a.addDependency("c", "2.0");    b.addDependency("c", "3.0");    ArtifactResolutionResult res = collect(a);    assertEquals("Check artifact list", createSet(new Object[] { a.artifact, b.artifact, c.artifact }), res.getArtifacts());    assertEquals("Check version", "2.0", getArtifact("c", res.getArtifacts()).getVersion());}
public void maven_f1257_0() throws ArtifactResolutionException, InvalidVersionSpecificationException
{    ArtifactSpec a = createArtifactSpec("a", "1.0");    a.addDependency("b", "2.0");    ArtifactSpec b = createArtifactSpec("b", "3.0");    ArtifactResolutionResult res = collect(createSet(new Object[] { a.artifact, b.artifact }));    assertEquals("Check artifact list", createSet(new Object[] { a.artifact, b.artifact }), res.getArtifacts());    assertEquals("Check version", "3.0", getArtifact("b", res.getArtifacts()).getVersion());}
public void maven_f1258_0() throws ArtifactResolutionException, InvalidVersionSpecificationException
{    ArtifactSpec a = createArtifactSpec("a", "1.0");    a.addDependency("b", "3.0");    ArtifactSpec b = createArtifactSpec("b", "2.0");    ArtifactResolutionResult res = collect(createSet(new Object[] { a.artifact, b.artifact }));    assertEquals("Check artifact list", createSet(new Object[] { a.artifact, b.artifact }), res.getArtifacts());    assertEquals("Check version", "2.0", getArtifact("b", res.getArtifacts()).getVersion());}
public void maven_f1259_0() throws ArtifactResolutionException, InvalidVersionSpecificationException
{    ArtifactSpec a = createArtifactSpec("commons-logging", "1.0");    a.addDependency("junit", "3.7");    ArtifactSpec b = createArtifactSpec("junit", "3.8.1", Artifact.SCOPE_TEST);    ArtifactResolutionResult res = collect(createSet(new Object[] { a.artifact, b.artifact }));    assertEquals("Check artifact list", createSet(new Object[] { a.artifact, b.artifact }), res.getArtifacts());    assertEquals("Check version", "3.8.1", getArtifact("junit", res.getArtifacts()).getVersion());    assertEquals("Check artifactScope", Artifact.SCOPE_TEST, getArtifact("junit", res.getArtifacts()).getScope());}
public void maven_f1260_0() throws ArtifactResolutionException, InvalidVersionSpecificationException
{    ArtifactSpec b = createArtifactSpec("junit", "3.8.1", Artifact.SCOPE_TEST);    ArtifactSpec a = createArtifactSpec("commons-logging", "1.0");    a.addDependency("junit", "3.7");    ArtifactResolutionResult res = collect(createSet(new Object[] { a.artifact, b.artifact }));    assertEquals("Check artifact list", createSet(new Object[] { a.artifact, b.artifact }), res.getArtifacts());    assertEquals("Check version", "3.8.1", getArtifact("junit", res.getArtifacts()).getVersion());    assertEquals("Check artifactScope", Artifact.SCOPE_TEST, getArtifact("junit", res.getArtifacts()).getScope());}
public void maven_f1261_0() throws ArtifactResolutionException, InvalidVersionSpecificationException
{    ArtifactSpec a = createArtifactSpec("a", "1.0");    ArtifactSpec b = a.addDependency("b", "1.0");    ArtifactSpec c = a.addDependency("c", "2.0");    b.addDependency("c", "[1.0,3.0]");    ArtifactResolutionResult res = collect(a);    assertEquals("Check artifact list", createSet(new Object[] { a.artifact, b.artifact, c.artifact }), res.getArtifacts());    assertEquals("Check version", "2.0", getArtifact("c", res.getArtifacts()).getVersion());}
public void maven_f1262_0() throws ArtifactResolutionException, InvalidVersionSpecificationException
{    ArtifactSpec a = createArtifactSpec("a", "1.0");    ArtifactSpec b = a.addDependency("b", "[1.0,3.0]");    ArtifactSpec managedB = createArtifactSpec("b", "5.0");    ArtifactResolutionResult res = collect(a, managedB.artifact);    assertEquals("Check artifact list", createSet(new Object[] { a.artifact, managedB.artifact }), res.getArtifacts());    assertEquals("Check version", "5.0", getArtifact("b", res.getArtifacts()).getVersion());}
public void maven_f1263_0() throws ArtifactResolutionException, InvalidVersionSpecificationException
{    ArtifactSpec a = createArtifactSpec("a", "1.0");    ArtifactSpec b = a.addDependency("b", "1.0");    a.addDependency("c", "[2.0,2.5]");    b.addDependency("c", "[1.0,3.0]");    ArtifactSpec c = createArtifactSpec("c", "2.5");    ArtifactResolutionResult res = collect(a);    assertEquals("Check artifact list", createSet(new Object[] { a.artifact, b.artifact, c.artifact }), res.getArtifacts());    assertEquals("Check version", "2.5", getArtifact("c", res.getArtifacts()).getVersion());}
public void maven_f1264_0() throws ArtifactResolutionException, InvalidVersionSpecificationException
{    ArtifactSpec a = createArtifactSpec("a", "1.0");    ArtifactSpec b = a.addDependency("b", "1.0");    a.addDependency("c", "[2.4,3.0]");    b.addDependency("c", "[1.0,2.0]");    ArtifactResolutionResult res = collect(a);    assertTrue(res.hasVersionRangeViolations());}
public void maven_f1265_0() throws ArtifactResolutionException, InvalidVersionSpecificationException
{    ArtifactSpec a = createArtifactSpec("a", "1.0");    ArtifactSpec b = a.addDependency("b", "1.0");    a.addDependency("c", "[2.0,]");    b.addDependency("c", "[1.0,]");    ArtifactResolutionResult res = collect(a);    assertTrue(res.hasVersionRangeViolations());}
public void maven_f1266_0() throws ArtifactResolutionException, InvalidVersionSpecificationException
{    ArtifactSpec a = createArtifactSpec("a", "1.0");    createArtifactSpec("c", "1.5");    ArtifactSpec c = createArtifactSpec("c", "2.0");    createArtifactSpec("c", "1.1");    a.addDependency("c", "[1.0,)");    ArtifactResolutionResult res = collect(a);    assertEquals("Check artifact list", createSet(new Object[] { a.artifact, c.artifact }), res.getArtifacts());    assertEquals("Check version", "2.0", getArtifact("c", res.getArtifacts()).getVersion());}
public void maven_f1267_0() throws ArtifactResolutionException, InvalidVersionSpecificationException
{    ArtifactSpec a = createArtifactSpec("a", "1.0");    createArtifactSpec("c", "2.0");    a.addDependency("c", "[10.0,)");    ArtifactResolutionResult res = collect(a);    assertTrue(res.hasVersionRangeViolations());}
public void maven_f1268_0() throws ArtifactResolutionException, InvalidVersionSpecificationException
{    ArtifactSpec a = createArtifactSpec("a", "1.0");    a.addDependency("b", "3.0", Artifact.SCOPE_RUNTIME);    Artifact managedVersion = createArtifactSpec("b", "5.0").artifact;    Artifact modifiedB = createArtifactSpec("b", "5.0", Artifact.SCOPE_RUNTIME).artifact;    ArtifactResolutionResult res = collect(a, managedVersion);    assertEquals("Check artifact list", createSet(new Object[] { a.artifact, modifiedB }), res.getArtifacts());}
public void maven_f1269_0() throws ArtifactResolutionException, InvalidVersionSpecificationException
{    ArtifactSpec a = createArtifactSpec("a", "1.0");    Artifact artifact = projectArtifact.artifact;    Artifact managedVersion = createArtifactSpec(artifact.getArtifactId(), "2.0").artifact;    ArtifactResolutionResult result = collect(a, managedVersion);    assertEquals("collect has modified version in originating artifact", "1.0", artifact.getVersion());    Artifact resolvedArtifact = result.getArtifacts().iterator().next();    assertEquals("Resolved version don't match original artifact version", "1.0", resolvedArtifact.getVersion());}
public void maven_f1270_0() throws ArtifactResolutionException, InvalidVersionSpecificationException
{    ArtifactSpec a = createArtifactSpec("a", "1.0");    ArtifactSpec c = createArtifactSpec("c", "3.0", Artifact.SCOPE_TEST);    a.addDependency("c", "2.0", Artifact.SCOPE_COMPILE);    Artifact modifiedC = createArtifactSpec("c", "3.0", Artifact.SCOPE_COMPILE).artifact;    ArtifactResolutionResult res = collect(createSet(new Object[] { a.artifact, c.artifact }));    assertEquals("Check artifact list", createSet(new Object[] { a.artifact, modifiedC }), res.getArtifacts());    Artifact artifact = getArtifact("c", res.getArtifacts());            assertEquals("Check artifactScope", Artifact.SCOPE_TEST, artifact.getScope());}
public void maven_f1271_0() throws ArtifactResolutionException, InvalidVersionSpecificationException
{    ArtifactSpec a = createArtifactSpec("a", "1.0");    ArtifactSpec c = createArtifactSpec("c", "3.0", Artifact.SCOPE_TEST);    a.addDependency("c", "2.0", Artifact.SCOPE_RUNTIME);    Artifact modifiedC = createArtifactSpec("c", "3.0", Artifact.SCOPE_RUNTIME).artifact;    ArtifactResolutionResult res = collect(createSet(new Object[] { a.artifact, c.artifact }));    assertEquals("Check artifact list", createSet(new Object[] { a.artifact, modifiedC }), res.getArtifacts());    Artifact artifact = getArtifact("c", res.getArtifacts());            assertEquals("Check artifactScope", Artifact.SCOPE_TEST, artifact.getScope());}
public void maven_f1272_0() throws ArtifactResolutionException, InvalidVersionSpecificationException
{    ArtifactSpec root = createArtifactSpec("root", "1.0");    ArtifactSpec a = root.addDependency("a", "1.0");    root.addDependency("c", "3.0", Artifact.SCOPE_RUNTIME);    a.addDependency("c", "2.0", Artifact.SCOPE_COMPILE);    Artifact modifiedC = createArtifactSpec("c", "3.0", Artifact.SCOPE_COMPILE).artifact;    ArtifactResolutionResult res = collect(createSet(new Object[] { root.artifact }));    assertEquals("Check artifact list", createSet(new Object[] { a.artifact, root.artifact, modifiedC }), res.getArtifacts());    Artifact artifact = getArtifact("c", res.getArtifacts());    assertEquals("Check artifactScope", Artifact.SCOPE_COMPILE, artifact.getScope());}
public void maven_f1273_0() throws ArtifactResolutionException, InvalidVersionSpecificationException
{    ArtifactSpec a = createArtifactSpec("a", "1.0");    ArtifactSpec c = createArtifactSpec("c", "3.0", Artifact.SCOPE_PROVIDED);    a.addDependency("c", "2.0", Artifact.SCOPE_COMPILE);    Artifact modifiedC = createArtifactSpec("c", "3.0", Artifact.SCOPE_COMPILE).artifact;    ArtifactResolutionResult res = collect(createSet(new Object[] { a.artifact, c.artifact }));    assertEquals("Check artifact list", createSet(new Object[] { a.artifact, modifiedC }), res.getArtifacts());    Artifact artifact = getArtifact("c", res.getArtifacts());            assertEquals("Check artifactScope", Artifact.SCOPE_PROVIDED, artifact.getScope());}
public void maven_f1274_0() throws ArtifactResolutionException, InvalidVersionSpecificationException
{    ArtifactSpec a = createArtifactSpec("a", "1.0");    ArtifactSpec c = createArtifactSpec("c", "3.0", Artifact.SCOPE_PROVIDED);    a.addDependency("c", "2.0", Artifact.SCOPE_RUNTIME);    Artifact modifiedC = createArtifactSpec("c", "3.0", Artifact.SCOPE_RUNTIME).artifact;    ArtifactResolutionResult res = collect(createSet(new Object[] { a.artifact, c.artifact }));    assertEquals("Check artifact list", createSet(new Object[] { a.artifact, modifiedC }), res.getArtifacts());    Artifact artifact = getArtifact("c", res.getArtifacts());            assertEquals("Check artifactScope", Artifact.SCOPE_PROVIDED, artifact.getScope());}
public void maven_f1275_0() throws ArtifactResolutionException, InvalidVersionSpecificationException
{    ArtifactSpec a = createArtifactSpec("a", "1.0", Artifact.SCOPE_PROVIDED);    ArtifactSpec b = createArtifactSpec("b", "1.0");    b.addDependency("c", "3.0", Artifact.SCOPE_PROVIDED);    ArtifactResolutionResult res = collect(createSet(new Object[] { a.artifact, b.artifact }));    assertEquals("Check artifact list", createSet(new Object[] { a.artifact, b.artifact }), res.getArtifacts());}
public void maven_f1276_0() throws ArtifactResolutionException, InvalidVersionSpecificationException
{    ArtifactSpec a = createArtifactSpec("a", "1.0");    ArtifactSpec b = createArtifactSpec("b", "1.0");    b.addDependency("c", "3.0", true);    ArtifactResolutionResult res = collect(createSet(new Object[] { a.artifact, b.artifact }));    assertEquals("Check artifact list", createSet(new Object[] { a.artifact, b.artifact }), res.getArtifacts());}
public void maven_f1277_0() throws ArtifactResolutionException, InvalidVersionSpecificationException
{    ArtifactSpec a = createArtifactSpec("a", "1.0");    ArtifactSpec b = createArtifactSpec("b", "1.0", true);    ArtifactResolutionResult res = collect(createSet(new Object[] { a.artifact, b.artifact }));    assertEquals("Check artifact list", createSet(new Object[] { a.artifact, b.artifact }), res.getArtifacts());}
public void maven_f1278_0() throws InvalidVersionSpecificationException, ArtifactResolutionException
{    /* farthest = compile */    checkScopeUpdate(Artifact.SCOPE_COMPILE, Artifact.SCOPE_COMPILE, Artifact.SCOPE_COMPILE);    checkScopeUpdate(Artifact.SCOPE_COMPILE, Artifact.SCOPE_PROVIDED, Artifact.SCOPE_COMPILE);    checkScopeUpdate(Artifact.SCOPE_COMPILE, Artifact.SCOPE_RUNTIME, Artifact.SCOPE_COMPILE);    checkScopeUpdate(Artifact.SCOPE_COMPILE, Artifact.SCOPE_SYSTEM, Artifact.SCOPE_COMPILE);    checkScopeUpdate(Artifact.SCOPE_COMPILE, Artifact.SCOPE_TEST, Artifact.SCOPE_COMPILE);    /* farthest = provided */    checkScopeUpdate(Artifact.SCOPE_PROVIDED, Artifact.SCOPE_COMPILE, Artifact.SCOPE_COMPILE);    checkScopeUpdate(Artifact.SCOPE_PROVIDED, Artifact.SCOPE_PROVIDED, Artifact.SCOPE_PROVIDED);    checkScopeUpdate(Artifact.SCOPE_PROVIDED, Artifact.SCOPE_RUNTIME, Artifact.SCOPE_RUNTIME);    checkScopeUpdate(Artifact.SCOPE_PROVIDED, Artifact.SCOPE_SYSTEM, Artifact.SCOPE_SYSTEM);    checkScopeUpdate(Artifact.SCOPE_PROVIDED, Artifact.SCOPE_TEST, Artifact.SCOPE_TEST);    /* farthest = runtime */    checkScopeUpdate(Artifact.SCOPE_RUNTIME, Artifact.SCOPE_COMPILE, Artifact.SCOPE_COMPILE);    checkScopeUpdate(Artifact.SCOPE_RUNTIME, Artifact.SCOPE_PROVIDED, Artifact.SCOPE_RUNTIME);    checkScopeUpdate(Artifact.SCOPE_RUNTIME, Artifact.SCOPE_RUNTIME, Artifact.SCOPE_RUNTIME);    checkScopeUpdate(Artifact.SCOPE_RUNTIME, Artifact.SCOPE_SYSTEM, Artifact.SCOPE_SYSTEM);    checkScopeUpdate(Artifact.SCOPE_RUNTIME, Artifact.SCOPE_TEST, Artifact.SCOPE_RUNTIME);    /* farthest = system */    checkScopeUpdate(Artifact.SCOPE_SYSTEM, Artifact.SCOPE_COMPILE, Artifact.SCOPE_COMPILE);    checkScopeUpdate(Artifact.SCOPE_SYSTEM, Artifact.SCOPE_PROVIDED, Artifact.SCOPE_PROVIDED);    checkScopeUpdate(Artifact.SCOPE_SYSTEM, Artifact.SCOPE_RUNTIME, Artifact.SCOPE_RUNTIME);    checkScopeUpdate(Artifact.SCOPE_SYSTEM, Artifact.SCOPE_SYSTEM, Artifact.SCOPE_SYSTEM);    checkScopeUpdate(Artifact.SCOPE_SYSTEM, Artifact.SCOPE_TEST, Artifact.SCOPE_TEST);    /* farthest = test */    checkScopeUpdate(Artifact.SCOPE_TEST, Artifact.SCOPE_COMPILE, Artifact.SCOPE_COMPILE);    checkScopeUpdate(Artifact.SCOPE_TEST, Artifact.SCOPE_PROVIDED, Artifact.SCOPE_PROVIDED);    checkScopeUpdate(Artifact.SCOPE_TEST, Artifact.SCOPE_RUNTIME, Artifact.SCOPE_RUNTIME);    checkScopeUpdate(Artifact.SCOPE_TEST, Artifact.SCOPE_SYSTEM, Artifact.SCOPE_SYSTEM);    checkScopeUpdate(Artifact.SCOPE_TEST, Artifact.SCOPE_TEST, Artifact.SCOPE_TEST);}
private void maven_f1279_0(String farthestScope, String nearestScope, String expectedScope) throws ArtifactResolutionException, InvalidVersionSpecificationException
{    checkScopeUpdateDirect(farthestScope, nearestScope, expectedScope);    checkScopeUpdateTransitively(farthestScope, nearestScope, expectedScope);}
private void maven_f1280_0(String farthestScope, String nearestScope, String expectedScope) throws ArtifactResolutionException, InvalidVersionSpecificationException
{    ArtifactSpec a = createArtifactSpec("a", "1.0");    ArtifactSpec b = createArtifactSpec("b", "1.0", nearestScope);    ArtifactSpec c = createArtifactSpec("c", "1.0");    a.addDependency(c);    ArtifactSpec dNearest = createArtifactSpec("d", "2.0");    b.addDependency(dNearest);    ArtifactSpec dFarthest = createArtifactSpec("d", "3.0", farthestScope);    c.addDependency(dFarthest);    /* system and provided dependencies are not transitive */    if (!Artifact.SCOPE_SYSTEM.equals(nearestScope) && !Artifact.SCOPE_PROVIDED.equals(nearestScope)) {        checkScopeUpdate(a, b, expectedScope, "2.0");    }}
private void maven_f1281_0(String farthestScope, String nearestScope, String expectedScope) throws ArtifactResolutionException, InvalidVersionSpecificationException
{    ArtifactSpec a = createArtifactSpec("a", "1.0");    ArtifactSpec b = createArtifactSpec("b", "1.0");    ArtifactSpec c = createArtifactSpec("c", "1.0");    a.addDependency(c);    ArtifactSpec dNearest = createArtifactSpec("d", "2.0", nearestScope);    b.addDependency(dNearest);    ArtifactSpec dFarthest = createArtifactSpec("d", "3.0", farthestScope);    c.addDependency(dFarthest);    checkScopeUpdate(a, b, expectedScope, "2.0");}
private void maven_f1282_0(ArtifactSpec a, ArtifactSpec b, String expectedScope, String expectedVersion) throws ArtifactResolutionException, InvalidVersionSpecificationException
{    ScopeArtifactFilter filter;    if (Artifact.SCOPE_PROVIDED.equals(expectedScope)) {        filter = new ScopeArtifactFilter(Artifact.SCOPE_COMPILE);    } else if (Artifact.SCOPE_SYSTEM.equals(expectedScope)) {        filter = new ScopeArtifactFilter(Artifact.SCOPE_COMPILE);    } else {        filter = new ScopeArtifactFilter(expectedScope);    }    ArtifactResolutionResult res = collect(createSet(new Object[] { a.artifact, b.artifact }), filter);    Artifact artifact = getArtifact("d", res.getArtifacts());    assertNotNull("MNG-1895 Dependency was not added to resolution", artifact);    assertEquals("Check artifactScope", expectedScope, artifact.getScope());    assertEquals("Check version", expectedVersion, artifact.getVersion());    ArtifactSpec d = createArtifactSpec("d", "1.0");    res = collect(createSet(new Object[] { a.artifact, b.artifact, d.artifact }), filter);    artifact = getArtifact("d", res.getArtifacts());    assertNotNull("MNG-1895 Dependency was not added to resolution", artifact);    assertEquals("Check artifactScope", d.artifact.getScope(), artifact.getScope());    assertEquals("Check version", "1.0", artifact.getVersion());}
public void maven_f1283_0() throws ArtifactResolutionException, InvalidVersionSpecificationException
{    ArtifactSpec a = createArtifactSpec("a", "1.0");    ArtifactSpec b = createArtifactSpec("b", "1.0");    b.addDependency("c", "3.0", true);    ArtifactSpec d = a.addDependency("d", "1.0");    ArtifactSpec e = d.addDependency("e", "1.0");    e.addDependency("c", "2.0");    ArtifactSpec c = createArtifactSpec("c", "3.0");    ArtifactResolutionResult res = collect(createSet(new Object[] { a.artifact, b.artifact }));    assertEquals("Check artifact list", createSet(new Object[] { a.artifact, b.artifact, c.artifact, d.artifact, e.artifact }), res.getArtifacts());    Artifact artifact = getArtifact("c", res.getArtifacts());    assertEquals("Check version", "3.0", artifact.getVersion());}
public void maven_f1284_0() throws ArtifactResolutionException, InvalidVersionSpecificationException
{    ArtifactSpec a = createArtifactSpec("a", "1.0", Artifact.SCOPE_TEST);    ArtifactSpec b = createArtifactSpec("b", "1.0");    b.addDependency("c", "3.0", Artifact.SCOPE_TEST);    ArtifactResolutionResult res = collect(createSet(new Object[] { a.artifact, b.artifact }));    assertEquals("Check artifact list", createSet(new Object[] { a.artifact, b.artifact }), res.getArtifacts());}
public void maven_f1285_0() throws ArtifactResolutionException, InvalidVersionSpecificationException
{    ArtifactSpec a = createArtifactSpec("a", "1.0");    a.addDependency("b", "[1.0,)");    createArtifactSpec("b", "1.0-SNAPSHOT");    ArtifactResolutionResult res = collect(a);    assertTrue(res.hasVersionRangeViolations());/*         * try { ArtifactResolutionResult res = collect( a ); fail( "Expected b not to resolve: " + res ); } catch (         * OverConstrainedVersionException e ) { assertTrue( e.getMessage().indexOf( "[1.0-SNAPSHOT]" ) <         * e.getMessage().indexOf( "[1.0,)" ) ); }         */}
public void maven_f1286_0() throws ArtifactResolutionException, InvalidVersionSpecificationException
{    ArtifactSpec a = createArtifactSpec("a", "1.0");    a.addDependency("b", "[1.0, 2.0)");    a.addDependency("c", "[3.3.0,4.0.0)");    ArtifactSpec b = createArtifactSpec("b", "1.0.0");    b.addDependency("c", "3.3.0-v3346");    ArtifactSpec c = createArtifactSpec("c", "3.2.1-v3235e");    try {        ArtifactResolutionResult res = collect(createSet(new Object[] { a.artifact }));    } catch (OverConstrainedVersionException e) {        assertTrue("Versions unordered", e.getMessage().contains("[3.2.1-v3235e, 3.3.0-v3346]"));        assertTrue("DependencyTrail unresolved", e.getMessage().contains("Path to dependency:"));    }}
private Artifact maven_f1287_0(String id, Set artifacts)
{    for (Object artifact : artifacts) {        Artifact a = (Artifact) artifact;        if (a.getArtifactId().equals(id) && a.getGroupId().equals(GROUP_ID)) {            return a;        }    }    return null;}
private ArtifactResolutionResult maven_f1288_0(Set<Artifact> artifacts) throws ArtifactResolutionException
{    return collect(artifacts, null);}
private ArtifactResolutionResult maven_f1289_0(Set<Artifact> artifacts, ArtifactFilter filter) throws ArtifactResolutionException
{    return artifactCollector.collect(artifacts, projectArtifact.artifact, null, null, null, source, filter, Collections.<ResolutionListener>emptyList(), null);}
private ArtifactResolutionResult maven_f1290_0(ArtifactSpec a) throws ArtifactResolutionException
{    return artifactCollector.collect(Collections.singleton(a.artifact), projectArtifact.artifact, null, null, null, source, null, Collections.<ResolutionListener>emptyList(), null);}
private ArtifactResolutionResult maven_f1291_0(ArtifactSpec a, ArtifactFilter filter) throws ArtifactResolutionException
{    return artifactCollector.collect(Collections.singleton(a.artifact), projectArtifact.artifact, null, null, null, source, filter, Collections.<ResolutionListener>emptyList(), null);}
private ArtifactResolutionResult maven_f1292_0(ArtifactSpec a, Artifact managedVersion) throws ArtifactResolutionException
{    Map managedVersions = Collections.singletonMap(managedVersion.getDependencyConflictId(), managedVersion);    return artifactCollector.collect(Collections.singleton(a.artifact), projectArtifact.artifact, managedVersions, null, null, source, null, Collections.<ResolutionListener>emptyList(), null);}
private ArtifactSpec maven_f1293_0(String id, String version) throws InvalidVersionSpecificationException
{    return createArtifactSpec(id, version, Artifact.SCOPE_COMPILE);}
private ArtifactSpec maven_f1294_0(String id, String version, boolean optional) throws InvalidVersionSpecificationException
{    return createArtifactSpec(id, version, Artifact.SCOPE_COMPILE, null, optional);}
private ArtifactSpec maven_f1295_0(String id, String version, String scope) throws InvalidVersionSpecificationException
{    return createArtifactSpec(id, version, scope, null, false);}
private ArtifactSpec maven_f1296_0(String id, String version, String scope, String inheritedScope, boolean optional) throws InvalidVersionSpecificationException
{    VersionRange versionRange = VersionRange.createFromVersionSpec(version);    Artifact artifact = artifactFactory.createDependencyArtifact(GROUP_ID, id, versionRange, "jar", null, scope, inheritedScope, optional);    ArtifactSpec spec = null;    if (artifact != null) {        spec = new ArtifactSpec();        spec.artifact = artifact;        source.addArtifact(spec);    }    return spec;}
private static Set<Artifact> maven_f1297_0(Object[] x)
{    return new LinkedHashSet(Arrays.asList(x));}
public ArtifactSpec maven_f1298_0(String id, String version) throws InvalidVersionSpecificationException
{    return addDependency(id, version, Artifact.SCOPE_COMPILE);}
public ArtifactSpec maven_f1299_0(String id, String version, String scope) throws InvalidVersionSpecificationException
{    return addDependency(id, version, scope, false);}
private ArtifactSpec maven_f1300_0(ArtifactSpec dep) throws InvalidVersionSpecificationException
{    if (dep != null) {        dependencies.add(dep.artifact);    }    return dep;}
private ArtifactSpec maven_f1301_0(String id, String version, String scope, boolean optional) throws InvalidVersionSpecificationException
{    ArtifactSpec dep = createArtifactSpec(id, version, scope, artifact.getScope(), optional);    return addDependency(dep);}
public ArtifactSpec maven_f1302_0(String id, String version, boolean optional) throws InvalidVersionSpecificationException
{    return addDependency(id, version, Artifact.SCOPE_COMPILE, optional);}
public ResolutionGroup maven_f1303_0(Artifact artifact, ArtifactRepository localRepository, List<ArtifactRepository> remoteRepositories) throws ArtifactMetadataRetrievalException
{    String key = getKey(artifact);    ArtifactSpec a = (ArtifactSpec) artifacts.get(key);    try {        return new ResolutionGroup(artifact, createArtifacts(artifactFactory, a.dependencies, artifact.getScope(), artifact.getDependencyFilter()), Collections.EMPTY_LIST);    } catch (InvalidVersionSpecificationException e) {        throw new ArtifactMetadataRetrievalException("Invalid version creating artifacts", e, artifact);    }}
private String maven_f1304_0(Artifact artifact)
{    return artifact.getDependencyConflictId();}
private Set<Artifact> maven_f1305_0(ArtifactFactory artifactFactory, Set<Artifact> dependencies, String inheritedScope, ArtifactFilter dependencyFilter) throws InvalidVersionSpecificationException
{    Set<Artifact> projectArtifacts = new HashSet<>();    for (Artifact d : dependencies) {        VersionRange versionRange;        if (d.getVersionRange() != null) {            versionRange = d.getVersionRange();        } else {            versionRange = VersionRange.createFromVersionSpec(d.getVersion());        }        Artifact artifact;        if (d.getScope().equals(Artifact.SCOPE_TEST) || d.getScope().equals(Artifact.SCOPE_PROVIDED)) {            /* don't call createDependencyArtifact as it'll ignore test and provided scopes */            artifact = artifactFactory.createArtifact(d.getGroupId(), d.getArtifactId(), d.getVersion(), d.getScope(), d.getType());        } else {            artifact = artifactFactory.createDependencyArtifact(d.getGroupId(), d.getArtifactId(), versionRange, d.getType(), d.getClassifier(), d.getScope(), inheritedScope, d.isOptional());        }        if (artifact != null && (dependencyFilter == null || dependencyFilter.include(artifact))) {            artifact.setDependencyFilter(dependencyFilter);            projectArtifacts.add(artifact);        }    }    return projectArtifacts;}
public void maven_f1306_0(ArtifactSpec spec)
{    artifacts.put(getKey(spec.artifact), spec);    String key = spec.artifact.getDependencyConflictId();    List<ArtifactVersion> artifactVersions = versions.get(key);    if (artifactVersions == null) {        artifactVersions = new ArrayList<>();        versions.put(key, artifactVersions);    }    if (spec.artifact.getVersion() != null) {        artifactVersions.add(new DefaultArtifactVersion(spec.artifact.getVersion()));    }}
public List<ArtifactVersion> maven_f1307_0(Artifact artifact, ArtifactRepository localRepository, List<ArtifactRepository> remoteRepositories) throws ArtifactMetadataRetrievalException
{    return retrieveAvailableVersions(artifact);}
public List<ArtifactVersion> maven_f1308_0(Artifact artifact, ArtifactRepository localRepository, ArtifactRepository remoteRepository) throws ArtifactMetadataRetrievalException
{    return retrieveAvailableVersions(artifact);}
private List<ArtifactVersion> maven_f1309_0(Artifact artifact)
{    List<ArtifactVersion> artifactVersions = versions.get(artifact.getDependencyConflictId());    if (artifactVersions == null) {        artifactVersions = Collections.emptyList();    }    return artifactVersions;}
public ResolutionGroup maven_f1310_0(MetadataResolutionRequest request) throws ArtifactMetadataRetrievalException
{    return retrieve(request.getArtifact(), request.getLocalRepository(), request.getRemoteRepositories());}
public List<ArtifactVersion> maven_f1311_0(MetadataResolutionRequest request) throws ArtifactMetadataRetrievalException
{    return retrieveAvailableVersions(request.getArtifact(), request.getLocalRepository(), request.getRemoteRepositories());}
public void maven_f1312_0(String resourceName, String expectedContent)
{    this.expectedContent.put(resourceName, expectedContent);}
public String[] maven_f1313_0()
{    return new String[] { "string" };}
public void maven_f1314_0() throws ConnectionException
{}
public void maven_f1315_0(InputData inputData) throws TransferFailedException, ResourceDoesNotExistException, AuthorizationException
{    Resource resource = inputData.getResource();    String content = expectedContent.get(resource.getName());    if (content != null) {        resource.setContentLength(content.length());        resource.setLastModified(System.currentTimeMillis());        try {            inputData.setInputStream(new ByteArrayInputStream(content.getBytes("UTF-8")));        } catch (UnsupportedEncodingException e) {            throw new Error("broken JVM", e);        }    } else {        throw new ResourceDoesNotExistException("No content provided for " + resource.getName());    }}
public void maven_f1316_0(OutputData outputData) throws TransferFailedException
{    outputData.setOutputStream(new ByteArrayOutputStream());}
protected void maven_f1317_0() throws ConnectionException, AuthenticationException
{}
public void maven_f1318_0()
{    expectedContent.clear();}
public String[] maven_f1319_0()
{    return new String[] { "a" };}
public String[] maven_f1320_0()
{    return new String[] { "b1", "b2" };}
public String[] maven_f1321_0()
{    return new String[] { "c" };}
public void maven_f1322_0(String configurableField)
{    this.configurableField = configurableField;}
public String maven_f1323_0()
{    return configurableField;}
public String maven_f1324_0()
{    return "legacy";}
public String maven_f1325_0(Artifact artifact)
{    ArtifactHandler artifactHandler = artifact.getArtifactHandler();    StringBuilder path = new StringBuilder(128);    path.append(artifact.getGroupId()).append('/');    path.append(artifactHandler.getDirectory()).append('/');    path.append(artifact.getArtifactId()).append('-').append(artifact.getVersion());    if (artifact.hasClassifier()) {        path.append('-').append(artifact.getClassifier());    }    if (artifactHandler.getExtension() != null && artifactHandler.getExtension().length() > 0) {        path.append('.').append(artifactHandler.getExtension());    }    return path.toString();}
public String maven_f1326_0(ArtifactMetadata metadata, ArtifactRepository repository)
{    return pathOfRepositoryMetadata(metadata, metadata.getLocalFilename(repository));}
private String maven_f1327_0(ArtifactMetadata metadata, String filename)
{    StringBuilder path = new StringBuilder(128);    path.append(metadata.getGroupId()).append(PATH_SEPARATOR).append("poms").append(PATH_SEPARATOR);    path.append(filename);    return path.toString();}
public String maven_f1328_0(ArtifactMetadata metadata)
{    return pathOfRepositoryMetadata(metadata, metadata.getRemoteFilename());}
protected void maven_f1329_0(ContainerConfiguration containerConfiguration)
{    super.customizeContainerConfiguration(containerConfiguration);    containerConfiguration.setAutoWiring(true);    containerConfiguration.setClassPathScanning(PlexusConstants.SCANNING_INDEX);}
protected void maven_f1330_0() throws Exception
{    super.setUp();    repositorySystem = lookup(RepositorySystem.class, "default");    resolutionErrorHandler = lookup(ResolutionErrorHandler.class);}
protected void maven_f1331_0() throws Exception
{    repositorySystem = null;    resolutionErrorHandler = null;    super.tearDown();}
protected List<ArtifactRepository> maven_f1332_0() throws Exception
{    File repoDir = new File(getBasedir(), "src/test/remote-repo").getAbsoluteFile();    RepositoryPolicy policy = new RepositoryPolicy();    policy.setEnabled(true);    policy.setChecksumPolicy("ignore");    policy.setUpdatePolicy("always");    Repository repository = new Repository();    repository.setId(RepositorySystem.DEFAULT_REMOTE_REPO_ID);    repository.setUrl("file://" + repoDir.toURI().getPath());    repository.setReleases(policy);    repository.setSnapshots(policy);    return Arrays.asList(repositorySystem.buildArtifactRepository(repository));}
protected ArtifactRepository maven_f1333_0() throws Exception
{    File repoDir = new File(getBasedir(), "target/local-repo").getAbsoluteFile();    return repositorySystem.createLocalRepository(repoDir);}
public void maven_f1334_0() throws Exception
{                Dependency d = new Dependency();    d.setGroupId("org.apache.maven.its");    d.setArtifactId("b");    d.setVersion("0.1");    d.setScope(Artifact.SCOPE_COMPILE);    Artifact artifact = repositorySystem.createDependencyArtifact(d);    ArtifactResolutionRequest request = new ArtifactResolutionRequest().setArtifact(artifact).setResolveRoot(true).setResolveTransitively(true).setRemoteRepositories(getRemoteRepositories()).setLocalRepository(getLocalRepository());    DefaultRepositorySystemSession session = new DefaultRepositorySystemSession();    LocalRepository localRepo = new LocalRepository(request.getLocalRepository().getBasedir());    session.setLocalRepositoryManager(new SimpleLocalRepositoryManagerFactory().newInstance(session, localRepo));    LegacySupport legacySupport = lookup(LegacySupport.class);    legacySupport.setSession(new MavenSession(getContainer(), session, new DefaultMavenExecutionRequest(), new DefaultMavenExecutionResult()));    ArtifactResolutionResult result = repositorySystem.resolve(request);    resolutionErrorHandler.throwErrors(request, result);    assertEquals(2, result.getArtifacts().size());                d.setScope(Artifact.SCOPE_SYSTEM);    File file = new File(getBasedir(), "src/test/repository-system/maven-core-2.1.0.jar");    assertTrue(file.exists());    d.setSystemPath(file.getCanonicalPath());    artifact = repositorySystem.createDependencyArtifact(d);                    request = new ArtifactResolutionRequest().setArtifact(artifact).setResolveRoot(true).setResolveTransitively(true);    result = repositorySystem.resolve(request);    resolutionErrorHandler.throwErrors(request, result);    assertEquals(1, result.getArtifacts().size());                file = new File(getBasedir(), "src/test/repository-system/maven-monkey-2.1.0.jar");    assertFalse(file.exists());    d.setSystemPath(file.getCanonicalPath());    artifact = repositorySystem.createDependencyArtifact(d);                    request = new ArtifactResolutionRequest().setArtifact(artifact).setResolveRoot(true).setResolveTransitively(true);    try {        result = repositorySystem.resolve(request);        resolutionErrorHandler.throwErrors(request, result);    } catch (Exception e) {        assertTrue(result.hasMissingArtifacts());    }}
public void maven_f1335_0() throws Exception
{    File localRepoDir = new File("").getAbsoluteFile();    ArtifactRepository localRepo = repositorySystem.createLocalRepository(localRepoDir);    String basedir = localRepo.getBasedir();    assertFalse(basedir.endsWith("/"));    assertFalse(basedir.endsWith("\\"));    assertEquals(localRepoDir, new File(basedir));    assertEquals(localRepoDir.getPath(), basedir);}
protected void maven_f1336_0() throws Exception
{    super.setUp();    transform = (ClasspathTransformation) lookup(ClasspathTransformation.ROLE, "default");    graph = new MetadataGraph(4, 3);    /*    	 *       v2    	 *   v1<    	 *       v3-v4    	 *    	 */    v1 = graph.addVertex(new ArtifactMetadata("g", "a1", "1.0"));    graph.setEntry(v1);    v2 = graph.addVertex(new ArtifactMetadata("g", "a2", "1.0"));    v3 = graph.addVertex(new ArtifactMetadata("g", "a3", "1.0"));    v4 = graph.addVertex(new ArtifactMetadata("g", "a4", "1.0"));        graph.addEdge(v1, v2, new MetadataGraphEdge("1.1", true, null, null, 2, 1));    graph.addEdge(v1, v2, new MetadataGraphEdge("1.2", true, null, null, 2, 2));        graph.addEdge(v1, v3, new MetadataGraphEdge("1.1", true, null, null, 2, 1));    graph.addEdge(v1, v3, new MetadataGraphEdge("1.2", true, null, null, 4, 2));        graph.addEdge(v3, v4, new MetadataGraphEdge("1.1", true, ArtifactScopeEnum.runtime, null, 2, 2));    graph.addEdge(v3, v4, new MetadataGraphEdge("1.2", true, ArtifactScopeEnum.test, null, 2, 2));}
public void maven_f1337_0() throws Exception
{    ClasspathContainer res;    res = transform.transform(graph, ArtifactScopeEnum.compile, false);    assertNotNull("null classpath container after compile transform", res);    assertNotNull("null classpath after compile transform", res.getClasspath());    assertEquals("compile classpath should have 3 entries", 3, res.getClasspath().size());}
public void maven_f1338_0() throws Exception
{    ClasspathContainer res;    res = transform.transform(graph, ArtifactScopeEnum.runtime, false);    assertNotNull("null classpath container after runtime transform", res);    assertNotNull("null classpath after runtime transform", res.getClasspath());    assertEquals("runtime classpath should have 4 entries", 4, res.getClasspath().size());    ArtifactMetadata md = res.getClasspath().get(3);    assertEquals("runtime artifact version should be 1.1", "1.1", md.getVersion());}
public void maven_f1339_0() throws Exception
{    ClasspathContainer res;    res = transform.transform(graph, ArtifactScopeEnum.test, false);    assertNotNull("null classpath container after runtime transform", res);    assertNotNull("null classpath after runtime transform", res.getClasspath());    assertEquals("runtime classpath should have 4 entries", 4, res.getClasspath().size());    ArtifactMetadata md = res.getClasspath().get(3);    assertEquals("test artifact version should be 1.2", "1.2", md.getVersion());}
protected void maven_f1340_0() throws Exception
{    super.setUp();    policy = (GraphConflictResolutionPolicy) lookup(GraphConflictResolutionPolicy.ROLE, "default");    e1 = new MetadataGraphEdge("1.1", true, null, null, 2, 1);    e2 = new MetadataGraphEdge("1.2", true, null, null, 3, 2);    e3 = new MetadataGraphEdge("1.2", true, null, null, 2, 3);}
public void maven_f1341_0() throws Exception
{    MetadataGraphEdge res;    res = policy.apply(e1, e2);    assertEquals("Wrong depth edge selected", "1.1", res.getVersion());    res = policy.apply(e1, e3);    assertEquals("Wrong version edge selected", "1.2", res.getVersion());}
protected void maven_f1342_0() throws Exception
{    super.setUp();    resolver = (GraphConflictResolver) lookup(GraphConflictResolver.ROLE, "default");    /*    	 *       v2    	 *   v1<    	 *      v3-v4    	 *    	 */    graph = new MetadataGraph(4, 3);    v1 = graph.addVertex(new ArtifactMetadata("g", "a1", "1.0"));    graph.setEntry(v1);    v2 = graph.addVertex(new ArtifactMetadata("g", "a2", "1.0"));    v3 = graph.addVertex(new ArtifactMetadata("g", "a3", "1.0"));    v4 = graph.addVertex(new ArtifactMetadata("g", "a4", "1.0"));        graph.addEdge(v1, v2, new MetadataGraphEdge("1.1", true, null, null, 2, 1));    graph.addEdge(v1, v2, new MetadataGraphEdge("1.2", true, null, null, 2, 2));        graph.addEdge(v1, v3, new MetadataGraphEdge("1.1", true, null, null, 2, 1));    graph.addEdge(v1, v3, new MetadataGraphEdge("1.2", true, null, null, 4, 2));        graph.addEdge(v3, v4, new MetadataGraphEdge("1.1", true, ArtifactScopeEnum.runtime, null, 2, 1));    graph.addEdge(v3, v4, new MetadataGraphEdge("1.2", true, ArtifactScopeEnum.provided, null, 2, 2));}
public void maven_f1343_0() throws Exception
{    MetadataGraph res;    res = resolver.resolveConflicts(graph, ArtifactScopeEnum.compile);    assertNotNull("null graph after resolver", res);    assertNotNull("no vertices in the resulting graph after resolver", res.getVertices());    assertNotNull("no edges in the resulting graph after resolver", res.getExcidentEdges(v1));    assertEquals("wrong # of vertices in the resulting graph after resolver", 4, res.getVertices().size());    assertEquals("wrong # of excident edges in the resulting graph entry after resolver", 2, res.getExcidentEdges(v1).size());    assertEquals("wrong # of v2 incident edges in the resulting graph after resolver", 1, res.getIncidentEdges(v2).size());    assertEquals("wrong edge v1-v2 in the resulting graph after resolver", "1.2", res.getIncidentEdges(v2).get(0).getVersion());    assertEquals("wrong # of edges v1-v3 in the resulting graph after resolver", 1, res.getIncidentEdges(v3).size());    assertEquals("wrong edge v1-v3 in the resulting graph after resolver", "1.1", res.getIncidentEdges(v3).get(0).getVersion());    assertEquals("wrong # of edges v3-v4 in the resulting graph after resolver", 1, res.getIncidentEdges(v4).size());    assertEquals("wrong edge v3-v4 in the resulting graph after resolver", "1.2", res.getIncidentEdges(v4).get(0).getVersion());}
public void maven_f1344_0() throws Exception
{    MetadataGraph res;    res = resolver.resolveConflicts(graph, ArtifactScopeEnum.runtime);    assertNotNull("null graph after resolver", res);    assertNotNull("no vertices in the resulting graph after resolver", res.getVertices());    assertNotNull("no edges in the resulting graph after resolver", res.getExcidentEdges(v1));    assertEquals("wrong # of vertices in the resulting graph after resolver", 4, res.getVertices().size());    assertEquals("wrong # of excident edges in the resulting graph entry after resolver", 2, res.getExcidentEdges(v1).size());    assertEquals("wrong # of v2 incident edges in the resulting graph after resolver", 1, res.getIncidentEdges(v2).size());    assertEquals("wrong edge v1-v2 in the resulting graph after resolver", "1.2", res.getIncidentEdges(v2).get(0).getVersion());    assertEquals("wrong # of edges v1-v3 in the resulting graph after resolver", 1, res.getIncidentEdges(v3).size());    assertEquals("wrong edge v1-v3 in the resulting graph after resolver", "1.1", res.getIncidentEdges(v3).get(0).getVersion());    assertEquals("wrong # of edges v3-v4 in the resulting graph after resolver", 1, res.getIncidentEdges(v4).size());    assertEquals("wrong edge v3-v4 in the resulting graph after resolver", "1.1", res.getIncidentEdges(v4).get(0).getVersion());}
public void maven_f1345_0() throws Exception
{    MetadataGraph res;    res = resolver.resolveConflicts(graph, ArtifactScopeEnum.test);    assertNotNull("null graph after resolver", res);    assertNotNull("no vertices in the resulting graph after resolver", res.getVertices());    assertNotNull("no edges in the resulting graph after resolver", res.getExcidentEdges(v1));    assertEquals("wrong # of vertices in the resulting graph after resolver", 4, res.getVertices().size());    assertEquals("wrong # of excident edges in the resulting graph entry after resolver", 2, res.getExcidentEdges(v1).size());    assertEquals("wrong # of v2 incident edges in the resulting graph after resolver", 1, res.getIncidentEdges(v2).size());    assertEquals("wrong edge v1-v2 in the resulting graph after resolver", "1.2", res.getIncidentEdges(v2).get(0).getVersion());    assertEquals("wrong # of edges v1-v3 in the resulting graph after resolver", 1, res.getIncidentEdges(v3).size());    assertEquals("wrong edge v1-v3 in the resulting graph after resolver", "1.1", res.getIncidentEdges(v3).get(0).getVersion());    assertEquals("wrong # of edges v3-v4 in the resulting graph after resolver", 1, res.getIncidentEdges(v4).size());    assertEquals("wrong edge v3-v4 in the resulting graph after resolver", "1.2", res.getIncidentEdges(v4).get(0).getVersion());}
public ResolutionGroup maven_f1346_0(Artifact artifact, ArtifactRepository localRepository, List<ArtifactRepository> remoteRepositories) throws ArtifactMetadataRetrievalException
{    Set<Artifact> dependencies = new HashSet<>();    if ("g".equals(artifact.getArtifactId())) {        Artifact a = null;        try {            a = factory.createBuildArtifact("org.apache.maven", "h", "1.0", "jar");            dependencies.add(a);        } catch (Exception e) {            throw new ArtifactMetadataRetrievalException("Error retrieving metadata", e, a);        }    }    if ("i".equals(artifact.getArtifactId())) {        Artifact a = null;        try {            a = factory.createBuildArtifact("org.apache.maven", "j", "1.0-SNAPSHOT", "jar");            dependencies.add(a);        } catch (Exception e) {            throw new ArtifactMetadataRetrievalException("Error retrieving metadata", e, a);        }    }    return new ResolutionGroup(artifact, dependencies, remoteRepositories);}
public List<ArtifactVersion> maven_f1347_0(Artifact artifact, ArtifactRepository localRepository, List<ArtifactRepository> remoteRepositories) throws ArtifactMetadataRetrievalException
{    throw new UnsupportedOperationException("Cannot get available versions in this test case");}
public List<ArtifactVersion> maven_f1348_0(Artifact artifact, ArtifactRepository localRepository, ArtifactRepository remoteRepository) throws ArtifactMetadataRetrievalException
{    throw new UnsupportedOperationException("Cannot get available versions in this test case");}
public ResolutionGroup maven_f1349_0(MetadataResolutionRequest request) throws ArtifactMetadataRetrievalException
{    return retrieve(request.getArtifact(), request.getLocalRepository(), request.getRemoteRepositories());}
protected void maven_f1350_0() throws Exception
{    mirrorSelector = (DefaultMirrorSelector) lookup(MirrorSelector.class);    repositorySystem = lookup(ArtifactRepositoryFactory.class);}
protected void maven_f1351_0() throws Exception
{    mirrorSelector = null;    repositorySystem = null;    super.tearDown();}
public void maven_f1352_0()
{    assertTrue(DefaultMirrorSelector.isExternalRepo(getRepo("foo", "http://somehost")));    assertTrue(DefaultMirrorSelector.isExternalRepo(getRepo("foo", "http://somehost:9090/somepath")));    assertTrue(DefaultMirrorSelector.isExternalRepo(getRepo("foo", "ftp://somehost")));    assertTrue(DefaultMirrorSelector.isExternalRepo(getRepo("foo", "http://192.168.101.1")));    assertTrue(DefaultMirrorSelector.isExternalRepo(getRepo("foo", "http://")));        assertFalse(DefaultMirrorSelector.isExternalRepo(getRepo("foo", "http://localhost:8080")));    assertFalse(DefaultMirrorSelector.isExternalRepo(getRepo("foo", "http://127.0.0.1:9090")));    assertFalse(DefaultMirrorSelector.isExternalRepo(getRepo("foo", "file://localhost/somepath")));    assertFalse(DefaultMirrorSelector.isExternalRepo(getRepo("foo", "file://localhost/D:/somepath")));    assertFalse(DefaultMirrorSelector.isExternalRepo(getRepo("foo", "http://localhost")));    assertFalse(DefaultMirrorSelector.isExternalRepo(getRepo("foo", "http://127.0.0.1")));    assertFalse(DefaultMirrorSelector.isExternalRepo(getRepo("foo", "file:///somepath")));    assertFalse(DefaultMirrorSelector.isExternalRepo(getRepo("foo", "file://D:/somepath")));        assertFalse(DefaultMirrorSelector.isExternalRepo(getRepo("foo", "192.168.101.1")));    assertFalse(DefaultMirrorSelector.isExternalRepo(getRepo("foo", "")));}
public void maven_f1353_0()
{    Mirror mirrorA = newMirror("a", "a", "http://a");    Mirror mirrorB = newMirror("b", "b", "http://b");    List<Mirror> mirrors = Arrays.asList(mirrorA, mirrorB);    assertSame(mirrorA, mirrorSelector.getMirror(getRepo("a", "http://a.a"), mirrors));    assertSame(mirrorB, mirrorSelector.getMirror(getRepo("b", "http://a.a"), mirrors));    assertNull(mirrorSelector.getMirror(getRepo("c", "http://c.c"), mirrors));}
public void maven_f1354_0()
{    Mirror mirrorA = newMirror("a", "a", "http://a");    Mirror mirrorB = newMirror("b", "b", "http://b");    Mirror mirrorC = newMirror("c", "*", "http://wildcard");    List<Mirror> mirrors = Arrays.asList(mirrorA, mirrorB, mirrorC);    assertSame(mirrorA, mirrorSelector.getMirror(getRepo("a", "http://a.a"), mirrors));    assertSame(mirrorB, mirrorSelector.getMirror(getRepo("b", "http://a.a"), mirrors));    assertSame(mirrorC, mirrorSelector.getMirror(getRepo("c", "http://c.c"), mirrors));}
public void maven_f1355_0()
{        Mirror mirrorA2 = newMirror("a2", "a,b", "http://a2");    Mirror mirrorA = newMirror("a", "a", "http://a");        Mirror mirrorA3 = newMirror("a", "a", "http://a3");    Mirror mirrorB = newMirror("b", "b", "http://b");    Mirror mirrorC = newMirror("c", "d,e", "http://de");    Mirror mirrorC2 = newMirror("c", "*", "http://wildcard");    Mirror mirrorC3 = newMirror("c", "e,f", "http://ef");    List<Mirror> mirrors = Arrays.asList(mirrorA2, mirrorA, mirrorA3, mirrorB, mirrorC, mirrorC2, mirrorC3);    assertSame(mirrorA, mirrorSelector.getMirror(getRepo("a", "http://a.a"), mirrors));    assertSame(mirrorB, mirrorSelector.getMirror(getRepo("b", "http://a.a"), mirrors));    assertSame(mirrorC2, mirrorSelector.getMirror(getRepo("c", "http://c.c"), mirrors));    assertSame(mirrorC, mirrorSelector.getMirror(getRepo("d", "http://d"), mirrors));    assertSame(mirrorC, mirrorSelector.getMirror(getRepo("e", "http://e"), mirrors));    assertSame(mirrorC2, mirrorSelector.getMirror(getRepo("f", "http://f"), mirrors));}
public void maven_f1356_0()
{    assertTrue(DefaultMirrorSelector.matchPattern(getRepo("a"), "*"));    assertTrue(DefaultMirrorSelector.matchPattern(getRepo("a"), "*,"));    assertTrue(DefaultMirrorSelector.matchPattern(getRepo("a"), ",*,"));    assertTrue(DefaultMirrorSelector.matchPattern(getRepo("a"), "*,"));    assertTrue(DefaultMirrorSelector.matchPattern(getRepo("a"), "a"));    assertTrue(DefaultMirrorSelector.matchPattern(getRepo("a"), "a,"));    assertTrue(DefaultMirrorSelector.matchPattern(getRepo("a"), ",a,"));    assertTrue(DefaultMirrorSelector.matchPattern(getRepo("a"), "a,"));    assertFalse(DefaultMirrorSelector.matchPattern(getRepo("b"), "a"));    assertFalse(DefaultMirrorSelector.matchPattern(getRepo("b"), "a,"));    assertFalse(DefaultMirrorSelector.matchPattern(getRepo("b"), ",a"));    assertFalse(DefaultMirrorSelector.matchPattern(getRepo("b"), ",a,"));    assertTrue(DefaultMirrorSelector.matchPattern(getRepo("a"), "a,b"));    assertTrue(DefaultMirrorSelector.matchPattern(getRepo("b"), "a,b"));    assertFalse(DefaultMirrorSelector.matchPattern(getRepo("c"), "a,b"));    assertTrue(DefaultMirrorSelector.matchPattern(getRepo("a"), "*"));    assertTrue(DefaultMirrorSelector.matchPattern(getRepo("a"), "*,b"));    assertTrue(DefaultMirrorSelector.matchPattern(getRepo("a"), "*,!b"));    assertFalse(DefaultMirrorSelector.matchPattern(getRepo("a"), "*,!a"));    assertFalse(DefaultMirrorSelector.matchPattern(getRepo("a"), "!a,*"));    assertTrue(DefaultMirrorSelector.matchPattern(getRepo("c"), "*,!a"));    assertTrue(DefaultMirrorSelector.matchPattern(getRepo("c"), "!a,*"));    assertFalse(DefaultMirrorSelector.matchPattern(getRepo("c"), "!a,!c"));    assertFalse(DefaultMirrorSelector.matchPattern(getRepo("d"), "!a,!c*"));}
public void maven_f1357_0()
{    assertTrue(DefaultMirrorSelector.matchPattern(getRepo("a", "http://localhost"), "*"));    assertFalse(DefaultMirrorSelector.matchPattern(getRepo("a", "http://localhost"), "external:*"));    assertTrue(DefaultMirrorSelector.matchPattern(getRepo("a", "http://localhost"), "external:*,a"));    assertFalse(DefaultMirrorSelector.matchPattern(getRepo("a", "http://localhost"), "external:*,!a"));    assertTrue(DefaultMirrorSelector.matchPattern(getRepo("a", "http://localhost"), "a,external:*"));    assertFalse(DefaultMirrorSelector.matchPattern(getRepo("a", "http://localhost"), "!a,external:*"));    assertFalse(DefaultMirrorSelector.matchPattern(getRepo("c", "http://localhost"), "!a,external:*"));    assertTrue(DefaultMirrorSelector.matchPattern(getRepo("c", "http://somehost"), "!a,external:*"));}
public void maven_f1358_0()
{    assertTrue(DefaultMirrorSelector.matchesLayout("default", null));    assertTrue(DefaultMirrorSelector.matchesLayout("default", ""));    assertTrue(DefaultMirrorSelector.matchesLayout("default", "*"));    assertTrue(DefaultMirrorSelector.matchesLayout("default", "default"));    assertFalse(DefaultMirrorSelector.matchesLayout("default", "legacy"));    assertTrue(DefaultMirrorSelector.matchesLayout("default", "legacy,default"));    assertTrue(DefaultMirrorSelector.matchesLayout("default", "default,legacy"));    assertFalse(DefaultMirrorSelector.matchesLayout("default", "legacy,!default"));    assertFalse(DefaultMirrorSelector.matchesLayout("default", "!default,legacy"));    assertFalse(DefaultMirrorSelector.matchesLayout("default", "*,!default"));    assertFalse(DefaultMirrorSelector.matchesLayout("default", "!default,*"));}
public void maven_f1359_0()
{    ArtifactRepository repo = getRepo("a");    Mirror mirrorA = newMirror("a", "a", null, "http://a");    Mirror mirrorB = newMirror("b", "a", "p2", "http://b");    Mirror mirrorC = newMirror("c", "*", null, "http://c");    Mirror mirrorD = newMirror("d", "*", "p2", "http://d");    assertSame(mirrorA, mirrorSelector.getMirror(repo, Arrays.asList(mirrorA)));    assertNull(mirrorSelector.getMirror(repo, Arrays.asList(mirrorB)));    assertSame(mirrorC, mirrorSelector.getMirror(repo, Arrays.asList(mirrorC)));    assertNull(mirrorSelector.getMirror(repo, Arrays.asList(mirrorD)));}
private ArtifactRepository maven_f1360_0(String id, String url)
{    return repositorySystem.createArtifactRepository(id, url, new DefaultRepositoryLayout(), null, null);}
private ArtifactRepository maven_f1361_0(String id)
{    return getRepo(id, "http://something");}
private Mirror maven_f1362_0(String id, String mirrorOf, String url)
{    return newMirror(id, mirrorOf, null, url);}
private Mirror maven_f1363_0(String id, String mirrorOf, String layouts, String url)
{    Mirror mirror = new Mirror();    mirror.setId(id);    mirror.setMirrorOf(mirrorOf);    mirror.setMirrorOfLayouts(layouts);    mirror.setUrl(url);    return mirror;}
public void maven_f1364_0(MavenSession session) throws MavenExecutionException
{}
public void maven_f1365_0(MavenSession session) throws MavenExecutionException
{}
public void maven_f1366_0(MavenSession session) throws MavenExecutionException
{}
public Artifact maven_f1367_0(String groupId, String artifactId, String version, String scope, String type)
{    return createArtifact(groupId, artifactId, version, scope, type, null, null);}
public Artifact maven_f1368_0(String groupId, String artifactId, String version, String type, String classifier)
{    return createArtifact(groupId, artifactId, version, null, type, classifier, null);}
public Artifact maven_f1369_0(String groupId, String artifactId, VersionRange versionRange, String type, String classifier, String scope)
{    return createArtifact(groupId, artifactId, versionRange, type, classifier, scope, null);}
public Artifact maven_f1370_0(String groupId, String artifactId, VersionRange versionRange, String type, String classifier, String scope, boolean optional)
{    return createArtifact(groupId, artifactId, versionRange, type, classifier, scope, null, optional);}
public Artifact maven_f1371_0(String groupId, String artifactId, VersionRange versionRange, String type, String classifier, String scope, String inheritedScope)
{    return createArtifact(groupId, artifactId, versionRange, type, classifier, scope, inheritedScope);}
public Artifact maven_f1372_0(String groupId, String artifactId, VersionRange versionRange, String type, String classifier, String scope, String inheritedScope, boolean optional)
{    return createArtifact(groupId, artifactId, versionRange, type, classifier, scope, inheritedScope, optional);}
public Artifact maven_f1373_0(String groupId, String artifactId, String version, String packaging)
{    return createArtifact(groupId, artifactId, version, null, packaging, null, null);}
public Artifact maven_f1374_0(String groupId, String artifactId, String version)
{    return createProjectArtifact(groupId, artifactId, version, null);}
public Artifact maven_f1375_0(String groupId, String artifactId, String version)
{    return createProjectArtifact(groupId, artifactId, version);}
public Artifact maven_f1376_0(String groupId, String artifactId, VersionRange versionRange)
{    return createArtifact(groupId, artifactId, versionRange, "maven-plugin", null, Artifact.SCOPE_RUNTIME, null);}
public Artifact maven_f1377_0(String groupId, String artifactId, String version, String scope)
{    return createArtifact(groupId, artifactId, version, scope, "pom");}
public Artifact maven_f1378_0(String groupId, String artifactId, VersionRange versionRange)
{    return createArtifact(groupId, artifactId, versionRange, "jar", null, Artifact.SCOPE_RUNTIME, null);}
private Artifact maven_f1379_0(String groupId, String artifactId, String version, String scope, String type, String classifier, String inheritedScope)
{    VersionRange versionRange = null;    if (version != null) {        versionRange = VersionRange.createFromVersion(version);    }    return createArtifact(groupId, artifactId, versionRange, type, classifier, scope, inheritedScope);}
private Artifact maven_f1380_0(String groupId, String artifactId, VersionRange versionRange, String type, String classifier, String scope, String inheritedScope)
{    return createArtifact(groupId, artifactId, versionRange, type, classifier, scope, inheritedScope, false);}
private Artifact maven_f1381_0(String groupId, String artifactId, VersionRange versionRange, String type, String classifier, String scope, String inheritedScope, boolean optional)
{    String desiredScope = Artifact.SCOPE_RUNTIME;    if (inheritedScope == null) {        desiredScope = scope;    } else if (Artifact.SCOPE_TEST.equals(scope) || Artifact.SCOPE_PROVIDED.equals(scope)) {        return null;    } else if (Artifact.SCOPE_COMPILE.equals(scope) && Artifact.SCOPE_COMPILE.equals(inheritedScope)) {                desiredScope = Artifact.SCOPE_COMPILE;    }    if (Artifact.SCOPE_TEST.equals(inheritedScope)) {        desiredScope = Artifact.SCOPE_TEST;    }    if (Artifact.SCOPE_PROVIDED.equals(inheritedScope)) {        desiredScope = Artifact.SCOPE_PROVIDED;    }    if (Artifact.SCOPE_SYSTEM.equals(scope)) {                desiredScope = Artifact.SCOPE_SYSTEM;    }    ArtifactHandler handler = artifactHandlerManager.getArtifactHandler(type);    return new DefaultArtifact(groupId, artifactId, versionRange, desiredScope, type, classifier, handler, optional);}
public String maven_f1382_0()
{    if (extension == null) {        extension = type;    }    return extension;}
public void maven_f1383_0(String extension)
{    this.extension = extension;}
public String maven_f1384_0()
{    return type;}
public String maven_f1385_0()
{    return classifier;}
public String maven_f1386_0()
{    if (directory == null) {        directory = getPackaging() + "s";    }    return directory;}
public String maven_f1387_0()
{    if (packaging == null) {        packaging = type;    }    return packaging;}
public boolean maven_f1388_0()
{    return includesDependencies;}
public void maven_f1389_0(boolean includesDependencies)
{    this.includesDependencies = includesDependencies;}
public String maven_f1390_0()
{    if (language == null) {        language = "none";    }    return language;}
public void maven_f1391_0(String language)
{    this.language = language;}
public boolean maven_f1392_0()
{    return addedToClasspath;}
public void maven_f1393_0(boolean addedToClasspath)
{    this.addedToClasspath = addedToClasspath;}
public ArtifactHandler maven_f1394_0(String type)
{    ArtifactHandler handler = allHandlers.get(type);    if (handler == null) {        handler = artifactHandlers.get(type);        if (handler == null) {            handler = new DefaultArtifactHandler(type);        } else {            allHandlers.put(type, handler);        }    }    return handler;}
public void maven_f1395_0(Map<String, ArtifactHandler> handlers)
{        allHandlers.putAll(handlers);}
public Set<String> maven_f1396_0()
{    return artifactHandlers.keySet();}
public String maven_f1397_0()
{    return repositoryId;}
public static RepositoryRequest maven_f1398_0(MavenSession session, MavenProject project)
{    RepositoryRequest request = new DefaultRepositoryRequest();    request.setLocalRepository(session.getLocalRepository());    if (project != null) {        request.setRemoteRepositories(project.getPluginArtifactRepositories());    }    request.setOffline(session.isOffline());    request.setForceUpdate(session.getRequest().isUpdateSnapshots());    return request;}
public boolean maven_f1399_0()
{    return offline;}
public DefaultRepositoryRequest maven_f1400_0(boolean offline)
{    this.offline = offline;    return this;}
public boolean maven_f1401_0()
{    return forceUpdate;}
public DefaultRepositoryRequest maven_f1402_0(boolean forceUpdate)
{    this.forceUpdate = forceUpdate;    return this;}
public ArtifactRepository maven_f1403_0()
{    return localRepository;}
public DefaultRepositoryRequest maven_f1404_0(ArtifactRepository localRepository)
{    this.localRepository = localRepository;    return this;}
public List<ArtifactRepository> maven_f1405_0()
{    if (remoteRepositories == null) {        remoteRepositories = new ArrayList<>();    }    return remoteRepositories;}
public DefaultRepositoryRequest maven_f1406_0(List<ArtifactRepository> remoteRepositories)
{    this.remoteRepositories = remoteRepositories;    return this;}
public String maven_f1407_0()
{    return "default";}
public String maven_f1408_0(Artifact artifact)
{    ArtifactHandler artifactHandler = artifact.getArtifactHandler();    StringBuilder path = new StringBuilder(128);    path.append(formatAsDirectory(artifact.getGroupId())).append(PATH_SEPARATOR);    path.append(artifact.getArtifactId()).append(PATH_SEPARATOR);    path.append(artifact.getBaseVersion()).append(PATH_SEPARATOR);    path.append(artifact.getArtifactId()).append(ARTIFACT_SEPARATOR).append(artifact.getVersion());    if (artifact.hasClassifier()) {        path.append(ARTIFACT_SEPARATOR).append(artifact.getClassifier());    }    if (artifactHandler.getExtension() != null && artifactHandler.getExtension().length() > 0) {        path.append(GROUP_SEPARATOR).append(artifactHandler.getExtension());    }    return path.toString();}
public String maven_f1409_0(ArtifactMetadata metadata, ArtifactRepository repository)
{    return pathOfRepositoryMetadata(metadata, metadata.getLocalFilename(repository));}
private String maven_f1410_0(ArtifactMetadata metadata, String filename)
{    StringBuilder path = new StringBuilder(128);    path.append(formatAsDirectory(metadata.getGroupId())).append(PATH_SEPARATOR);    if (!metadata.storedInGroupDirectory()) {        path.append(metadata.getArtifactId()).append(PATH_SEPARATOR);        if (metadata.storedInArtifactVersionDirectory()) {            path.append(metadata.getBaseVersion()).append(PATH_SEPARATOR);        }    }    path.append(filename);    return path.toString();}
public String maven_f1411_0(ArtifactMetadata metadata)
{    return pathOfRepositoryMetadata(metadata, metadata.getRemoteFilename());}
private String maven_f1412_0(String directory)
{    return directory.replace(GROUP_SEPARATOR, PATH_SEPARATOR);}
public String maven_f1413_0()
{    return getId();}
public static RepositorySystemSession maven_f1414_0(ArtifactRepository repository, RepositorySystemSession session, RepositorySystem system)
{    if (repository == null || repository.getBasedir() == null) {        return session;    }    if (session != null) {        LocalRepositoryManager lrm = session.getLocalRepositoryManager();        if (lrm != null && lrm.getRepository().getBasedir().equals(new File(repository.getBasedir()))) {            return session;        }    } else {        session = new DefaultRepositorySystemSession();    }    final LocalRepositoryManager llrm = new LegacyLocalRepositoryManager(repository);    return new DefaultRepositorySystemSession(session).setLocalRepositoryManager(llrm);}
public LocalRepository maven_f1415_0()
{    return repo;}
public String maven_f1416_0(Artifact artifact)
{    if (realLocalRepo) {        return delegate.pathOf(RepositoryUtils.toArtifact(artifact.setVersion(artifact.getBaseVersion())));    }    return delegate.pathOf(RepositoryUtils.toArtifact(artifact));}
public String maven_f1417_0(Artifact artifact, RemoteRepository repository, String context)
{    return delegate.pathOf(RepositoryUtils.toArtifact(artifact));}
public String maven_f1418_0(Metadata metadata)
{    return delegate.pathOfLocalRepositoryMetadata(new ArtifactMetadataAdapter(metadata), delegate);}
public String maven_f1419_0(Metadata metadata, RemoteRepository repository, String context)
{    return delegate.pathOfLocalRepositoryMetadata(new ArtifactMetadataAdapter(metadata), new ArtifactRepositoryAdapter(repository));}
public LocalArtifactResult maven_f1420_0(RepositorySystemSession session, LocalArtifactRequest request)
{    String path = getPathForLocalArtifact(request.getArtifact());    File file = new File(getRepository().getBasedir(), path);    LocalArtifactResult result = new LocalArtifactResult(request);    if (file.isFile()) {        result.setFile(file);        result.setAvailable(true);    }    return result;}
public LocalMetadataResult maven_f1421_0(RepositorySystemSession session, LocalMetadataRequest request)
{    Metadata metadata = request.getMetadata();    String path;    if (request.getRepository() == null) {        path = getPathForLocalMetadata(metadata);    } else {        path = getPathForRemoteMetadata(metadata, request.getRepository(), request.getContext());    }    File file = new File(getRepository().getBasedir(), path);    LocalMetadataResult result = new LocalMetadataResult(request);    if (file.isFile()) {        result.setFile(file);    }    return result;}
public void maven_f1422_0(RepositorySystemSession session, LocalArtifactRegistration request)
{}
public void maven_f1423_0(RepositorySystemSession session, LocalMetadataRegistration request)
{}
public boolean maven_f1424_0()
{    return metadata.getVersion().length() > 0;}
public boolean maven_f1425_0()
{    return metadata.getArtifactId().length() <= 0;}
public String maven_f1426_0()
{    return nullify(metadata.getGroupId());}
public String maven_f1427_0()
{    return nullify(metadata.getArtifactId());}
public String maven_f1428_0()
{    return nullify(metadata.getVersion());}
private String maven_f1429_0(String str)
{    return (str == null || str.length() <= 0) ? null : str;}
public Object maven_f1430_0()
{    return metadata.toString();}
public String maven_f1431_0()
{    return metadata.getType();}
public String maven_f1432_0(ArtifactRepository repository)
{    return insertRepositoryKey(getRemoteFilename(), repository.getKey());}
private String maven_f1433_0(String filename, String repositoryKey)
{    String result;    int idx = filename.indexOf('.');    if (idx < 0) {        result = filename + '-' + repositoryKey;    } else {        result = filename.substring(0, idx) + '-' + repositoryKey + filename.substring(idx);    }    return result;}
public void maven_f1434_0(org.apache.maven.repository.legacy.metadata.ArtifactMetadata metadata)
{}
public void maven_f1435_0(ArtifactMetadata metadata)
{}
public void maven_f1436_0(ArtifactRepository localRepository, ArtifactRepository remoteRepository) throws RepositoryMetadataStoreException
{}
public String maven_f1437_0()
{    return metadata.toString();}
public String maven_f1438_0(org.apache.maven.artifact.Artifact artifact)
{    return null;}
public String maven_f1439_0(ArtifactMetadata artifactMetadata)
{    return null;}
public String maven_f1440_0(ArtifactMetadata metadata, ArtifactRepository repository)
{    return null;}
public String maven_f1441_0()
{    return repository.getUrl();}
public void maven_f1442_0(String url)
{}
public String maven_f1443_0()
{    return null;}
public String maven_f1444_0()
{    return repository.getProtocol();}
public String maven_f1445_0()
{    return repository.getId();}
public void maven_f1446_0(String id)
{}
public ArtifactRepositoryPolicy maven_f1447_0()
{    return null;}
public void maven_f1448_0(ArtifactRepositoryPolicy policy)
{}
public ArtifactRepositoryPolicy maven_f1449_0()
{    return null;}
public void maven_f1450_0(ArtifactRepositoryPolicy policy)
{}
public ArtifactRepositoryLayout maven_f1451_0()
{    return null;}
public void maven_f1452_0(ArtifactRepositoryLayout layout)
{}
public String maven_f1453_0()
{    return getId();}
public boolean maven_f1454_0()
{    return true;}
public boolean maven_f1455_0()
{    return false;}
public void maven_f1456_0(boolean blackListed)
{}
public org.apache.maven.artifact.Artifact maven_f1457_0(org.apache.maven.artifact.Artifact artifact)
{    return null;}
public List<String> maven_f1458_0(org.apache.maven.artifact.Artifact artifact)
{    return Collections.emptyList();}
public boolean maven_f1459_0()
{    return false;}
public void maven_f1460_0(Authentication authentication)
{}
public Authentication maven_f1461_0()
{    return null;}
public void maven_f1462_0(Proxy proxy)
{}
public Proxy maven_f1463_0()
{    return null;}
public List<ArtifactRepository> maven_f1464_0()
{    return Collections.emptyList();}
public void maven_f1465_0(List<ArtifactRepository> mirroredRepositories)
{}
public String maven_f1466_0(Artifact artifact)
{    return layout.pathOf(artifact);}
public String maven_f1467_0(ArtifactMetadata artifactMetadata)
{    return layout.pathOfRemoteRepositoryMetadata(artifactMetadata);}
public String maven_f1468_0(ArtifactMetadata metadata, ArtifactRepository repository)
{    return layout.pathOfLocalRepositoryMetadata(metadata, repository);}
public void maven_f1469_0(ArtifactRepositoryLayout layout)
{    this.layout = layout;}
public ArtifactRepositoryLayout maven_f1470_0()
{    return layout;}
public void maven_f1471_0(ArtifactRepositoryPolicy snapshots)
{    this.snapshots = snapshots;}
public ArtifactRepositoryPolicy maven_f1472_0()
{    return snapshots;}
public void maven_f1473_0(ArtifactRepositoryPolicy releases)
{    this.releases = releases;}
public ArtifactRepositoryPolicy maven_f1474_0()
{    return releases;}
public String maven_f1475_0()
{    return getId();}
public String maven_f1476_0()
{    StringBuilder sb = new StringBuilder(256);    sb.append("      id: ").append(getId()).append('\n');    sb.append("      url: ").append(getUrl()).append('\n');    sb.append("   layout: ").append(layout != null ? layout : "none").append('\n');    if (proxy != null) {        sb.append("    proxy: ").append(proxy.getHost()).append(':').append(proxy.getPort()).append('\n');    }    if (snapshots != null) {        sb.append("snapshots: [enabled => ").append(snapshots.isEnabled());        sb.append(", update => ").append(snapshots.getUpdatePolicy()).append("]\n");    }    if (releases != null) {        sb.append(" releases: [enabled => ").append(releases.isEnabled());        sb.append(", update => ").append(releases.getUpdatePolicy()).append("]\n");    }    return sb.toString();}
public Artifact maven_f1477_0(Artifact artifact)
{    File artifactFile = new File(getBasedir(), pathOf(artifact));            artifact.setFile(artifactFile);    return artifact;}
public List<String> maven_f1478_0(Artifact artifact)
{    return Collections.emptyList();}
public String maven_f1479_0()
{    return id;}
public String maven_f1480_0()
{    return url;}
public String maven_f1481_0()
{    return basedir;}
public String maven_f1482_0()
{    return protocol;}
public void maven_f1483_0(String id)
{    this.id = id;}
public void maven_f1484_0(String url)
{    this.url = url;    this.protocol = protocol(url);    this.basedir = basedir(url);}
private static String maven_f1485_0(final String url)
{    final int pos = url.indexOf(':');    if (pos == -1) {        return "";    }    return url.substring(0, pos).trim();}
private String maven_f1486_0(String url)
{    String retValue = null;    if (protocol.equalsIgnoreCase("file")) {        retValue = url.substring(protocol.length() + 1);        retValue = decode(retValue);                if (retValue.startsWith("//")) {            retValue = retValue.substring(2);            if (retValue.length() >= 2 && (retValue.charAt(1) == '|' || retValue.charAt(1) == ':')) {                                retValue = retValue.charAt(0) + ":" + retValue.substring(2);            } else {                                int index = retValue.indexOf('/');                if (index >= 0) {                    retValue = retValue.substring(index + 1);                }                                if (retValue.length() >= 2 && (retValue.charAt(1) == '|' || retValue.charAt(1) == ':')) {                    retValue = retValue.charAt(0) + ":" + retValue.substring(2);                } else if (index >= 0) {                                        retValue = "/" + retValue;                }            }        }                if (retValue.length() >= 2 && retValue.charAt(1) == '|') {            retValue = retValue.charAt(0) + ":" + retValue.substring(2);        }                retValue = new File(retValue).getPath();    }    if (retValue == null) {        retValue = "/";    }    return retValue.trim();}
private static String maven_f1487_0(String url)
{    String decoded = url;    if (url != null) {        int pos = -1;        while ((pos = decoded.indexOf('%', pos + 1)) >= 0) {            if (pos + 2 < decoded.length()) {                String hexStr = decoded.substring(pos + 1, pos + 3);                char ch = (char) Integer.parseInt(hexStr, 16);                decoded = decoded.substring(0, pos) + ch + decoded.substring(pos + 3);            }        }    }    return decoded;}
public int maven_f1488_0()
{    final int prime = 31;    int result = 1;    result = prime * result + ((getId() == null) ? 0 : getId().hashCode());    return result;}
public boolean maven_f1489_0(Object obj)
{    if (this == obj) {        return true;    }    if (obj == null) {        return false;    }    if (getClass() != obj.getClass()) {        return false;    }    ArtifactRepository other = (ArtifactRepository) obj;    return eq(getId(), other.getId());}
protected static boolean maven_f1490_0(T s1, T s2)
{    return Objects.equals(s1, s2);}
public Authentication maven_f1491_0()
{    return authentication;}
public void maven_f1492_0(Authentication authentication)
{    this.authentication = authentication;}
public Proxy maven_f1493_0()
{    return proxy;}
public void maven_f1494_0(Proxy proxy)
{    this.proxy = proxy;}
public boolean maven_f1495_0()
{    return false;}
public void maven_f1496_0(boolean blackListed)
{}
public boolean maven_f1497_0()
{    return true;}
public boolean maven_f1498_0()
{    return false;}
public List<ArtifactRepository> maven_f1499_0()
{    return mirroredRepositories;}
public void maven_f1500_0(List<ArtifactRepository> mirroredRepositories)
{    if (mirroredRepositories != null) {        this.mirroredRepositories = Collections.unmodifiableList(mirroredRepositories);    } else {        this.mirroredRepositories = Collections.emptyList();    }}
public String maven_f1501_0()
{    return "maven-metadata.xml";}
public String maven_f1502_0(ArtifactRepository repository)
{    return "maven-metadata-" + repository.getKey() + ".xml";}
public void maven_f1503_0(ArtifactRepository localRepository, ArtifactRepository remoteRepository) throws RepositoryMetadataStoreException
{    try {        updateRepositoryMetadata(localRepository, remoteRepository);    } catch (IOException | XmlPullParserException e) {        throw new RepositoryMetadataStoreException("Error updating group repository metadata", e);    }}
protected void maven_f1504_0(ArtifactRepository localRepository, ArtifactRepository remoteRepository) throws IOException, XmlPullParserException
{    MetadataXpp3Reader mappingReader = new MetadataXpp3Reader();    Metadata metadata = null;    File metadataFile = new File(localRepository.getBasedir(), localRepository.pathOfLocalRepositoryMetadata(this, remoteRepository));    if (metadataFile.length() == 0) {        if (!metadataFile.delete()) {                        try {                Thread.sleep(10);            } catch (InterruptedException e) {                        }                        metadataFile.delete();                }    } else if (metadataFile.exists()) {        try (Reader reader = ReaderFactory.newXmlReader(metadataFile)) {            metadata = mappingReader.read(reader, false);        }    }    boolean changed;        if (metadata == null) {        metadata = this.metadata;        changed = true;    } else {        changed = metadata.merge(this.metadata);    }        String version = metadata.getVersion();    if (version != null && (Artifact.LATEST_VERSION.equals(version) || Artifact.RELEASE_VERSION.equals(version))) {                metadata.setVersion(null);    }    if (changed || !metadataFile.exists()) {        metadataFile.getParentFile().mkdirs();        try (Writer writer = WriterFactory.newXmlWriter(metadataFile)) {            MetadataXpp3Writer mappingWriter = new MetadataXpp3Writer();            mappingWriter.write(writer, metadata);        }    } else {        metadataFile.setLastModified(System.currentTimeMillis());    }}
public String maven_f1505_0()
{    return "repository metadata for: \'" + getKey() + "\'";}
protected static Metadata maven_f1506_0(Artifact artifact, Versioning versioning)
{    Metadata metadata = new Metadata();    metadata.setGroupId(artifact.getGroupId());    metadata.setArtifactId(artifact.getArtifactId());    metadata.setVersion(artifact.getVersion());    metadata.setVersioning(versioning);    return metadata;}
protected static Versioning maven_f1507_0(Snapshot snapshot)
{    Versioning versioning = new Versioning();    versioning.setSnapshot(snapshot);    versioning.updateTimestamp();    return versioning;}
public void maven_f1508_0(Metadata metadata)
{    this.metadata = metadata;}
public Metadata maven_f1509_0()
{    return metadata;}
public void maven_f1510_0(org.apache.maven.repository.legacy.metadata.ArtifactMetadata metadata)
{            AbstractRepositoryMetadata repoMetadata = (AbstractRepositoryMetadata) metadata;    this.metadata.merge(repoMetadata.getMetadata());}
public void maven_f1511_0(ArtifactMetadata metadata)
{            AbstractRepositoryMetadata repoMetadata = (AbstractRepositoryMetadata) metadata;    this.metadata.merge(repoMetadata.getMetadata());}
public String maven_f1512_0()
{    StringBuilder buffer = new StringBuilder(256);    buffer.append("\nRepository Metadata\n--------------------------");    buffer.append("\nGroupId: ").append(getGroupId());    buffer.append("\nArtifactId: ").append(getArtifactId());    buffer.append("\nMetadata Type: ").append(getClass().getName());    return buffer.toString();}
public int maven_f1513_0()
{    return RELEASE;}
public ArtifactRepositoryPolicy maven_f1514_0(ArtifactRepository repository)
{    int nature = getNature();    if ((nature & RepositoryMetadata.RELEASE_OR_SNAPSHOT) == RepositoryMetadata.RELEASE_OR_SNAPSHOT) {        ArtifactRepositoryPolicy policy = new ArtifactRepositoryPolicy(repository.getReleases());        policy.merge(repository.getSnapshots());        return policy;    } else if ((nature & RepositoryMetadata.SNAPSHOT) != 0) {        return repository.getSnapshots();    } else {        return repository.getReleases();    }}
public boolean maven_f1515_0()
{    return false;}
public boolean maven_f1516_0()
{    return false;}
public String maven_f1517_0()
{    return artifact.getGroupId();}
public String maven_f1518_0()
{    return artifact.getArtifactId();}
public String maven_f1519_0()
{        return null;}
public Object maven_f1520_0()
{    return "artifact " + artifact.getGroupId() + ":" + artifact.getArtifactId();}
public boolean maven_f1521_0()
{        return false;}
public int maven_f1522_0()
{    if (artifact.getVersion() != null) {        return artifact.isSnapshot() ? SNAPSHOT : RELEASE;    }    VersionRange range = artifact.getVersionRange();    if (range != null) {        for (Restriction restriction : range.getRestrictions()) {            if (isSnapshot(restriction.getLowerBound()) || isSnapshot(restriction.getUpperBound())) {                return RELEASE_OR_SNAPSHOT;            }        }    }    return RELEASE;}
private boolean maven_f1523_0(ArtifactVersion version)
{    return version != null && ArtifactUtils.isSnapshot(version.getQualifier());}
public ArtifactRepository maven_f1524_0()
{    return null;}
public void maven_f1525_0(ArtifactRepository remoteRepository)
{/*         * NOTE: Metadata at the g:a level contains a collection of available versions. After merging, we can't tell         * which repository provides which version so the metadata manager must not restrict the artifact resolution to         * the repository with the most recent updates.         */}
public Metadata maven_f1526_0(File input, Map<String, ?> options) throws IOException
{    Objects.requireNonNull(input, "input cannot be null");    Metadata metadata = read(ReaderFactory.newXmlReader(input), options);    return metadata;}
public Metadata maven_f1527_0(Reader input, Map<String, ?> options) throws IOException
{    Objects.requireNonNull(input, "input cannot be null");    try (final Reader in = input) {        return new MetadataXpp3Reader().read(in, isStrict(options));    } catch (XmlPullParserException e) {        throw new MetadataParseException(e.getMessage(), e.getLineNumber(), e.getColumnNumber(), e);    }}
public Metadata maven_f1528_0(InputStream input, Map<String, ?> options) throws IOException
{    Objects.requireNonNull(input, "input cannot be null");    try (final InputStream in = input) {        return new MetadataXpp3Reader().read(in, isStrict(options));    } catch (XmlPullParserException e) {        throw new MetadataParseException(e.getMessage(), e.getLineNumber(), e.getColumnNumber(), e);    }}
private boolean maven_f1529_0(Map<String, ?> options)
{    Object value = (options != null) ? options.get(IS_STRICT) : null;    return value == null || Boolean.parseBoolean(value.toString());}
public int maven_f1530_0()
{    return lineNumber;}
public int maven_f1531_0()
{    return columnNumber;}
public Artifact maven_f1532_0()
{    return artifact;}
public ArtifactResolutionRequest maven_f1533_0(Artifact artifact)
{    this.artifact = artifact;    return this;}
public ArtifactResolutionRequest maven_f1534_0(Set<Artifact> artifactDependencies)
{    this.artifactDependencies = artifactDependencies;    return this;}
public Set<Artifact> maven_f1535_0()
{    return artifactDependencies;}
public ArtifactRepository maven_f1536_0()
{    return localRepository;}
public ArtifactResolutionRequest maven_f1537_0(ArtifactRepository localRepository)
{    this.localRepository = localRepository;    return this;}
public List<ArtifactRepository> maven_f1538_0()
{    return remoteRepositories;}
public ArtifactResolutionRequest maven_f1539_0(List<ArtifactRepository> remoteRepositories)
{    this.remoteRepositories = remoteRepositories;    return this;}
public ArtifactFilter maven_f1540_0()
{    return collectionFilter;}
public ArtifactResolutionRequest maven_f1541_0(ArtifactFilter filter)
{    this.collectionFilter = filter;    return this;}
public ArtifactFilter maven_f1542_0()
{    return resolutionFilter;}
public ArtifactResolutionRequest maven_f1543_0(ArtifactFilter filter)
{    this.resolutionFilter = filter;    return this;}
public List<ResolutionListener> maven_f1544_0()
{    return listeners;}
public ArtifactResolutionRequest maven_f1545_0(List<ResolutionListener> listeners)
{    this.listeners = listeners;    return this;}
public ArtifactResolutionRequest maven_f1546_0(ResolutionListener listener)
{    listeners.add(listener);    return this;}
public Map<String, Artifact> maven_f1547_0()
{    return managedVersionMap;}
public ArtifactResolutionRequest maven_f1548_0(Map<String, Artifact> managedVersionMap)
{    this.managedVersionMap = managedVersionMap;    return this;}
public ArtifactResolutionRequest maven_f1549_0(boolean resolveRoot)
{    this.resolveRoot = resolveRoot;    return this;}
public boolean maven_f1550_0()
{    return resolveRoot;}
public ArtifactResolutionRequest maven_f1551_0(boolean resolveDependencies)
{    this.resolveTransitively = resolveDependencies;    return this;}
public boolean maven_f1552_0()
{    return resolveTransitively;}
public String maven_f1553_0()
{    StringBuilder sb = new StringBuilder().append("REQUEST: ").append("\n").append("artifact: ").append(artifact).append("\n").append(artifactDependencies).append("\n").append("localRepository: ").append(localRepository).append("\n").append("remoteRepositories: ").append(remoteRepositories).append("\n");    return sb.toString();}
public boolean maven_f1554_0()
{    return offline;}
public ArtifactResolutionRequest maven_f1555_0(boolean offline)
{    this.offline = offline;    return this;}
public boolean maven_f1556_0()
{    return forceUpdate;}
public ArtifactResolutionRequest maven_f1557_0(boolean forceUpdate)
{    this.forceUpdate = forceUpdate;    return this;}
public ArtifactResolutionRequest maven_f1558_0(List<Server> servers)
{    this.servers = servers;    return this;}
public List<Server> maven_f1559_0()
{    if (servers == null) {        servers = new ArrayList<>();    }    return servers;}
public ArtifactResolutionRequest maven_f1560_0(List<Mirror> mirrors)
{    this.mirrors = mirrors;    return this;}
public List<Mirror> maven_f1561_0()
{    if (mirrors == null) {        mirrors = new ArrayList<>();    }    return mirrors;}
public ArtifactResolutionRequest maven_f1562_0(List<Proxy> proxies)
{    this.proxies = proxies;    return this;}
public List<Proxy> maven_f1563_0()
{    if (proxies == null) {        proxies = new ArrayList<>();    }    return proxies;}
public ArtifactResolutionRequest maven_f1564_0(RepositoryCache cache)
{    return this;}
public Artifact maven_f1565_0()
{    return originatingArtifact;}
public ArtifactResolutionResult maven_f1566_0(final Artifact originatingArtifact)
{    this.originatingArtifact = originatingArtifact;    return this;}
public void maven_f1567_0(Artifact artifact)
{    if (artifacts == null) {        artifacts = new LinkedHashSet<>();    }    artifacts.add(artifact);}
public Set<Artifact> maven_f1568_0()
{    if (artifacts == null) {        artifacts = new LinkedHashSet<>();    }    return artifacts;}
public void maven_f1569_0(Set<Artifact> artifacts)
{    this.artifacts = artifacts;}
public Set<ResolutionNode> maven_f1570_0()
{    if (resolutionNodes == null) {        resolutionNodes = new LinkedHashSet<>();    }    return resolutionNodes;}
public void maven_f1571_0(Set<ResolutionNode> resolutionNodes)
{    this.resolutionNodes = resolutionNodes;}
public boolean maven_f1572_0()
{    return missingArtifacts != null && !missingArtifacts.isEmpty();}
public List<Artifact> maven_f1573_0()
{    return missingArtifacts == null ? Collections.<Artifact>emptyList() : Collections.unmodifiableList(missingArtifacts);}
public ArtifactResolutionResult maven_f1574_0(Artifact artifact)
{    missingArtifacts = initList(missingArtifacts);    missingArtifacts.add(artifact);    return this;}
public ArtifactResolutionResult maven_f1575_0(final List<Artifact> unresolvedArtifacts)
{    this.missingArtifacts = unresolvedArtifacts;    return this;}
public boolean maven_f1576_0()
{    return !(hasMissingArtifacts() || hasExceptions());}
public boolean maven_f1577_0()
{    return exceptions != null && !exceptions.isEmpty();}
public List<Exception> maven_f1578_0()
{    return exceptions == null ? Collections.<Exception>emptyList() : Collections.unmodifiableList(exceptions);}
public boolean maven_f1579_0()
{    return versionRangeViolations != null;}
public ArtifactResolutionResult maven_f1580_0(Exception e)
{    versionRangeViolations = initList(versionRangeViolations);    versionRangeViolations.add(e);    exceptions = initList(exceptions);    exceptions.add(e);    return this;}
public OverConstrainedVersionException maven_f1581_0(int i)
{    return (OverConstrainedVersionException) versionRangeViolations.get(i);}
public List<Exception> maven_f1582_0()
{    return versionRangeViolations == null ? Collections.<Exception>emptyList() : Collections.unmodifiableList(versionRangeViolations);}
public boolean maven_f1583_0()
{    return metadataResolutionExceptions != null;}
public ArtifactResolutionResult maven_f1584_0(ArtifactResolutionException e)
{    metadataResolutionExceptions = initList(metadataResolutionExceptions);    metadataResolutionExceptions.add(e);    exceptions = initList(exceptions);    exceptions.add(e);    return this;}
public ArtifactResolutionException maven_f1585_0(int i)
{    return metadataResolutionExceptions.get(i);}
public List<ArtifactResolutionException> maven_f1586_0()
{    return metadataResolutionExceptions == null ? Collections.<ArtifactResolutionException>emptyList() : Collections.unmodifiableList(metadataResolutionExceptions);}
public boolean maven_f1587_0()
{    return errorArtifactExceptions != null;}
public ArtifactResolutionResult maven_f1588_0(ArtifactResolutionException e)
{    errorArtifactExceptions = initList(errorArtifactExceptions);    errorArtifactExceptions.add(e);    exceptions = initList(exceptions);    exceptions.add(e);    return this;}
public List<ArtifactResolutionException> maven_f1589_0()
{    if (errorArtifactExceptions == null) {        return Collections.emptyList();    }    return Collections.unmodifiableList(errorArtifactExceptions);}
public boolean maven_f1590_0()
{    return circularDependencyExceptions != null;}
public ArtifactResolutionResult maven_f1591_0(CyclicDependencyException e)
{    circularDependencyExceptions = initList(circularDependencyExceptions);    circularDependencyExceptions.add(e);    exceptions = initList(exceptions);    exceptions.add(e);    return this;}
public CyclicDependencyException maven_f1592_0(int i)
{    return circularDependencyExceptions.get(i);}
public List<CyclicDependencyException> maven_f1593_0()
{    if (circularDependencyExceptions == null) {        return Collections.emptyList();    }    return Collections.unmodifiableList(circularDependencyExceptions);}
public List<ArtifactRepository> maven_f1594_0()
{    if (repositories == null) {        return Collections.emptyList();    }    return Collections.unmodifiableList(repositories);}
public ArtifactResolutionResult maven_f1595_0(final List<ArtifactRepository> repositories)
{    this.repositories = repositories;    return this;}
private List<T> maven_f1596_0(final List<T> l)
{    if (l == null) {        return new ArrayList<>();    }    return l;}
public String maven_f1597_0()
{    StringBuilder sb = new StringBuilder();    if (artifacts != null) {        int i = 1;        sb.append("---------\n");        sb.append(artifacts.size()).append('\n');        for (Artifact a : artifacts) {            sb.append(i).append(' ').append(a).append('\n');            i++;        }        sb.append("---------\n");    }    return sb.toString();}
public void maven_f1598_0(ArtifactResolutionRequest request, ArtifactResolutionResult result) throws ArtifactResolutionException
{    if (result.hasMetadataResolutionExceptions()) {        throw result.getMetadataResolutionException(0);    }    if (result.hasCircularDependencyExceptions()) {        throw result.getCircularDependencyException(0);    }    if (result.hasVersionRangeViolations()) {        throw result.getVersionRangeViolation(0);    }    if (result.hasErrorArtifactExceptions()) {        throw result.getErrorArtifactExceptions().get(0);    }    if (result.hasMissingArtifacts()) {        throw new MultipleArtifactsNotFoundException(request.getArtifact(), toList(result.getArtifacts()), result.getMissingArtifacts(), request.getRemoteRepositories());    }        if (result.hasExceptions()) {        throw new ArtifactResolutionException("Unknown error during artifact resolution, " + request + ", " + result.getExceptions(), request.getArtifact(), request.getRemoteRepositories());    }}
private static List<T> maven_f1599_0(Collection<T> items)
{    return (items != null) ? new ArrayList<>(items) : null;}
 void maven_f1600_0(String scope)
{    if (Artifact.SCOPE_COMPILE.equals(scope)) {        systemScope = true;        providedScope = true;        compileScope = true;    } else if (Artifact.SCOPE_RUNTIME.equals(scope)) {        compileScope = true;        runtimeScope = true;    } else if (Artifact.SCOPE_COMPILE_PLUS_RUNTIME.equals(scope)) {        systemScope = true;        providedScope = true;        compileScope = true;        runtimeScope = true;    } else if (Artifact.SCOPE_RUNTIME_PLUS_SYSTEM.equals(scope)) {        systemScope = true;        compileScope = true;        runtimeScope = true;    } else if (Artifact.SCOPE_TEST.equals(scope)) {        systemScope = true;        providedScope = true;        compileScope = true;        runtimeScope = true;        testScope = true;    }}
public boolean maven_f1601_0(Artifact artifact)
{    if (Artifact.SCOPE_COMPILE.equals(artifact.getScope())) {        return compileScope;    } else if (Artifact.SCOPE_RUNTIME.equals(artifact.getScope())) {        return runtimeScope;    } else if (Artifact.SCOPE_TEST.equals(artifact.getScope())) {        return testScope;    } else if (Artifact.SCOPE_PROVIDED.equals(artifact.getScope())) {        return providedScope;    } else if (Artifact.SCOPE_SYSTEM.equals(artifact.getScope())) {        return systemScope;    } else {        return true;    }}
public boolean maven_f1602_0(Artifact artifact)
{    boolean include = true;    for (Iterator<ArtifactFilter> i = filters.iterator(); i.hasNext() && include; ) {        ArtifactFilter filter = i.next();        if (!filter.include(artifact)) {            include = false;        }    }    return include;}
public void maven_f1603_0(ArtifactFilter artifactFilter)
{    filters.add(artifactFilter);}
public List<ArtifactFilter> maven_f1604_0()
{    return new ArrayList<>(filters);}
public int maven_f1605_0()
{    int hash = 17;    hash = hash * 31 + filters.hashCode();    return hash;}
public boolean maven_f1606_0(Object obj)
{    if (this == obj) {        return true;    }    if (!(obj instanceof AndArtifactFilter)) {        return false;    }    AndArtifactFilter other = (AndArtifactFilter) obj;    return filters.equals(other.filters);}
private void maven_f1607_0(Collection<String> scopes)
{    if (scopes != null) {        for (String scope : scopes) {            addScope(scope);        }    }}
private void maven_f1608_0(String scope)
{    this.scopes.add(scope);    addScopeInternal(scope);}
public Set<String> maven_f1609_0()
{    return scopes;}
public int maven_f1610_0()
{    int hash = 17;    hash = hash * 31 + scopes.hashCode();    return hash;}
public boolean maven_f1611_0(Object obj)
{    if (this == obj) {        return true;    }    if (!(obj instanceof CumulativeScopeArtifactFilter)) {        return false;    }    CumulativeScopeArtifactFilter that = (CumulativeScopeArtifactFilter) obj;    return scopes.equals(that.scopes);}
public boolean maven_f1612_0(Artifact artifact)
{    return !super.include(artifact);}
public boolean maven_f1613_0(Artifact artifact)
{    for (Exclusion exclusion : exclusions) {        if (WILDCARD.equals(exclusion.getGroupId()) && WILDCARD.equals(exclusion.getArtifactId())) {            return false;        }        if (WILDCARD.equals(exclusion.getGroupId()) && exclusion.getArtifactId().equals(artifact.getArtifactId())) {            return false;        }        if (WILDCARD.equals(exclusion.getArtifactId()) && exclusion.getGroupId().equals(artifact.getGroupId())) {            return false;        }        if (exclusion.getGroupId().equals(artifact.getGroupId()) && exclusion.getArtifactId().equals(artifact.getArtifactId())) {            return false;        }    }    return true;}
public boolean maven_f1614_0(Artifact artifact)
{    String id = artifact.getArtifactId();    if (excludes.contains(id)) {        return false;    }    id = artifact.getGroupId() + ':' + id;    return !excludes.contains(id);}
public int maven_f1615_0()
{    int hash = 17;    hash = hash * 31 + excludes.hashCode();    return hash;}
public boolean maven_f1616_0(Object obj)
{    if (this == obj) {        return true;    }    if (!(obj instanceof ExclusionSetFilter)) {        return false;    }    ExclusionSetFilter other = (ExclusionSetFilter) obj;    return excludes.equals(other.excludes);}
public boolean maven_f1617_0(Artifact artifact)
{    String id = artifact.getGroupId() + ":" + artifact.getArtifactId();    boolean matched = false;    for (Iterator<String> i = patterns.iterator(); i.hasNext() & !matched; ) {                if (id.equals(i.next())) {            matched = true;        }    }    return matched;}
public List<String> maven_f1618_0()
{    return new ArrayList<>(patterns);}
public int maven_f1619_0()
{    int hash = 17;    hash = hash * 31 + patterns.hashCode();    return hash;}
public boolean maven_f1620_0(Object obj)
{    if (this == obj) {        return true;    }        if (obj == null || getClass() != obj.getClass()) {        return false;    }    IncludesArtifactFilter other = (IncludesArtifactFilter) obj;    return patterns.equals(other.patterns);}
public String maven_f1621_0()
{    return scope;}
public int maven_f1622_0()
{    int hash = 17;    hash = hash * 31 + (scope != null ? scope.hashCode() : 0);    return hash;}
public boolean maven_f1623_0(Object obj)
{    if (this == obj) {        return true;    }    if (!(obj instanceof ScopeArtifactFilter)) {        return false;    }    ScopeArtifactFilter other = (ScopeArtifactFilter) obj;    return Objects.equals(scope, other.scope);}
public Artifact maven_f1624_0()
{    return artifact;}
public Object maven_f1625_0()
{    return artifact.getDependencyConflictId();}
public void maven_f1626_0(Set<Artifact> artifacts, List<ArtifactRepository> remoteRepositories, ArtifactFilter filter) throws CyclicDependencyException, OverConstrainedVersionException
{    if (artifacts != null && !artifacts.isEmpty()) {        children = new ArrayList<>(artifacts.size());        for (Artifact a : artifacts) {            if (parents.contains(a.getDependencyConflictId())) {                a.setDependencyTrail(getDependencyTrail());                throw new CyclicDependencyException("A dependency has introduced a cycle", a);            }            children.add(new ResolutionNode(a, remoteRepositories, this));        }        children = Collections.unmodifiableList(children);    } else {        children = Collections.emptyList();    }    trail = null;}
public List<String> maven_f1627_0() throws OverConstrainedVersionException
{    List<Artifact> trial = getTrail();    List<String> ret = new ArrayList<>(trial.size());    for (Artifact artifact : trial) {        ret.add(artifact.getId());    }    return ret;}
private List<Artifact> maven_f1628_0() throws OverConstrainedVersionException
{    if (trail == null) {        List<Artifact> ids = new LinkedList<>();        ResolutionNode node = this;        while (node != null) {            Artifact artifact = node.getArtifact();            if (artifact.getVersion() == null) {                                ArtifactVersion selected = artifact.getSelectedVersion();                                if (selected != null) {                    artifact.selectVersion(selected.toString());                } else {                    throw new OverConstrainedVersionException("Unable to get a selected Version for " + artifact.getArtifactId(), artifact);                }            }            ids.add(0, artifact);            node = node.parent;        }        trail = ids;    }    return trail;}
public boolean maven_f1629_0()
{    return children != null;}
public boolean maven_f1630_0()
{    return parent != null && parent.parent == null;}
public Iterator<ResolutionNode> maven_f1631_0()
{    return children.iterator();}
public int maven_f1632_0()
{    return depth;}
public List<ArtifactRepository> maven_f1633_0()
{    return remoteRepositories;}
public boolean maven_f1634_0()
{    return active;}
public void maven_f1635_0()
{    active = true;        if (children != null) {        for (ResolutionNode node : children) {            node.enable();        }    }}
public void maven_f1636_0()
{    active = false;    if (children != null) {        for (ResolutionNode node : children) {            node.disable();        }    }}
public boolean maven_f1637_0(ArtifactFilter filter) throws OverConstrainedVersionException
{    boolean success = true;    if (filter != null) {        for (Artifact artifact : getTrail()) {            if (!filter.include(artifact)) {                success = false;            }        }    }    return success;}
public String maven_f1638_0()
{    return artifact.toString() + " (" + depth + "; " + (active ? "enabled" : "disabled") + ")";}
public void maven_f1639_0(Artifact artifact)
{    this.artifact = artifact;}
public Artifact maven_f1640_0(String groupId, String artifactId, String version, String scope, String type)
{    return createArtifactX(groupId, artifactId, version, scope, type);}
public Artifact maven_f1641_0(String groupId, String artifactId, String metaVersionId)
{    return createProjectArtifactX(groupId, artifactId, metaVersionId);}
public Artifact maven_f1642_0(Dependency d)
{    if (d.getVersion() == null) {        return null;    }    VersionRange versionRange;    try {        versionRange = VersionRange.createFromVersionSpec(d.getVersion());    } catch (InvalidVersionSpecificationException e) {        return null;    }    Artifact artifact = createDependencyArtifactX(d.getGroupId(), d.getArtifactId(), versionRange, d.getType(), d.getClassifier(), d.getScope(), d.isOptional());    if (Artifact.SCOPE_SYSTEM.equals(d.getScope()) && d.getSystemPath() != null) {        artifact.setFile(new File(d.getSystemPath()));    }    if (!d.getExclusions().isEmpty()) {        artifact.setDependencyFilter(new ExclusionArtifactFilter(d.getExclusions()));    }    return artifact;}
public Artifact maven_f1643_0(String groupId, String artifactId, String version)
{    VersionRange versionRange;    try {        versionRange = VersionRange.createFromVersionSpec(version);    } catch (InvalidVersionSpecificationException e) {        return null;    }    return createExtensionArtifactX(groupId, artifactId, versionRange);}
public Artifact maven_f1644_0(String groupId, String artifactId, String version)
{    return createParentArtifactX(groupId, artifactId, version);}
public Artifact maven_f1645_0(Plugin plugin)
{    VersionRange versionRange;    try {        String version = plugin.getVersion();        if (StringUtils.isEmpty(version)) {            version = "RELEASE";        }        versionRange = VersionRange.createFromVersionSpec(version);    } catch (InvalidVersionSpecificationException e) {        return null;    }    return createPluginArtifactX(plugin.getGroupId(), plugin.getArtifactId(), versionRange);}
public void maven_f1646_0(List<ArtifactRepository> repositories, List<Mirror> mirrors)
{    if (repositories != null && mirrors != null) {        for (ArtifactRepository repository : repositories) {            Mirror mirror = getMirror(repository, mirrors);            injectMirror(repository, mirror);        }    }}
private Mirror maven_f1647_0(RepositorySystemSession session, ArtifactRepository repository)
{    if (session != null) {        org.eclipse.aether.repository.MirrorSelector selector = session.getMirrorSelector();        if (selector != null) {            RemoteRepository repo = selector.getMirror(RepositoryUtils.toRepo(repository));            if (repo != null) {                Mirror mirror = new Mirror();                mirror.setId(repo.getId());                mirror.setUrl(repo.getUrl());                mirror.setLayout(repo.getContentType());                return mirror;            }        }    }    return null;}
public void maven_f1648_0(RepositorySystemSession session, List<ArtifactRepository> repositories)
{    if (repositories != null && session != null) {        for (ArtifactRepository repository : repositories) {            Mirror mirror = getMirror(session, repository);            injectMirror(repository, mirror);        }    }}
private void maven_f1649_0(ArtifactRepository repository, Mirror mirror)
{    if (mirror != null) {        ArtifactRepository original = createArtifactRepository(repository.getId(), repository.getUrl(), repository.getLayout(), repository.getSnapshots(), repository.getReleases());        repository.setMirroredRepositories(Collections.singletonList(original));        repository.setId(mirror.getId());        repository.setUrl(mirror.getUrl());        if (StringUtils.isNotEmpty(mirror.getLayout())) {            repository.setLayout(getLayout(mirror.getLayout()));        }    }}
private Authentication maven_f1650_0(RepositorySystemSession session, ArtifactRepository repository)
{    if (session != null) {        AuthenticationSelector selector = session.getAuthenticationSelector();        if (selector != null) {            RemoteRepository repo = RepositoryUtils.toRepo(repository);            org.eclipse.aether.repository.Authentication auth = selector.getAuthentication(repo);            if (auth != null) {                repo = new RemoteRepository.Builder(repo).setAuthentication(auth).build();                AuthenticationContext authCtx = AuthenticationContext.forRepository(session, repo);                Authentication result = new Authentication(authCtx.get(AuthenticationContext.USERNAME), authCtx.get(AuthenticationContext.PASSWORD));                result.setPrivateKey(authCtx.get(AuthenticationContext.PRIVATE_KEY_PATH));                result.setPassphrase(authCtx.get(AuthenticationContext.PRIVATE_KEY_PASSPHRASE));                authCtx.close();                return result;            }        }    }    return null;}
public void maven_f1651_0(RepositorySystemSession session, List<ArtifactRepository> repositories)
{    if (repositories != null && session != null) {        for (ArtifactRepository repository : repositories) {            repository.setAuthentication(getAuthentication(session, repository));        }    }}
private Proxy maven_f1652_0(RepositorySystemSession session, ArtifactRepository repository)
{    if (session != null) {        ProxySelector selector = session.getProxySelector();        if (selector != null) {            RemoteRepository repo = RepositoryUtils.toRepo(repository);            org.eclipse.aether.repository.Proxy proxy = selector.getProxy(repo);            if (proxy != null) {                Proxy p = new Proxy();                p.setHost(proxy.getHost());                p.setProtocol(proxy.getType());                p.setPort(proxy.getPort());                if (proxy.getAuthentication() != null) {                    repo = new RemoteRepository.Builder(repo).setProxy(proxy).build();                    AuthenticationContext authCtx = AuthenticationContext.forProxy(session, repo);                    p.setUserName(authCtx.get(AuthenticationContext.USERNAME));                    p.setPassword(authCtx.get(AuthenticationContext.PASSWORD));                    p.setNtlmDomain(authCtx.get(AuthenticationContext.NTLM_DOMAIN));                    p.setNtlmHost(authCtx.get(AuthenticationContext.NTLM_WORKSTATION));                    authCtx.close();                }                return p;            }        }    }    return null;}
public void maven_f1653_0(RepositorySystemSession session, List<ArtifactRepository> repositories)
{    if (repositories != null && session != null) {        for (ArtifactRepository repository : repositories) {            repository.setProxy(getProxy(session, repository));        }    }}
private ArtifactRepositoryLayout maven_f1654_0(String id)
{    ArtifactRepositoryLayout layout = layouts.get(id);    return layout;}
public static org.apache.maven.model.Repository maven_f1655_0(org.apache.maven.settings.Repository settingsRepository)
{    org.apache.maven.model.Repository modelRepository = new org.apache.maven.model.Repository();    modelRepository.setId(settingsRepository.getId());    modelRepository.setLayout(settingsRepository.getLayout());    modelRepository.setName(settingsRepository.getName());    modelRepository.setUrl(settingsRepository.getUrl());    modelRepository.setReleases(fromSettingsRepositoryPolicy(settingsRepository.getReleases()));    modelRepository.setSnapshots(fromSettingsRepositoryPolicy(settingsRepository.getSnapshots()));    return modelRepository;}
public static org.apache.maven.model.RepositoryPolicy maven_f1656_0(org.apache.maven.settings.RepositoryPolicy settingsRepositoryPolicy)
{    org.apache.maven.model.RepositoryPolicy modelRepositoryPolicy = new org.apache.maven.model.RepositoryPolicy();    if (settingsRepositoryPolicy != null) {        modelRepositoryPolicy.setEnabled(settingsRepositoryPolicy.isEnabled());        modelRepositoryPolicy.setUpdatePolicy(settingsRepositoryPolicy.getUpdatePolicy());        modelRepositoryPolicy.setChecksumPolicy(settingsRepositoryPolicy.getChecksumPolicy());    }    return modelRepositoryPolicy;}
public static ArtifactRepository maven_f1657_0(org.apache.maven.settings.Repository repo) throws InvalidRepositoryException
{    return buildArtifactRepository(fromSettingsRepository(repo));}
public static ArtifactRepository maven_f1658_0(org.apache.maven.model.Repository repo) throws InvalidRepositoryException
{    if (repo != null) {        String id = repo.getId();        if (StringUtils.isEmpty(id)) {            throw new InvalidRepositoryException("Repository identifier missing", "");        }        String url = repo.getUrl();        if (StringUtils.isEmpty(url)) {            throw new InvalidRepositoryException("URL missing for repository " + id, id);        }        ArtifactRepositoryPolicy snapshots = buildArtifactRepositoryPolicy(repo.getSnapshots());        ArtifactRepositoryPolicy releases = buildArtifactRepositoryPolicy(repo.getReleases());        ArtifactRepositoryLayout layout = new DefaultRepositoryLayout();        return createArtifactRepository(id, url, layout, snapshots, releases);    } else {        return null;    }}
public static ArtifactRepositoryPolicy maven_f1659_0(org.apache.maven.model.RepositoryPolicy policy)
{    boolean enabled = true;    String updatePolicy = null;    String checksumPolicy = null;    if (policy != null) {        enabled = policy.isEnabled();        if (policy.getUpdatePolicy() != null) {            updatePolicy = policy.getUpdatePolicy();        }        if (policy.getChecksumPolicy() != null) {            checksumPolicy = policy.getChecksumPolicy();        }    }    return new ArtifactRepositoryPolicy(enabled, updatePolicy, checksumPolicy);}
public ArtifactRepository maven_f1660_0(String id, String url, String layoutId, ArtifactRepositoryPolicy snapshots, ArtifactRepositoryPolicy releases) throws Exception
{    ArtifactRepositoryLayout layout = layouts.get(layoutId);    checkLayout(id, layoutId, layout);    return createArtifactRepository(id, url, layout, snapshots, releases);}
private void maven_f1661_0(String repositoryId, String layoutId, ArtifactRepositoryLayout layout) throws Exception
{    if (layout == null) {        throw new Exception(String.format("Cannot find ArtifactRepositoryLayout instance for: %s %s", layoutId, repositoryId));    }}
public static ArtifactRepository maven_f1662_0(String id, String url, ArtifactRepositoryLayout repositoryLayout, ArtifactRepositoryPolicy snapshots, ArtifactRepositoryPolicy releases)
{    if (snapshots == null) {        snapshots = new ArtifactRepositoryPolicy();    }    if (releases == null) {        releases = new ArtifactRepositoryPolicy();    }    ArtifactRepository repository;    if (repositoryLayout instanceof ArtifactRepositoryLayout2) {        repository = ((ArtifactRepositoryLayout2) repositoryLayout).newMavenArtifactRepository(id, url, snapshots, releases);    } else {        repository = new MavenArtifactRepository(id, url, repositoryLayout, snapshots, releases);    }    return repository;}
private Artifact maven_f1663_0(String groupId, String artifactId, String version, String scope, String type)
{    return createArtifactX(groupId, artifactId, version, scope, type, null, null);}
private Artifact maven_f1664_0(String groupId, String artifactId, VersionRange versionRange, String type, String classifier, String scope, boolean optional)
{    return createArtifactX(groupId, artifactId, versionRange, type, classifier, scope, null, optional);}
private Artifact maven_f1665_0(String groupId, String artifactId, String version)
{    return createProjectArtifactX(groupId, artifactId, version, null);}
private Artifact maven_f1666_0(String groupId, String artifactId, String version)
{    return createProjectArtifactX(groupId, artifactId, version);}
private Artifact maven_f1667_0(String groupId, String artifactId, VersionRange versionRange)
{    return createArtifactX(groupId, artifactId, versionRange, "maven-plugin", null, Artifact.SCOPE_RUNTIME, null);}
private Artifact maven_f1668_0(String groupId, String artifactId, String version, String scope)
{    return createArtifactX(groupId, artifactId, version, scope, "pom");}
private Artifact maven_f1669_0(String groupId, String artifactId, VersionRange versionRange)
{    return createArtifactX(groupId, artifactId, versionRange, "jar", null, Artifact.SCOPE_RUNTIME, null);}
private Artifact maven_f1670_0(String groupId, String artifactId, String version, String scope, String type, String classifier, String inheritedScope)
{    VersionRange versionRange = null;    if (version != null) {        versionRange = VersionRange.createFromVersion(version);    }    return createArtifactX(groupId, artifactId, versionRange, type, classifier, scope, inheritedScope);}
private Artifact maven_f1671_0(String groupId, String artifactId, VersionRange versionRange, String type, String classifier, String scope, String inheritedScope)
{    return createArtifactX(groupId, artifactId, versionRange, type, classifier, scope, inheritedScope, false);}
private Artifact maven_f1672_0(String groupId, String artifactId, VersionRange versionRange, String type, String classifier, String scope, String inheritedScope, boolean optional)
{    String desiredScope = Artifact.SCOPE_RUNTIME;    if (inheritedScope == null) {        desiredScope = scope;    } else if (Artifact.SCOPE_TEST.equals(scope) || Artifact.SCOPE_PROVIDED.equals(scope)) {        return null;    } else if (Artifact.SCOPE_COMPILE.equals(scope) && Artifact.SCOPE_COMPILE.equals(inheritedScope)) {                desiredScope = Artifact.SCOPE_COMPILE;    }    if (Artifact.SCOPE_TEST.equals(inheritedScope)) {        desiredScope = Artifact.SCOPE_TEST;    }    if (Artifact.SCOPE_PROVIDED.equals(inheritedScope)) {        desiredScope = Artifact.SCOPE_PROVIDED;    }    if (Artifact.SCOPE_SYSTEM.equals(scope)) {                desiredScope = Artifact.SCOPE_SYSTEM;    }    ArtifactHandler handler = artifactHandlerManager.getArtifactHandler(type);    return new DefaultArtifact(groupId, artifactId, versionRange, desiredScope, type, classifier, handler, optional);}
public ArtifactRepository maven_f1673_0(MavenExecutionRequest request) throws Exception
{    return createRepository(RepositorySystem.DEFAULT_REMOTE_REPO_URL, RepositorySystem.DEFAULT_REMOTE_REPO_ID, true, ArtifactRepositoryPolicy.UPDATE_POLICY_DAILY, false, ArtifactRepositoryPolicy.UPDATE_POLICY_DAILY, ArtifactRepositoryPolicy.CHECKSUM_POLICY_WARN);}
public ArtifactRepository maven_f1674_0(String url, String repositoryId, boolean releases, String releaseUpdates, boolean snapshots, String snapshotUpdates, String checksumPolicy) throws Exception
{    ArtifactRepositoryPolicy snapshotsPolicy = new ArtifactRepositoryPolicy(snapshots, snapshotUpdates, checksumPolicy);    ArtifactRepositoryPolicy releasesPolicy = new ArtifactRepositoryPolicy(releases, releaseUpdates, checksumPolicy);    return createArtifactRepository(repositoryId, url, "default", snapshotsPolicy, releasesPolicy);}
public Set<String> maven_f1675_0(List<ArtifactRepository> repositories)
{    Set<String> repoIds = new HashSet<>();    if (repositories != null) {        for (ArtifactRepository repository : repositories) {            repoIds.add(repository.getId());        }    }    return repoIds;}
public List<ArtifactRepository> maven_f1676_0(List<ArtifactRepository> repositories)
{    if (repositories == null) {        return null;    }    Map<String, List<ArtifactRepository>> reposByKey = new LinkedHashMap<>();    for (ArtifactRepository repository : repositories) {        String key = repository.getId();        List<ArtifactRepository> aliasedRepos = reposByKey.get(key);        if (aliasedRepos == null) {            aliasedRepos = new ArrayList<>();            reposByKey.put(key, aliasedRepos);        }        aliasedRepos.add(repository);    }    List<ArtifactRepository> effectiveRepositories = new ArrayList<>();    for (List<ArtifactRepository> aliasedRepos : reposByKey.values()) {        List<ArtifactRepository> mirroredRepos = new ArrayList<>();        List<ArtifactRepositoryPolicy> releasePolicies = new ArrayList<>(aliasedRepos.size());        for (ArtifactRepository aliasedRepo : aliasedRepos) {            releasePolicies.add(aliasedRepo.getReleases());            mirroredRepos.addAll(aliasedRepo.getMirroredRepositories());        }        ArtifactRepositoryPolicy releasePolicy = getEffectivePolicy(releasePolicies);        List<ArtifactRepositoryPolicy> snapshotPolicies = new ArrayList<>(aliasedRepos.size());        for (ArtifactRepository aliasedRepo : aliasedRepos) {            snapshotPolicies.add(aliasedRepo.getSnapshots());        }        ArtifactRepositoryPolicy snapshotPolicy = getEffectivePolicy(snapshotPolicies);        ArtifactRepository aliasedRepo = aliasedRepos.get(0);        ArtifactRepository effectiveRepository = createArtifactRepository(aliasedRepo.getId(), aliasedRepo.getUrl(), aliasedRepo.getLayout(), snapshotPolicy, releasePolicy);        effectiveRepository.setAuthentication(aliasedRepo.getAuthentication());        effectiveRepository.setProxy(aliasedRepo.getProxy());        effectiveRepository.setMirroredRepositories(mirroredRepos);        effectiveRepositories.add(effectiveRepository);    }    return effectiveRepositories;}
private ArtifactRepositoryPolicy maven_f1677_0(Collection<ArtifactRepositoryPolicy> policies)
{    ArtifactRepositoryPolicy effectivePolicy = null;    for (ArtifactRepositoryPolicy policy : policies) {        if (effectivePolicy == null) {            effectivePolicy = new ArtifactRepositoryPolicy(policy);        } else {            effectivePolicy.merge(policy);        }    }    return effectivePolicy;}
public ArtifactRepository maven_f1678_0(MavenExecutionRequest request, File localRepository) throws Exception
{    return createRepository("file://" + localRepository.toURI().getRawPath(), RepositorySystem.DEFAULT_LOCAL_REPO_ID, true, ArtifactRepositoryPolicy.UPDATE_POLICY_ALWAYS, true, ArtifactRepositoryPolicy.UPDATE_POLICY_ALWAYS, ArtifactRepositoryPolicy.CHECKSUM_POLICY_IGNORE);}
public static Mirror maven_f1679_0(ArtifactRepository repository, List<Mirror> mirrors)
{    String repoId = repository.getId();    if (repoId != null && mirrors != null) {        for (Mirror mirror : mirrors) {            if (repoId.equals(mirror.getMirrorOf()) && matchesLayout(repository, mirror)) {                return mirror;            }        }        for (Mirror mirror : mirrors) {            if (matchPattern(repository, mirror.getMirrorOf()) && matchesLayout(repository, mirror)) {                return mirror;            }        }    }    return null;}
 static boolean maven_f1680_0(ArtifactRepository originalRepository, String pattern)
{    boolean result = false;    String originalId = originalRepository.getId();        if (WILDCARD.equals(pattern) || pattern.equals(originalId)) {        result = true;    } else {                String[] repos = pattern.split(",");        for (String repo : repos) {                        if (repo.length() > 1 && repo.startsWith("!")) {                if (repo.substring(1).equals(originalId)) {                                        result = false;                    break;                }            } else             if (repo.equals(originalId)) {                result = true;                break;            } else             if (EXTERNAL_WILDCARD.equals(repo) && isExternalRepo(originalRepository)) {                result = true;                        } else if (WILDCARD.equals(repo)) {                result = true;                        }        }    }    return result;}
 static boolean maven_f1681_0(ArtifactRepository originalRepository)
{    try {        URL url = new URL(originalRepository.getUrl());        return !(url.getHost().equals("localhost") || url.getHost().equals("127.0.0.1") || url.getProtocol().equals("file"));    } catch (MalformedURLException e) {                return false;    }}
 static boolean maven_f1682_0(ArtifactRepository repository, Mirror mirror)
{    return matchesLayout(RepositoryUtils.getLayout(repository), mirror.getMirrorOfLayouts());}
 static boolean maven_f1683_0(String repoLayout, String mirrorLayout)
{    boolean result = false;        if (StringUtils.isEmpty(mirrorLayout) || WILDCARD.equals(mirrorLayout)) {        result = true;    } else if (mirrorLayout.equals(repoLayout)) {        result = true;    } else {                String[] layouts = mirrorLayout.split(",");        for (String layout : layouts) {                        if (layout.length() > 1 && layout.startsWith("!")) {                if (layout.substring(1).equals(repoLayout)) {                                        result = false;                    break;                }            } else             if (layout.equals(repoLayout)) {                result = true;                break;            } else if (WILDCARD.equals(layout)) {                result = true;                        }        }    }    return result;}
public String maven_f1684_0()
{    return artifact.getGroupId();}
public String maven_f1685_0()
{    return artifact.getArtifactId();}
public String maven_f1686_0()
{    return artifact.getExtension();}
public String maven_f1687_0()
{    return artifact.getClassifier();}
public String maven_f1688_0()
{    return artifact.getBaseVersion();}
public File maven_f1689_0()
{    return artifact.getFile();}
public String maven_f1690_0()
{    return artifact.toString();}
private ClassRealmf1691_1String id)
{    synchronized (world) {        String realmId = id;        Random random = new Random();        while (true) {            try {                ClassRealm classRealm = world.newRealm(realmId, null);                if (logger.isDebugEnabled()) {                                    }                return classRealm;            } catch (DuplicateRealmException e) {                realmId = id + '-' + random.nextInt();            }        }    }}
public ClassRealm maven_f1692_0()
{    return mavenApiRealm;}
private ClassRealmf1693_1String baseRealmId, RealmType type, ClassLoader parent, List<String> parentImports, Map<String, ClassLoader> foreignImports, List<Artifact> artifacts)
{    Set<String> artifactIds = new LinkedHashSet<>();    List<ClassRealmConstituent> constituents = new ArrayList<>();    if (artifacts != null) {        for (Artifact artifact : artifacts) {            if (!isProvidedArtifact(artifact)) {                artifactIds.add(getId(artifact));                if (artifact.getFile() != null) {                    constituents.add(new ArtifactClassRealmConstituent(artifact));                }            }        }    }    if (parentImports != null) {        parentImports = new ArrayList<>(parentImports);    } else {        parentImports = new ArrayList<>();    }    if (foreignImports != null) {        foreignImports = new TreeMap<>(foreignImports);    } else {        foreignImports = new TreeMap<>();    }    ClassRealm classRealm = newRealm(baseRealmId);    if (parent != null) {        classRealm.setParentClassLoader(parent);    }    callDelegates(classRealm, type, parent, parentImports, foreignImports, constituents);    wireRealm(classRealm, parentImports, foreignImports);    Set<String> includedIds = populateRealm(classRealm, constituents);    if (logger.isDebugEnabled()) {        artifactIds.removeAll(includedIds);        for (String id : artifactIds) {                    }    }    return classRealm;}
public ClassRealm maven_f1694_0()
{    return containerRealm;}
public ClassRealm maven_f1695_0(Model model, List<Artifact> artifacts)
{    Objects.requireNonNull(model, "model cannot be null");    ClassLoader parent = getMavenApiRealm();    return createRealm(getKey(model), RealmType.Project, parent, null, null, artifacts);}
private static String maven_f1696_0(Model model)
{    return "project>" + model.getGroupId() + ":" + model.getArtifactId() + ":" + model.getVersion();}
public ClassRealm maven_f1697_0(Plugin plugin, List<Artifact> artifacts)
{    Objects.requireNonNull(plugin, "plugin cannot be null");    ClassLoader parent = PARENT_CLASSLOADER;    Map<String, ClassLoader> foreignImports = Collections.<String, ClassLoader>singletonMap("", getMavenApiRealm());    return createRealm(getKey(plugin, true), RealmType.Extension, parent, null, foreignImports, artifacts);}
private boolean maven_f1698_0(Artifact artifact)
{    return providedArtifacts.contains(artifact.getGroupId() + ":" + artifact.getArtifactId());}
public ClassRealm maven_f1699_0(Plugin plugin, ClassLoader parent, List<String> parentImports, Map<String, ClassLoader> foreignImports, List<Artifact> artifacts)
{    Objects.requireNonNull(plugin, "plugin cannot be null");    if (parent == null) {        parent = PARENT_CLASSLOADER;    }    return createRealm(getKey(plugin, false), RealmType.Plugin, parent, parentImports, foreignImports, artifacts);}
private static String maven_f1700_0(Plugin plugin, boolean extension)
{    String version = ArtifactUtils.toSnapshotVersion(plugin.getVersion());    return (extension ? "extension>" : "plugin>") + plugin.getGroupId() + ":" + plugin.getArtifactId() + ":" + version;}
private static String maven_f1701_0(Artifact artifact)
{    return getId(artifact.getGroupId(), artifact.getArtifactId(), artifact.getExtension(), artifact.getClassifier(), artifact.getBaseVersion());}
private static String maven_f1702_0(ClassRealmConstituent constituent)
{    return getId(constituent.getGroupId(), constituent.getArtifactId(), constituent.getType(), constituent.getClassifier(), constituent.getVersion());}
private static String maven_f1703_0(String gid, String aid, String type, String cls, String ver)
{    return gid + ':' + aid + ':' + type + (StringUtils.isNotEmpty(cls) ? ':' + cls : "") + ':' + ver;}
private voidf1704_1ClassRealm classRealm, RealmType type, ClassLoader parent, List<String> parentImports, Map<String, ClassLoader> foreignImports, List<ClassRealmConstituent> constituents)
{    List<ClassRealmManagerDelegate> delegates = new ArrayList<>(this.delegates);    if (!delegates.isEmpty()) {        ClassRealmRequest request = new DefaultClassRealmRequest(type, parent, parentImports, foreignImports, constituents);        for (ClassRealmManagerDelegate delegate : delegates) {            try {                delegate.setupRealm(classRealm, request);            } catch (Exception e) {                            }        }    }}
private Set<String>f1705_1ClassRealm classRealm, List<ClassRealmConstituent> constituents)
{    Set<String> includedIds = new LinkedHashSet<>();    if (logger.isDebugEnabled()) {            }    for (ClassRealmConstituent constituent : constituents) {        File file = constituent.getFile();        String id = getId(constituent);        includedIds.add(id);        if (logger.isDebugEnabled()) {                    }        try {            classRealm.addURL(file.toURI().toURL());        } catch (MalformedURLException e) {                                }    }    return includedIds;}
private voidf1706_1ClassRealm classRealm, List<String> parentImports, Map<String, ClassLoader> foreignImports)
{    if (foreignImports != null && !foreignImports.isEmpty()) {        if (logger.isDebugEnabled()) {                    }        for (Map.Entry<String, ClassLoader> entry : foreignImports.entrySet()) {            ClassLoader importedRealm = entry.getValue();            String imp = entry.getKey();            if (logger.isDebugEnabled()) {                            }            classRealm.importFrom(importedRealm, imp);        }    }    if (parentImports != null && !parentImports.isEmpty()) {        if (logger.isDebugEnabled()) {                    }        for (String imp : parentImports) {            if (logger.isDebugEnabled()) {                            }            classRealm.importFromParent(imp);        }    }}
private String maven_f1707_0(ClassLoader classLoader)
{    if (classLoader instanceof ClassRealm) {        return ((ClassRealm) classLoader).getId();    }    return String.valueOf(classLoader);}
public RealmType maven_f1708_0()
{    return type;}
public ClassLoader maven_f1709_0()
{    return parent;}
public List<String> maven_f1710_0()
{    return getParentImports();}
public List<String> maven_f1711_0()
{    return parentImports;}
public Map<String, ClassLoader> maven_f1712_0()
{    return foreignImports;}
public List<ClassRealmConstituent> maven_f1713_0()
{    return constituents;}
public File maven_f1714_0(File path)
{    File result = path;    if (path != null && basedir != null) {        if (path.isAbsolute()) {                } else if (path.getPath().startsWith(File.separator)) {                        result = path.getAbsoluteFile();        } else {                        result = new File(new File(basedir, path.getPath()).toURI().normalize()).getAbsoluteFile();        }    }    return result;}
public Object maven_f1715_0()
{    return bean;}
public DefaultBeanConfigurationRequest maven_f1716_0(Object bean)
{    this.bean = bean;    return this;}
public Object maven_f1717_0()
{    return configuration;}
public String maven_f1718_0()
{    return configurationElement;}
public DefaultBeanConfigurationRequest maven_f1719_0(Object configuration)
{    return setConfiguration(configuration, null);}
public DefaultBeanConfigurationRequest maven_f1720_0(Object configuration, String element)
{    this.configuration = configuration;    this.configurationElement = element;    return this;}
public DefaultBeanConfigurationRequest maven_f1721_0(Model model, String pluginGroupId, String pluginArtifactId, String pluginExecutionId)
{    Plugin plugin = findPlugin(model, pluginGroupId, pluginArtifactId);    if (plugin != null) {        if (StringUtils.isNotEmpty(pluginExecutionId)) {            for (PluginExecution execution : plugin.getExecutions()) {                if (pluginExecutionId.equals(execution.getId())) {                    setConfiguration(execution.getConfiguration());                    break;                }            }        } else {            setConfiguration(plugin.getConfiguration());        }    }    return this;}
private Plugin maven_f1722_0(Model model, String groupId, String artifactId)
{    Validate.notBlank(groupId, "groupId can neither be null, empty nor blank");    Validate.notBlank(artifactId, "artifactId can neither be null, empty nor blank");    if (model != null) {        Build build = model.getBuild();        if (build != null) {            for (Plugin plugin : build.getPlugins()) {                if (groupId.equals(plugin.getGroupId()) && artifactId.equals(plugin.getArtifactId())) {                    return plugin;                }            }            PluginManagement mgmt = build.getPluginManagement();            if (mgmt != null) {                for (Plugin plugin : mgmt.getPlugins()) {                    if (groupId.equals(plugin.getGroupId()) && artifactId.equals(plugin.getArtifactId())) {                        return plugin;                    }                }            }        }    }    return null;}
public ClassLoader maven_f1723_0()
{    return classLoader;}
public DefaultBeanConfigurationRequest maven_f1724_0(ClassLoader classLoader)
{    this.classLoader = classLoader;    return this;}
public BeanConfigurationValuePreprocessor maven_f1725_0()
{    return valuePreprocessor;}
public DefaultBeanConfigurationRequest maven_f1726_0(BeanConfigurationValuePreprocessor valuePreprocessor)
{    this.valuePreprocessor = valuePreprocessor;    return this;}
public BeanConfigurationPathTranslator maven_f1727_0()
{    return pathTranslator;}
public DefaultBeanConfigurationRequest maven_f1728_0(BeanConfigurationPathTranslator pathTranslator)
{    this.pathTranslator = pathTranslator;    return this;}
public void maven_f1729_0(BeanConfigurationRequest request) throws BeanConfigurationException
{    Objects.requireNonNull(request, "request cannot be null");    Objects.requireNonNull(request.getBean(), "request.bean cannot be null");    Object configuration = request.getConfiguration();    if (configuration == null) {        return;    }    PlexusConfiguration plexusConfig;    if (configuration instanceof PlexusConfiguration) {        plexusConfig = (PlexusConfiguration) configuration;    } else if (configuration instanceof Xpp3Dom) {        plexusConfig = new XmlPlexusConfiguration((Xpp3Dom) configuration);    } else {        throw new BeanConfigurationException("unsupported bean configuration source (" + configuration.getClass().getName() + ")");    }    if (request.getConfigurationElement() != null) {        plexusConfig = plexusConfig.getChild(request.getConfigurationElement());    }    ClassLoader classLoader = request.getClassLoader();    if (classLoader == null) {        classLoader = request.getBean().getClass().getClassLoader();    }    BeanExpressionEvaluator evaluator = new BeanExpressionEvaluator(request);    ObjectWithFieldsConverter converter = new ObjectWithFieldsConverter();    try {        converter.processConfiguration(converterLookup, request.getBean(), classLoader, plexusConfig, evaluator);    } catch (ComponentConfigurationException e) {        throw new BeanConfigurationException(e.getMessage(), e);    }}
public Object maven_f1730_0(String expression, Class<?> type) throws ExpressionEvaluationException
{    if (preprocessor != null) {        try {            return preprocessor.preprocessValue(expression, type);        } catch (BeanConfigurationException e) {            throw new ExpressionEvaluationException(e.getMessage(), e);        }    }    return expression;}
public Object maven_f1731_0(String expression) throws ExpressionEvaluationException
{    return evaluate(expression, null);}
public File maven_f1732_0(File file)
{    if (translator != null) {        return translator.translatePath(file);    }    return file;}
private synchronized Set<String> maven_f1733_0()
{    if (excludedArtifacts == null) {        excludedArtifacts = new LinkedHashSet<>(coreArtifacts);    }    return excludedArtifacts;}
public ArtifactFilter maven_f1734_0()
{    Set<String> excludes = new LinkedHashSet<>(getExcludedArtifacts());    for (ArtifactFilterManagerDelegate delegate : delegates) {        delegate.addExcludes(excludes);    }    return new ExclusionSetFilter(excludes);}
public ArtifactFilter maven_f1735_0()
{    return new ExclusionSetFilter(getCoreArtifactExcludes());}
public void maven_f1736_0(String artifactId)
{    getExcludedArtifacts().add(artifactId);}
public Set<String> maven_f1737_0()
{    Set<String> excludes = new LinkedHashSet<>(coreArtifacts);    for (ArtifactFilterManagerDelegate delegate : delegates) {        delegate.addCoreExcludes(excludes);    }    return excludes;}
public MavenExecutionResult maven_f1738_0(MavenExecutionRequest request)
{    MavenExecutionResult result;    try {        result = doExecute(request);    } catch (OutOfMemoryError e) {        result = addExceptionToResult(new DefaultMavenExecutionResult(), e);    } catch (RuntimeException e) {                if (e.getCause() instanceof ProjectCycleException) {            result = addExceptionToResult(new DefaultMavenExecutionResult(), e.getCause());        } else {            result = addExceptionToResult(new DefaultMavenExecutionResult(), new InternalErrorException("Internal error: " + e, e));        }    } finally {        legacySupport.setSession(null);    }    return result;}
private MavenExecutionResult maven_f1739_0(MavenExecutionRequest request)
{    request.setStartTime(new Date());    MavenExecutionResult result = new DefaultMavenExecutionResult();    try {        validateLocalRepository(request);    } catch (LocalRepositoryNotAccessibleException e) {        return addExceptionToResult(result, e);    }                        sessionScope.enter();    try {        DefaultRepositorySystemSession repoSession = (DefaultRepositorySystemSession) newRepositorySession(request);        MavenSession session = new MavenSession(container, repoSession, request, result);        sessionScope.seed(MavenSession.class, session);        legacySupport.setSession(session);        return doExecute(request, session, result, repoSession);    } finally {        sessionScope.exit();    }}
private MavenExecutionResult maven_f1740_0(MavenExecutionRequest request, MavenSession session, MavenExecutionResult result, DefaultRepositorySystemSession repoSession)
{    try {                for (AbstractMavenLifecycleParticipant listener : getLifecycleParticipants(Collections.<MavenProject>emptyList())) {            listener.afterSessionStart(session);        }        } catch (MavenExecutionException e) {        return addExceptionToResult(result, e);    }    eventCatapult.fire(ExecutionEvent.Type.ProjectDiscoveryStarted, session, null);    Result<? extends ProjectDependencyGraph> graphResult = buildGraph(session, result);    if (graphResult.hasErrors()) {        return addExceptionToResult(result, graphResult.getProblems().iterator().next().getException());    }    try {        session.setProjectMap(getProjectMap(session.getProjects()));    } catch (DuplicateProjectException e) {        return addExceptionToResult(result, e);    }    WorkspaceReader reactorWorkspace;    try {        reactorWorkspace = container.lookup(WorkspaceReader.class, ReactorReader.HINT);    } catch (ComponentLookupException e) {        return addExceptionToResult(result, e);    }                                repoSession.setWorkspaceReader(ChainedWorkspaceReader.newInstance(reactorWorkspace, repoSession.getWorkspaceReader()));    repoSession.setReadOnly();    ClassLoader originalClassLoader = Thread.currentThread().getContextClassLoader();    try {        for (AbstractMavenLifecycleParticipant listener : getLifecycleParticipants(session.getProjects())) {            Thread.currentThread().setContextClassLoader(listener.getClass().getClassLoader());            listener.afterProjectsRead(session);        }    } catch (MavenExecutionException e) {        return addExceptionToResult(result, e);    } finally {        Thread.currentThread().setContextClassLoader(originalClassLoader);    }                                    graphResult = buildGraph(session, result);    if (graphResult.hasErrors()) {        return addExceptionToResult(result, graphResult.getProblems().iterator().next().getException());    }    try {        if (result.hasExceptions()) {            return result;        }        result.setTopologicallySortedProjects(session.getProjects());        result.setProject(session.getTopLevelProject());        validatePrerequisitesForNonMavenPluginProjects(session.getProjects());        lifecycleStarter.execute(session);        validateActivatedProfiles(session.getProjects(), request.getActiveProfiles());        if (session.getResult().hasExceptions()) {            return addExceptionToResult(result, session.getResult().getExceptions().get(0));        }    } finally {        try {            afterSessionEnd(session.getProjects(), session);        } catch (MavenExecutionException e) {            return addExceptionToResult(result, e);        }    }    return result;}
private void maven_f1741_0(Collection<MavenProject> projects, MavenSession session) throws MavenExecutionException
{    ClassLoader originalClassLoader = Thread.currentThread().getContextClassLoader();    try {        for (AbstractMavenLifecycleParticipant listener : getLifecycleParticipants(projects)) {            Thread.currentThread().setContextClassLoader(listener.getClass().getClassLoader());            listener.afterSessionEnd(session);        }    } finally {        Thread.currentThread().setContextClassLoader(originalClassLoader);    }}
public RepositorySystemSession maven_f1742_0(MavenExecutionRequest request)
{    return repositorySessionFactory.newRepositorySession(request);}
private voidf1743_1MavenExecutionRequest request) throws LocalRepositoryNotAccessibleException
{    File localRepoDir = request.getLocalRepositoryPath();        localRepoDir.mkdirs();    if (!localRepoDir.isDirectory()) {        throw new LocalRepositoryNotAccessibleException("Could not create local repository at " + localRepoDir);    }}
private Collection<AbstractMavenLifecycleParticipant>f1744_1Collection<MavenProject> projects)
{    Collection<AbstractMavenLifecycleParticipant> lifecycleListeners = new LinkedHashSet<>();    ClassLoader originalClassLoader = Thread.currentThread().getContextClassLoader();    try {        try {            lifecycleListeners.addAll(container.lookupList(AbstractMavenLifecycleParticipant.class));        } catch (ComponentLookupException e) {                                }        Collection<ClassLoader> scannedRealms = new HashSet<>();        for (MavenProject project : projects) {            ClassLoader projectRealm = project.getClassRealm();            if (projectRealm != null && scannedRealms.add(projectRealm)) {                Thread.currentThread().setContextClassLoader(projectRealm);                try {                    lifecycleListeners.addAll(container.lookupList(AbstractMavenLifecycleParticipant.class));                } catch (ComponentLookupException e) {                                                        }            }        }    } finally {        Thread.currentThread().setContextClassLoader(originalClassLoader);    }    return lifecycleListeners;}
private MavenExecutionResult maven_f1745_0(MavenExecutionResult result, Throwable e)
{    if (!result.getExceptions().contains(e)) {        result.addException(e);    }    return result;}
private voidf1746_1List<MavenProject> projects)
{    for (MavenProject mavenProject : projects) {        if (!"maven-plugin".equals(mavenProject.getPackaging())) {            Prerequisites prerequisites = mavenProject.getPrerequisites();            if (prerequisites != null && prerequisites.getMaven() != null) {                            }        }    }}
private voidf1747_1List<MavenProject> projects, List<String> activeProfileIds)
{    Collection<String> notActivatedProfileIds = new LinkedHashSet<>(activeProfileIds);    for (MavenProject project : projects) {        for (List<String> profileIds : project.getInjectedProfileIds().values()) {            notActivatedProfileIds.removeAll(profileIds);        }    }    for (String notActivatedProfileId : notActivatedProfileIds) {            }}
private Map<String, MavenProject> maven_f1748_0(Collection<MavenProject> projects) throws DuplicateProjectException
{    Map<String, MavenProject> index = new LinkedHashMap<>();    Map<String, List<File>> collisions = new LinkedHashMap<>();    for (MavenProject project : projects) {        String projectId = ArtifactUtils.key(project.getGroupId(), project.getArtifactId(), project.getVersion());        MavenProject collision = index.get(projectId);        if (collision == null) {            index.put(projectId, project);        } else {            List<File> pomFiles = collisions.get(projectId);            if (pomFiles == null) {                pomFiles = new ArrayList<>(Arrays.asList(collision.getFile(), project.getFile()));                collisions.put(projectId, pomFiles);            } else {                pomFiles.add(project.getFile());            }        }    }    if (!collisions.isEmpty()) {        throw new DuplicateProjectException("Two or more projects in the reactor" + " have the same identifier, please make sure that <groupId>:<artifactId>:<version>" + " is unique for each project: " + collisions, collisions);    }    return index;}
private Result<? extends ProjectDependencyGraph>f1749_1MavenSession session, MavenExecutionResult result)
{    Result<? extends ProjectDependencyGraph> graphResult = graphBuilder.build(session);    for (ModelProblem problem : graphResult.getProblems()) {        if (problem.getSeverity() == ModelProblem.Severity.WARNING) {                    } else {                    }    }    if (!graphResult.hasErrors()) {        ProjectDependencyGraph projectDependencyGraph = graphResult.get();        session.setProjects(projectDependencyGraph.getSortedProjects());        session.setAllProjects(projectDependencyGraph.getAllProjects());        session.setProjectDependencyGraph(projectDependencyGraph);    }    return graphResult;}
protected Logger maven_f1750_0()
{    return logger;}
public Set<Artifact> maven_f1751_0(MavenProject project, Collection<String> scopesToResolve, MavenSession session) throws ArtifactResolutionException, ArtifactNotFoundException
{    return resolve(Collections.singleton(project), scopesToResolve, session);}
public Set<Artifact> maven_f1752_0(MavenProject project, Collection<String> scopesToCollect, Collection<String> scopesToResolve, MavenSession session) throws ArtifactResolutionException, ArtifactNotFoundException
{    Set<MavenProject> mavenProjects = Collections.singleton(project);    return resolveImpl(mavenProjects, scopesToCollect, scopesToResolve, session, getIgnorableArtifacts(mavenProjects));}
public Set<Artifact> maven_f1753_0(Collection<? extends MavenProject> projects, Collection<String> scopesToResolve, MavenSession session) throws ArtifactResolutionException, ArtifactNotFoundException
{    return resolveImpl(projects, null, scopesToResolve, session, getIgnorableArtifacts(projects));}
public Set<Artifact> maven_f1754_0(MavenProject project, Collection<String> scopesToCollect, Collection<String> scopesToResolve, MavenSession session, Set<Artifact> ignoreableArtifacts) throws ArtifactResolutionException, ArtifactNotFoundException
{    return resolveImpl(Collections.singleton(project), scopesToCollect, scopesToResolve, session, getIgnorableArtifacts(ignoreableArtifacts));}
private Set<Artifact> maven_f1755_0(Collection<? extends MavenProject> projects, Collection<String> scopesToCollect, Collection<String> scopesToResolve, MavenSession session, Set<String> projectIds) throws ArtifactResolutionException, ArtifactNotFoundException
{    Set<Artifact> resolved = new LinkedHashSet<>();    if (projects == null || projects.isEmpty()) {        return resolved;    }    if ((scopesToCollect == null || scopesToCollect.isEmpty()) && (scopesToResolve == null || scopesToResolve.isEmpty())) {        return resolved;    }    /*        Logic for transitive global exclusions        List<String> exclusions = new ArrayList<String>();        for ( Dependency d : project.getDependencies() )        {            if ( d.getExclusions() != null )            {                for ( Exclusion e : d.getExclusions() )                {                    exclusions.add(  e.getGroupId() + ":" + e.getArtifactId() );                }            }        }        ArtifactFilter scopeFilter = new ScopeArtifactFilter( scope );        ArtifactFilter filter;        if ( ! exclusions.isEmpty() )        {            filter = new AndArtifactFilter( Arrays.asList( new ArtifactFilter[]{                 new ExcludesArtifactFilter( exclusions ), scopeFilter } ) );        }        else        {            filter = scopeFilter;        }        */    CumulativeScopeArtifactFilter resolutionScopeFilter = new CumulativeScopeArtifactFilter(scopesToResolve);    CumulativeScopeArtifactFilter collectionScopeFilter = new CumulativeScopeArtifactFilter(scopesToCollect);    collectionScopeFilter = new CumulativeScopeArtifactFilter(collectionScopeFilter, resolutionScopeFilter);    ArtifactResolutionRequest request = new ArtifactResolutionRequest().setResolveRoot(false).setResolveTransitively(true).setCollectionFilter(collectionScopeFilter).setResolutionFilter(resolutionScopeFilter).setLocalRepository(session.getLocalRepository()).setOffline(session.isOffline()).setForceUpdate(session.getRequest().isUpdateSnapshots());    request.setServers(session.getRequest().getServers());    request.setMirrors(session.getRequest().getMirrors());    request.setProxies(session.getRequest().getProxies());    for (MavenProject project : projects) {        request.setArtifact(new ProjectArtifact(project));        request.setArtifactDependencies(project.getDependencyArtifacts());        request.setManagedVersionMap(project.getManagedVersionMap());        request.setRemoteRepositories(project.getRemoteArtifactRepositories());        ArtifactResolutionResult result = repositorySystem.resolve(request);        try {            resolutionErrorHandler.throwErrors(request, result);        } catch (MultipleArtifactsNotFoundException e) {            Collection<Artifact> missing = new HashSet<>(e.getMissingArtifacts());            for (Iterator<Artifact> it = missing.iterator(); it.hasNext(); ) {                String key = ArtifactUtils.key(it.next());                if (projectIds.contains(key)) {                    it.remove();                }            }            if (!missing.isEmpty()) {                throw e;            }        }        resolved.addAll(result.getArtifacts());    }    return resolved;}
private Set<String> maven_f1756_0(Collection<? extends MavenProject> projects)
{    Set<String> projectIds = new HashSet<>(projects.size() * 2);    for (MavenProject p : projects) {        String key = ArtifactUtils.key(p.getGroupId(), p.getArtifactId(), p.getVersion());        projectIds.add(key);    }    return projectIds;}
private Set<String> maven_f1757_0(Iterable<Artifact> artifactIterable)
{    Set<String> projectIds = new HashSet<>();    for (Artifact artifact : artifactIterable) {        String key = ArtifactUtils.key(artifact);        projectIds.add(key);    }    return projectIds;}
public Map<String, List<File>> maven_f1758_0()
{    return collisions;}
public void maven_f1759_0(Context context) throws Exception
{}
public void maven_f1760_0(Object event) throws Exception
{}
public void maven_f1761_0() throws Exception
{}
public void maven_f1762_0(List<EventSpy> eventSpies)
{        this.eventSpies = new ArrayList<>(eventSpies);}
public List<EventSpy> maven_f1763_0()
{    return eventSpies;}
public ExecutionListener maven_f1764_0(ExecutionListener listener)
{    if (eventSpies.isEmpty()) {        return listener;    }    return new EventSpyExecutionListener(this, listener);}
public RepositoryListener maven_f1765_0(RepositoryListener listener)
{    if (eventSpies.isEmpty()) {        return listener;    }    return new EventSpyRepositoryListener(this, listener);}
public void maven_f1766_0(EventSpy.Context context)
{    if (eventSpies.isEmpty()) {        return;    }    for (EventSpy eventSpy : eventSpies) {        try {            eventSpy.init(context);        } catch (Exception | LinkageError e) {            logError("initialize", e, eventSpy);        }    }}
public void maven_f1767_0(Object event)
{    if (eventSpies.isEmpty()) {        return;    }    for (EventSpy eventSpy : eventSpies) {        try {            eventSpy.onEvent(event);        } catch (Exception | LinkageError e) {            logError("notify", e, eventSpy);        }    }}
public void maven_f1768_0()
{    if (eventSpies.isEmpty()) {        return;    }    for (EventSpy eventSpy : eventSpies) {        try {            eventSpy.close();        } catch (Exception | LinkageError e) {            logError("close", e, eventSpy);        }    }}
private voidf1769_1String action, Throwable e, EventSpy spy)
{    String msg = "Failed to " + action + " spy " + spy.getClass().getName() + ": " + e.getMessage();    if (logger.isDebugEnabled()) {            } else {            }}
public void maven_f1770_0(ExecutionEvent event)
{    dispatcher.onEvent(event);    delegate.projectDiscoveryStarted(event);}
public void maven_f1771_0(ExecutionEvent event)
{    dispatcher.onEvent(event);    delegate.sessionStarted(event);}
public void maven_f1772_0(ExecutionEvent event)
{    dispatcher.onEvent(event);    delegate.sessionEnded(event);}
public void maven_f1773_0(ExecutionEvent event)
{    dispatcher.onEvent(event);    delegate.projectSkipped(event);}
public void maven_f1774_0(ExecutionEvent event)
{    dispatcher.onEvent(event);    delegate.projectStarted(event);}
public void maven_f1775_0(ExecutionEvent event)
{    dispatcher.onEvent(event);    delegate.projectSucceeded(event);}
public void maven_f1776_0(ExecutionEvent event)
{    dispatcher.onEvent(event);    delegate.projectFailed(event);}
public void maven_f1777_0(ExecutionEvent event)
{    dispatcher.onEvent(event);    delegate.forkStarted(event);}
public void maven_f1778_0(ExecutionEvent event)
{    dispatcher.onEvent(event);    delegate.forkSucceeded(event);}
public void maven_f1779_0(ExecutionEvent event)
{    dispatcher.onEvent(event);    delegate.forkFailed(event);}
public void maven_f1780_0(ExecutionEvent event)
{    dispatcher.onEvent(event);    delegate.mojoSkipped(event);}
public void maven_f1781_0(ExecutionEvent event)
{    dispatcher.onEvent(event);    delegate.mojoStarted(event);}
public void maven_f1782_0(ExecutionEvent event)
{    dispatcher.onEvent(event);    delegate.mojoSucceeded(event);}
public void maven_f1783_0(ExecutionEvent event)
{    dispatcher.onEvent(event);    delegate.mojoFailed(event);}
public void maven_f1784_0(ExecutionEvent event)
{    dispatcher.onEvent(event);    delegate.forkedProjectStarted(event);}
public void maven_f1785_0(ExecutionEvent event)
{    dispatcher.onEvent(event);    delegate.forkedProjectSucceeded(event);}
public void maven_f1786_0(ExecutionEvent event)
{    dispatcher.onEvent(event);    delegate.forkedProjectFailed(event);}
public void maven_f1787_0(RepositoryEvent event)
{    dispatcher.onEvent(event);    delegate.artifactDeployed(event);}
public void maven_f1788_0(RepositoryEvent event)
{    dispatcher.onEvent(event);    delegate.artifactDeploying(event);}
public void maven_f1789_0(RepositoryEvent event)
{    dispatcher.onEvent(event);    delegate.artifactDescriptorInvalid(event);}
public void maven_f1790_0(RepositoryEvent event)
{    dispatcher.onEvent(event);    delegate.artifactDescriptorMissing(event);}
public void maven_f1791_0(RepositoryEvent event)
{    dispatcher.onEvent(event);    delegate.artifactInstalled(event);}
public void maven_f1792_0(RepositoryEvent event)
{    dispatcher.onEvent(event);    delegate.artifactInstalling(event);}
public void maven_f1793_0(RepositoryEvent event)
{    dispatcher.onEvent(event);    delegate.artifactResolved(event);}
public void maven_f1794_0(RepositoryEvent event)
{    dispatcher.onEvent(event);    delegate.artifactResolving(event);}
public void maven_f1795_0(RepositoryEvent event)
{    dispatcher.onEvent(event);    delegate.metadataDeployed(event);}
public void maven_f1796_0(RepositoryEvent event)
{    dispatcher.onEvent(event);    delegate.metadataDeploying(event);}
public void maven_f1797_0(RepositoryEvent event)
{    dispatcher.onEvent(event);    delegate.metadataInstalled(event);}
public void maven_f1798_0(RepositoryEvent event)
{    dispatcher.onEvent(event);    delegate.metadataInstalling(event);}
public void maven_f1799_0(RepositoryEvent event)
{    dispatcher.onEvent(event);    delegate.metadataInvalid(event);}
public void maven_f1800_0(RepositoryEvent event)
{    dispatcher.onEvent(event);    delegate.metadataResolved(event);}
public void maven_f1801_0(RepositoryEvent event)
{    dispatcher.onEvent(event);    delegate.metadataResolving(event);}
public void maven_f1802_0(RepositoryEvent event)
{    dispatcher.onEvent(event);    delegate.artifactDownloaded(event);}
public void maven_f1803_0(RepositoryEvent event)
{    dispatcher.onEvent(event);    delegate.artifactDownloading(event);}
public void maven_f1804_0(RepositoryEvent event)
{    dispatcher.onEvent(event);    delegate.metadataDownloaded(event);}
public void maven_f1805_0(RepositoryEvent event)
{    dispatcher.onEvent(event);    delegate.metadataDownloading(event);}
public ExceptionSummary maven_f1806_0(Throwable exception)
{    return handle("", exception);}
private ExceptionSummary maven_f1807_0(String message, Throwable exception)
{    String reference = getReference(exception);    List<ExceptionSummary> children = null;    if (exception instanceof ProjectBuildingException) {        List<ProjectBuildingResult> results = ((ProjectBuildingException) exception).getResults();        children = new ArrayList<>();        for (ProjectBuildingResult result : results) {            ExceptionSummary child = handle(result);            if (child != null) {                children.add(child);            }        }        message = "The build could not read " + children.size() + " project" + (children.size() == 1 ? "" : "s");    } else {        message = getMessage(message, exception);    }    return new ExceptionSummary(exception, message, reference, children);}
private ExceptionSummary maven_f1808_0(ProjectBuildingResult result)
{    List<ExceptionSummary> children = new ArrayList<>();    for (ModelProblem problem : result.getProblems()) {        ExceptionSummary child = handle(problem, result.getProjectId());        if (child != null) {            children.add(child);        }    }    if (children.isEmpty()) {        return null;    }    String message = "\nThe project " + result.getProjectId() + " (" + result.getPomFile() + ") has " + children.size() + " error" + (children.size() == 1 ? "" : "s");    return new ExceptionSummary(null, message, null, children);}
private ExceptionSummary maven_f1809_0(ModelProblem problem, String projectId)
{    if (ModelProblem.Severity.ERROR.compareTo(problem.getSeverity()) >= 0) {        String message = problem.getMessage();        String location = ModelProblemUtils.formatLocation(problem, projectId);        if (StringUtils.isNotEmpty(location)) {            message += " @ " + location;        }        return handle(message, problem.getException());    } else {        return null;    }}
private String maven_f1810_0(Throwable exception)
{    String reference = "";    if (exception != null) {        if (exception instanceof MojoExecutionException) {            reference = MojoExecutionException.class.getSimpleName();            Throwable cause = exception.getCause();            if (cause instanceof IOException) {                cause = cause.getCause();                if (cause instanceof ConnectException) {                    reference = ConnectException.class.getSimpleName();                }            }        } else if (exception instanceof MojoFailureException) {            reference = MojoFailureException.class.getSimpleName();        } else if (exception instanceof LinkageError) {            reference = LinkageError.class.getSimpleName();        } else if (exception instanceof PluginExecutionException) {            Throwable cause = exception.getCause();            if (cause instanceof PluginContainerException) {                Throwable cause2 = cause.getCause();                if (cause2 instanceof NoClassDefFoundError) {                    String message = cause2.getMessage();                    if (message != null && message.contains("org/sonatype/aether/")) {                        reference = "AetherClassNotFound";                    }                }            }            if (StringUtils.isEmpty(reference)) {                reference = getReference(cause);            }            if (StringUtils.isEmpty(reference)) {                reference = exception.getClass().getSimpleName();            }        } else if (exception instanceof LifecycleExecutionException) {            reference = getReference(exception.getCause());        } else if (isNoteworthyException(exception)) {            reference = exception.getClass().getSimpleName();        }    }    if (StringUtils.isNotEmpty(reference) && !reference.startsWith("http:")) {        reference = "http://cwiki.apache.org/confluence/display/MAVEN/" + reference;    }    return reference;}
private boolean maven_f1811_0(Throwable exception)
{    if (exception == null) {        return false;    } else if (exception instanceof Error) {        return true;    } else if (exception instanceof RuntimeException) {        return false;    } else if (exception.getClass().getName().startsWith("java")) {        return false;    }    return true;}
private String maven_f1812_0(String message, Throwable exception)
{    String fullMessage = (message != null) ? message : "";    for (Throwable t = exception; t != null; t = t.getCause()) {        String exceptionMessage = t.getMessage();        if (t instanceof AbstractMojoExecutionException) {            String longMessage = ((AbstractMojoExecutionException) t).getLongMessage();            if (StringUtils.isNotEmpty(longMessage)) {                if (StringUtils.isEmpty(exceptionMessage) || longMessage.contains(exceptionMessage)) {                    exceptionMessage = longMessage;                } else if (!exceptionMessage.contains(longMessage)) {                    exceptionMessage = join(exceptionMessage, '\n' + longMessage);                }            }        }        if (StringUtils.isEmpty(exceptionMessage)) {            exceptionMessage = t.getClass().getSimpleName();        }        if (t instanceof UnknownHostException && !fullMessage.contains("host")) {            fullMessage = join(fullMessage, "Unknown host " + exceptionMessage);        } else if (!fullMessage.contains(exceptionMessage)) {            fullMessage = join(fullMessage, exceptionMessage);        }    }    return fullMessage.trim();}
private String maven_f1813_0(String message1, String message2)
{    String message = "";    if (StringUtils.isNotEmpty(message1)) {        message = message1.trim();    }    if (StringUtils.isNotEmpty(message2)) {        if (StringUtils.isNotEmpty(message)) {            if (message.endsWith(".") || message.endsWith("!") || message.endsWith(":")) {                message += " ";            } else {                message += ": ";            }        }        message += message2;    }    return message;}
public Throwable maven_f1814_0()
{    return exception;}
public String maven_f1815_0()
{    return message;}
public String maven_f1816_0()
{    return reference;}
public List<ExceptionSummary> maven_f1817_0()
{    return children;}
public void maven_f1818_0(ExecutionEvent event)
{}
public void maven_f1819_0(ExecutionEvent event)
{}
public void maven_f1820_0(ExecutionEvent event)
{}
public void maven_f1821_0(ExecutionEvent event)
{}
public void maven_f1822_0(ExecutionEvent event)
{}
public void maven_f1823_0(ExecutionEvent event)
{}
public void maven_f1824_0(ExecutionEvent event)
{}
public void maven_f1825_0(ExecutionEvent event)
{}
public void maven_f1826_0(ExecutionEvent event)
{}
public void maven_f1827_0(ExecutionEvent event)
{}
public void maven_f1828_0(ExecutionEvent event)
{}
public void maven_f1829_0(ExecutionEvent event)
{}
public void maven_f1830_0(ExecutionEvent event)
{}
public void maven_f1831_0(ExecutionEvent event)
{}
public void maven_f1832_0(ExecutionEvent event)
{}
public void maven_f1833_0(ExecutionEvent event)
{}
public void maven_f1834_0(ExecutionEvent event)
{}
public Throwable maven_f1835_0()
{    return cause;}
public MavenProject maven_f1836_0()
{    return project;}
public long maven_f1837_0()
{    return time;}
public static MavenExecutionRequest maven_f1838_0(MavenExecutionRequest original)
{    DefaultMavenExecutionRequest copy = new DefaultMavenExecutionRequest();    copy.setLocalRepository(original.getLocalRepository());    copy.setLocalRepositoryPath(original.getLocalRepositoryPath());    copy.setOffline(original.isOffline());    copy.setInteractiveMode(original.isInteractiveMode());    copy.setCacheNotFound(original.isCacheNotFound());    copy.setCacheTransferError(original.isCacheTransferError());    copy.setProxies(original.getProxies());    copy.setServers(original.getServers());    copy.setMirrors(original.getMirrors());    copy.setProfiles(original.getProfiles());    copy.setPluginGroups(original.getPluginGroups());    copy.setProjectPresent(original.isProjectPresent());    copy.setUserSettingsFile(original.getUserSettingsFile());    copy.setGlobalSettingsFile(original.getGlobalSettingsFile());    copy.setUserToolchainsFile(original.getUserToolchainsFile());    copy.setGlobalToolchainsFile(original.getGlobalToolchainsFile());    copy.setBaseDirectory((original.getBaseDirectory() != null) ? new File(original.getBaseDirectory()) : null);    copy.setGoals(original.getGoals());    copy.setRecursive(original.isRecursive());    copy.setPom(original.getPom());    copy.setSystemProperties(original.getSystemProperties());    copy.setUserProperties(original.getUserProperties());    copy.setShowErrors(original.isShowErrors());    copy.setActiveProfiles(original.getActiveProfiles());    copy.setInactiveProfiles(original.getInactiveProfiles());    copy.setTransferListener(original.getTransferListener());    copy.setLoggingLevel(original.getLoggingLevel());    copy.setGlobalChecksumPolicy(original.getGlobalChecksumPolicy());    copy.setUpdateSnapshots(original.isUpdateSnapshots());    copy.setRemoteRepositories(original.getRemoteRepositories());    copy.setPluginArtifactRepositories(original.getPluginArtifactRepositories());    copy.setRepositoryCache(original.getRepositoryCache());    copy.setWorkspaceReader(original.getWorkspaceReader());    copy.setNoSnapshotUpdates(original.isNoSnapshotUpdates());    copy.setExecutionListener(original.getExecutionListener());    copy.setUseLegacyLocalRepository(original.isUseLegacyLocalRepository());    copy.setBuilderId(original.getBuilderId());    return copy;}
public String maven_f1839_0()
{    if (basedir == null) {        return null;    }    return basedir.getAbsolutePath();}
public ArtifactRepository maven_f1840_0()
{    return localRepository;}
public File maven_f1841_0()
{    return localRepositoryPath;}
public List<String> maven_f1842_0()
{    if (goals == null) {        goals = new ArrayList<>();    }    return goals;}
public Properties maven_f1843_0()
{    if (systemProperties == null) {        systemProperties = new Properties();    }    return systemProperties;}
public Properties maven_f1844_0()
{    if (userProperties == null) {        userProperties = new Properties();    }    return userProperties;}
public File maven_f1845_0()
{    return pom;}
public String maven_f1846_0()
{    return reactorFailureBehavior;}
public List<String> maven_f1847_0()
{    if (selectedProjects == null) {        selectedProjects = new ArrayList<>();    }    return selectedProjects;}
public List<String> maven_f1848_0()
{    if (excludedProjects == null) {        excludedProjects = new ArrayList<>();    }    return excludedProjects;}
public String maven_f1849_0()
{    return resumeFrom;}
public String maven_f1850_0()
{    return makeBehavior;}
public Date maven_f1851_0()
{    return startTime;}
public boolean maven_f1852_0()
{    return showErrors;}
public boolean maven_f1853_0()
{    return interactiveMode;}
public MavenExecutionRequest maven_f1854_0(List<String> activeProfiles)
{    if (activeProfiles != null) {        this.activeProfiles = new ArrayList<>(activeProfiles);    } else {        this.activeProfiles = null;    }    return this;}
public MavenExecutionRequest maven_f1855_0(List<String> inactiveProfiles)
{    if (inactiveProfiles != null) {        this.inactiveProfiles = new ArrayList<>(inactiveProfiles);    } else {        this.inactiveProfiles = null;    }    return this;}
public MavenExecutionRequest maven_f1856_0(List<ArtifactRepository> remoteRepositories)
{    if (remoteRepositories != null) {        this.remoteRepositories = new ArrayList<>(remoteRepositories);    } else {        this.remoteRepositories = null;    }    return this;}
public MavenExecutionRequest maven_f1857_0(List<ArtifactRepository> pluginArtifactRepositories)
{    if (pluginArtifactRepositories != null) {        this.pluginArtifactRepositories = new ArrayList<>(pluginArtifactRepositories);    } else {        this.pluginArtifactRepositories = null;    }    return this;}
public void maven_f1858_0(ProjectBuildingRequest projectBuildingConfiguration)
{    this.projectBuildingRequest = projectBuildingConfiguration;}
public List<String> maven_f1859_0()
{    if (activeProfiles == null) {        activeProfiles = new ArrayList<>();    }    return activeProfiles;}
public List<String> maven_f1860_0()
{    if (inactiveProfiles == null) {        inactiveProfiles = new ArrayList<>();    }    return inactiveProfiles;}
public TransferListener maven_f1861_0()
{    return transferListener;}
public int maven_f1862_0()
{    return loggingLevel;}
public boolean maven_f1863_0()
{    return offline;}
public boolean maven_f1864_0()
{    return updateSnapshots;}
public boolean maven_f1865_0()
{    return noSnapshotUpdates;}
public String maven_f1866_0()
{    return globalChecksumPolicy;}
public boolean maven_f1867_0()
{    return recursive;}
public MavenExecutionRequest maven_f1868_0(File basedir)
{    this.basedir = basedir;    return this;}
public MavenExecutionRequest maven_f1869_0(Date startTime)
{    this.startTime = startTime;    return this;}
public MavenExecutionRequest maven_f1870_0(boolean showErrors)
{    this.showErrors = showErrors;    return this;}
public MavenExecutionRequest maven_f1871_0(List<String> goals)
{    if (goals != null) {        this.goals = new ArrayList<>(goals);    } else {        this.goals = null;    }    return this;}
public MavenExecutionRequest maven_f1872_0(ArtifactRepository localRepository)
{    this.localRepository = localRepository;    if (localRepository != null) {        setLocalRepositoryPath(new File(localRepository.getBasedir()).getAbsoluteFile());    }    return this;}
public MavenExecutionRequest maven_f1873_0(File localRepository)
{    localRepositoryPath = localRepository;    return this;}
public MavenExecutionRequest maven_f1874_0(String localRepository)
{    localRepositoryPath = (localRepository != null) ? new File(localRepository) : null;    return this;}
public MavenExecutionRequest maven_f1875_0(Properties properties)
{    if (properties != null) {        this.systemProperties = SystemProperties.copyProperties(properties);    } else {        this.systemProperties = null;    }    return this;}
public MavenExecutionRequest maven_f1876_0(Properties userProperties)
{    if (userProperties != null) {        this.userProperties = new Properties();        this.userProperties.putAll(userProperties);    } else {        this.userProperties = null;    }    return this;}
public MavenExecutionRequest maven_f1877_0(String failureBehavior)
{    reactorFailureBehavior = failureBehavior;    return this;}
public MavenExecutionRequest maven_f1878_0(List<String> selectedProjects)
{    if (selectedProjects != null) {        this.selectedProjects = new ArrayList<>(selectedProjects);    } else {        this.selectedProjects = null;    }    return this;}
public MavenExecutionRequest maven_f1879_0(List<String> excludedProjects)
{    if (excludedProjects != null) {        this.excludedProjects = new ArrayList<>(excludedProjects);    } else {        this.excludedProjects = null;    }    return this;}
public MavenExecutionRequest maven_f1880_0(String project)
{    this.resumeFrom = project;    return this;}
public MavenExecutionRequest maven_f1881_0(String makeBehavior)
{    this.makeBehavior = makeBehavior;    return this;}
public MavenExecutionRequest maven_f1882_0(String profile)
{    if (!getActiveProfiles().contains(profile)) {        getActiveProfiles().add(profile);    }    return this;}
public MavenExecutionRequest maven_f1883_0(String profile)
{    if (!getInactiveProfiles().contains(profile)) {        getInactiveProfiles().add(profile);    }    return this;}
public MavenExecutionRequest maven_f1884_0(List<String> profiles)
{    for (String profile : profiles) {        addActiveProfile(profile);    }    return this;}
public MavenExecutionRequest maven_f1885_0(List<String> profiles)
{    for (String profile : profiles) {        addInactiveProfile(profile);    }    return this;}
public MavenExecutionRequest maven_f1886_0(boolean reactorActive)
{    useReactor = reactorActive;    return this;}
public boolean maven_f1887_0()
{    return useReactor;}
public MavenExecutionRequest maven_f1888_0(String pomFilename)
{    if (pomFilename != null) {        pom = new File(pomFilename);    }    return this;}
public MavenExecutionRequest maven_f1889_0(File pom)
{    this.pom = pom;    return this;}
public MavenExecutionRequest maven_f1890_0(boolean interactive)
{    interactiveMode = interactive;    return this;}
public MavenExecutionRequest maven_f1891_0(TransferListener transferListener)
{    this.transferListener = transferListener;    return this;}
public MavenExecutionRequest maven_f1892_0(int loggingLevel)
{    this.loggingLevel = loggingLevel;    return this;}
public MavenExecutionRequest maven_f1893_0(boolean offline)
{    this.offline = offline;    return this;}
public MavenExecutionRequest maven_f1894_0(boolean updateSnapshots)
{    this.updateSnapshots = updateSnapshots;    return this;}
public MavenExecutionRequest maven_f1895_0(boolean noSnapshotUpdates)
{    this.noSnapshotUpdates = noSnapshotUpdates;    return this;}
public MavenExecutionRequest maven_f1896_0(String globalChecksumPolicy)
{    this.globalChecksumPolicy = globalChecksumPolicy;    return this;}
public List<Proxy> maven_f1897_0()
{    if (proxies == null) {        proxies = new ArrayList<>();    }    return proxies;}
public MavenExecutionRequest maven_f1898_0(List<Proxy> proxies)
{    if (proxies != null) {        this.proxies = new ArrayList<>(proxies);    } else {        this.proxies = null;    }    return this;}
public MavenExecutionRequest maven_f1899_0(Proxy proxy)
{    Objects.requireNonNull(proxy, "proxy cannot be null");    for (Proxy p : getProxies()) {        if (p.getId() != null && p.getId().equals(proxy.getId())) {            return this;        }    }    getProxies().add(proxy);    return this;}
public List<Server> maven_f1900_0()
{    if (servers == null) {        servers = new ArrayList<>();    }    return servers;}
public MavenExecutionRequest maven_f1901_0(List<Server> servers)
{    if (servers != null) {        this.servers = new ArrayList<>(servers);    } else {        this.servers = null;    }    return this;}
public MavenExecutionRequest maven_f1902_0(Server server)
{    Objects.requireNonNull(server, "server cannot be null");    for (Server p : getServers()) {        if (p.getId() != null && p.getId().equals(server.getId())) {            return this;        }    }    getServers().add(server);    return this;}
public List<Mirror> maven_f1903_0()
{    if (mirrors == null) {        mirrors = new ArrayList<>();    }    return mirrors;}
public MavenExecutionRequest maven_f1904_0(List<Mirror> mirrors)
{    if (mirrors != null) {        this.mirrors = new ArrayList<>(mirrors);    } else {        this.mirrors = null;    }    return this;}
public MavenExecutionRequest maven_f1905_0(Mirror mirror)
{    Objects.requireNonNull(mirror, "mirror cannot be null");    for (Mirror p : getMirrors()) {        if (p.getId() != null && p.getId().equals(mirror.getId())) {            return this;        }    }    getMirrors().add(mirror);    return this;}
public List<Profile> maven_f1906_0()
{    if (profiles == null) {        profiles = new ArrayList<>();    }    return profiles;}
public MavenExecutionRequest maven_f1907_0(List<Profile> profiles)
{    if (profiles != null) {        this.profiles = new ArrayList<>(profiles);    } else {        this.profiles = null;    }    return this;}
public List<String> maven_f1908_0()
{    if (pluginGroups == null) {        pluginGroups = new ArrayList<>();    }    return pluginGroups;}
public MavenExecutionRequest maven_f1909_0(List<String> pluginGroups)
{    if (pluginGroups != null) {        this.pluginGroups = new ArrayList<>(pluginGroups);    } else {        this.pluginGroups = null;    }    return this;}
public MavenExecutionRequest maven_f1910_0(String pluginGroup)
{    if (!getPluginGroups().contains(pluginGroup)) {        getPluginGroups().add(pluginGroup);    }    return this;}
public MavenExecutionRequest maven_f1911_0(List<String> pluginGroups)
{    for (String pluginGroup : pluginGroups) {        addPluginGroup(pluginGroup);    }    return this;}
public MavenExecutionRequest maven_f1912_0(boolean recursive)
{    this.recursive = recursive;    return this;}
public boolean maven_f1913_0()
{    return isProjectPresent;}
public MavenExecutionRequest maven_f1914_0(boolean projectPresent)
{    isProjectPresent = projectPresent;    return this;}
public File maven_f1915_0()
{    return userSettingsFile;}
public MavenExecutionRequest maven_f1916_0(File userSettingsFile)
{    this.userSettingsFile = userSettingsFile;    return this;}
public File maven_f1917_0()
{    return globalSettingsFile;}
public MavenExecutionRequest maven_f1918_0(File globalSettingsFile)
{    this.globalSettingsFile = globalSettingsFile;    return this;}
public File maven_f1919_0()
{    return userToolchainsFile;}
public MavenExecutionRequest maven_f1920_0(File userToolchainsFile)
{    this.userToolchainsFile = userToolchainsFile;    return this;}
public File maven_f1921_0()
{    return globalToolchainsFile;}
public MavenExecutionRequest maven_f1922_0(File globalToolchainsFile)
{    this.globalToolchainsFile = globalToolchainsFile;    return this;}
public MavenExecutionRequest maven_f1923_0(ArtifactRepository repository)
{    for (ArtifactRepository repo : getRemoteRepositories()) {        if (repo.getId() != null && repo.getId().equals(repository.getId())) {            return this;        }    }    getRemoteRepositories().add(repository);    return this;}
public List<ArtifactRepository> maven_f1924_0()
{    if (remoteRepositories == null) {        remoteRepositories = new ArrayList<>();    }    return remoteRepositories;}
public MavenExecutionRequest maven_f1925_0(ArtifactRepository repository)
{    for (ArtifactRepository repo : getPluginArtifactRepositories()) {        if (repo.getId() != null && repo.getId().equals(repository.getId())) {            return this;        }    }    getPluginArtifactRepositories().add(repository);    return this;}
public List<ArtifactRepository> maven_f1926_0()
{    if (pluginArtifactRepositories == null) {        pluginArtifactRepositories = new ArrayList<>();    }    return pluginArtifactRepositories;}
public ProjectBuildingRequest maven_f1927_0()
{    if (projectBuildingRequest == null) {        projectBuildingRequest = new DefaultProjectBuildingRequest();        projectBuildingRequest.setLocalRepository(getLocalRepository());        projectBuildingRequest.setSystemProperties(getSystemProperties());        projectBuildingRequest.setUserProperties(getUserProperties());        projectBuildingRequest.setRemoteRepositories(getRemoteRepositories());        projectBuildingRequest.setPluginArtifactRepositories(getPluginArtifactRepositories());        projectBuildingRequest.setActiveProfileIds(getActiveProfiles());        projectBuildingRequest.setInactiveProfileIds(getInactiveProfiles());        projectBuildingRequest.setProfiles(getProfiles());        projectBuildingRequest.setProcessPlugins(true);        projectBuildingRequest.setBuildStartTime(getStartTime());    }    return projectBuildingRequest;}
public MavenExecutionRequest maven_f1928_0(Profile profile)
{    Objects.requireNonNull(profile, "profile cannot be null");    for (Profile p : getProfiles()) {        if (p.getId() != null && p.getId().equals(profile.getId())) {            return this;        }    }    getProfiles().add(profile);    return this;}
public RepositoryCache maven_f1929_0()
{    return repositoryCache;}
public MavenExecutionRequest maven_f1930_0(RepositoryCache repositoryCache)
{    this.repositoryCache = repositoryCache;    return this;}
public ExecutionListener maven_f1931_0()
{    return executionListener;}
public MavenExecutionRequest maven_f1932_0(ExecutionListener executionListener)
{    this.executionListener = executionListener;    return this;}
public void maven_f1933_0(final int degreeOfConcurrency)
{    this.degreeOfConcurrency = degreeOfConcurrency;}
public int maven_f1934_0()
{    return degreeOfConcurrency;}
public WorkspaceReader maven_f1935_0()
{    return workspaceReader;}
public MavenExecutionRequest maven_f1936_0(WorkspaceReader workspaceReader)
{    this.workspaceReader = workspaceReader;    return this;}
public boolean maven_f1937_0()
{    return cacheTransferError;}
public MavenExecutionRequest maven_f1938_0(boolean cacheTransferError)
{    this.cacheTransferError = cacheTransferError;    return this;}
public boolean maven_f1939_0()
{    return cacheNotFound;}
public MavenExecutionRequest maven_f1940_0(boolean cacheNotFound)
{    this.cacheNotFound = cacheNotFound;    return this;}
public boolean maven_f1941_0()
{    return this.useLegacyLocalRepositoryManager;}
public MavenExecutionRequest maven_f1942_0(boolean useLegacyLocalRepositoryManager)
{    this.useLegacyLocalRepositoryManager = useLegacyLocalRepositoryManager;    return this;}
public MavenExecutionRequest maven_f1943_0(String builderId)
{    this.builderId = builderId;    return this;}
public String maven_f1944_0()
{    return builderId;}
public Map<String, List<ToolchainModel>> maven_f1945_0()
{    if (toolchains == null) {        toolchains = new HashMap<>();    }    return toolchains;}
public MavenExecutionRequest maven_f1946_0(Map<String, List<ToolchainModel>> toolchains)
{    this.toolchains = toolchains;    return this;}
public void maven_f1947_0(File directory)
{    this.multiModuleProjectDirectory = directory;}
public File maven_f1948_0()
{    return multiModuleProjectDirectory;}
public MavenExecutionRequest maven_f1949_0(EventSpyDispatcher eventSpyDispatcher)
{    this.eventSpyDispatcher = eventSpyDispatcher;    return this;}
public EventSpyDispatcher maven_f1950_0()
{    return eventSpyDispatcher;}
public Map<String, Object> maven_f1951_0()
{    if (data == null) {        data = new HashMap<>();    }    return data;}
public MavenExecutionRequest maven_f1952_0(MavenExecutionRequest request, PersistedToolchains toolchains) throws MavenExecutionRequestPopulationException
{    if (toolchains != null) {        Map<String, List<ToolchainModel>> groupedToolchains = new HashMap<>(2);        for (ToolchainModel model : toolchains.getToolchains()) {            if (!groupedToolchains.containsKey(model.getType())) {                groupedToolchains.put(model.getType(), new ArrayList<ToolchainModel>());            }            groupedToolchains.get(model.getType()).add(model);        }        request.setToolchains(groupedToolchains);    }    return request;}
public MavenExecutionRequest maven_f1953_0(MavenExecutionRequest request) throws MavenExecutionRequestPopulationException
{    baseDirectory(request);    localRepository(request);    populateDefaultPluginGroups(request);    injectDefaultRepositories(request);    injectDefaultPluginRepositories(request);    return request;}
private void maven_f1954_0(MavenExecutionRequest request)
{    request.addPluginGroup("org.apache.maven.plugins");    request.addPluginGroup("org.codehaus.mojo");}
private void maven_f1955_0(MavenExecutionRequest request) throws MavenExecutionRequestPopulationException
{    Set<String> definedRepositories = repositorySystem.getRepoIds(request.getRemoteRepositories());    if (!definedRepositories.contains(RepositorySystem.DEFAULT_REMOTE_REPO_ID)) {        try {            request.addRemoteRepository(repositorySystem.createDefaultRemoteRepository(request));        } catch (Exception e) {            throw new MavenExecutionRequestPopulationException("Cannot create default remote repository.", e);        }    }}
private void maven_f1956_0(MavenExecutionRequest request) throws MavenExecutionRequestPopulationException
{    Set<String> definedRepositories = repositorySystem.getRepoIds(request.getPluginArtifactRepositories());    if (!definedRepositories.contains(RepositorySystem.DEFAULT_REMOTE_REPO_ID)) {        try {            request.addPluginArtifactRepository(repositorySystem.createDefaultRemoteRepository(request));        } catch (Exception e) {            throw new MavenExecutionRequestPopulationException("Cannot create default remote repository.", e);        }    }}
private void maven_f1957_0(MavenExecutionRequest request) throws MavenExecutionRequestPopulationException
{    if (request.getLocalRepository() == null) {        request.setLocalRepository(createLocalRepository(request));    }    if (request.getLocalRepositoryPath() == null) {        request.setLocalRepositoryPath(new File(request.getLocalRepository().getBasedir()).getAbsoluteFile());    }}
private ArtifactRepository maven_f1958_0(MavenExecutionRequest request) throws MavenExecutionRequestPopulationException
{    String localRepositoryPath = null;    if (request.getLocalRepositoryPath() != null) {        localRepositoryPath = request.getLocalRepositoryPath().getAbsolutePath();    }    if (StringUtils.isEmpty(localRepositoryPath)) {        localRepositoryPath = RepositorySystem.defaultUserLocalRepository.getAbsolutePath();    }    try {        return repositorySystem.createLocalRepository(request, new File(localRepositoryPath));    } catch (Exception e) {        throw new MavenExecutionRequestPopulationException("Cannot create local repository.", e);    }}
private void maven_f1959_0(MavenExecutionRequest request)
{    if (request.getBaseDirectory() == null && request.getPom() != null) {        request.setBaseDirectory(request.getPom().getAbsoluteFile().getParentFile());    }}
public MavenExecutionRequest maven_f1960_0(MavenExecutionRequest request, Settings settings) throws MavenExecutionRequestPopulationException
{    if (settings == null) {        return request;    }    request.setOffline(settings.isOffline());    request.setInteractiveMode(settings.isInteractiveMode());    request.setPluginGroups(settings.getPluginGroups());    request.setLocalRepositoryPath(settings.getLocalRepository());    for (Server server : settings.getServers()) {        server = server.clone();        request.addServer(server);    }    for (Proxy proxy : settings.getProxies()) {        if (!proxy.isActive()) {            continue;        }        proxy = proxy.clone();        request.addProxy(proxy);    }    for (Mirror mirror : settings.getMirrors()) {        mirror = mirror.clone();        request.addMirror(mirror);    }    request.setActiveProfiles(settings.getActiveProfiles());    for (org.apache.maven.settings.Profile rawProfile : settings.getProfiles()) {        request.addProfile(SettingsUtils.convertFromSettingsProfile(rawProfile));        if (settings.getActiveProfiles().contains(rawProfile.getId())) {            List<Repository> remoteRepositories = rawProfile.getRepositories();            for (Repository remoteRepository : remoteRepositories) {                try {                    request.addRemoteRepository(repositorySystem.buildArtifactRepository(remoteRepository));                } catch (InvalidRepositoryException e) {                                }            }            List<Repository> pluginRepositories = rawProfile.getPluginRepositories();            for (Repository pluginRepo : pluginRepositories) {                try {                    request.addPluginArtifactRepository(repositorySystem.buildArtifactRepository(pluginRepo));                } catch (InvalidRepositoryException e) {                                }            }        }    }    return request;}
public MavenExecutionResult maven_f1961_0(MavenProject project)
{    this.project = project;    return this;}
public MavenProject maven_f1962_0()
{    return project;}
public MavenExecutionResult maven_f1963_0(List<MavenProject> topologicallySortedProjects)
{    this.topologicallySortedProjects = topologicallySortedProjects;    return this;}
public List<MavenProject> maven_f1964_0()
{    return null == topologicallySortedProjects ? Collections.<MavenProject>emptyList() : Collections.unmodifiableList(topologicallySortedProjects);}
public DependencyResolutionResult maven_f1965_0()
{    return dependencyResolutionResult;}
public MavenExecutionResult maven_f1966_0(DependencyResolutionResult dependencyResolutionResult)
{    this.dependencyResolutionResult = dependencyResolutionResult;    return this;}
public List<Throwable> maven_f1967_0()
{    return exceptions;}
public MavenExecutionResult maven_f1968_0(Throwable t)
{    exceptions.add(t);    return this;}
public boolean maven_f1969_0()
{    return !getExceptions().isEmpty();}
public BuildSummary maven_f1970_0(MavenProject project)
{    return buildSummaries.get(project);}
public void maven_f1971_0(BuildSummary summary)
{    buildSummaries.put(summary.getProject(), summary);}
public void maven_f1972_0(List<MavenProject> projects)
{    if (!projects.isEmpty()) {        this.currentProject = projects.get(0);        this.topLevelProject = currentProject;        for (MavenProject project : projects) {            if (project.isExecutionRoot()) {                topLevelProject = project;                break;            }        }    } else {        this.currentProject = null;        this.topLevelProject = null;    }    this.projects = projects;}
public ArtifactRepository maven_f1973_0()
{    return request.getLocalRepository();}
public List<String> maven_f1974_0()
{    return request.getGoals();}
public Properties maven_f1975_0()
{    return request.getUserProperties();}
public Properties maven_f1976_0()
{    return request.getSystemProperties();}
public Settings maven_f1977_0()
{    return settings;}
public List<MavenProject> maven_f1978_0()
{    return projects;}
public String maven_f1979_0()
{    return request.getBaseDirectory();}
public MavenExecutionRequest maven_f1980_0()
{    return request;}
public void maven_f1981_0(MavenProject currentProject)
{    this.currentProject = currentProject;}
public MavenProject maven_f1982_0()
{    return currentProject;}
public ProjectBuildingRequest maven_f1983_0()
{    return request.getProjectBuildingRequest().setRepositorySession(getRepositorySession());}
public List<String> maven_f1984_0()
{    return request.getPluginGroups();}
public boolean maven_f1985_0()
{    return request.isOffline();}
public MavenProject maven_f1986_0()
{    return topLevelProject;}
public MavenExecutionResult maven_f1987_0()
{    return result;}
public Map<String, Object> maven_f1988_0(PluginDescriptor plugin, MavenProject project)
{    String projectKey = project.getId();    Map<String, Map<String, Object>> pluginContextsByKey = pluginContextsByProjectAndPluginKey.get(projectKey);    if (pluginContextsByKey == null) {        pluginContextsByKey = new ConcurrentHashMap<>();        pluginContextsByProjectAndPluginKey.put(projectKey, pluginContextsByKey);    }    String pluginKey = plugin.getPluginLookupKey();    Map<String, Object> pluginContext = pluginContextsByKey.get(pluginKey);    if (pluginContext == null) {        pluginContext = new ConcurrentHashMap<>();        pluginContextsByKey.put(pluginKey, pluginContext);    }    return pluginContext;}
public ProjectDependencyGraph maven_f1989_0()
{    return projectDependencyGraph;}
public void maven_f1990_0(ProjectDependencyGraph projectDependencyGraph)
{    this.projectDependencyGraph = projectDependencyGraph;}
public String maven_f1991_0()
{    return request.getReactorFailureBehavior();}
public MavenSession maven_f1992_0()
{    try {        return (MavenSession) super.clone();    } catch (CloneNotSupportedException e) {        throw new RuntimeException("Bug", e);    }}
public Date maven_f1993_0()
{    return request.getStartTime();}
public boolean maven_f1994_0()
{    return parallel;}
public void maven_f1995_0(boolean parallel)
{    this.parallel = parallel;}
public RepositorySystemSession maven_f1996_0()
{    return repositorySession;}
public void maven_f1997_0(Map<String, MavenProject> projectMap)
{    this.projectMap = projectMap;}
public List<MavenProject> maven_f1998_0()
{    return allProjects;}
public void maven_f1999_0(List<MavenProject> allProjects)
{    this.allProjects = allProjects;}
public Map<String, MavenProject> maven_f2000_0()
{    return projectMap;}
public List<MavenProject> maven_f2001_0()
{    return getProjects();}
public RepositoryCache maven_f2002_0()
{    return null;}
public EventDispatcher maven_f2003_0()
{    return null;}
public boolean maven_f2004_0()
{    return request.isProjectPresent();}
public Properties maven_f2005_0()
{    if (executionProperties == null) {        executionProperties = new Properties();        executionProperties.putAll(request.getSystemProperties());        executionProperties.putAll(request.getUserProperties());    }    return executionProperties;}
public PlexusContainer maven_f2006_0()
{    return container;}
public Object maven_f2007_0(String role) throws ComponentLookupException
{    return container.lookup(role);}
public Object maven_f2008_0(String role, String roleHint) throws ComponentLookupException
{    return container.lookup(role, roleHint);}
public List<Object> maven_f2009_0(String role) throws ComponentLookupException
{    return container.lookupList(role);}
public Map<String, Object> maven_f2010_0(String role) throws ComponentLookupException
{    return container.lookupMap(role);}
public MavenSession maven_f2011_0()
{    return session;}
public MavenProject maven_f2012_0()
{    return project;}
public MojoExecution maven_f2013_0()
{    return mojoExecution;}
public Mojo maven_f2014_0()
{    return mojo;}
public Throwable maven_f2015_0()
{    return cause;}
public MavenSession maven_f2016_0()
{    return session;}
public MavenProject maven_f2017_0()
{    return project;}
public List<MojoExecution> maven_f2018_0()
{    return executionPlan;}
public Throwable maven_f2019_0()
{    return cause;}
public Map maven_f2020_0(PluginDescriptor plugin, MavenProject project)
{    Map<String, Map> pluginContextsByKey = pluginContextsByProjectAndPluginKey.get(project.getId());    if (pluginContextsByKey == null) {        pluginContextsByKey = new HashMap<>();        pluginContextsByProjectAndPluginKey.put(project.getId(), pluginContextsByKey);    }    Map pluginContext = pluginContextsByKey.get(plugin.getPluginLookupKey());    if (pluginContext == null) {        pluginContext = new HashMap<>();        pluginContextsByKey.put(plugin.getPluginLookupKey(), pluginContext);    }    return pluginContext;}
public void maven_f2021_0(String failureBehavior)
{    if (failureBehavior == null) {                this.failureBehavior = FAIL_FAST;        return;    }    if (FAIL_FAST.equals(failureBehavior) || FAIL_AT_END.equals(failureBehavior) || FAIL_NEVER.equals(failureBehavior)) {        this.failureBehavior = failureBehavior;    } else {        throw new IllegalArgumentException("Invalid failure behavior (must be one of: \'" + FAIL_FAST + "\', \'" + FAIL_AT_END + "\', \'" + FAIL_NEVER + "\').");    }}
public String maven_f2022_0()
{    return failureBehavior;}
public void maven_f2023_0(MavenProject project)
{    blackList(getProjectKey(project));}
private void maven_f2024_0(String id)
{    if (!blackList.contains(id)) {        blackList.add(id);        List<String> dependents = sorter.getDependents(id);        if (dependents != null && !dependents.isEmpty()) {            for (String dependentId : dependents) {                if (!buildSuccessesByProject.containsKey(dependentId) && !buildFailuresByProject.containsKey(dependentId)) {                    blackList(dependentId);                }            }        }    }}
public boolean maven_f2025_0(MavenProject project)
{    return blackList.contains(getProjectKey(project));}
private static String maven_f2026_0(MavenProject project)
{    return ArtifactUtils.versionlessKey(project.getGroupId(), project.getArtifactId());}
public void maven_f2027_0(MavenProject project, Exception error, String task, long time)
{    buildFailuresByProject.put(getProjectKey(project), new BuildFailure(project, time, error));}
public boolean maven_f2028_0()
{    return !buildFailuresByProject.isEmpty();}
public boolean maven_f2029_0(MavenProject project)
{    return buildFailuresByProject.containsKey(getProjectKey(project));}
public boolean maven_f2030_0()
{    return sorter.hasMultipleProjects();}
public List<MavenProject> maven_f2031_0()
{    return sorter.getSortedProjects();}
public boolean maven_f2032_0(MavenProject project)
{    return buildSuccessesByProject.containsKey(getProjectKey(project));}
public void maven_f2033_0(MavenProject project, long time)
{    buildSuccessesByProject.put(getProjectKey(project), new BuildSuccess(project, time));}
public BuildFailure maven_f2034_0(MavenProject project)
{    return buildFailuresByProject.get(getProjectKey(project));}
public BuildSuccess maven_f2035_0(MavenProject project)
{    return buildSuccessesByProject.get(getProjectKey(project));}
public boolean maven_f2036_0()
{    return buildFailuresByProject.size() + buildSuccessesByProject.size() > 1;}
public Object maven_f2037_0()
{    throw new IllegalStateException();}
public void maven_f2038_0()
{    LinkedList<ScopeState> stack = values.get();    if (stack == null) {        stack = new LinkedList<>();        values.set(stack);    }    stack.addFirst(new ScopeState());}
private ScopeState maven_f2039_0()
{    LinkedList<ScopeState> stack = values.get();    if (stack == null || stack.isEmpty()) {        throw new IllegalStateException();    }    return stack.getFirst();}
public void maven_f2040_0() throws MojoExecutionException
{    final LinkedList<ScopeState> stack = values.get();    if (stack == null || stack.isEmpty()) {        throw new IllegalStateException();    }    stack.removeFirst();    if (stack.isEmpty()) {        values.remove();    }}
public void maven_f2041_0(Class<T> clazz, Provider<T> value)
{    getScopeState().seeded.put(Key.get(clazz), value);}
public void maven_f2042_0(Class<T> clazz, final T value)
{    getScopeState().seeded.put(Key.get(clazz), Providers.of(value));}
public Provider<T> maven_f2043_0(final Key<T> key, final Provider<T> unscoped)
{    return new Provider<T>() {        @SuppressWarnings("unchecked")        public T get() {            LinkedList<ScopeState> stack = values.get();            if (stack == null || stack.isEmpty()) {                throw new OutOfScopeException("Cannot access " + key + " outside of a scoping block");            }            ScopeState state = stack.getFirst();            Provider<?> seeded = state.seeded.get(key);            if (seeded != null) {                return (T) seeded.get();            }            T provided = (T) state.provided.get(key);            if (provided == null && unscoped != null) {                provided = unscoped.get();                state.provided.put(key, provided);            }            return provided;        }    };}
public T maven_f2044_0()
{    LinkedList<ScopeState> stack = values.get();    if (stack == null || stack.isEmpty()) {        throw new OutOfScopeException("Cannot access " + key + " outside of a scoping block");    }    ScopeState state = stack.getFirst();    Provider<?> seeded = state.seeded.get(key);    if (seeded != null) {        return (T) seeded.get();    }    T provided = (T) state.provided.get(key);    if (provided == null && unscoped != null) {        provided = unscoped.get();        state.provided.put(key, provided);    }    return provided;}
public static Provider<T> maven_f2045_0()
{    return (Provider<T>) SEEDED_KEY_PROVIDER;}
public void maven_f2046_0(MojoExecutionEvent event) throws MojoExecutionException
{    for (WeakMojoExecutionListener provided : getProvidedListeners()) {        provided.beforeMojoExecution(event);    }}
public void maven_f2047_0(MojoExecutionEvent event) throws MojoExecutionException
{    for (WeakMojoExecutionListener provided : getProvidedListeners()) {        provided.afterMojoExecutionSuccess(event);    }}
public void maven_f2048_0(MojoExecutionEvent event)
{    for (WeakMojoExecutionListener provided : getProvidedListeners()) {        provided.afterExecutionFailure(event);    }}
private Collection<WeakMojoExecutionListener> maven_f2049_0()
{            IdentityHashMap<WeakMojoExecutionListener, Object> listeners = new IdentityHashMap<>();    for (Object provided : getScopeState().provided.values()) {        if (provided instanceof WeakMojoExecutionListener) {            listeners.put((WeakMojoExecutionListener) provided, null);        }    }    return listeners.keySet();}
protected void maven_f2050_0()
{    super.configure();    bind(MojoExecutionListener.class).toInstance(scope);}
protected void maven_f2051_0()
{    bindScope(MojoExecutionScoped.class, scope);    bind(MojoExecutionScope.class).toInstance(scope);    bind(MavenProject.class).toProvider(MojoExecutionScope.<MavenProject>seededKeyProvider()).in(scope);    bind(MojoExecution.class).toProvider(MojoExecutionScope.<MojoExecution>seededKeyProvider()).in(scope);}
public String maven_f2052_0()
{    if (request.getLocalRepositoryPath() != null) {        return request.getLocalRepositoryPath().getAbsolutePath();    }    return null;}
public boolean maven_f2053_0()
{    return request.isInteractiveMode();}
public boolean maven_f2054_0()
{    return request.isOffline();}
public List<Proxy> maven_f2055_0()
{    return request.getProxies();}
public List<Server> maven_f2056_0()
{    return request.getServers();}
public List<Mirror> maven_f2057_0()
{    return request.getMirrors();}
public List<Profile> maven_f2058_0()
{    List<Profile> result = new ArrayList<>();    for (org.apache.maven.model.Profile profile : request.getProfiles()) {        result.add(SettingsUtils.convertToSettingsProfile(profile));    }    return result;}
public List<String> maven_f2059_0()
{    return request.getActiveProfiles();}
public List<String> maven_f2060_0()
{    return request.getPluginGroups();}
public Set<String> maven_f2061_0()
{    return artifacts;}
public Map<String, ClassLoader> maven_f2062_0()
{    return packages;}
public CoreExports maven_f2063_0()
{    return exports;}
public ClassRealm maven_f2064_0()
{    return realm;}
public Set<String> maven_f2065_0()
{    return artifacts;}
public Set<String> maven_f2066_0()
{    return packages;}
public static CoreExtensionEntry maven_f2067_0(ClassRealm loader)
{    Set<String> artifacts = new LinkedHashSet<>();    Set<String> packages = new LinkedHashSet<>();    try {        Enumeration<URL> urls = loader.getResources(BUILDER.getExtensionDescriptorLocation());        while (urls.hasMoreElements()) {            try (InputStream is = urls.nextElement().openStream()) {                ExtensionDescriptor descriptor = BUILDER.build(is);                artifacts.addAll(descriptor.getExportedArtifacts());                packages.addAll(descriptor.getExportedPackages());            }        }    } catch (IOException ignored) {        }    return new CoreExtensionEntry(loader, artifacts, packages);}
public static CoreExtensionEntry maven_f2068_0(ClassRealm loader, Collection<File> classpath)
{    Set<String> artifacts = new LinkedHashSet<>();    Set<String> packages = new LinkedHashSet<>();    try {        for (File entry : classpath) {            ExtensionDescriptor descriptor = BUILDER.build(entry);            if (descriptor != null) {                artifacts.addAll(descriptor.getExportedArtifacts());                packages.addAll(descriptor.getExportedPackages());            }        }    } catch (IOException ignored) {        }    return new CoreExtensionEntry(loader, artifacts, packages);}
public Result<ProjectDependencyGraph> maven_f2069_0(MavenSession session)
{    try {        Result<ProjectDependencyGraph> result = sessionDependencyGraph(session);        if (result == null) {            final List<MavenProject> projects = getProjectsForMavenReactor(session);            validateProjects(projects);            result = reactorDependencyGraph(session, projects);        }        return result;    } catch (final ProjectBuildingException | DuplicateProjectException | MavenExecutionException e) {        return Result.error(Collections.singletonList(new DefaultModelProblem(null, null, null, null, 0, 0, e)));    } catch (final CycleDetectedException e) {        String message = "The projects in the reactor contain a cyclic reference: " + e.getMessage();        ProjectCycleException error = new ProjectCycleException(message, e);        return Result.error(Collections.singletonList(new DefaultModelProblem(null, null, null, null, 0, 0, error)));    }}
private Result<ProjectDependencyGraph> maven_f2070_0(final MavenSession session) throws CycleDetectedException, DuplicateProjectException
{    Result<ProjectDependencyGraph> result = null;    if (session.getProjectDependencyGraph() != null || session.getProjects() != null) {        final ProjectDependencyGraph graph = new DefaultProjectDependencyGraph(session.getAllProjects(), session.getProjects());        result = Result.success(graph);    }    return result;}
private Result<ProjectDependencyGraph> maven_f2071_0(MavenSession session, List<MavenProject> projects) throws CycleDetectedException, DuplicateProjectException, MavenExecutionException
{    ProjectDependencyGraph projectDependencyGraph = new DefaultProjectDependencyGraph(projects);    List<MavenProject> activeProjects = projectDependencyGraph.getSortedProjects();    activeProjects = trimSelectedProjects(activeProjects, projectDependencyGraph, session.getRequest());    activeProjects = trimExcludedProjects(activeProjects, session.getRequest());    activeProjects = trimResumedProjects(activeProjects, session.getRequest());    if (activeProjects.size() != projectDependencyGraph.getSortedProjects().size()) {        projectDependencyGraph = new FilteredProjectDependencyGraph(projectDependencyGraph, activeProjects);    }    return Result.success(projectDependencyGraph);}
private List<MavenProject> maven_f2072_0(List<MavenProject> projects, ProjectDependencyGraph graph, MavenExecutionRequest request) throws MavenExecutionException
{    List<MavenProject> result = projects;    if (!request.getSelectedProjects().isEmpty()) {        File reactorDirectory = null;        if (request.getBaseDirectory() != null) {            reactorDirectory = new File(request.getBaseDirectory());        }        Collection<MavenProject> selectedProjects = new LinkedHashSet<>(projects.size());        for (String selector : request.getSelectedProjects()) {            MavenProject selectedProject = null;            for (MavenProject project : projects) {                if (isMatchingProject(project, selector, reactorDirectory)) {                    selectedProject = project;                    break;                }            }            if (selectedProject != null) {                selectedProjects.add(selectedProject);            } else {                throw new MavenExecutionException("Could not find the selected project in the reactor: " + selector, request.getPom());            }        }        boolean makeUpstream = false;        boolean makeDownstream = false;        if (MavenExecutionRequest.REACTOR_MAKE_UPSTREAM.equals(request.getMakeBehavior())) {            makeUpstream = true;        } else if (MavenExecutionRequest.REACTOR_MAKE_DOWNSTREAM.equals(request.getMakeBehavior())) {            makeDownstream = true;        } else if (MavenExecutionRequest.REACTOR_MAKE_BOTH.equals(request.getMakeBehavior())) {            makeUpstream = true;            makeDownstream = true;        } else if (StringUtils.isNotEmpty(request.getMakeBehavior())) {            throw new MavenExecutionException("Invalid reactor make behavior: " + request.getMakeBehavior(), request.getPom());        }        if (makeUpstream || makeDownstream) {            for (MavenProject selectedProject : new ArrayList<>(selectedProjects)) {                if (makeUpstream) {                    selectedProjects.addAll(graph.getUpstreamProjects(selectedProject, true));                }                if (makeDownstream) {                    selectedProjects.addAll(graph.getDownstreamProjects(selectedProject, true));                }            }        }        result = new ArrayList<>(selectedProjects.size());        for (MavenProject project : projects) {            if (selectedProjects.contains(project)) {                result.add(project);            }        }    }    return result;}
private List<MavenProject> maven_f2073_0(List<MavenProject> projects, MavenExecutionRequest request) throws MavenExecutionException
{    List<MavenProject> result = projects;    if (!request.getExcludedProjects().isEmpty()) {        File reactorDirectory = null;        if (request.getBaseDirectory() != null) {            reactorDirectory = new File(request.getBaseDirectory());        }        Collection<MavenProject> excludedProjects = new LinkedHashSet<>(projects.size());        for (String selector : request.getExcludedProjects()) {            MavenProject excludedProject = null;            for (MavenProject project : projects) {                if (isMatchingProject(project, selector, reactorDirectory)) {                    excludedProject = project;                    break;                }            }            if (excludedProject != null) {                excludedProjects.add(excludedProject);            } else {                throw new MavenExecutionException("Could not find the selected project in the reactor: " + selector, request.getPom());            }        }        result = new ArrayList<>(projects.size());        for (MavenProject project : projects) {            if (!excludedProjects.contains(project)) {                result.add(project);            }        }    }    return result;}
private List<MavenProject> maven_f2074_0(List<MavenProject> projects, MavenExecutionRequest request) throws MavenExecutionException
{    List<MavenProject> result = projects;    if (StringUtils.isNotEmpty(request.getResumeFrom())) {        File reactorDirectory = null;        if (request.getBaseDirectory() != null) {            reactorDirectory = new File(request.getBaseDirectory());        }        String selector = request.getResumeFrom();        result = new ArrayList<>(projects.size());        boolean resumed = false;        for (MavenProject project : projects) {            if (!resumed && isMatchingProject(project, selector, reactorDirectory)) {                resumed = true;            }            if (resumed) {                result.add(project);            }        }        if (!resumed) {            throw new MavenExecutionException("Could not find project to resume reactor build from: " + selector + " vs " + formatProjects(projects), request.getPom());        }    }    return result;}
private String maven_f2075_0(List<MavenProject> projects)
{    StringBuilder projectNames = new StringBuilder();    Iterator<MavenProject> iterator = projects.iterator();    while (iterator.hasNext()) {        MavenProject project = iterator.next();        projectNames.append(project.getGroupId()).append(":").append(project.getArtifactId());        if (iterator.hasNext()) {            projectNames.append(", ");        }    }    return projectNames.toString();}
private boolean maven_f2076_0(MavenProject project, String selector, File reactorDirectory)
{        if (selector.indexOf(':') >= 0) {        String id = ':' + project.getArtifactId();        if (id.equals(selector)) {            return true;        }        id = project.getGroupId() + id;        if (id.equals(selector)) {            return true;        }    } else     if (reactorDirectory != null) {        File selectedProject = new File(new File(reactorDirectory, selector).toURI().normalize());        if (selectedProject.isFile()) {            return selectedProject.equals(project.getFile());        } else if (selectedProject.isDirectory()) {            return selectedProject.equals(project.getBasedir());        }    }    return false;}
private List<MavenProject> maven_f2077_0(MavenSession session) throws ProjectBuildingException
{    MavenExecutionRequest request = session.getRequest();    request.getProjectBuildingRequest().setRepositorySession(session.getRepositorySession());    List<MavenProject> projects = new ArrayList<>();        if (request.getPom() == null) {        ModelSource modelSource = new UrlModelSource(DefaultMaven.class.getResource("project/standalone.xml"));        MavenProject project = projectBuilder.build(modelSource, request.getProjectBuildingRequest()).getProject();        project.setExecutionRoot(true);        projects.add(project);        request.setProjectPresent(false);        return projects;    }    List<File> files = Arrays.asList(request.getPom().getAbsoluteFile());    collectProjects(projects, files, request);    return projects;}
private voidf2078_1List<MavenProject> projects, List<File> files, MavenExecutionRequest request) throws ProjectBuildingException
{    ProjectBuildingRequest projectBuildingRequest = request.getProjectBuildingRequest();    List<ProjectBuildingResult> results = projectBuilder.build(files, request.isRecursive(), projectBuildingRequest);    boolean problems = false;    for (ProjectBuildingResult result : results) {        projects.add(result.getProject());        if (!result.getProblems().isEmpty() && logger.isWarnEnabled()) {                                    for (ModelProblem problem : result.getProblems()) {                String loc = ModelProblemUtils.formatLocation(problem, result.getProjectId());                            }            problems = true;        }    }    if (problems) {                                            }}
private voidf2079_1List<MavenProject> projects)
{    Map<String, MavenProject> projectsMap = new HashMap<>();    for (MavenProject p : projects) {        String projectKey = ArtifactUtils.key(p.getGroupId(), p.getArtifactId(), p.getVersion());        projectsMap.put(projectKey, p);    }    for (MavenProject project : projects) {                for (Plugin plugin : project.getBuildPlugins()) {            if (plugin.isExtensions()) {                String pluginKey = ArtifactUtils.key(plugin.getGroupId(), plugin.getArtifactId(), plugin.getVersion());                if (projectsMap.containsKey(pluginKey)) {                                    }            }        }    }}
public List<MavenProject> maven_f2080_0()
{    return this.allProjects;}
public List<MavenProject> maven_f2081_0()
{    return new ArrayList<>(sorter.getSortedProjects());}
public List<MavenProject> maven_f2082_0(MavenProject project, boolean transitive)
{    Objects.requireNonNull(project, "project cannot be null");    Set<String> projectIds = new HashSet<>();    getDownstreamProjects(ProjectSorter.getId(project), projectIds, transitive);    return getSortedProjects(projectIds);}
private void maven_f2083_0(String projectId, Set<String> projectIds, boolean transitive)
{    for (String id : sorter.getDependents(projectId)) {        if (projectIds.add(id) && transitive) {            getDownstreamProjects(id, projectIds, transitive);        }    }}
public List<MavenProject> maven_f2084_0(MavenProject project, boolean transitive)
{    Objects.requireNonNull(project, "project cannot be null");    Set<String> projectIds = new HashSet<>();    getUpstreamProjects(ProjectSorter.getId(project), projectIds, transitive);    return getSortedProjects(projectIds);}
private void maven_f2085_0(String projectId, Collection<String> projectIds, boolean transitive)
{    for (String id : sorter.getDependencies(projectId)) {        if (projectIds.add(id) && transitive) {            getUpstreamProjects(id, projectIds, transitive);        }    }}
private List<MavenProject> maven_f2086_0(Set<String> projectIds)
{    List<MavenProject> result = new ArrayList<>(projectIds.size());    for (MavenProject mavenProject : sorter.getSortedProjects()) {        if (projectIds.contains(ProjectSorter.getId(mavenProject))) {            result.add(mavenProject);        }    }    return result;}
public String maven_f2087_0()
{    return sorter.getSortedProjects().toString();}
public List<MavenProject> maven_f2088_0()
{    return this.projectDependencyGraph.getAllProjects();}
public List<MavenProject> maven_f2089_0()
{    if (sortedProjects == null) {        sortedProjects = applyFilter(projectDependencyGraph.getSortedProjects());    }    return new ArrayList<>(sortedProjects);}
public List<MavenProject> maven_f2090_0(MavenProject project, boolean transitive)
{    return applyFilter(projectDependencyGraph.getDownstreamProjects(project, transitive));}
public List<MavenProject> maven_f2091_0(MavenProject project, boolean transitive)
{    return applyFilter(projectDependencyGraph.getUpstreamProjects(project, transitive));}
private List<MavenProject> maven_f2092_0(Collection<? extends MavenProject> projects)
{    List<MavenProject> filtered = new ArrayList<>(projects.size());    for (MavenProject project : projects) {        if (whiteList.containsKey(project)) {            filtered.add(project);        }    }    return filtered;}
public String maven_f2093_0()
{    return getSortedProjects().toString();}
public DefaultRepositorySystemSessionf2094_1MavenExecutionRequest request)
{    DefaultRepositorySystemSession session = MavenRepositorySystemUtils.newSession();    session.setCache(request.getRepositoryCache());    Map<Object, Object> configProps = new LinkedHashMap<>();    configProps.put(ConfigurationProperties.USER_AGENT, getUserAgent());    configProps.put(ConfigurationProperties.INTERACTIVE, request.isInteractiveMode());    configProps.putAll(request.getSystemProperties());    configProps.putAll(request.getUserProperties());    session.setOffline(request.isOffline());    session.setChecksumPolicy(request.getGlobalChecksumPolicy());    if (request.isNoSnapshotUpdates()) {        session.setUpdatePolicy(RepositoryPolicy.UPDATE_POLICY_NEVER);    } else if (request.isUpdateSnapshots()) {        session.setUpdatePolicy(RepositoryPolicy.UPDATE_POLICY_ALWAYS);    } else {        session.setUpdatePolicy(null);    }    int errorPolicy = 0;    errorPolicy |= request.isCacheNotFound() ? ResolutionErrorPolicy.CACHE_NOT_FOUND : ResolutionErrorPolicy.CACHE_DISABLED;    errorPolicy |= request.isCacheTransferError() ? ResolutionErrorPolicy.CACHE_TRANSFER_ERROR : ResolutionErrorPolicy.CACHE_DISABLED;    session.setResolutionErrorPolicy(new SimpleResolutionErrorPolicy(errorPolicy, errorPolicy | ResolutionErrorPolicy.CACHE_NOT_FOUND));    session.setArtifactTypeRegistry(RepositoryUtils.newArtifactTypeRegistry(artifactHandlerManager));    LocalRepository localRepo = new LocalRepository(request.getLocalRepository().getBasedir());    if (request.isUseLegacyLocalRepository()) {        try {            session.setLocalRepositoryManager(simpleLocalRepoMgrFactory.newInstance(session, localRepo));                    } catch (NoLocalRepositoryManagerException e) {                        session.setLocalRepositoryManager(repoSystem.newLocalRepositoryManager(session, localRepo));        }    } else {        session.setLocalRepositoryManager(repoSystem.newLocalRepositoryManager(session, localRepo));    }    if (request.getWorkspaceReader() != null) {        session.setWorkspaceReader(request.getWorkspaceReader());    } else {        session.setWorkspaceReader(workspaceRepository);    }    DefaultSettingsDecryptionRequest decrypt = new DefaultSettingsDecryptionRequest();    decrypt.setProxies(request.getProxies());    decrypt.setServers(request.getServers());    SettingsDecryptionResult decrypted = settingsDecrypter.decrypt(decrypt);    if (logger.isDebugEnabled()) {        for (SettingsProblem problem : decrypted.getProblems()) {                    }    }    DefaultMirrorSelector mirrorSelector = new DefaultMirrorSelector();    for (Mirror mirror : request.getMirrors()) {        mirrorSelector.add(mirror.getId(), mirror.getUrl(), mirror.getLayout(), false, mirror.getMirrorOf(), mirror.getMirrorOfLayouts());    }    session.setMirrorSelector(mirrorSelector);    DefaultProxySelector proxySelector = new DefaultProxySelector();    for (Proxy proxy : decrypted.getProxies()) {        AuthenticationBuilder authBuilder = new AuthenticationBuilder();        authBuilder.addUsername(proxy.getUsername()).addPassword(proxy.getPassword());        proxySelector.add(new org.eclipse.aether.repository.Proxy(proxy.getProtocol(), proxy.getHost(), proxy.getPort(), authBuilder.build()), proxy.getNonProxyHosts());    }    session.setProxySelector(proxySelector);    DefaultAuthenticationSelector authSelector = new DefaultAuthenticationSelector();    for (Server server : decrypted.getServers()) {        AuthenticationBuilder authBuilder = new AuthenticationBuilder();        authBuilder.addUsername(server.getUsername()).addPassword(server.getPassword());        authBuilder.addPrivateKey(server.getPrivateKey(), server.getPassphrase());        authSelector.add(server.getId(), authBuilder.build());        if (server.getConfiguration() != null) {            Xpp3Dom dom = (Xpp3Dom) server.getConfiguration();            for (int i = dom.getChildCount() - 1; i >= 0; i--) {                Xpp3Dom child = dom.getChild(i);                if ("wagonProvider".equals(child.getName())) {                    dom.removeChild(i);                }            }            XmlPlexusConfiguration config = new XmlPlexusConfiguration(dom);            configProps.put("aether.connector.wagon.config." + server.getId(), config);        }        configProps.put("aether.connector.perms.fileMode." + server.getId(), server.getFilePermissions());        configProps.put("aether.connector.perms.dirMode." + server.getId(), server.getDirectoryPermissions());    }    session.setAuthenticationSelector(authSelector);    session.setTransferListener(request.getTransferListener());    session.setRepositoryListener(eventSpyDispatcher.chainListener(new LoggingRepositoryListener(logger)));    session.setUserProperties(request.getUserProperties());    session.setSystemProperties(request.getSystemProperties());    session.setConfigProperties(configProps);    mavenRepositorySystem.injectMirror(request.getRemoteRepositories(), request.getMirrors());    mavenRepositorySystem.injectProxy(session, request.getRemoteRepositories());    mavenRepositorySystem.injectAuthentication(session, request.getRemoteRepositories());    mavenRepositorySystem.injectMirror(request.getPluginArtifactRepositories(), request.getMirrors());    mavenRepositorySystem.injectProxy(session, request.getPluginArtifactRepositories());    mavenRepositorySystem.injectAuthentication(session, request.getPluginArtifactRepositories());    return session;}
private String maven_f2095_0()
{    return "Apache-Maven/" + getMavenVersion() + " (Java " + System.getProperty("java.version") + "; " + System.getProperty("os.name") + " " + System.getProperty("os.version") + ")";}
private Stringf2096_1)
{    Properties props = new Properties();    try (InputStream is = getClass().getResourceAsStream("/META-INF/maven/org.apache.maven/maven-core/pom.properties")) {        if (is != null) {            props.load(is);        }    } catch (IOException e) {            }    return props.getProperty("version", "unknown-version");}
public voidf2097_1RepositoryEvent event)
{    }
public voidf2098_1RepositoryEvent event)
{    }
public voidf2099_1RepositoryEvent event)
{    Exception e = event.getException();    if (e != null) {        if (e instanceof MetadataNotFoundException) {                    } else if (logger.isDebugEnabled()) {                    } else {                    }    }}
public voidf2100_1RepositoryEvent event)
{    Exception exception = event.getException();    StringBuilder buffer = new StringBuilder(256);    buffer.append("The metadata ");    if (event.getMetadata().getFile() != null) {        buffer.append(event.getMetadata().getFile());    } else {        buffer.append(event.getMetadata());    }    if (exception instanceof FileNotFoundException) {        buffer.append(" is inaccessible");    } else {        buffer.append(" is invalid");    }    if (exception != null) {        buffer.append(": ");        buffer.append(exception.getMessage());    }    if (logger.isDebugEnabled()) {            } else {            }}
public voidf2101_1RepositoryEvent event)
{    StringBuilder buffer = new StringBuilder(256);    buffer.append("The POM for ");    buffer.append(event.getArtifact());    buffer.append(" is invalid, transitive dependencies (if any) will not be available");    if (logger.isDebugEnabled()) {            } else {            }}
public voidf2102_1RepositoryEvent event)
{    }
public void maven_f2103_0(MavenSession session)
{    lifecycleStarter.execute(session);}
public Set<Plugin> maven_f2104_0(String packaging)
{    return lifeCyclePluginAnalyzer.getPluginsBoundByDefaultToAllLifecycles(packaging);}
public Map<String, Lifecycle> maven_f2105_0()
{    return defaultLifeCycles.getPhaseToLifecycleMap();}
 MojoDescriptor maven_f2106_0(String task, MavenSession session, MavenProject project, String invokedVia, boolean canUsePrefix, boolean isOptionalMojo) throws PluginNotFoundException, PluginResolutionException, PluginDescriptorParsingException, MojoNotFoundException, NoPluginFoundForPrefixException, InvalidPluginDescriptorException, PluginVersionResolutionException
{    return mojoDescriptorCreator.getMojoDescriptor(task, session, project);}
public MavenExecutionPlan maven_f2107_0(MavenSession session, boolean setup, String... tasks) throws PluginNotFoundException, PluginResolutionException, PluginDescriptorParsingException, MojoNotFoundException, NoPluginFoundForPrefixException, InvalidPluginDescriptorException, PluginManagerException, LifecyclePhaseNotFoundException, LifecycleNotFoundException, PluginVersionResolutionException
{    List<TaskSegment> taskSegments = lifecycleTaskSegmentCalculator.calculateTaskSegments(session, Arrays.asList(tasks));    TaskSegment mergedSegment = new TaskSegment(false);    for (TaskSegment taskSegment : taskSegments) {        mergedSegment.getTasks().addAll(taskSegment.getTasks());    }    return lifecycleExecutionPlanCalculator.calculateExecutionPlan(session, session.getCurrentProject(), mergedSegment.getTasks(), setup);}
public MavenExecutionPlan maven_f2108_0(MavenSession session, String... tasks) throws PluginNotFoundException, PluginResolutionException, PluginDescriptorParsingException, MojoNotFoundException, NoPluginFoundForPrefixException, InvalidPluginDescriptorException, PluginManagerException, LifecyclePhaseNotFoundException, LifecycleNotFoundException, PluginVersionResolutionException
{    return calculateExecutionPlan(session, true, tasks);}
public void maven_f2109_0(MojoExecution mojoExecution, MavenSession session) throws MojoNotFoundException, PluginNotFoundException, PluginResolutionException, PluginDescriptorParsingException, NoPluginFoundForPrefixException, InvalidPluginDescriptorException, LifecyclePhaseNotFoundException, LifecycleNotFoundException, PluginVersionResolutionException
{    lifecycleExecutionPlanCalculator.calculateForkedExecutions(mojoExecution, session);}
public List<MavenProject> maven_f2110_0(MojoExecution mojoExecution, MavenSession session) throws LifecycleExecutionException
{    return mojoExecutor.executeForkedExecutions(mojoExecution, session, new ProjectIndex(session.getProjects()));}
public Lifecycle maven_f2111_0(String key)
{    return getPhaseToLifecycleMap().get(key);}
public Map<String, Lifecycle>f2112_1)
{            HashMap<String, Lifecycle> phaseToLifecycleMap = new HashMap<>();    for (Lifecycle lifecycle : getLifeCycles()) {        if (logger.isDebugEnabled()) {                    }        for (String phase : lifecycle.getPhases()) {                        if (!phaseToLifecycleMap.containsKey(phase)) {                phaseToLifecycleMap.put(phase, lifecycle);            } else {                Lifecycle original = phaseToLifecycleMap.get(phase);                            }        }    }    return phaseToLifecycleMap;}
public List<Lifecycle> maven_f2113_0()
{        Map<String, Lifecycle> lifecycles = new LinkedHashMap<>(this.lifecycles);    LinkedHashSet<String> lifecycleNames = new LinkedHashSet<>(Arrays.asList(STANDARD_LIFECYCLES));    lifecycleNames.addAll(lifecycles.keySet());    ArrayList<Lifecycle> result = new ArrayList<>();    for (String name : lifecycleNames) {        Lifecycle lifecycle = lifecycles.get(name);        if (lifecycle.getId() == null) {            throw new NullPointerException("A lifecycle must have an id.");        }        result.add(lifecycle);    }    return result;}
public String maven_f2114_0()
{    Set<String> phases = new LinkedHashSet<>();    for (Lifecycle lifecycle : getLifeCycles()) {        phases.addAll(lifecycle.getPhases());    }    return StringUtils.join(phases.iterator(), ", ");}
public voidf2116_1final ReactorContext buildContext, final MavenSession rootSession, final MavenSession currentSession, final MavenProject mavenProject, Throwable t, final long buildStartTime)
{        long buildEndTime = System.currentTimeMillis();    buildContext.getResult().addException(t);    buildContext.getResult().addBuildSummary(new BuildFailure(mavenProject, buildEndTime - buildStartTime, t));        if (t instanceof Exception && !(t instanceof RuntimeException)) {        eventCatapult.fire(ExecutionEvent.Type.ProjectFailed, currentSession, null, (Exception) t);    }        if (t instanceof RuntimeException || !(t instanceof Exception)) {                        buildContext.getReactorBuildStatus().halt();    } else if (MavenExecutionRequest.REACTOR_FAIL_NEVER.equals(rootSession.getReactorFailureBehavior())) {        } else if (MavenExecutionRequest.REACTOR_FAIL_AT_END.equals(rootSession.getReactorFailureBehavior())) {                buildContext.getReactorBuildStatus().blackList(mavenProject);    } else if (MavenExecutionRequest.REACTOR_FAIL_FAST.equals(rootSession.getReactorFailureBehavior())) {        buildContext.getReactorBuildStatus().halt();    } else {                buildContext.getReactorBuildStatus().halt();    }}
public static void maven_f2117_0(MavenProject currentProject)
{    ClassRealm projectRealm = currentProject.getClassRealm();    if (projectRealm != null) {        Thread.currentThread().setContextClassLoader(projectRealm);    }}
public static String maven_f2118_0(MavenProject project)
{    return project.getGroupId() + ':' + project.getArtifactId() + ':' + project.getVersion();}
public int maven_f2119_0()
{    return projectBuilds.size();}
public List<MavenProject> maven_f2120_0()
{    Set<MavenProject> result = new LinkedHashSet<>();    for (ProjectSegment projectBuild : projectBuilds) {        if (projectDependencyGraph.getUpstreamProjects(projectBuild.getProject(), false).isEmpty()) {            result.add(projectBuild.getProject());        }    }    return new ArrayList<>(result);}
public List<MavenProject> maven_f2121_0(MavenProject mavenProject)
{    finishedProjects.add(mavenProject);    return getSchedulableNewProcesses(mavenProject);}
private List<MavenProject> maven_f2122_0(MavenProject finishedProject)
{    List<MavenProject> result = new ArrayList<>();        for (MavenProject dependentProject : projectDependencyGraph.getDownstreamProjects(finishedProject, false)) {        final List<MavenProject> upstreamProjects = projectDependencyGraph.getUpstreamProjects(dependentProject, false);        if (finishedProjects.containsAll(upstreamProjects)) {            result.add(dependentProject);        }    }    return result;}
public Set<MavenProject> maven_f2123_0()
{    Set<MavenProject> unfinished = new HashSet<>(projectBuilds.getProjects());    unfinished.removeAll(finishedProjects);    return unfinished;}
protected Set<MavenProject> maven_f2124_0()
{    return finishedProjects;}
protected ProjectBuildList maven_f2125_0()
{    return projectBuilds;}
protected List<MavenProject> maven_f2126_0(MavenProject p)
{    return projectDependencyGraph.getUpstreamProjects(p, false);}
public List<MavenProject> maven_f2127_0(MavenProject p)
{    List<MavenProject> activeDependencies = projectDependencyGraph.getUpstreamProjects(p, false);    activeDependencies.removeAll(finishedProjects);    return activeDependencies;}
public void maven_f2128_0(MavenSession session, ReactorContext reactorContext, ProjectBuildList projectBuilds, List<TaskSegment> taskSegments, ReactorBuildStatus reactorBuildStatus) throws ExecutionException, InterruptedException
{    int nThreads = Math.min(session.getRequest().getDegreeOfConcurrency(), session.getProjects().size());    boolean parallel = nThreads >= 2;        session.setParallel(parallel);    for (ProjectSegment segment : projectBuilds) {        segment.getSession().setParallel(parallel);    }    ExecutorService executor = Executors.newFixedThreadPool(nThreads, new BuildThreadFactory());    CompletionService<ProjectSegment> service = new ExecutorCompletionService<>(executor);            ThreadOutputMuxer muxer = null;    for (TaskSegment taskSegment : taskSegments) {        ProjectBuildList segmentProjectBuilds = projectBuilds.getByTaskSegment(taskSegment);        Map<MavenProject, ProjectSegment> projectBuildMap = projectBuilds.selectSegment(taskSegment);        try {            ConcurrencyDependencyGraph analyzer = new ConcurrencyDependencyGraph(segmentProjectBuilds, session.getProjectDependencyGraph());            multiThreadedProjectTaskSegmentBuild(analyzer, reactorContext, session, service, taskSegment, projectBuildMap, muxer);            if (reactorContext.getReactorBuildStatus().isHalted()) {                break;            }        } catch (Exception e) {            session.getResult().addException(e);            break;        }    }    executor.shutdown();    executor.awaitTermination(Long.MAX_VALUE, TimeUnit.MILLISECONDS);}
private voidf2129_1ConcurrencyDependencyGraph analyzer, ReactorContext reactorContext, MavenSession rootSession, CompletionService<ProjectSegment> service, TaskSegment taskSegment, Map<MavenProject, ProjectSegment> projectBuildList, ThreadOutputMuxer muxer)
{        for (MavenProject mavenProject : analyzer.getRootSchedulableBuilds()) {        ProjectSegment projectSegment = projectBuildList.get(mavenProject);                Callable<ProjectSegment> cb = createBuildCallable(rootSession, projectSegment, reactorContext, taskSegment, muxer);        service.submit(cb);    }        for (int i = 0; i < analyzer.getNumberOfBuilds(); i++) {        try {            ProjectSegment projectBuild = service.take().get();            if (reactorContext.getReactorBuildStatus().isHalted()) {                break;            }                        if (analyzer.getNumberOfBuilds() > 1) {                final List<MavenProject> newItemsThatCanBeBuilt = analyzer.markAsFinished(projectBuild.getProject());                for (MavenProject mavenProject : newItemsThatCanBeBuilt) {                    ProjectSegment scheduledDependent = projectBuildList.get(mavenProject);                                        Callable<ProjectSegment> cb = createBuildCallable(rootSession, scheduledDependent, reactorContext, taskSegment, muxer);                    service.submit(cb);                }            }        } catch (InterruptedException e) {            rootSession.getResult().addException(e);            break;        } catch (ExecutionException e) {                        rootSession.getResult().addException(e);            break;        }    }}
private Callable<ProjectSegment> maven_f2130_0(final MavenSession rootSession, final ProjectSegment projectBuild, final ReactorContext reactorContext, final TaskSegment taskSegment, final ThreadOutputMuxer muxer)
{    return new Callable<ProjectSegment>() {        public ProjectSegment call() {                        lifecycleModuleBuilder.buildProject(projectBuild.getSession(), rootSession, reactorContext, projectBuild.getProject(), taskSegment);            return projectBuild;        }    };}
public ProjectSegment maven_f2131_0()
{        lifecycleModuleBuilder.buildProject(projectBuild.getSession(), rootSession, reactorContext, projectBuild.getProject(), taskSegment);    return projectBuild;}
public void maven_f2132_0()
{    running = true;    for (ProjectSegment projectBuild : projectBuildList) {        final PrintStream projectStream = printStreams.get(projectBuild);        ByteArrayOutputStream projectOs = streams.get(projectBuild);        do {            synchronized (projectStream) {                try {                    projectStream.wait(100);                } catch (InterruptedException e) {                    throw new RuntimeException(e);                }                try {                    projectOs.writeTo(originalSystemOUtStream);                } catch (IOException e) {                    throw new RuntimeException(e);                }                projectOs.reset();            }        } while (!completedBuilds.contains(projectBuild));    }    running = false;}
public void maven_f2133_0(boolean expect)
{    while (!running == expect) {        try {            Thread.sleep(10);        } catch (InterruptedException e) {            throw new RuntimeException(e);        }    }}
public void maven_f2134_0()
{    printer.waitUntilRunning(false);    System.setOut(this.originalSystemOUtStream);}
private void maven_f2135_0()
{    currentBuild = projects.hasNext() ? projects.next() : null;}
private boolean maven_f2136_0(ProjectSegment projectBuild)
{    return projectBuild.equals(currentBuild);}
private PrintStream maven_f2137_0()
{    ProjectSegment threadProject = projectBuildThreadLocal.get();    if (threadProject == null) {        return defaultPrintStream;    }    if (ownsRealOutputStream(threadProject)) {        return originalSystemOUtStream;    }    return printStreams.get(threadProject);}
public void maven_f2138_0(ProjectSegment projectBuild)
{    projectBuildThreadLocal.set(projectBuild);}
public void maven_f2139_0(ProjectSegment projectBuild)
{    completedBuilds.add(projectBuild);    PrintStream stream = printStreams.get(projectBuild);    synchronized (stream) {        stream.notifyAll();    }    disconnectThreadFromProject();}
private void maven_f2140_0()
{    projectBuildThreadLocal.remove();}
private PrintStream maven_f2141_0()
{    return getThreadBoundPrintStream();}
public void maven_f2142_0()
{    final PrintStream currentStream = getOutputStreamForCurrentThread();    synchronized (currentStream) {        currentStream.println();        currentStream.notifyAll();    }}
public void maven_f2143_0(char c)
{    final PrintStream currentStream = getOutputStreamForCurrentThread();    synchronized (currentStream) {        currentStream.print(c);        currentStream.notifyAll();    }}
public void maven_f2144_0(char x)
{    final PrintStream currentStream = getOutputStreamForCurrentThread();    synchronized (currentStream) {        currentStream.println(x);        currentStream.notifyAll();    }}
public void maven_f2145_0(double d)
{    final PrintStream currentStream = getOutputStreamForCurrentThread();    synchronized (currentStream) {        currentStream.print(d);        currentStream.notifyAll();    }}
public void maven_f2146_0(double x)
{    final PrintStream currentStream = getOutputStreamForCurrentThread();    synchronized (currentStream) {        currentStream.println(x);        currentStream.notifyAll();    }}
public void maven_f2147_0(float f)
{    final PrintStream currentStream = getOutputStreamForCurrentThread();    synchronized (currentStream) {        currentStream.print(f);        currentStream.notifyAll();    }}
public void maven_f2148_0(float x)
{    final PrintStream currentStream = getOutputStreamForCurrentThread();    synchronized (currentStream) {        currentStream.println(x);        currentStream.notifyAll();    }}
public void maven_f2149_0(int i)
{    final PrintStream currentStream = getOutputStreamForCurrentThread();    synchronized (currentStream) {        currentStream.print(i);        currentStream.notifyAll();    }}
public void maven_f2150_0(int x)
{    final PrintStream currentStream = getOutputStreamForCurrentThread();    synchronized (currentStream) {        currentStream.println(x);        currentStream.notifyAll();    }}
public void maven_f2151_0(long l)
{    final PrintStream currentStream = getOutputStreamForCurrentThread();    synchronized (currentStream) {        currentStream.print(l);        currentStream.notifyAll();    }}
public void maven_f2152_0(long x)
{    final PrintStream currentStream = getOutputStreamForCurrentThread();    synchronized (currentStream) {        currentStream.print(x);        currentStream.notifyAll();    }}
public void maven_f2153_0(boolean b)
{    final PrintStream currentStream = getOutputStreamForCurrentThread();    synchronized (currentStream) {        currentStream.print(b);        currentStream.notifyAll();    }}
public void maven_f2154_0(boolean x)
{    final PrintStream currentStream = getOutputStreamForCurrentThread();    synchronized (currentStream) {        currentStream.print(x);        currentStream.notifyAll();    }}
public void maven_f2155_0(char[] s)
{    final PrintStream currentStream = getOutputStreamForCurrentThread();    synchronized (currentStream) {        currentStream.print(s);        currentStream.notifyAll();    }}
public void maven_f2156_0(char[] x)
{    final PrintStream currentStream = getOutputStreamForCurrentThread();    synchronized (currentStream) {        currentStream.print(x);        currentStream.notifyAll();    }}
public void maven_f2157_0(Object obj)
{    final PrintStream currentStream = getOutputStreamForCurrentThread();    synchronized (currentStream) {        currentStream.print(obj);        currentStream.notifyAll();    }}
public void maven_f2158_0(Object x)
{    final PrintStream currentStream = getOutputStreamForCurrentThread();    synchronized (currentStream) {        currentStream.println(x);        currentStream.notifyAll();    }}
public void maven_f2159_0(String s)
{    final PrintStream currentStream = getOutputStreamForCurrentThread();    synchronized (currentStream) {        currentStream.print(s);        currentStream.notifyAll();    }}
public void maven_f2160_0(String x)
{    final PrintStream currentStream = getOutputStreamForCurrentThread();    synchronized (currentStream) {        currentStream.println(x);        currentStream.notifyAll();    }}
public void maven_f2161_0(byte[] b, int off, int len)
{    final PrintStream currentStream = getOutputStreamForCurrentThread();    synchronized (currentStream) {        currentStream.write(b, off, len);        currentStream.notifyAll();    }}
public void maven_f2162_0()
{    getOutputStreamForCurrentThread().close();}
public void maven_f2163_0()
{    getOutputStreamForCurrentThread().flush();}
public void maven_f2164_0(int b)
{    final PrintStream currentStream = getOutputStreamForCurrentThread();    synchronized (currentStream) {        currentStream.write(b);        currentStream.notifyAll();    }}
public void maven_f2165_0(byte[] b) throws IOException
{    final PrintStream currentStream = getOutputStreamForCurrentThread();    synchronized (currentStream) {        currentStream.write(b);        currentStream.notifyAll();    }}
public void maven_f2166_0(MavenSession session, ReactorContext reactorContext, ProjectBuildList projectBuilds, List<TaskSegment> taskSegments, ReactorBuildStatus reactorBuildStatus)
{    for (TaskSegment taskSegment : taskSegments) {        for (ProjectSegment projectBuild : projectBuilds.getByTaskSegment(taskSegment)) {            try {                lifecycleModuleBuilder.buildProject(session, reactorContext, projectBuild.getProject(), taskSegment);                if (reactorBuildStatus.isHalted()) {                    break;                }            } catch (Exception e) {                                break;            }        }    }}
public ProjectBuildList maven_f2167_0(MavenSession session, List<TaskSegment> taskSegments)
{    List<ProjectSegment> projectBuilds = new ArrayList<>();    MavenProject rootProject = session.getTopLevelProject();    for (TaskSegment taskSegment : taskSegments) {        List<MavenProject> projects;        if (taskSegment.isAggregating()) {            projects = Collections.singletonList(rootProject);        } else {            projects = session.getProjects();        }        for (MavenProject project : projects) {                        BuilderCommon.attachToThread(project);            MavenSession copiedSession = session.clone();            copiedSession.setCurrentProject(project);            projectBuilds.add(new ProjectSegment(project, taskSegment, copiedSession));        }    }    return new ProjectBuildList(projectBuilds);}
public Thread maven_f2168_0(Runnable r)
{    return new Thread(r, String.format("%s %d", PREFIX, id.getAndIncrement()));}
public void maven_f2169_0(ProjectExecutionEvent event) throws LifecycleExecutionException
{    for (ProjectExecutionListener listener : listeners) {        listener.beforeProjectExecution(event);    }}
public void maven_f2170_0(ProjectExecutionEvent event) throws LifecycleExecutionException
{    for (ProjectExecutionListener listener : listeners) {        listener.beforeProjectLifecycleExecution(event);    }}
public void maven_f2171_0(ProjectExecutionEvent event) throws LifecycleExecutionException
{    for (ProjectExecutionListener listener : listeners) {        listener.afterProjectExecutionSuccess(event);    }}
public void maven_f2172_0(ProjectExecutionEvent event)
{    for (ProjectExecutionListener listener : listeners) {        listener.afterProjectExecutionFailure(event);    }}
public Type maven_f2173_0()
{    return type;}
public MavenSession maven_f2174_0()
{    return session;}
public MavenProject maven_f2175_0()
{    return session.getCurrentProject();}
public MojoExecution maven_f2176_0()
{    return mojoExecution;}
public Exception maven_f2177_0()
{    return exception;}
public void maven_f2178_0(ExecutionEvent.Type eventType, MavenSession session, MojoExecution mojoExecution)
{    fire(eventType, session, mojoExecution, null);}
public void maven_f2179_0(ExecutionEvent.Type eventType, MavenSession session, MojoExecution mojoExecution, Exception exception)
{    ExecutionListener listener = session.getRequest().getExecutionListener();    if (listener != null) {        ExecutionEvent event = new DefaultExecutionEvent(eventType, session, mojoExecution, exception);        switch(eventType) {            case ProjectDiscoveryStarted:                listener.projectDiscoveryStarted(event);                break;            case SessionStarted:                listener.sessionStarted(event);                break;            case SessionEnded:                listener.sessionEnded(event);                break;            case ProjectSkipped:                listener.projectSkipped(event);                break;            case ProjectStarted:                listener.projectStarted(event);                break;            case ProjectSucceeded:                listener.projectSucceeded(event);                break;            case ProjectFailed:                listener.projectFailed(event);                break;            case MojoSkipped:                listener.mojoSkipped(event);                break;            case MojoStarted:                listener.mojoStarted(event);                break;            case MojoSucceeded:                listener.mojoSucceeded(event);                break;            case MojoFailed:                listener.mojoFailed(event);                break;            case ForkStarted:                listener.forkStarted(event);                break;            case ForkSucceeded:                listener.forkSucceeded(event);                break;            case ForkFailed:                listener.forkFailed(event);                break;            case ForkedProjectStarted:                listener.forkedProjectStarted(event);                break;            case ForkedProjectSucceeded:                listener.forkedProjectSucceeded(event);                break;            case ForkedProjectFailed:                listener.forkedProjectFailed(event);                break;            default:                throw new IllegalStateException("Unknown execution event type " + eventType);        }    }}
public MavenExecutionPlan maven_f2180_0(MavenSession session, MavenProject project, List<Object> tasks, boolean setup) throws PluginNotFoundException, PluginResolutionException, LifecyclePhaseNotFoundException, PluginDescriptorParsingException, MojoNotFoundException, InvalidPluginDescriptorException, NoPluginFoundForPrefixException, LifecycleNotFoundException, PluginVersionResolutionException
{    lifecyclePluginResolver.resolveMissingPluginVersions(project, session);    final List<MojoExecution> executions = calculateMojoExecutions(session, project, tasks);    if (setup) {        setupMojoExecutions(session, project, executions);    }    final List<ExecutionPlanItem> planItem = ExecutionPlanItem.createExecutionPlanItems(project, executions);    return new MavenExecutionPlan(planItem, defaultLifeCycles);}
public MavenExecutionPlan maven_f2181_0(MavenSession session, MavenProject project, List<Object> tasks) throws PluginNotFoundException, PluginResolutionException, LifecyclePhaseNotFoundException, PluginDescriptorParsingException, MojoNotFoundException, InvalidPluginDescriptorException, NoPluginFoundForPrefixException, LifecycleNotFoundException, PluginVersionResolutionException
{    return calculateExecutionPlan(session, project, tasks, true);}
private void maven_f2182_0(MavenSession session, MavenProject project, List<MojoExecution> mojoExecutions) throws PluginNotFoundException, PluginResolutionException, PluginDescriptorParsingException, MojoNotFoundException, InvalidPluginDescriptorException, NoPluginFoundForPrefixException, LifecyclePhaseNotFoundException, LifecycleNotFoundException, PluginVersionResolutionException
{    for (MojoExecution mojoExecution : mojoExecutions) {        setupMojoExecution(session, project, mojoExecution);    }}
public void maven_f2183_0(MavenSession session, MavenProject project, MojoExecution mojoExecution) throws PluginNotFoundException, PluginResolutionException, PluginDescriptorParsingException, MojoNotFoundException, InvalidPluginDescriptorException, NoPluginFoundForPrefixException, LifecyclePhaseNotFoundException, LifecycleNotFoundException, PluginVersionResolutionException
{    MojoDescriptor mojoDescriptor = mojoExecution.getMojoDescriptor();    if (mojoDescriptor == null) {        mojoDescriptor = pluginManager.getMojoDescriptor(mojoExecution.getPlugin(), mojoExecution.getGoal(), project.getRemotePluginRepositories(), session.getRepositorySession());        mojoExecution.setMojoDescriptor(mojoDescriptor);    }    mojoExecutionConfigurator(mojoExecution).configure(project, mojoExecution, MojoExecution.Source.CLI.equals(mojoExecution.getSource()));    finalizeMojoConfiguration(mojoExecution);    calculateForkedExecutions(mojoExecution, session, project, new HashSet<MojoDescriptor>());}
public List<MojoExecution> maven_f2184_0(MavenSession session, MavenProject project, List<Object> tasks) throws PluginNotFoundException, PluginResolutionException, PluginDescriptorParsingException, MojoNotFoundException, NoPluginFoundForPrefixException, InvalidPluginDescriptorException, PluginVersionResolutionException, LifecyclePhaseNotFoundException
{    final List<MojoExecution> mojoExecutions = new ArrayList<>();    for (Object task : tasks) {        if (task instanceof GoalTask) {            String pluginGoal = ((GoalTask) task).pluginGoal;            String executionId = "default-cli";            int executionIdx = pluginGoal.indexOf('@');            if (executionIdx > 0) {                executionId = pluginGoal.substring(executionIdx + 1);            }            MojoDescriptor mojoDescriptor = mojoDescriptorCreator.getMojoDescriptor(pluginGoal, session, project);            MojoExecution mojoExecution = new MojoExecution(mojoDescriptor, executionId, MojoExecution.Source.CLI);            mojoExecutions.add(mojoExecution);        } else if (task instanceof LifecycleTask) {            String lifecyclePhase = ((LifecycleTask) task).getLifecyclePhase();            Map<String, List<MojoExecution>> phaseToMojoMapping = calculateLifecycleMappings(session, project, lifecyclePhase);            for (List<MojoExecution> mojoExecutionsFromLifecycle : phaseToMojoMapping.values()) {                mojoExecutions.addAll(mojoExecutionsFromLifecycle);            }        } else {            throw new IllegalStateException("unexpected task " + task);        }    }    return mojoExecutions;}
private Map<String, List<MojoExecution>> maven_f2185_0(MavenSession session, MavenProject project, String lifecyclePhase) throws LifecyclePhaseNotFoundException, PluginNotFoundException, PluginResolutionException, PluginDescriptorParsingException, MojoNotFoundException, InvalidPluginDescriptorException
{    /*         * Determine the lifecycle that corresponds to the given phase.         */    Lifecycle lifecycle = defaultLifeCycles.get(lifecyclePhase);    if (lifecycle == null) {        throw new LifecyclePhaseNotFoundException("Unknown lifecycle phase \"" + lifecyclePhase + "\". You must specify a valid lifecycle phase" + " or a goal in the format <plugin-prefix>:<goal> or" + " <plugin-group-id>:<plugin-artifact-id>[:<plugin-version>]:<goal>. Available lifecycle phases are: " + defaultLifeCycles.getLifecyclePhaseList() + ".", lifecyclePhase);    }    LifecycleMappingDelegate delegate;    if (Arrays.binarySearch(DefaultLifecycles.STANDARD_LIFECYCLES, lifecycle.getId()) >= 0) {        delegate = standardDelegate;    } else {        delegate = delegates.get(lifecycle.getId());        if (delegate == null) {            delegate = standardDelegate;        }    }    return delegate.calculateLifecycleMappings(session, project, lifecycle, lifecyclePhase);}
private void maven_f2186_0(MojoExecution mojoExecution)
{    MojoDescriptor mojoDescriptor = mojoExecution.getMojoDescriptor();    Xpp3Dom executionConfiguration = mojoExecution.getConfiguration();    if (executionConfiguration == null) {        executionConfiguration = new Xpp3Dom("configuration");    }    Xpp3Dom defaultConfiguration = getMojoConfiguration(mojoDescriptor);    Xpp3Dom finalConfiguration = new Xpp3Dom("configuration");    if (mojoDescriptor.getParameters() != null) {        for (Parameter parameter : mojoDescriptor.getParameters()) {            Xpp3Dom parameterConfiguration = executionConfiguration.getChild(parameter.getName());            if (parameterConfiguration == null) {                parameterConfiguration = executionConfiguration.getChild(parameter.getAlias());            }            Xpp3Dom parameterDefaults = defaultConfiguration.getChild(parameter.getName());            parameterConfiguration = Xpp3Dom.mergeXpp3Dom(parameterConfiguration, parameterDefaults, Boolean.TRUE);            if (parameterConfiguration != null) {                parameterConfiguration = new Xpp3Dom(parameterConfiguration, parameter.getName());                if (StringUtils.isEmpty(parameterConfiguration.getAttribute("implementation")) && StringUtils.isNotEmpty(parameter.getImplementation())) {                    parameterConfiguration.setAttribute("implementation", parameter.getImplementation());                }                finalConfiguration.addChild(parameterConfiguration);            }        }    }    mojoExecution.setConfiguration(finalConfiguration);}
private Xpp3Dom maven_f2187_0(MojoDescriptor mojoDescriptor)
{    return MojoDescriptorCreator.convert(mojoDescriptor);}
public void maven_f2188_0(MojoExecution mojoExecution, MavenSession session) throws MojoNotFoundException, PluginNotFoundException, PluginResolutionException, PluginDescriptorParsingException, NoPluginFoundForPrefixException, InvalidPluginDescriptorException, LifecyclePhaseNotFoundException, LifecycleNotFoundException, PluginVersionResolutionException
{    calculateForkedExecutions(mojoExecution, session, session.getCurrentProject(), new HashSet<MojoDescriptor>());}
private void maven_f2189_0(MojoExecution mojoExecution, MavenSession session, MavenProject project, Collection<MojoDescriptor> alreadyForkedExecutions) throws MojoNotFoundException, PluginNotFoundException, PluginResolutionException, PluginDescriptorParsingException, NoPluginFoundForPrefixException, InvalidPluginDescriptorException, LifecyclePhaseNotFoundException, LifecycleNotFoundException, PluginVersionResolutionException
{    MojoDescriptor mojoDescriptor = mojoExecution.getMojoDescriptor();    if (!mojoDescriptor.isForking()) {        return;    }    if (!alreadyForkedExecutions.add(mojoDescriptor)) {        return;    }    List<MavenProject> forkedProjects = LifecycleDependencyResolver.getProjects(project, session, mojoDescriptor.isAggregator());    for (MavenProject forkedProject : forkedProjects) {        if (forkedProject != project) {            lifecyclePluginResolver.resolveMissingPluginVersions(forkedProject, session);        }        List<MojoExecution> forkedExecutions;        if (StringUtils.isNotEmpty(mojoDescriptor.getExecutePhase())) {            forkedExecutions = calculateForkedLifecycle(mojoExecution, session, forkedProject, alreadyForkedExecutions);        } else {            forkedExecutions = calculateForkedGoal(mojoExecution, session, forkedProject, alreadyForkedExecutions);        }        mojoExecution.setForkedExecutions(BuilderCommon.getKey(forkedProject), forkedExecutions);    }    alreadyForkedExecutions.remove(mojoDescriptor);}
private List<MojoExecution> maven_f2190_0(MojoExecution mojoExecution, MavenSession session, MavenProject project, Collection<MojoDescriptor> alreadyForkedExecutions) throws MojoNotFoundException, PluginNotFoundException, PluginResolutionException, PluginDescriptorParsingException, NoPluginFoundForPrefixException, InvalidPluginDescriptorException, LifecyclePhaseNotFoundException, LifecycleNotFoundException, PluginVersionResolutionException
{    MojoDescriptor mojoDescriptor = mojoExecution.getMojoDescriptor();    String forkedPhase = mojoDescriptor.getExecutePhase();    Map<String, List<MojoExecution>> lifecycleMappings = calculateLifecycleMappings(session, project, forkedPhase);    for (List<MojoExecution> forkedExecutions : lifecycleMappings.values()) {        for (MojoExecution forkedExecution : forkedExecutions) {            if (forkedExecution.getMojoDescriptor() == null) {                MojoDescriptor forkedMojoDescriptor = pluginManager.getMojoDescriptor(forkedExecution.getPlugin(), forkedExecution.getGoal(), project.getRemotePluginRepositories(), session.getRepositorySession());                forkedExecution.setMojoDescriptor(forkedMojoDescriptor);            }            mojoExecutionConfigurator(forkedExecution).configure(project, forkedExecution, false);        }    }    injectLifecycleOverlay(lifecycleMappings, mojoExecution, session, project);    List<MojoExecution> mojoExecutions = new ArrayList<>();    for (List<MojoExecution> forkedExecutions : lifecycleMappings.values()) {        for (MojoExecution forkedExecution : forkedExecutions) {            if (!alreadyForkedExecutions.contains(forkedExecution.getMojoDescriptor())) {                finalizeMojoConfiguration(forkedExecution);                calculateForkedExecutions(forkedExecution, session, project, alreadyForkedExecutions);                mojoExecutions.add(forkedExecution);            }        }    }    return mojoExecutions;}
private void maven_f2191_0(Map<String, List<MojoExecution>> lifecycleMappings, MojoExecution mojoExecution, MavenSession session, MavenProject project) throws PluginDescriptorParsingException, LifecycleNotFoundException, MojoNotFoundException, PluginNotFoundException, PluginResolutionException, NoPluginFoundForPrefixException, InvalidPluginDescriptorException, PluginVersionResolutionException
{    MojoDescriptor mojoDescriptor = mojoExecution.getMojoDescriptor();    PluginDescriptor pluginDescriptor = mojoDescriptor.getPluginDescriptor();    String forkedLifecycle = mojoDescriptor.getExecuteLifecycle();    if (StringUtils.isEmpty(forkedLifecycle)) {        return;    }    org.apache.maven.plugin.lifecycle.Lifecycle lifecycleOverlay;    try {        lifecycleOverlay = pluginDescriptor.getLifecycleMapping(forkedLifecycle);    } catch (IOException | XmlPullParserException e) {        throw new PluginDescriptorParsingException(pluginDescriptor.getPlugin(), pluginDescriptor.getSource(), e);    }    if (lifecycleOverlay == null) {        throw new LifecycleNotFoundException(forkedLifecycle);    }    for (Phase phase : lifecycleOverlay.getPhases()) {        List<MojoExecution> forkedExecutions = lifecycleMappings.get(phase.getId());        if (forkedExecutions != null) {            for (Execution execution : phase.getExecutions()) {                for (String goal : execution.getGoals()) {                    MojoDescriptor forkedMojoDescriptor;                    if (goal.indexOf(':') < 0) {                        forkedMojoDescriptor = pluginDescriptor.getMojo(goal);                        if (forkedMojoDescriptor == null) {                            throw new MojoNotFoundException(goal, pluginDescriptor);                        }                    } else {                        forkedMojoDescriptor = mojoDescriptorCreator.getMojoDescriptor(goal, session, project);                    }                    MojoExecution forkedExecution = new MojoExecution(forkedMojoDescriptor, mojoExecution.getExecutionId());                    Xpp3Dom forkedConfiguration = (Xpp3Dom) execution.getConfiguration();                    forkedExecution.setConfiguration(forkedConfiguration);                    mojoExecutionConfigurator(forkedExecution).configure(project, forkedExecution, true);                    forkedExecutions.add(forkedExecution);                }            }            Xpp3Dom phaseConfiguration = (Xpp3Dom) phase.getConfiguration();            if (phaseConfiguration != null) {                for (MojoExecution forkedExecution : forkedExecutions) {                    Xpp3Dom forkedConfiguration = forkedExecution.getConfiguration();                    forkedConfiguration = Xpp3Dom.mergeXpp3Dom(phaseConfiguration, forkedConfiguration);                    forkedExecution.setConfiguration(forkedConfiguration);                }            }        }    }}
private List<MojoExecution> maven_f2192_0(MojoExecution mojoExecution, MavenSession session, MavenProject project, Collection<MojoDescriptor> alreadyForkedExecutions) throws MojoNotFoundException, PluginNotFoundException, PluginResolutionException, PluginDescriptorParsingException, NoPluginFoundForPrefixException, InvalidPluginDescriptorException, LifecyclePhaseNotFoundException, LifecycleNotFoundException, PluginVersionResolutionException
{    MojoDescriptor mojoDescriptor = mojoExecution.getMojoDescriptor();    PluginDescriptor pluginDescriptor = mojoDescriptor.getPluginDescriptor();    String forkedGoal = mojoDescriptor.getExecuteGoal();    MojoDescriptor forkedMojoDescriptor = pluginDescriptor.getMojo(forkedGoal);    if (forkedMojoDescriptor == null) {        throw new MojoNotFoundException(forkedGoal, pluginDescriptor);    }    if (alreadyForkedExecutions.contains(forkedMojoDescriptor)) {        return Collections.emptyList();    }    MojoExecution forkedExecution = new MojoExecution(forkedMojoDescriptor, forkedGoal);    mojoExecutionConfigurator(forkedExecution).configure(project, forkedExecution, true);    finalizeMojoConfiguration(forkedExecution);    calculateForkedExecutions(forkedExecution, session, project, alreadyForkedExecutions);    return Collections.singletonList(forkedExecution);}
private MojoExecutionConfigurator maven_f2193_0(MojoExecution mojoExecution)
{    String configuratorId = mojoExecution.getMojoDescriptor().getComponentConfigurator();    if (configuratorId == null) {        configuratorId = "default";    }    MojoExecutionConfigurator mojoExecutionConfigurator = mojoExecutionConfigurators.get(configuratorId);    if (mojoExecutionConfigurator == null) {                                        mojoExecutionConfigurator = mojoExecutionConfigurators.get("default");    }    return mojoExecutionConfigurator;}
public Map<String, List<MojoExecution>> maven_f2194_0(MavenSession session, MavenProject project, Lifecycle lifecycle, String lifecyclePhase) throws PluginNotFoundException, PluginResolutionException, PluginDescriptorParsingException, MojoNotFoundException, InvalidPluginDescriptorException
{    /*         * Initialize mapping from lifecycle phase to bound mojos. The key set of this map denotes the phases the caller         * is interested in, i.e. all phases up to and including the specified phase.         */    Map<String, Map<Integer, List<MojoExecution>>> mappings = new LinkedHashMap<>();    for (String phase : lifecycle.getPhases()) {        Map<Integer, List<MojoExecution>> phaseBindings = new TreeMap<>();        mappings.put(phase, phaseBindings);        if (phase.equals(lifecyclePhase)) {            break;        }    }    for (Plugin plugin : project.getBuild().getPlugins()) {        for (PluginExecution execution : plugin.getExecutions()) {                        if (execution.getPhase() != null) {                Map<Integer, List<MojoExecution>> phaseBindings = mappings.get(execution.getPhase());                if (phaseBindings != null) {                    for (String goal : execution.getGoals()) {                        MojoExecution mojoExecution = new MojoExecution(plugin, goal, execution.getId());                        mojoExecution.setLifecyclePhase(execution.getPhase());                        addMojoExecution(phaseBindings, mojoExecution, execution.getPriority());                    }                }            } else             {                for (String goal : execution.getGoals()) {                    MojoDescriptor mojoDescriptor = pluginManager.getMojoDescriptor(plugin, goal, project.getRemotePluginRepositories(), session.getRepositorySession());                    Map<Integer, List<MojoExecution>> phaseBindings = mappings.get(mojoDescriptor.getPhase());                    if (phaseBindings != null) {                        MojoExecution mojoExecution = new MojoExecution(mojoDescriptor, execution.getId());                        mojoExecution.setLifecyclePhase(mojoDescriptor.getPhase());                        addMojoExecution(phaseBindings, mojoExecution, execution.getPriority());                    }                }            }        }    }    Map<String, List<MojoExecution>> lifecycleMappings = new LinkedHashMap<>();    for (Map.Entry<String, Map<Integer, List<MojoExecution>>> entry : mappings.entrySet()) {        List<MojoExecution> mojoExecutions = new ArrayList<>();        for (List<MojoExecution> executions : entry.getValue().values()) {            mojoExecutions.addAll(executions);        }        lifecycleMappings.put(entry.getKey(), mojoExecutions);    }    return lifecycleMappings;}
private void maven_f2195_0(Map<Integer, List<MojoExecution>> phaseBindings, MojoExecution mojoExecution, int priority)
{    List<MojoExecution> mojoExecutions = phaseBindings.get(priority);    if (mojoExecutions == null) {        mojoExecutions = new ArrayList<>();        phaseBindings.put(priority, mojoExecutions);    }    mojoExecutions.add(mojoExecution);}
public Set<Plugin>f2196_1String packaging)
{    if (logger.isDebugEnabled()) {            }    LifecycleMapping lifecycleMappingForPackaging = lifecycleMappings.get(packaging);    if (lifecycleMappingForPackaging == null) {        return null;    }    Map<Plugin, Plugin> plugins = new LinkedHashMap<>();    for (Lifecycle lifecycle : getOrderedLifecycles()) {        org.apache.maven.lifecycle.mapping.Lifecycle lifecycleConfiguration = lifecycleMappingForPackaging.getLifecycles().get(lifecycle.getId());        Map<String, LifecyclePhase> phaseToGoalMapping = null;        if (lifecycleConfiguration != null) {            phaseToGoalMapping = lifecycleConfiguration.getLifecyclePhases();        } else if (lifecycle.getDefaultLifecyclePhases() != null) {            phaseToGoalMapping = lifecycle.getDefaultLifecyclePhases();        }        if (phaseToGoalMapping != null) {            for (Map.Entry<String, LifecyclePhase> goalsForLifecyclePhase : phaseToGoalMapping.entrySet()) {                String phase = goalsForLifecyclePhase.getKey();                LifecyclePhase goals = goalsForLifecyclePhase.getValue();                if (goals != null) {                    parseLifecyclePhaseDefinitions(plugins, phase, goals);                }            }        }    }    return plugins.keySet();}
private List<Lifecycle> maven_f2197_0()
{        List<Lifecycle> lifecycles = new ArrayList<>(defaultLifeCycles.getLifeCycles());    Collections.sort(lifecycles, new Comparator<Lifecycle>() {        public int compare(Lifecycle l1, Lifecycle l2) {            return l1.getId().compareTo(l2.getId());        }    });    return lifecycles;}
public int maven_f2198_0(Lifecycle l1, Lifecycle l2)
{    return l1.getId().compareTo(l2.getId());}
private voidf2199_1Map<Plugin, Plugin> plugins, String phase, LifecyclePhase goals)
{    String modelId = "org.apache.maven:maven-core:" + this.getClass().getPackage().getImplementationVersion() + ":default-lifecycle-bindings";    InputSource inputSource = new InputSource();    inputSource.setModelId(modelId);    InputLocation location = new InputLocation(-1, -1, inputSource);    location.setLocation(0, location);    List<LifecycleMojo> mojos = goals.getMojos();    if (mojos != null) {        for (int i = 0; i < mojos.size(); i++) {            LifecycleMojo mojo = mojos.get(i);            GoalSpec gs = parseGoalSpec(mojo.getGoal());            if (gs == null) {                                continue;            }            Plugin plugin = new Plugin();            plugin.setGroupId(gs.groupId);            plugin.setArtifactId(gs.artifactId);            plugin.setVersion(gs.version);            plugin.setLocation("", location);            plugin.setLocation("groupId", location);            plugin.setLocation("artifactId", location);            plugin.setLocation("version", location);            Plugin existing = plugins.get(plugin);            if (existing != null) {                if (existing.getVersion() == null) {                    existing.setVersion(plugin.getVersion());                    existing.setLocation("version", location);                }                plugin = existing;            } else {                plugins.put(plugin, plugin);            }            PluginExecution execution = new PluginExecution();            execution.setId(getExecutionId(plugin, gs.goal));            execution.setPhase(phase);            execution.setPriority(i - mojos.size());            execution.getGoals().add(gs.goal);            execution.setLocation("", location);            execution.setLocation("id", location);            execution.setLocation("phase", location);            execution.setLocation("goals", location);            Xpp3Dom lifecycleConfiguration = mojo.getConfiguration();            if (lifecycleConfiguration != null) {                execution.setConfiguration(new Xpp3Dom(lifecycleConfiguration));            }            plugin.setDependencies(mojo.getDependencies());            plugin.getExecutions().add(execution);        }    }}
private GoalSpec maven_f2200_0(String goalSpec)
{    GoalSpec gs = new GoalSpec();    String[] p = StringUtils.split(goalSpec.trim(), ":");    if (p.length == 3) {                gs.groupId = p[0];        gs.artifactId = p[1];        gs.goal = p[2];    } else if (p.length == 4) {                gs.groupId = p[0];        gs.artifactId = p[1];        gs.version = p[2];        gs.goal = p[3];    } else {                gs = null;    }    return gs;}
private String maven_f2201_0(Plugin plugin, String goal)
{    Set<String> existingIds = new HashSet<>();    for (PluginExecution execution : plugin.getExecutions()) {        existingIds.add(execution.getId());    }    String base = "default-" + goal;    String id = base;    for (int index = 1; existingIds.contains(id); index++) {        id = base + '-' + index;    }    return id;}
public List<TaskSegment> maven_f2202_0(MavenSession session) throws PluginNotFoundException, PluginResolutionException, PluginDescriptorParsingException, MojoNotFoundException, NoPluginFoundForPrefixException, InvalidPluginDescriptorException, PluginVersionResolutionException, LifecyclePhaseNotFoundException, LifecycleNotFoundException
{    MavenProject rootProject = session.getTopLevelProject();    List<String> tasks = session.getGoals();    if ((tasks == null || tasks.isEmpty()) && !StringUtils.isEmpty(rootProject.getDefaultGoal())) {        tasks = Arrays.asList(StringUtils.split(rootProject.getDefaultGoal()));    }    return calculateTaskSegments(session, tasks);}
public List<TaskSegment> maven_f2203_0(MavenSession session, List<String> tasks) throws PluginNotFoundException, PluginResolutionException, PluginDescriptorParsingException, MojoNotFoundException, NoPluginFoundForPrefixException, InvalidPluginDescriptorException, PluginVersionResolutionException
{    List<TaskSegment> taskSegments = new ArrayList<>(tasks.size());    TaskSegment currentSegment = null;    for (String task : tasks) {        if (isGoalSpecification(task)) {                        lifecyclePluginResolver.resolveMissingPluginVersions(session.getTopLevelProject(), session);            MojoDescriptor mojoDescriptor = mojoDescriptorCreator.getMojoDescriptor(task, session, session.getTopLevelProject());            boolean aggregating = mojoDescriptor.isAggregator() || !mojoDescriptor.isProjectRequired();            if (currentSegment == null || currentSegment.isAggregating() != aggregating) {                currentSegment = new TaskSegment(aggregating);                taskSegments.add(currentSegment);            }            currentSegment.getTasks().add(new GoalTask(task));        } else {            if (currentSegment == null || currentSegment.isAggregating()) {                currentSegment = new TaskSegment(false);                taskSegments.add(currentSegment);            }            currentSegment.getTasks().add(new LifecycleTask(task));        }    }    return taskSegments;}
public boolean maven_f2204_0(MavenSession session)
{    List<String> goals = session.getGoals();    if (goals != null) {        for (String goal : goals) {            if (!isGoalSpecification(goal)) {                return true;            }        }    }    return false;}
private boolean maven_f2205_0(String task)
{    return task.indexOf(':') >= 0;}
public void maven_f2206_0(MavenProject project, MojoExecution mojoExecution, boolean allowPluginLevelConfig)
{    String g = mojoExecution.getGroupId();    String a = mojoExecution.getArtifactId();    Plugin plugin = findPlugin(g, a, project.getBuildPlugins());    if (plugin == null && project.getPluginManagement() != null) {        plugin = findPlugin(g, a, project.getPluginManagement().getPlugins());    }    if (plugin != null) {        PluginExecution pluginExecution = findPluginExecution(mojoExecution.getExecutionId(), plugin.getExecutions());        Xpp3Dom pomConfiguration = null;        if (pluginExecution != null) {            pomConfiguration = (Xpp3Dom) pluginExecution.getConfiguration();        } else if (allowPluginLevelConfig) {            pomConfiguration = (Xpp3Dom) plugin.getConfiguration();        }        Xpp3Dom mojoConfiguration = (pomConfiguration != null) ? new Xpp3Dom(pomConfiguration) : null;        mojoConfiguration = Xpp3Dom.mergeXpp3Dom(mojoExecution.getConfiguration(), mojoConfiguration);        mojoExecution.setConfiguration(mojoConfiguration);    }}
private Plugin maven_f2207_0(String groupId, String artifactId, Collection<Plugin> plugins)
{    for (Plugin plugin : plugins) {        if (artifactId.equals(plugin.getArtifactId()) && groupId.equals(plugin.getGroupId())) {            return plugin;        }    }    return null;}
private PluginExecution maven_f2208_0(String executionId, Collection<PluginExecution> executions)
{    if (StringUtils.isNotEmpty(executionId)) {        for (PluginExecution execution : executions) {            if (executionId.equals(execution.getId())) {                return execution;            }        }    }    return null;}
public Set<Artifact> maven_f2209_0(MavenProject project) throws InvalidDependencyVersionException
{    return MavenMetadataSource.createArtifacts(artifactFactory, project.getDependencies(), null, null, project);}
public MavenProject maven_f2210_0()
{    return project;}
public Collection<String> maven_f2211_0()
{    return scopesToCollectForCurrentProject;}
public Collection<String> maven_f2212_0()
{    return scopesToResolveForCurrentProject;}
public Collection<String> maven_f2213_0()
{    return scopesToCollectForAggregatedProjects;}
public Collection<String> maven_f2214_0()
{    return scopesToResolveForAggregatedProjects;}
public boolean maven_f2215_0()
{    return lastDependencyArtifacts != project.getDependencyArtifacts() || (lastDependencyArtifacts != null && lastDependencyArtifactCount != lastDependencyArtifacts.size());}
public boolean maven_f2216_0(Collection<String> scopesToCollect, Collection<String> scopesToResolve)
{    boolean required = scopesToCollectForAggregatedProjects.addAll(scopesToCollect) || scopesToResolveForAggregatedProjects.addAll(scopesToResolve);    return required;}
public void maven_f2217_0()
{    lastDependencyArtifacts = project.getDependencyArtifacts();    lastDependencyArtifactCount = (lastDependencyArtifacts != null) ? lastDependencyArtifacts.size() : 0;}
public static List<ExecutionPlanItem> maven_f2218_0(MavenProject mavenProject, List<MojoExecution> executions)
{    BuilderCommon.attachToThread(mavenProject);    List<ExecutionPlanItem> result = new ArrayList<>();    for (MojoExecution mojoExecution : executions) {        result.add(new ExecutionPlanItem(mojoExecution));    }    return result;}
public MojoExecution maven_f2219_0()
{    return mojoExecution;}
public String maven_f2220_0()
{    return mojoExecution.getLifecyclePhase();}
public Plugin maven_f2221_0()
{    final MojoDescriptor mojoDescriptor = getMojoExecution().getMojoDescriptor();    return mojoDescriptor.getPluginDescriptor().getPlugin();}
public String maven_f2222_0()
{    return "ExecutionPlanItem{" + ", mojoExecution=" + mojoExecution + '}' + super.toString();}
public String maven_f2223_0()
{    return pluginGoal;}
public voidf2224_1String s)
{    }
public voidf2225_1String s)
{    }
public voidf2226_1ProjectBuildList projectBuilds)
{    if (!logger.isDebugEnabled()) {        return;    }        for (Iterator<ProjectSegment> it = projectBuilds.iterator(); it.hasNext(); ) {        ProjectSegment projectBuild = it.next();                                if (it.hasNext()) {                    }    }    }
public voidf2227_1MavenProject currentProject, MavenExecutionPlan executionPlan)
{    if (!logger.isDebugEnabled()) {        return;    }            debugDependencyRequirements(executionPlan.getMojoExecutions());            for (ExecutionPlanItem mojoExecution : executionPlan) {        debugMojoExecution(mojoExecution.getMojoExecution());    }    }
private voidf2228_1MojoExecution mojoExecution)
{    String mojoExecId = mojoExecution.getGroupId() + ':' + mojoExecution.getArtifactId() + ':' + mojoExecution.getVersion() + ':' + mojoExecution.getGoal() + " (" + mojoExecution.getExecutionId() + ')';    Map<String, List<MojoExecution>> forkedExecutions = mojoExecution.getForkedExecutions();    if (!forkedExecutions.isEmpty()) {        for (Map.Entry<String, List<MojoExecution>> fork : forkedExecutions.entrySet()) {                        debugDependencyRequirements(fork.getValue());            for (MojoExecution forkedExecution : fork.getValue()) {                debugMojoExecution(forkedExecution);            }                    }    }                }
private voidf2229_1List<MojoExecution> mojoExecutions)
{    Set<String> scopesToCollect = new TreeSet<>();    Set<String> scopesToResolve = new TreeSet<>();    for (MojoExecution mojoExecution : mojoExecutions) {        MojoDescriptor mojoDescriptor = mojoExecution.getMojoDescriptor();        String scopeToCollect = mojoDescriptor.getDependencyCollectionRequired();        if (StringUtils.isNotEmpty(scopeToCollect)) {            scopesToCollect.add(scopeToCollect);        }        String scopeToResolve = mojoDescriptor.getDependencyResolutionRequired();        if (StringUtils.isNotEmpty(scopeToResolve)) {            scopesToResolve.add(scopeToResolve);        }    }        }
public static List<MavenProject> maven_f2230_0(MavenProject project, MavenSession session, boolean aggregator)
{    if (aggregator) {        return session.getProjects();    } else {        return Collections.singletonList(project);    }}
public void maven_f2231_0(MavenProject project, Collection<String> scopesToCollect, Collection<String> scopesToResolve, MavenSession session, boolean aggregating, Set<Artifact> projectArtifacts) throws LifecycleExecutionException
{    ClassLoader tccl = Thread.currentThread().getContextClassLoader();    try {        ClassLoader projectRealm = project.getClassRealm();        if (projectRealm != null && projectRealm != tccl) {            Thread.currentThread().setContextClassLoader(projectRealm);        }        if (project.getDependencyArtifacts() == null) {            try {                project.setDependencyArtifacts(artifactFactory.createArtifacts(project));            } catch (InvalidDependencyVersionException e) {                throw new LifecycleExecutionException(e);            }        }        Set<Artifact> resolvedArtifacts;        ProjectArtifactsCache.Key cacheKey = projectArtifactsCache.createKey(project, scopesToCollect, scopesToResolve, aggregating, session.getRepositorySession());        ProjectArtifactsCache.CacheRecord recordArtifacts;        recordArtifacts = projectArtifactsCache.get(cacheKey);        if (recordArtifacts != null) {            resolvedArtifacts = recordArtifacts.getArtifacts();        } else {            try {                resolvedArtifacts = getDependencies(project, scopesToCollect, scopesToResolve, session, aggregating, projectArtifacts);                recordArtifacts = projectArtifactsCache.put(cacheKey, resolvedArtifacts);            } catch (LifecycleExecutionException e) {                projectArtifactsCache.put(cacheKey, e);                projectArtifactsCache.register(project, cacheKey, recordArtifacts);                throw e;            }        }        projectArtifactsCache.register(project, cacheKey, recordArtifacts);        Map<Artifact, File> reactorProjects = new HashMap<>(session.getProjects().size());        for (MavenProject reactorProject : session.getProjects()) {            reactorProjects.put(reactorProject.getArtifact(), reactorProject.getArtifact().getFile());        }        Map<String, Artifact> map = new HashMap<>();        for (Artifact artifact : resolvedArtifacts) {            /**             * MNG-6300: resolvedArtifacts can be cache result; this ensures reactor files are always up to date             * During lifecycle the Artifact.getFile() can change from target/classes to the actual jar.             * This clearly shows that target/classes should not be abused as artifactFile just for the classpath             */            File reactorProjectFile = reactorProjects.get(artifact);            if (reactorProjectFile != null) {                artifact.setFile(reactorProjectFile);            }            map.put(artifact.getDependencyConflictId(), artifact);        }        project.setResolvedArtifacts(resolvedArtifacts);        for (Artifact artifact : project.getDependencyArtifacts()) {            if (artifact.getFile() == null) {                Artifact resolved = map.get(artifact.getDependencyConflictId());                if (resolved != null) {                    artifact.setFile(resolved.getFile());                    artifact.setDependencyTrail(resolved.getDependencyTrail());                    artifact.setResolvedVersion(resolved.getVersion());                    artifact.setResolved(true);                }            }        }    } finally {        Thread.currentThread().setContextClassLoader(tccl);    }}
private Set<Artifact>f2232_1MavenProject project, Collection<String> scopesToCollect, Collection<String> scopesToResolve, MavenSession session, boolean aggregating, Set<Artifact> projectArtifacts) throws LifecycleExecutionException
{    if (scopesToCollect == null) {        scopesToCollect = Collections.emptySet();    }    if (scopesToResolve == null) {        scopesToResolve = Collections.emptySet();    }    if (scopesToCollect.isEmpty() && scopesToResolve.isEmpty()) {        return new LinkedHashSet<>();    }    scopesToCollect = new HashSet<>(scopesToCollect);    scopesToCollect.addAll(scopesToResolve);    DependencyFilter collectionFilter = new ScopeDependencyFilter(null, negate(scopesToCollect));    DependencyFilter resolutionFilter = new ScopeDependencyFilter(null, negate(scopesToResolve));    resolutionFilter = AndDependencyFilter.newInstance(collectionFilter, resolutionFilter);    resolutionFilter = AndDependencyFilter.newInstance(resolutionFilter, new ReactorDependencyFilter(projectArtifacts));    DependencyResolutionResult result;    try {        DefaultDependencyResolutionRequest request = new DefaultDependencyResolutionRequest(project, session.getRepositorySession());        request.setResolutionFilter(resolutionFilter);        eventSpyDispatcher.onEvent(request);        result = dependenciesResolver.resolve(request);    } catch (DependencyResolutionException e) {        result = e.getResult();        /*             * MNG-2277, the check below compensates for our bad plugin support where we ended up with aggregator             * plugins that require dependency resolution although they usually run in phases of the build where project             * artifacts haven't been assembled yet. The prime example of this is "mvn release:prepare".             */        if (aggregating && areAllDependenciesInReactor(session.getProjects(), result.getUnresolvedDependencies())) {                        for (Dependency dependency : result.getUnresolvedDependencies()) {                            }                    } else {            throw new LifecycleExecutionException(null, project, e);        }    }    eventSpyDispatcher.onEvent(result);    Set<Artifact> artifacts = new LinkedHashSet<>();    if (result.getDependencyGraph() != null && !result.getDependencyGraph().getChildren().isEmpty()) {        RepositoryUtils.toArtifacts(artifacts, result.getDependencyGraph().getChildren(), Collections.singletonList(project.getArtifact().getId()), collectionFilter);    }    return artifacts;}
private boolean maven_f2233_0(Collection<MavenProject> projects, Collection<Dependency> dependencies)
{    Set<String> projectKeys = getReactorProjectKeys(projects);    for (Dependency dependency : dependencies) {        org.eclipse.aether.artifact.Artifact a = dependency.getArtifact();        String key = ArtifactUtils.key(a.getGroupId(), a.getArtifactId(), a.getVersion());        if (!projectKeys.contains(key)) {            return false;        }    }    return true;}
private Set<String> maven_f2234_0(Collection<MavenProject> projects)
{    Set<String> projectKeys = new HashSet<>(projects.size() * 2);    for (MavenProject project : projects) {        String key = ArtifactUtils.key(project.getGroupId(), project.getArtifactId(), project.getVersion());        projectKeys.add(key);    }    return projectKeys;}
private Collection<String> maven_f2235_0(Collection<String> scopes)
{    Collection<String> result = new HashSet<>();    Collections.addAll(result, "system", "compile", "provided", "runtime", "test");    for (String scope : scopes) {        if ("compile".equals(scope)) {            result.remove("compile");            result.remove("system");            result.remove("provided");        } else if ("runtime".equals(scope)) {            result.remove("compile");            result.remove("runtime");        } else if ("compile+runtime".equals(scope)) {            result.remove("compile");            result.remove("system");            result.remove("provided");            result.remove("runtime");        } else if ("runtime+system".equals(scope)) {            result.remove("compile");            result.remove("system");            result.remove("runtime");        } else if ("test".equals(scope)) {            result.clear();        }    }    return result;}
public boolean maven_f2236_0(DependencyNode node, List<DependencyNode> parents)
{    Dependency dependency = node.getDependency();    if (dependency != null) {        org.eclipse.aether.artifact.Artifact a = dependency.getArtifact();        String key = ArtifactUtils.key(a.getGroupId(), a.getArtifactId(), a.getVersion());        return !keys.contains(key);    }    return false;}
public void maven_f2237_0(final List<ProjectExecutionListener> listeners)
{    this.projectExecutionListeners = listeners;    this.projectExecutionListener = new CompoundProjectExecutionListener(listeners);}
public void maven_f2238_0(MavenSession session, ReactorContext reactorContext, MavenProject currentProject, TaskSegment taskSegment)
{    buildProject(session, session, reactorContext, currentProject, taskSegment);}
public void maven_f2239_0(MavenSession session, MavenSession rootSession, ReactorContext reactorContext, MavenProject currentProject, TaskSegment taskSegment)
{    session.setCurrentProject(currentProject);    long buildStartTime = System.currentTimeMillis();            sessionScope.enter(reactorContext.getSessionScopeMemento());    sessionScope.seed(MavenSession.class, session);    try {        if (reactorContext.getReactorBuildStatus().isHaltedOrBlacklisted(currentProject)) {            eventCatapult.fire(ExecutionEvent.Type.ProjectSkipped, session, null);            return;        }        BuilderCommon.attachToThread(currentProject);        projectExecutionListener.beforeProjectExecution(new ProjectExecutionEvent(session, currentProject));        eventCatapult.fire(ExecutionEvent.Type.ProjectStarted, session, null);        MavenExecutionPlan executionPlan = builderCommon.resolveBuildPlan(session, currentProject, taskSegment, new HashSet<Artifact>());        List<MojoExecution> mojoExecutions = executionPlan.getMojoExecutions();        projectExecutionListener.beforeProjectLifecycleExecution(new ProjectExecutionEvent(session, currentProject, mojoExecutions));        mojoExecutor.execute(session, mojoExecutions, reactorContext.getProjectIndex());        long buildEndTime = System.currentTimeMillis();        projectExecutionListener.afterProjectExecutionSuccess(new ProjectExecutionEvent(session, currentProject, mojoExecutions));        reactorContext.getResult().addBuildSummary(new BuildSuccess(currentProject, buildEndTime - buildStartTime));        eventCatapult.fire(ExecutionEvent.Type.ProjectSucceeded, session, null);    } catch (Throwable t) {        builderCommon.handleBuildError(reactorContext, rootSession, session, currentProject, t, buildStartTime);        projectExecutionListener.afterProjectExecutionFailure(new ProjectExecutionEvent(session, currentProject, t));                if (t instanceof RuntimeException) {            throw (RuntimeException) t;        }        if (t instanceof Error) {            throw (Error) t;        }    } finally {        sessionScope.exit();        session.setCurrentProject(null);        Thread.currentThread().setContextClassLoader(reactorContext.getOriginalContextClassLoader());    }}
public void maven_f2240_0(MavenProject project, MavenSession session) throws PluginVersionResolutionException
{    Map<String, String> versions = new HashMap<>(64);    for (Plugin plugin : project.getBuildPlugins()) {        if (plugin.getVersion() == null) {            PluginVersionRequest request = new DefaultPluginVersionRequest(plugin, session.getRepositorySession(), project.getRemotePluginRepositories());            plugin.setVersion(pluginVersionResolver.resolve(request).getVersion());        }        versions.put(plugin.getKey(), plugin.getVersion());    }    PluginManagement pluginManagement = project.getPluginManagement();    if (pluginManagement != null) {        for (Plugin plugin : pluginManagement.getPlugins()) {            if (plugin.getVersion() == null) {                plugin.setVersion(versions.get(plugin.getKey()));                if (plugin.getVersion() == null) {                    PluginVersionRequest request = new DefaultPluginVersionRequest(plugin, session.getRepositorySession(), project.getRemotePluginRepositories());                    plugin.setVersion(pluginVersionResolver.resolve(request).getVersion());                }            }        }    }}
private boolean maven_f2242_0(MavenSession session)
{    return lifecycleTaskSegmentCalculator.requiresProject(session);}
private boolean maven_f2243_0(MavenSession session)
{    return !session.getRequest().isProjectPresent();}
public String maven_f2244_0()
{    return getLifecyclePhase();}
public String maven_f2245_0()
{    return lifecyclePhase;}
private Plugin maven_f2246_0(String groupId, String artifactId, Collection<Plugin> plugins)
{    for (Plugin plugin : plugins) {        if (artifactId.equals(plugin.getArtifactId()) && groupId.equals(plugin.getGroupId())) {            return plugin;        }    }    return null;}
public static Xpp3Dom maven_f2247_0(MojoDescriptor mojoDescriptor)
{    Xpp3Dom dom = new Xpp3Dom("configuration");    PlexusConfiguration c = mojoDescriptor.getMojoConfiguration();    PlexusConfiguration[] ces = c.getChildren();    if (ces != null) {        for (PlexusConfiguration ce : ces) {            String value = ce.getValue(null);            String defaultValue = ce.getAttribute("default-value", null);            if (value != null || defaultValue != null) {                Xpp3Dom e = new Xpp3Dom(ce.getName());                e.setValue(value);                if (defaultValue != null) {                    e.setAttribute("default-value", defaultValue);                }                dom.addChild(e);            }        }    }    return dom;}
public MojoDescriptor maven_f2248_0(String task, MavenSession session, MavenProject project) throws PluginNotFoundException, PluginResolutionException, PluginDescriptorParsingException, MojoNotFoundException, NoPluginFoundForPrefixException, InvalidPluginDescriptorException, PluginVersionResolutionException
{    String goal = null;    Plugin plugin = null;    StringTokenizer tok = new StringTokenizer(task, ":");    int numTokens = tok.countTokens();    if (numTokens >= 4) {                                                                                plugin = new Plugin();        plugin.setGroupId(tok.nextToken());        plugin.setArtifactId(tok.nextToken());        plugin.setVersion(tok.nextToken());        goal = tok.nextToken();                while (tok.hasMoreTokens()) {            goal += ":" + tok.nextToken();        }    } else if (numTokens == 3) {                                                                                plugin = new Plugin();        plugin.setGroupId(tok.nextToken());        plugin.setArtifactId(tok.nextToken());        goal = tok.nextToken();    } else if (numTokens <= 2) {                                        String prefix = tok.nextToken();        if (numTokens == 2) {            goal = tok.nextToken();        } else {                        goal = "";        }                                                                        plugin = findPluginForPrefix(prefix, session);    }    int executionIdx = goal.indexOf('@');    if (executionIdx > 0) {        goal = goal.substring(0, executionIdx);    }    injectPluginDeclarationFromProject(plugin, project);        if (plugin.getVersion() == null) {        resolvePluginVersion(plugin, session, project);    }    return pluginManager.getMojoDescriptor(plugin, goal, project.getRemotePluginRepositories(), session.getRepositorySession());}
public Pluginf2249_1String prefix, MavenSession session) throws NoPluginFoundForPrefixException
{    if (session.getCurrentProject() != null) {        try {            lifecyclePluginResolver.resolveMissingPluginVersions(session.getCurrentProject(), session);        } catch (PluginVersionResolutionException e) {                                }    }    PluginPrefixRequest prefixRequest = new DefaultPluginPrefixRequest(prefix, session);    PluginPrefixResult prefixResult = pluginPrefixResolver.resolve(prefixRequest);    Plugin plugin = new Plugin();    plugin.setGroupId(prefixResult.getGroupId());    plugin.setArtifactId(prefixResult.getArtifactId());    return plugin;}
private void maven_f2250_0(Plugin plugin, MavenSession session, MavenProject project) throws PluginVersionResolutionException
{    PluginVersionRequest versionRequest = new DefaultPluginVersionRequest(plugin, session.getRepositorySession(), project.getRemotePluginRepositories());    plugin.setVersion(pluginVersionResolver.resolve(versionRequest).getVersion());}
private void maven_f2251_0(Plugin plugin, MavenProject project)
{    Plugin pluginInPom = findPlugin(plugin, project.getBuildPlugins());    if (pluginInPom == null && project.getPluginManagement() != null) {        pluginInPom = findPlugin(plugin, project.getPluginManagement().getPlugins());    }    if (pluginInPom != null) {        if (plugin.getVersion() == null) {            plugin.setVersion(pluginInPom.getVersion());        }        plugin.setDependencies(new ArrayList<>(pluginInPom.getDependencies()));    }}
private Plugin maven_f2252_0(Plugin plugin, Collection<Plugin> plugins)
{    return findPlugin(plugin.getGroupId(), plugin.getArtifactId(), plugins);}
public DependencyContext maven_f2253_0(MavenSession session, List<MojoExecution> mojoExecutions)
{    Set<String> scopesToCollect = new TreeSet<>();    Set<String> scopesToResolve = new TreeSet<>();    collectDependencyRequirements(scopesToResolve, scopesToCollect, mojoExecutions);    return new DependencyContext(session.getCurrentProject(), scopesToCollect, scopesToResolve);}
private void maven_f2254_0(Set<String> scopesToResolve, Set<String> scopesToCollect, Collection<MojoExecution> mojoExecutions)
{    for (MojoExecution mojoExecution : mojoExecutions) {        MojoDescriptor mojoDescriptor = mojoExecution.getMojoDescriptor();        scopesToResolve.addAll(toScopes(mojoDescriptor.getDependencyResolutionRequired()));        scopesToCollect.addAll(toScopes(mojoDescriptor.getDependencyCollectionRequired()));    }}
private Collection<String> maven_f2255_0(String classpath)
{    Collection<String> scopes = Collections.emptyList();    if (StringUtils.isNotEmpty(classpath)) {        if (Artifact.SCOPE_COMPILE.equals(classpath)) {            scopes = Arrays.asList(Artifact.SCOPE_COMPILE, Artifact.SCOPE_SYSTEM, Artifact.SCOPE_PROVIDED);        } else if (Artifact.SCOPE_RUNTIME.equals(classpath)) {            scopes = Arrays.asList(Artifact.SCOPE_COMPILE, Artifact.SCOPE_RUNTIME);        } else if (Artifact.SCOPE_COMPILE_PLUS_RUNTIME.equals(classpath)) {            scopes = Arrays.asList(Artifact.SCOPE_COMPILE, Artifact.SCOPE_SYSTEM, Artifact.SCOPE_PROVIDED, Artifact.SCOPE_RUNTIME);        } else if (Artifact.SCOPE_RUNTIME_PLUS_SYSTEM.equals(classpath)) {            scopes = Arrays.asList(Artifact.SCOPE_COMPILE, Artifact.SCOPE_SYSTEM, Artifact.SCOPE_RUNTIME);        } else if (Artifact.SCOPE_TEST.equals(classpath)) {            scopes = Arrays.asList(Artifact.SCOPE_COMPILE, Artifact.SCOPE_SYSTEM, Artifact.SCOPE_PROVIDED, Artifact.SCOPE_RUNTIME, Artifact.SCOPE_TEST);        }    }    return Collections.unmodifiableCollection(scopes);}
public void maven_f2256_0(MavenSession session, List<MojoExecution> mojoExecutions, ProjectIndex projectIndex) throws LifecycleExecutionException
{    DependencyContext dependencyContext = newDependencyContext(session, mojoExecutions);    PhaseRecorder phaseRecorder = new PhaseRecorder(session.getCurrentProject());    for (MojoExecution mojoExecution : mojoExecutions) {        execute(session, mojoExecution, projectIndex, dependencyContext, phaseRecorder);    }}
public void maven_f2257_0(MavenSession session, MojoExecution mojoExecution, ProjectIndex projectIndex, DependencyContext dependencyContext, PhaseRecorder phaseRecorder) throws LifecycleExecutionException
{    execute(session, mojoExecution, projectIndex, dependencyContext);    phaseRecorder.observeExecution(mojoExecution);}
private void maven_f2258_0(MavenSession session, MojoExecution mojoExecution, ProjectIndex projectIndex, DependencyContext dependencyContext) throws LifecycleExecutionException
{    MojoDescriptor mojoDescriptor = mojoExecution.getMojoDescriptor();    try {        mavenPluginManager.checkRequiredMavenVersion(mojoDescriptor.getPluginDescriptor());    } catch (PluginIncompatibleException e) {        throw new LifecycleExecutionException(mojoExecution, session.getCurrentProject(), e);    }    if (mojoDescriptor.isProjectRequired() && !session.getRequest().isProjectPresent()) {        Throwable cause = new MissingProjectException("Goal requires a project to execute" + " but there is no POM in this directory (" + session.getExecutionRootDirectory() + ")." + " Please verify you invoked Maven from the correct directory.");        throw new LifecycleExecutionException(mojoExecution, null, cause);    }    if (mojoDescriptor.isOnlineRequired() && session.isOffline()) {        if (MojoExecution.Source.CLI.equals(mojoExecution.getSource())) {            Throwable cause = new IllegalStateException("Goal requires online mode for execution" + " but Maven is currently offline.");            throw new LifecycleExecutionException(mojoExecution, session.getCurrentProject(), cause);        } else {            eventCatapult.fire(ExecutionEvent.Type.MojoSkipped, session, mojoExecution);            return;        }    }    List<MavenProject> forkedProjects = executeForkedExecutions(mojoExecution, session, projectIndex);    ensureDependenciesAreResolved(mojoDescriptor, session, dependencyContext);    eventCatapult.fire(ExecutionEvent.Type.MojoStarted, session, mojoExecution);    try {        try {            pluginManager.executeMojo(session, mojoExecution);        } catch (MojoFailureException | PluginManagerException | PluginConfigurationException | MojoExecutionException e) {            throw new LifecycleExecutionException(mojoExecution, session.getCurrentProject(), e);        }        eventCatapult.fire(ExecutionEvent.Type.MojoSucceeded, session, mojoExecution);    } catch (LifecycleExecutionException e) {        eventCatapult.fire(ExecutionEvent.Type.MojoFailed, session, mojoExecution, e);        throw e;    } finally {        for (MavenProject forkedProject : forkedProjects) {            forkedProject.setExecutionProject(null);        }    }}
public void maven_f2259_0(MojoDescriptor mojoDescriptor, MavenSession session, DependencyContext dependencyContext) throws LifecycleExecutionException
{    MavenProject project = dependencyContext.getProject();    boolean aggregating = mojoDescriptor.isAggregator();    if (dependencyContext.isResolutionRequiredForCurrentProject()) {        Collection<String> scopesToCollect = dependencyContext.getScopesToCollectForCurrentProject();        Collection<String> scopesToResolve = dependencyContext.getScopesToResolveForCurrentProject();        lifeCycleDependencyResolver.resolveProjectDependencies(project, scopesToCollect, scopesToResolve, session, aggregating, Collections.<Artifact>emptySet());        dependencyContext.synchronizeWithProjectState();    }    if (aggregating) {        Collection<String> scopesToCollect = toScopes(mojoDescriptor.getDependencyCollectionRequired());        Collection<String> scopesToResolve = toScopes(mojoDescriptor.getDependencyResolutionRequired());        if (dependencyContext.isResolutionRequiredForAggregatedProjects(scopesToCollect, scopesToResolve)) {            for (MavenProject aggregatedProject : session.getProjects()) {                if (aggregatedProject != project) {                    lifeCycleDependencyResolver.resolveProjectDependencies(aggregatedProject, scopesToCollect, scopesToResolve, session, aggregating, Collections.<Artifact>emptySet());                }            }        }    }    ArtifactFilter artifactFilter = getArtifactFilter(mojoDescriptor);    List<MavenProject> projectsToResolve = LifecycleDependencyResolver.getProjects(session.getCurrentProject(), session, mojoDescriptor.isAggregator());    for (MavenProject projectToResolve : projectsToResolve) {        projectToResolve.setArtifactFilter(artifactFilter);    }}
private ArtifactFilter maven_f2260_0(MojoDescriptor mojoDescriptor)
{    String scopeToResolve = mojoDescriptor.getDependencyResolutionRequired();    String scopeToCollect = mojoDescriptor.getDependencyCollectionRequired();    List<String> scopes = new ArrayList<>(2);    if (StringUtils.isNotEmpty(scopeToCollect)) {        scopes.add(scopeToCollect);    }    if (StringUtils.isNotEmpty(scopeToResolve)) {        scopes.add(scopeToResolve);    }    if (scopes.isEmpty()) {        return null;    } else {        return new CumulativeScopeArtifactFilter(scopes);    }}
public List<MavenProject> maven_f2261_0(MojoExecution mojoExecution, MavenSession session, ProjectIndex projectIndex) throws LifecycleExecutionException
{    List<MavenProject> forkedProjects = Collections.emptyList();    Map<String, List<MojoExecution>> forkedExecutions = mojoExecution.getForkedExecutions();    if (!forkedExecutions.isEmpty()) {        eventCatapult.fire(ExecutionEvent.Type.ForkStarted, session, mojoExecution);        MavenProject project = session.getCurrentProject();        forkedProjects = new ArrayList<>(forkedExecutions.size());        try {            for (Map.Entry<String, List<MojoExecution>> fork : forkedExecutions.entrySet()) {                String projectId = fork.getKey();                int index = projectIndex.getIndices().get(projectId);                MavenProject forkedProject = projectIndex.getProjects().get(projectId);                forkedProjects.add(forkedProject);                MavenProject executedProject = forkedProject.clone();                forkedProject.setExecutionProject(executedProject);                List<MojoExecution> mojoExecutions = fork.getValue();                if (mojoExecutions.isEmpty()) {                    continue;                }                try {                    session.setCurrentProject(executedProject);                    session.getProjects().set(index, executedProject);                    projectIndex.getProjects().put(projectId, executedProject);                    eventCatapult.fire(ExecutionEvent.Type.ForkedProjectStarted, session, mojoExecution);                    execute(session, mojoExecutions, projectIndex);                    eventCatapult.fire(ExecutionEvent.Type.ForkedProjectSucceeded, session, mojoExecution);                } catch (LifecycleExecutionException e) {                    eventCatapult.fire(ExecutionEvent.Type.ForkedProjectFailed, session, mojoExecution, e);                    throw e;                } finally {                    projectIndex.getProjects().put(projectId, forkedProject);                    session.getProjects().set(index, forkedProject);                    session.setCurrentProject(project);                }            }            eventCatapult.fire(ExecutionEvent.Type.ForkSucceeded, session, mojoExecution);        } catch (LifecycleExecutionException e) {            eventCatapult.fire(ExecutionEvent.Type.ForkFailed, session, mojoExecution, e);            throw e;        }    }    return forkedProjects;}
public void maven_f2262_0(MojoExecution mojoExecution)
{    String lifecyclePhase = mojoExecution.getLifecyclePhase();    if (lifecyclePhase != null) {        if (lastLifecyclePhase == null) {            lastLifecyclePhase = lifecyclePhase;        } else if (!lifecyclePhase.equals(lastLifecyclePhase)) {            project.addLifecyclePhase(lastLifecyclePhase);            lastLifecyclePhase = lifecyclePhase;        }    }    if (lastLifecyclePhase != null) {        project.addLifecyclePhase(lastLifecyclePhase);    }}
public boolean maven_f2263_0(MojoExecution nextMojoExecution)
{    String lifecyclePhase = nextMojoExecution.getLifecyclePhase();    if (lifecyclePhase == null) {        return lastLifecyclePhase != null;    }    return !lifecyclePhase.equals(lastLifecyclePhase);}
public ProjectBuildList maven_f2264_0(TaskSegment taskSegment)
{    List<ProjectSegment> currentSegment = new ArrayList<>();    for (ProjectSegment projectBuild : items) {        if (taskSegment == projectBuild.getTaskSegment()) {                        currentSegment.add(projectBuild);        }    }    return new ProjectBuildList(currentSegment);}
public Map<MavenProject, ProjectSegment> maven_f2265_0(TaskSegment taskSegment)
{    Map<MavenProject, ProjectSegment> result = new HashMap<>();    for (ProjectSegment projectBuild : items) {        if (taskSegment == projectBuild.getTaskSegment()) {                        result.put(projectBuild.getProject(), projectBuild);        }    }    return result;}
public ProjectSegment maven_f2266_0(MavenProject mavenProject)
{    for (ProjectSegment projectBuild : items) {        if (mavenProject.equals(projectBuild.getProject())) {            return projectBuild;        }    }    return null;}
public Iterator<ProjectSegment> maven_f2267_0()
{    return items.iterator();}
public void maven_f2268_0()
{    for (ProjectSegment item : items) {        MavenSession sessionForThisModule = item.getSession();        sessionForThisModule.setCurrentProject(null);    }}
public int maven_f2269_0()
{    return items.size();}
public ProjectSegment maven_f2270_0(int index)
{    return items.get(index);}
public Set<String> maven_f2271_0()
{    Set<String> projectKeys = new HashSet<>(items.size() * 2);    for (ProjectSegment projectBuild : items) {        MavenProject project = projectBuild.getProject();        String key = ArtifactUtils.key(project.getGroupId(), project.getArtifactId(), project.getVersion());        projectKeys.add(key);    }    return projectKeys;}
public boolean maven_f2272_0()
{    return items.isEmpty();}
public Set<MavenProject> maven_f2273_0()
{    Set<MavenProject> projects = new HashSet<>();    for (ProjectSegment s : items) {        projects.add(s.getProject());    }    return projects;}
public Map<String, MavenProject> maven_f2274_0()
{    return projects;}
public Map<String, Integer> maven_f2275_0()
{    return indices;}
public MavenSession maven_f2276_0()
{    return session;}
public MavenProject maven_f2277_0()
{    return project;}
public TaskSegment maven_f2278_0()
{    return taskSegment;}
public List<MavenProject> maven_f2279_0()
{    return nonTransitiveUpstreamProjects;}
public List<MavenProject> maven_f2280_0()
{    return transitiveUpstreamProjects;}
public String maven_f2281_0()
{    return getProject().getId() + " -> " + getTaskSegment();}
public boolean maven_f2282_0(MavenProject project)
{    return blackListedProjects.contains(BuilderCommon.getKey(project));}
public void maven_f2283_0(MavenProject project)
{    if (blackListedProjects.add(BuilderCommon.getKey(project)) && projectDependencyGraph != null) {        for (MavenProject downstreamProject : projectDependencyGraph.getDownstreamProjects(project, true)) {            blackListedProjects.add(BuilderCommon.getKey(downstreamProject));        }    }}
public void maven_f2284_0()
{    halted = true;}
public boolean maven_f2285_0()
{    return halted;}
public boolean maven_f2286_0(MavenProject mavenProject)
{    return isBlackListed(mavenProject) || isHalted();}
public ReactorBuildStatus maven_f2287_0()
{    return reactorBuildStatus;}
public MavenExecutionResult maven_f2288_0()
{    return result;}
public ProjectIndex maven_f2289_0()
{    return projectIndex;}
public ClassLoader maven_f2290_0()
{    return originalContextClassLoader;}
public SessionScope.Memento maven_f2291_0()
{    return sessionScope;}
public String maven_f2292_0()
{    return getTasks().toString();}
public List<Object> maven_f2293_0()
{    return tasks;}
public boolean maven_f2294_0()
{    return aggregating;}
public String maven_f2295_0()
{    return this.id;}
public List<String> maven_f2296_0()
{    return this.phases;}
public Map<String, LifecyclePhase> maven_f2297_0()
{    return defaultPhases;}
public Map<String, String> maven_f2298_0()
{    return LifecyclePhase.toLegacyMap(getDefaultLifecyclePhases());}
public String maven_f2299_0()
{    return id + " -> " + phases;}
public MavenProject maven_f2300_0()
{    return project;}
private static String maven_f2301_0(MojoExecution execution, MavenProject project, Throwable cause)
{    MessageBuilder buffer = buffer(256);    buffer.a("Failed to execute goal");    if (execution != null) {        buffer.a(' ');        buffer.mojo(execution.getGroupId() + ':' + execution.getArtifactId() + ':' + execution.getVersion() + ':' + execution.getGoal());        buffer.a(' ').strong('(' + execution.getExecutionId() + ')');    }    if (project != null) {        buffer.a(" on project ");        buffer.project(project.getArtifactId());    }    if (cause != null) {        buffer.a(": ").failure(cause.getMessage());    }    return buffer.toString();}
public String maven_f2302_0()
{    return lifecycleId;}
public String maven_f2303_0()
{    return lifecyclePhase;}
private void maven_f2304_0()
{    if (lifecycleMap == null) {        lifecycleMap = new HashMap<>();        if (lifecycles != null) {            for (Lifecycle lifecycle : lifecycles) {                lifecycleMap.put(lifecycle.getId(), lifecycle);            }        } else {            /*                 * NOTE: This is to provide a migration path for implementors of the legacy API which did not know about                 * getLifecycles().                 */            String[] lifecycleIds = { "default", "clean", "site" };            for (String lifecycleId : lifecycleIds) {                Map<String, LifecyclePhase> phases = getLifecyclePhases(lifecycleId);                if (phases != null) {                    Lifecycle lifecycle = new Lifecycle();                    lifecycle.setId(lifecycleId);                    lifecycle.setLifecyclePhases(phases);                    lifecycleMap.put(lifecycleId, lifecycle);                }            }        }    }}
public Map<String, Lifecycle> maven_f2305_0()
{    initLifecycleMap();    return lifecycleMap;}
public List<String> maven_f2306_0(String lifecycle)
{    return null;}
private Map<String, LifecyclePhase> maven_f2307_0(String lifecycle)
{    initLifecycleMap();    Lifecycle lifecycleMapping = lifecycleMap.get(lifecycle);    if (lifecycleMapping != null) {        return lifecycleMapping.getLifecyclePhases();    } else if ("default".equals(lifecycle)) {        return phases;    } else {        return null;    }}
public Map<String, String> maven_f2308_0(String lifecycle)
{    return LifecyclePhase.toLegacyMap(getLifecyclePhases(lifecycle));}
public String maven_f2309_0()
{    return this.id;}
public Map<String, LifecyclePhase> maven_f2310_0()
{    return this.lifecyclePhases;}
public void maven_f2311_0(String id)
{    this.id = id;}
public void maven_f2312_0(Map<String, LifecyclePhase> lifecyclePhases)
{    this.lifecyclePhases = lifecyclePhases;}
public Map<String, String> maven_f2313_0()
{    Map<String, LifecyclePhase> lphases = getLifecyclePhases();    if (lphases == null) {        return null;    }    if (lphases.isEmpty()) {        return Collections.emptyMap();    }    Map<String, String> phases = new LinkedHashMap<>();    for (Map.Entry<String, LifecyclePhase> e : lphases.entrySet()) {        phases.put(e.getKey(), e.getValue().toString());    }    return phases;}
public void maven_f2314_0(Map<String, String> phases)
{    Map<String, LifecyclePhase> lphases = new LinkedHashMap<>();    for (Map.Entry<String, String> e : phases.entrySet()) {        lphases.put(e.getKey(), new LifecyclePhase(e.getValue()));    }    setLifecyclePhases(lphases);}
public String maven_f2315_0()
{    return goal;}
public Xpp3Dom maven_f2316_0()
{    return configuration;}
public List<Dependency> maven_f2317_0()
{    return dependencies;}
public void maven_f2318_0(String goal)
{    this.goal = goal;}
public void maven_f2319_0(Xpp3Dom configuration)
{    this.configuration = configuration;}
public void maven_f2320_0(List<Dependency> dependencies)
{    this.dependencies = dependencies;}
public List<LifecycleMojo> maven_f2321_0()
{    return mojos;}
public void maven_f2322_0(List<LifecycleMojo> mojos)
{    this.mojos = mojos;}
public void maven_f2323_0(String goals)
{    mojos = new ArrayList<>();    if (StringUtils.isNotEmpty(goals)) {        String[] mojoGoals = StringUtils.split(goals, ",");        for (String mojoGoal : mojoGoals) {            LifecycleMojo lifecycleMojo = new LifecycleMojo();            lifecycleMojo.setGoal(mojoGoal.trim());            mojos.add(lifecycleMojo);        }    }}
public String maven_f2324_0()
{    StringBuilder sb = new StringBuilder();    boolean first = true;    List<LifecycleMojo> mojos = getMojos();    if (mojos != null) {        for (LifecycleMojo mojo : mojos) {            if (first) {                first = false;            } else {                sb.append(',');            }            sb.append(mojo.getGoal());        }    }    return sb.toString();}
public static Map<String, String> maven_f2325_0(Map<String, LifecyclePhase> lifecyclePhases)
{    if (lifecyclePhases == null) {        return null;    }    if (lifecyclePhases.isEmpty()) {        return Collections.emptyMap();    }    Map<String, String> phases = new LinkedHashMap<>();    for (Map.Entry<String, LifecyclePhase> e : lifecyclePhases.entrySet()) {        phases.put(e.getKey(), e.getValue().toString());    }    return phases;}
public Iterator<ExecutionPlanItem> maven_f2326_0()
{    return getExecutionPlanItems().iterator();}
public ExecutionPlanItem maven_f2327_0(String requestedPhase)
{    return lastMojoExecutionForAllPhases.get(requestedPhase);}
private List<ExecutionPlanItem> maven_f2328_0()
{    return planItem;}
private static Iterable<String> maven_f2329_0(List<ExecutionPlanItem> planItems)
{    LinkedHashSet<String> result = new LinkedHashSet<>();    for (ExecutionPlanItem executionPlanItem : planItems) {        final String phase = executionPlanItem.getLifecyclePhase();        if (!result.contains(phase)) {            result.add(phase);        }    }    return result;}
public List<MojoExecution> maven_f2330_0()
{    List<MojoExecution> result = new ArrayList<>();    for (ExecutionPlanItem executionPlanItem : planItem) {        result.add(executionPlanItem.getMojoExecution());    }    return result;}
public Set<Plugin> maven_f2331_0()
{    Set<Plugin> plugins = new HashSet<>();    for (ExecutionPlanItem executionPlanItem : planItem) {        final MojoExecution mojoExecution = executionPlanItem.getMojoExecution();        if (!mojoExecution.getMojoDescriptor().isThreadSafe()) {            plugins.add(mojoExecution.getPlugin());        }    }    return plugins;}
public Set<MojoDescriptor> maven_f2332_0()
{    Set<MojoDescriptor> mojos = new HashSet<>();    for (ExecutionPlanItem executionPlanItem : planItem) {        final MojoExecution mojoExecution = executionPlanItem.getMojoExecution();        if (!mojoExecution.getMojoDescriptor().isThreadSafe()) {            mojos.add(mojoExecution.getMojoDescriptor());        }    }    return mojos;}
public List<MojoExecution> maven_f2333_0()
{    return getMojoExecutions();}
public int maven_f2334_0()
{    return planItem.size();}
public File maven_f2335_0()
{    return pomFile;}
public File maven_f2336_0()
{    return moduleFile;}
public String maven_f2337_0()
{    return moduleName;}
public void maven_f2338_0(Model model, ModelBuildingRequest request, ModelProblemCollector problems)
{    String packaging = model.getPackaging();    Collection<Plugin> defaultPlugins = lifecycle.getPluginsBoundByDefaultToAllLifecycles(packaging);    if (defaultPlugins == null) {        problems.add(new ModelProblemCollectorRequest(Severity.ERROR, Version.BASE).setMessage("Unknown packaging: " + packaging).setLocation(model.getLocation("packaging")));    } else if (!defaultPlugins.isEmpty()) {        Model lifecycleModel = new Model();        lifecycleModel.setBuild(new Build());        lifecycleModel.getBuild().getPlugins().addAll(defaultPlugins);        merger.merge(model, lifecycleModel);    }}
public void maven_f2339_0(Model target, Model source)
{    if (target.getBuild() == null) {        target.setBuild(new Build());    }    Map<Object, Object> context = Collections.<Object, Object>singletonMap(PLUGIN_MANAGEMENT, target.getBuild().getPluginManagement());    mergePluginContainer_Plugins(target.getBuild(), source.getBuild(), false, context);}
protected void maven_f2340_0(PluginContainer target, PluginContainer source, boolean sourceDominant, Map<Object, Object> context)
{    List<Plugin> src = source.getPlugins();    if (!src.isEmpty()) {        List<Plugin> tgt = target.getPlugins();        Map<Object, Plugin> merged = new LinkedHashMap<>((src.size() + tgt.size()) * 2);        for (Plugin element : tgt) {            Object key = getPluginKey(element);            merged.put(key, element);        }        Map<Object, Plugin> added = new LinkedHashMap<>();        for (Plugin element : src) {            Object key = getPluginKey(element);            Plugin existing = merged.get(key);            if (existing != null) {                mergePlugin(existing, element, sourceDominant, context);            } else {                merged.put(key, element);                added.put(key, element);            }        }        if (!added.isEmpty()) {            PluginManagement pluginMgmt = (PluginManagement) context.get(PLUGIN_MANAGEMENT);            if (pluginMgmt != null) {                for (Plugin managedPlugin : pluginMgmt.getPlugins()) {                    Object key = getPluginKey(managedPlugin);                    Plugin addedPlugin = added.get(key);                    if (addedPlugin != null) {                        Plugin plugin = managedPlugin.clone();                        mergePlugin(plugin, addedPlugin, sourceDominant, Collections.emptyMap());                        merged.put(key, plugin);                    }                }            }        }        List<Plugin> result = new ArrayList<>(merged.values());        target.setPlugins(result);    }}
protected void maven_f2341_0(PluginExecution target, PluginExecution source, boolean sourceDominant, Map<Object, Object> context)
{    super.mergePluginExecution(target, source, sourceDominant, context);    target.setPriority(Math.min(target.getPriority(), source.getPriority()));}
public static boolean maven_f2342_0(T s1, T s2)
{    return Objects.equals(s1, s2);}
public static int maven_f2343_0(Object obj)
{    return obj != null ? obj.hashCode() : 0;}
public static int maven_f2344_0(Plugin plugin)
{    int hash = 17;    hash = hash * 31 + Objects.hashCode(plugin.getGroupId());    hash = hash * 31 + Objects.hashCode(plugin.getArtifactId());    hash = hash * 31 + Objects.hashCode(plugin.getVersion());    hash = hash * 31 + (plugin.isExtensions() ? 1 : 0);    for (Dependency dependency : plugin.getDependencies()) {        hash = hash * 31 + Objects.hashCode(dependency.getGroupId());        hash = hash * 31 + Objects.hashCode(dependency.getArtifactId());        hash = hash * 31 + Objects.hashCode(dependency.getVersion());        hash = hash * 31 + Objects.hashCode(dependency.getType());        hash = hash * 31 + Objects.hashCode(dependency.getClassifier());        hash = hash * 31 + Objects.hashCode(dependency.getScope());        for (Exclusion exclusion : dependency.getExclusions()) {            hash = hash * 31 + Objects.hashCode(exclusion.getGroupId());            hash = hash * 31 + Objects.hashCode(exclusion.getArtifactId());        }    }    return hash;}
public static boolean maven_f2345_0(Plugin a, Plugin b)
{    return     Objects.equals(a.getArtifactId(), b.getArtifactId()) &&     Objects.equals(a.getGroupId(), b.getGroupId()) &&     Objects.equals(a.getVersion(), b.getVersion()) &&     a.isExtensions() == b.isExtensions() && dependenciesEquals(a.getDependencies(), b.getDependencies());}
private static boolean maven_f2346_0(List<Dependency> a, List<Dependency> b)
{    if (a.size() != b.size()) {        return false;    }    Iterator<Dependency> aI = a.iterator();    Iterator<Dependency> bI = b.iterator();    while (aI.hasNext()) {        Dependency aD = aI.next();        Dependency bD = bI.next();        boolean r =         Objects.equals(aD.getGroupId(), bD.getGroupId()) &&         Objects.equals(aD.getArtifactId(), bD.getArtifactId()) &&         Objects.equals(aD.getVersion(), bD.getVersion()) &&         Objects.equals(aD.getType(), bD.getType()) &&         Objects.equals(aD.getClassifier(), bD.getClassifier()) && Objects.equals(aD.getScope(), bD.getScope());        r &= exclusionsEquals(aD.getExclusions(), bD.getExclusions());        if (!r) {            return false;        }    }    return true;}
private static boolean maven_f2347_0(List<Exclusion> a, List<Exclusion> b)
{    if (a.size() != b.size()) {        return false;    }    Iterator<Exclusion> aI = a.iterator();    Iterator<Exclusion> bI = b.iterator();    while (aI.hasNext()) {        Exclusion aD = aI.next();        Exclusion bD = bI.next();        boolean r =         Objects.equals(aD.getGroupId(), bD.getGroupId()) && Objects.equals(aD.getArtifactId(), bD.getArtifactId());        if (!r) {            return false;        }    }    return true;}
public void maven_f2348_0(MojoExecutionEvent event) throws MojoExecutionException
{    for (MojoExecutionListener listener : listeners) {        listener.beforeMojoExecution(event);    }}
public void maven_f2349_0(MojoExecutionEvent event) throws MojoExecutionException
{    for (MojoExecutionListener listener : listeners) {        listener.afterMojoExecutionSuccess(event);    }}
public void maven_f2350_0(MojoExecutionEvent event)
{    for (MojoExecutionListener listener : listeners) {        listener.afterExecutionFailure(event);    }}
public Plugin maven_f2351_0()
{    return plugin;}
public voidf2352_1String fieldName, Object value, Object target)
{    if (logger.isDebugEnabled()) {            }}
public voidf2353_1String fieldName, Object value, Object target)
{    if (logger.isDebugEnabled()) {            }}
private String maven_f2354_0(Object obj)
{    String str;    if (obj != null && obj.getClass().isArray()) {        int n = Array.getLength(obj);        StringBuilder buf = new StringBuilder(256);        buf.append('[');        for (int i = 0; i < n; i++) {            if (i > 0) {                buf.append(", ");            }            buf.append(String.valueOf(Array.get(obj, i)));        }        buf.append(']');        str = buf.toString();    } else {        str = String.valueOf(obj);    }    return str;}
public void maven_f2355_0(final List<MojoExecutionListener> listeners)
{    this.mojoExecutionListeners = listeners;    this.mojoExecutionListener = new CompoundMojoExecutionListener(listeners);}
public PluginDescriptor maven_f2356_0(Plugin plugin, List<RemoteRepository> repositories, RepositorySystemSession session) throws PluginNotFoundException, PluginResolutionException, PluginDescriptorParsingException, InvalidPluginDescriptorException
{    return mavenPluginManager.getPluginDescriptor(plugin, repositories, session);}
public void maven_f2357_0(MavenSession session, MojoExecution mojoExecution) throws MojoFailureException, MojoExecutionException, PluginConfigurationException, PluginManagerException
{    MavenProject project = session.getCurrentProject();    MojoDescriptor mojoDescriptor = mojoExecution.getMojoDescriptor();    Mojo mojo = null;    ClassRealm pluginRealm;    try {        pluginRealm = getPluginRealm(session, mojoDescriptor.getPluginDescriptor());    } catch (PluginResolutionException e) {        throw new PluginExecutionException(mojoExecution, project, e);    }    ClassLoader oldClassLoader = Thread.currentThread().getContextClassLoader();    Thread.currentThread().setContextClassLoader(pluginRealm);    MavenSession oldSession = legacySupport.getSession();    scope.enter();    try {        scope.seed(MavenProject.class, project);        scope.seed(MojoExecution.class, mojoExecution);        mojo = mavenPluginManager.getConfiguredMojo(Mojo.class, session, mojoExecution);        legacySupport.setSession(session);                try {            MojoExecutionEvent mojoExecutionEvent = new MojoExecutionEvent(session, project, mojoExecution, mojo);            mojoExecutionListener.beforeMojoExecution(mojoExecutionEvent);            mojo.execute();            mojoExecutionListener.afterMojoExecutionSuccess(mojoExecutionEvent);        } catch (ClassCastException e) {                        throw e;        } catch (RuntimeException e) {            throw new PluginExecutionException(mojoExecution, project, e);        }    } catch (PluginContainerException e) {        mojoExecutionListener.afterExecutionFailure(new MojoExecutionEvent(session, project, mojoExecution, mojo, e));        throw new PluginExecutionException(mojoExecution, project, e);    } catch (NoClassDefFoundError e) {        mojoExecutionListener.afterExecutionFailure(new MojoExecutionEvent(session, project, mojoExecution, mojo, e));        ByteArrayOutputStream os = new ByteArrayOutputStream(1024);        PrintStream ps = new PrintStream(os);        ps.println("A required class was missing while executing " + mojoDescriptor.getId() + ": " + e.getMessage());        pluginRealm.display(ps);        Exception wrapper = new PluginContainerException(mojoDescriptor, pluginRealm, os.toString(), e);        throw new PluginExecutionException(mojoExecution, project, wrapper);    } catch (LinkageError e) {        mojoExecutionListener.afterExecutionFailure(new MojoExecutionEvent(session, project, mojoExecution, mojo, e));        ByteArrayOutputStream os = new ByteArrayOutputStream(1024);        PrintStream ps = new PrintStream(os);        ps.println("An API incompatibility was encountered while executing " + mojoDescriptor.getId() + ": " + e.getClass().getName() + ": " + e.getMessage());        pluginRealm.display(ps);        Exception wrapper = new PluginContainerException(mojoDescriptor, pluginRealm, os.toString(), e);        throw new PluginExecutionException(mojoExecution, project, wrapper);    } catch (ClassCastException e) {        mojoExecutionListener.afterExecutionFailure(new MojoExecutionEvent(session, project, mojoExecution, mojo, e));        ByteArrayOutputStream os = new ByteArrayOutputStream(1024);        PrintStream ps = new PrintStream(os);        ps.println("A type incompatibility occurred while executing " + mojoDescriptor.getId() + ": " + e.getMessage());        pluginRealm.display(ps);        throw new PluginExecutionException(mojoExecution, project, os.toString(), e);    } catch (RuntimeException e) {        mojoExecutionListener.afterExecutionFailure(new MojoExecutionEvent(session, project, mojoExecution, mojo, e));        throw e;    } finally {        mavenPluginManager.releaseMojo(mojo, mojoExecution);        scope.exit();        Thread.currentThread().setContextClassLoader(oldClassLoader);        legacySupport.setSession(oldSession);    }}
public ClassRealm maven_f2358_0(MavenSession session, PluginDescriptor pluginDescriptor) throws PluginResolutionException, PluginManagerException
{    ClassRealm pluginRealm = pluginDescriptor.getClassRealm();    if (pluginRealm != null) {        return pluginRealm;    }    mavenPluginManager.setupPluginRealm(pluginDescriptor, session, null, null, null);    return pluginDescriptor.getClassRealm();}
public MojoDescriptor maven_f2359_0(Plugin plugin, String goal, List<RemoteRepository> repositories, RepositorySystemSession session) throws PluginNotFoundException, PluginResolutionException, PluginDescriptorParsingException, MojoNotFoundException, InvalidPluginDescriptorException
{    return mavenPluginManager.getMojoDescriptor(plugin, goal, repositories, session);}
public int maven_f2360_0()
{    return hashCode;}
public boolean maven_f2361_0(Object o)
{    if (o == this) {        return true;    }    if (!(o instanceof CacheKey)) {        return false;    }    CacheKey other = (CacheKey) o;    return ids.equals(other.ids) && files.equals(other.files) && timestamps.equals(other.timestamps) && sizes.equals(other.sizes);}
public String maven_f2362_0()
{    return files.toString();}
public Key maven_f2363_0(List<Artifact> extensionArtifacts)
{    return new CacheKey(extensionArtifacts);}
public CacheRecord maven_f2364_0(Key key)
{    return cache.get(key);}
public CacheRecord maven_f2365_0(Key key, ClassRealm extensionRealm, ExtensionDescriptor extensionDescriptor, List<Artifact> artifacts)
{    Objects.requireNonNull(extensionRealm, "extensionRealm cannot be null");    if (cache.containsKey(key)) {        throw new IllegalStateException("Duplicate extension realm for extension " + key);    }    CacheRecord record = new CacheRecord(extensionRealm, extensionDescriptor, artifacts);    cache.put(key, record);    return record;}
public void maven_f2366_0()
{    for (CacheRecord record : cache.values()) {        ClassRealm realm = record.getRealm();        try {            realm.getWorld().disposeRealm(realm.getId());        } catch (NoSuchRealmException e) {                }    }    cache.clear();}
public void maven_f2367_0(MavenProject project, Key key, CacheRecord record)
{}
public void maven_f2368_0()
{    flush();}
public String maven_f2369_0()
{    return plugin.getId();}
public int maven_f2370_0()
{    return hashCode;}
public boolean maven_f2371_0(Object o)
{    if (o == this) {        return true;    }    if (!(o instanceof CacheKey)) {        return false;    }    CacheKey that = (CacheKey) o;    return CacheUtils.pluginEquals(plugin, that.plugin) && Objects.equals(workspace, that.workspace) && Objects.equals(localRepo, that.localRepo) && RepositoryUtils.repositoriesEquals(repositories, that.repositories) && Objects.equals(filter, that.filter);}
public Key maven_f2372_0(Plugin plugin, DependencyFilter extensionFilter, List<RemoteRepository> repositories, RepositorySystemSession session)
{    return new CacheKey(plugin, extensionFilter, repositories, session);}
public CacheRecord maven_f2373_0(Key key) throws PluginResolutionException
{    CacheRecord cacheRecord = cache.get(key);    if (cacheRecord != null && cacheRecord.getException() != null) {        throw cacheRecord.getException();    }    return cacheRecord;}
public CacheRecord maven_f2374_0(Key key, List<Artifact> pluginArtifacts)
{    Objects.requireNonNull(pluginArtifacts, "pluginArtifacts cannot be null");    assertUniqueKey(key);    CacheRecord record = new CacheRecord(Collections.unmodifiableList(new ArrayList<>(pluginArtifacts)));    cache.put(key, record);    return record;}
protected void maven_f2375_0(Key key)
{    if (cache.containsKey(key)) {        throw new IllegalStateException("Duplicate artifact resolution result for plugin " + key);    }}
public CacheRecord maven_f2376_0(Key key, PluginResolutionException exception)
{    Objects.requireNonNull(exception, "exception cannot be null");    assertUniqueKey(key);    CacheRecord record = new CacheRecord(exception);    cache.put(key, record);    return record;}
public void maven_f2377_0()
{    cache.clear();}
protected static int maven_f2378_0(Plugin plugin)
{    return CacheUtils.pluginHashCode(plugin);}
protected static boolean maven_f2379_0(Plugin a, Plugin b)
{    return CacheUtils.pluginEquals(a, b);}
public void maven_f2380_0(MavenProject project, Key cacheKey, CacheRecord record)
{}
public void maven_f2381_0()
{    descriptors.clear();}
public Key maven_f2382_0(Plugin plugin, List<RemoteRepository> repositories, RepositorySystemSession session)
{    return new CacheKey(plugin, repositories, session);}
public PluginDescriptor maven_f2383_0(Key cacheKey)
{    return clone(descriptors.get(cacheKey));}
public void maven_f2384_0(Key cacheKey, PluginDescriptor pluginDescriptor)
{    descriptors.put(cacheKey, clone(pluginDescriptor));}
protected static PluginDescriptor maven_f2385_0(PluginDescriptor original)
{    PluginDescriptor clone = null;    if (original != null) {        clone = new PluginDescriptor();        clone.setGroupId(original.getGroupId());        clone.setArtifactId(original.getArtifactId());        clone.setVersion(original.getVersion());        clone.setGoalPrefix(original.getGoalPrefix());        clone.setInheritedByDefault(original.isInheritedByDefault());        clone.setName(original.getName());        clone.setDescription(original.getDescription());        clone.setRequiredMavenVersion(original.getRequiredMavenVersion());        clone.setPluginArtifact(ArtifactUtils.copyArtifactSafe(original.getPluginArtifact()));        clone.setComponents(clone(original.getMojos(), clone));        clone.setId(original.getId());        clone.setIsolatedRealm(original.isIsolatedRealm());        clone.setSource(original.getSource());        clone.setDependencies(original.getDependencies());    }    return clone;}
private static List<ComponentDescriptor<?>> maven_f2386_0(List<MojoDescriptor> mojos, PluginDescriptor pluginDescriptor)
{    List<ComponentDescriptor<?>> clones = null;    if (mojos != null) {        clones = new ArrayList<>(mojos.size());        for (MojoDescriptor mojo : mojos) {            MojoDescriptor clone = mojo.clone();            clone.setPluginDescriptor(pluginDescriptor);            clones.add(clone);        }    }    return clones;}
public int maven_f2387_0()
{    return hashCode;}
public boolean maven_f2388_0(Object obj)
{    if (this == obj) {        return true;    }    if (!(obj instanceof CacheKey)) {        return false;    }    CacheKey that = (CacheKey) obj;    return Objects.equals(this.artifactId, that.artifactId) && Objects.equals(this.groupId, that.groupId) && Objects.equals(this.version, that.version) && Objects.equals(this.localRepo, that.localRepo) && Objects.equals(this.workspace, that.workspace) && RepositoryUtils.repositoriesEquals(this.repositories, that.repositories);}
public String maven_f2389_0()
{    return groupId + ':' + artifactId + ':' + version;}
private static int maven_f2390_0(Object obj)
{    return obj != null ? obj.hashCode() : 0;}
public String maven_f2391_0()
{    return plugin.getId();}
public int maven_f2392_0()
{    return hashCode;}
public boolean maven_f2393_0(Object o)
{    if (o == this) {        return true;    }    if (!(o instanceof CacheKey)) {        return false;    }    CacheKey that = (CacheKey) o;    return parentRealm == that.parentRealm && CacheUtils.pluginEquals(plugin, that.plugin) && Objects.equals(workspace, that.workspace) && Objects.equals(localRepo, that.localRepo) && RepositoryUtils.repositoriesEquals(this.repositories, that.repositories) && Objects.equals(filter, that.filter) && Objects.equals(foreignImports, that.foreignImports);}
public Key maven_f2394_0(Plugin plugin, ClassLoader parentRealm, Map<String, ClassLoader> foreignImports, DependencyFilter dependencyFilter, List<RemoteRepository> repositories, RepositorySystemSession session)
{    return new CacheKey(plugin, parentRealm, foreignImports, dependencyFilter, repositories, session);}
public CacheRecord maven_f2395_0(Key key)
{    return cache.get(key);}
public CacheRecord maven_f2396_0(Key key, ClassRealm pluginRealm, List<Artifact> pluginArtifacts)
{    Objects.requireNonNull(pluginRealm, "pluginRealm cannot be null");    Objects.requireNonNull(pluginArtifacts, "pluginArtifacts cannot be null");    if (cache.containsKey(key)) {        throw new IllegalStateException("Duplicate plugin realm for plugin " + key);    }    CacheRecord record = new CacheRecord(pluginRealm, pluginArtifacts);    cache.put(key, record);    return record;}
public void maven_f2397_0()
{    for (CacheRecord record : cache.values()) {        ClassRealm realm = record.getRealm();        try {            realm.getWorld().disposeRealm(realm.getId());        } catch (NoSuchRealmException e) {                }    }    cache.clear();}
protected static int maven_f2398_0(Plugin plugin)
{    return CacheUtils.pluginHashCode(plugin);}
protected static boolean maven_f2399_0(Plugin a, Plugin b)
{    return CacheUtils.pluginEquals(a, b);}
public void maven_f2400_0(MavenProject project, Key key, CacheRecord record)
{}
public void maven_f2401_0()
{    flush();}
public ClassRealm maven_f2402_0()
{    return realm;}
public ExtensionDescriptor maven_f2403_0()
{    return descriptor;}
public List<Artifact> maven_f2404_0()
{    return artifacts;}
public void maven_f2405_0(MavenSession session)
{    AtomicReference<MavenSession> reference = DefaultLegacySupport.SESSION.get();    if (reference != null) {        reference.set(null);    }    if (session == null && reference != null) {        DefaultLegacySupport.SESSION.remove();    } else {        DefaultLegacySupport.SESSION.set(new AtomicReference<>(session));    }}
public MavenSession maven_f2406_0()
{    AtomicReference<MavenSession> currentSession = DefaultLegacySupport.SESSION.get();    return currentSession != null ? currentSession.get() : null;}
public RepositorySystemSession maven_f2407_0()
{    MavenSession session = getSession();    return (session != null) ? session.getRepositorySession() : null;}
public synchronized PluginDescriptor maven_f2408_0(Plugin plugin, List<RemoteRepository> repositories, RepositorySystemSession session) throws PluginResolutionException, PluginDescriptorParsingException, InvalidPluginDescriptorException
{    PluginDescriptorCache.Key cacheKey = pluginDescriptorCache.createKey(plugin, repositories, session);    PluginDescriptor pluginDescriptor = pluginDescriptorCache.get(cacheKey);    if (pluginDescriptor == null) {        org.eclipse.aether.artifact.Artifact artifact = pluginDependenciesResolver.resolve(plugin, repositories, session);        Artifact pluginArtifact = RepositoryUtils.toArtifact(artifact);        pluginDescriptor = extractPluginDescriptor(pluginArtifact, plugin);        pluginDescriptor.setRequiredMavenVersion(artifact.getProperty("requiredMavenVersion", null));        pluginDescriptorCache.put(cacheKey, pluginDescriptor);    }    pluginDescriptor.setPlugin(plugin);    return pluginDescriptor;}
private PluginDescriptor maven_f2409_0(Artifact pluginArtifact, Plugin plugin) throws PluginDescriptorParsingException, InvalidPluginDescriptorException
{    PluginDescriptor pluginDescriptor = null;    File pluginFile = pluginArtifact.getFile();    try {        if (pluginFile.isFile()) {            try (JarFile pluginJar = new JarFile(pluginFile, false)) {                ZipEntry pluginDescriptorEntry = pluginJar.getEntry(getPluginDescriptorLocation());                if (pluginDescriptorEntry != null) {                    InputStream is = pluginJar.getInputStream(pluginDescriptorEntry);                    pluginDescriptor = parsePluginDescriptor(is, plugin, pluginFile.getAbsolutePath());                }            }        } else {            File pluginXml = new File(pluginFile, getPluginDescriptorLocation());            if (pluginXml.isFile()) {                try (InputStream is = new BufferedInputStream(new FileInputStream(pluginXml))) {                    pluginDescriptor = parsePluginDescriptor(is, plugin, pluginXml.getAbsolutePath());                }            }        }        if (pluginDescriptor == null) {            throw new IOException("No plugin descriptor found at " + getPluginDescriptorLocation());        }    } catch (IOException e) {        throw new PluginDescriptorParsingException(plugin, pluginFile.getAbsolutePath(), e);    }    MavenPluginValidator validator = new MavenPluginValidator(pluginArtifact);    validator.validate(pluginDescriptor);    if (validator.hasErrors()) {        throw new InvalidPluginDescriptorException("Invalid plugin descriptor for " + plugin.getId() + " (" + pluginFile + ")", validator.getErrors());    }    pluginDescriptor.setPluginArtifact(pluginArtifact);    return pluginDescriptor;}
private String maven_f2410_0()
{    return "META-INF/maven/plugin.xml";}
private PluginDescriptor maven_f2411_0(InputStream is, Plugin plugin, String descriptorLocation) throws PluginDescriptorParsingException
{    try {        Reader reader = ReaderFactory.newXmlReader(is);        PluginDescriptor pluginDescriptor = builder.build(reader, descriptorLocation);        return pluginDescriptor;    } catch (IOException | PlexusConfigurationException e) {        throw new PluginDescriptorParsingException(plugin, descriptorLocation, e);    }}
public MojoDescriptor maven_f2412_0(Plugin plugin, String goal, List<RemoteRepository> repositories, RepositorySystemSession session) throws MojoNotFoundException, PluginResolutionException, PluginDescriptorParsingException, InvalidPluginDescriptorException
{    PluginDescriptor pluginDescriptor = getPluginDescriptor(plugin, repositories, session);    MojoDescriptor mojoDescriptor = pluginDescriptor.getMojo(goal);    if (mojoDescriptor == null) {        throw new MojoNotFoundException(goal, pluginDescriptor);    }    return mojoDescriptor;}
public voidf2413_1PluginDescriptor pluginDescriptor) throws PluginIncompatibleException
{    String requiredMavenVersion = pluginDescriptor.getRequiredMavenVersion();    if (StringUtils.isNotBlank(requiredMavenVersion)) {        try {            if (!runtimeInformation.isMavenVersion(requiredMavenVersion)) {                throw new PluginIncompatibleException(pluginDescriptor.getPlugin(), "The plugin " + pluginDescriptor.getId() + " requires Maven version " + requiredMavenVersion);            }        } catch (RuntimeException e) {                    }    }}
public synchronized void maven_f2414_0(PluginDescriptor pluginDescriptor, MavenSession session, ClassLoader parent, List<String> imports, DependencyFilter filter) throws PluginResolutionException, PluginContainerException
{    Plugin plugin = pluginDescriptor.getPlugin();    MavenProject project = session.getCurrentProject();    if (plugin.isExtensions()) {        ExtensionRealmCache.CacheRecord extensionRecord;        try {            RepositorySystemSession repositorySession = session.getRepositorySession();            extensionRecord = setupExtensionsRealm(project, plugin, repositorySession);        } catch (PluginManagerException e) {                        throw new IllegalStateException(e);        }        ClassRealm pluginRealm = extensionRecord.getRealm();        List<Artifact> pluginArtifacts = extensionRecord.getArtifacts();        for (ComponentDescriptor<?> componentDescriptor : pluginDescriptor.getComponents()) {            componentDescriptor.setRealm(pluginRealm);        }        pluginDescriptor.setClassRealm(pluginRealm);        pluginDescriptor.setArtifacts(pluginArtifacts);    } else {        Map<String, ClassLoader> foreignImports = calcImports(project, parent, imports);        PluginRealmCache.Key cacheKey = pluginRealmCache.createKey(plugin, parent, foreignImports, filter, project.getRemotePluginRepositories(), session.getRepositorySession());        PluginRealmCache.CacheRecord cacheRecord = pluginRealmCache.get(cacheKey);        if (cacheRecord != null) {            pluginDescriptor.setClassRealm(cacheRecord.getRealm());            pluginDescriptor.setArtifacts(new ArrayList<>(cacheRecord.getArtifacts()));            for (ComponentDescriptor<?> componentDescriptor : pluginDescriptor.getComponents()) {                componentDescriptor.setRealm(cacheRecord.getRealm());            }        } else {            createPluginRealm(pluginDescriptor, session, parent, foreignImports, filter);            cacheRecord = pluginRealmCache.put(cacheKey, pluginDescriptor.getClassRealm(), pluginDescriptor.getArtifacts());        }        pluginRealmCache.register(project, cacheKey, cacheRecord);    }}
private void maven_f2415_0(PluginDescriptor pluginDescriptor, MavenSession session, ClassLoader parent, Map<String, ClassLoader> foreignImports, DependencyFilter filter) throws PluginResolutionException, PluginContainerException
{    Plugin plugin = Objects.requireNonNull(pluginDescriptor.getPlugin(), "pluginDescriptor.plugin cannot be null");    Artifact pluginArtifact = Objects.requireNonNull(pluginDescriptor.getPluginArtifact(), "pluginDescriptor.pluginArtifact cannot be null");    MavenProject project = session.getCurrentProject();    final ClassRealm pluginRealm;    final List<Artifact> pluginArtifacts;    RepositorySystemSession repositorySession = session.getRepositorySession();    DependencyFilter dependencyFilter = project.getExtensionDependencyFilter();    dependencyFilter = AndDependencyFilter.newInstance(dependencyFilter, filter);    DependencyNode root = pluginDependenciesResolver.resolve(plugin, RepositoryUtils.toArtifact(pluginArtifact), dependencyFilter, project.getRemotePluginRepositories(), repositorySession);    PreorderNodeListGenerator nlg = new PreorderNodeListGenerator();    root.accept(nlg);    pluginArtifacts = toMavenArtifacts(root, nlg);    pluginRealm = classRealmManager.createPluginRealm(plugin, parent, null, foreignImports, toAetherArtifacts(pluginArtifacts));    discoverPluginComponents(pluginRealm, plugin, pluginDescriptor);    pluginDescriptor.setClassRealm(pluginRealm);    pluginDescriptor.setArtifacts(pluginArtifacts);}
private void maven_f2416_0(final ClassRealm pluginRealm, Plugin plugin, PluginDescriptor pluginDescriptor) throws PluginContainerException
{    try {        if (pluginDescriptor != null) {            for (ComponentDescriptor<?> componentDescriptor : pluginDescriptor.getComponents()) {                componentDescriptor.setRealm(pluginRealm);                container.addComponentDescriptor(componentDescriptor);            }        }        ((DefaultPlexusContainer) container).discoverComponents(pluginRealm, new SessionScopeModule(container), new MojoExecutionScopeModule(container));    } catch (ComponentLookupException | CycleDetectedInComponentGraphException e) {        throw new PluginContainerException(plugin, pluginRealm, "Error in component graph of plugin " + plugin.getId() + ": " + e.getMessage(), e);    }}
private List<org.eclipse.aether.artifact.Artifact> maven_f2417_0(final List<Artifact> pluginArtifacts)
{    return new ArrayList<>(RepositoryUtils.toArtifacts(pluginArtifacts));}
private List<Artifact> maven_f2418_0(DependencyNode root, PreorderNodeListGenerator nlg)
{    List<Artifact> artifacts = new ArrayList<>(nlg.getNodes().size());    RepositoryUtils.toArtifacts(artifacts, Collections.singleton(root), Collections.<String>emptyList(), null);    for (Iterator<Artifact> it = artifacts.iterator(); it.hasNext(); ) {        Artifact artifact = it.next();        if (artifact.getFile() == null) {            it.remove();        }    }    return Collections.unmodifiableList(artifacts);}
private Map<String, ClassLoader> maven_f2419_0(MavenProject project, ClassLoader parent, List<String> imports)
{    Map<String, ClassLoader> foreignImports = new HashMap<>();    ClassLoader projectRealm = project.getClassRealm();    if (projectRealm != null) {        foreignImports.put("", projectRealm);    } else {        foreignImports.put("", classRealmManager.getMavenApiRealm());    }    if (parent != null && imports != null) {        for (String parentImport : imports) {            foreignImports.put(parentImport, parent);        }    }    return foreignImports;}
public Tf2420_1Class<T> mojoInterface, MavenSession session, MojoExecution mojoExecution) throws PluginConfigurationException, PluginContainerException
{    MojoDescriptor mojoDescriptor = mojoExecution.getMojoDescriptor();    PluginDescriptor pluginDescriptor = mojoDescriptor.getPluginDescriptor();    ClassRealm pluginRealm = pluginDescriptor.getClassRealm();    if (logger.isDebugEnabled()) {            }                ClassRealm oldLookupRealm = container.setLookupRealm(pluginRealm);    ClassLoader oldClassLoader = Thread.currentThread().getContextClassLoader();    Thread.currentThread().setContextClassLoader(pluginRealm);    try {        T mojo;        try {            mojo = container.lookup(mojoInterface, mojoDescriptor.getRoleHint());        } catch (ComponentLookupException e) {            Throwable cause = e.getCause();            while (cause != null && !(cause instanceof LinkageError) && !(cause instanceof ClassNotFoundException)) {                cause = cause.getCause();            }            if ((cause instanceof NoClassDefFoundError) || (cause instanceof ClassNotFoundException)) {                ByteArrayOutputStream os = new ByteArrayOutputStream(1024);                PrintStream ps = new PrintStream(os);                ps.println("Unable to load the mojo '" + mojoDescriptor.getGoal() + "' in the plugin '" + pluginDescriptor.getId() + "'. A required class is missing: " + cause.getMessage());                pluginRealm.display(ps);                throw new PluginContainerException(mojoDescriptor, pluginRealm, os.toString(), cause);            } else if (cause instanceof LinkageError) {                ByteArrayOutputStream os = new ByteArrayOutputStream(1024);                PrintStream ps = new PrintStream(os);                ps.println("Unable to load the mojo '" + mojoDescriptor.getGoal() + "' in the plugin '" + pluginDescriptor.getId() + "' due to an API incompatibility: " + e.getClass().getName() + ": " + cause.getMessage());                pluginRealm.display(ps);                throw new PluginContainerException(mojoDescriptor, pluginRealm, os.toString(), cause);            }            throw new PluginContainerException(mojoDescriptor, pluginRealm, "Unable to load the mojo '" + mojoDescriptor.getGoal() + "' (or one of its required components) from the plugin '" + pluginDescriptor.getId() + "'", e);        }        if (mojo instanceof ContextEnabled) {            MavenProject project = session.getCurrentProject();            Map<String, Object> pluginContext = session.getPluginContext(pluginDescriptor, project);            if (pluginContext != null) {                pluginContext.put("project", project);                pluginContext.put("pluginDescriptor", pluginDescriptor);                ((ContextEnabled) mojo).setPluginContext(pluginContext);            }        }        if (mojo instanceof Mojo) {            Logger mojoLogger = loggerManager.getLoggerForComponent(mojoDescriptor.getImplementation());            ((Mojo) mojo).setLog(new DefaultLog(mojoLogger));        }        Xpp3Dom dom = mojoExecution.getConfiguration();        PlexusConfiguration pomConfiguration;        if (dom == null) {            pomConfiguration = new XmlPlexusConfiguration("configuration");        } else {            pomConfiguration = new XmlPlexusConfiguration(dom);        }        ExpressionEvaluator expressionEvaluator = new PluginParameterExpressionEvaluator(session, mojoExecution);        populatePluginFields(mojo, mojoDescriptor, pluginRealm, pomConfiguration, expressionEvaluator);        return mojo;    } finally {        Thread.currentThread().setContextClassLoader(oldClassLoader);        container.setLookupRealm(oldLookupRealm);    }}
private voidf2421_1Object mojo, MojoDescriptor mojoDescriptor, ClassRealm pluginRealm, PlexusConfiguration configuration, ExpressionEvaluator expressionEvaluator) throws PluginConfigurationException
{    ComponentConfigurator configurator = null;    String configuratorId = mojoDescriptor.getComponentConfigurator();    if (StringUtils.isEmpty(configuratorId)) {        configuratorId = "basic";    }    try {                        configurator = container.lookup(ComponentConfigurator.class, configuratorId);        ConfigurationListener listener = new DebugConfigurationListener(logger);        ValidatingConfigurationListener validator = new ValidatingConfigurationListener(mojo, mojoDescriptor, listener);                configurator.configureComponent(mojo, configuration, expressionEvaluator, pluginRealm, validator);                Collection<Parameter> missingParameters = validator.getMissingParameters();        if (!missingParameters.isEmpty()) {            if ("basic".equals(configuratorId)) {                throw new PluginParameterException(mojoDescriptor, new ArrayList<>(missingParameters));            } else {                /*                     * NOTE: Other configurators like the map-oriented one don't call into the listener, so do it the                     * hard way.                     */                validateParameters(mojoDescriptor, configuration, expressionEvaluator);            }        }    } catch (ComponentConfigurationException e) {        String message = "Unable to parse configuration of mojo " + mojoDescriptor.getId();        if (e.getFailedConfiguration() != null) {            message += " for parameter " + e.getFailedConfiguration().getName();        }        message += ": " + e.getMessage();        throw new PluginConfigurationException(mojoDescriptor.getPluginDescriptor(), message, e);    } catch (ComponentLookupException e) {        throw new PluginConfigurationException(mojoDescriptor.getPluginDescriptor(), "Unable to retrieve component configurator " + configuratorId + " for configuration of mojo " + mojoDescriptor.getId(), e);    } catch (NoClassDefFoundError e) {        ByteArrayOutputStream os = new ByteArrayOutputStream(1024);        PrintStream ps = new PrintStream(os);        ps.println("A required class was missing during configuration of mojo " + mojoDescriptor.getId() + ": " + e.getMessage());        pluginRealm.display(ps);        throw new PluginConfigurationException(mojoDescriptor.getPluginDescriptor(), os.toString(), e);    } catch (LinkageError e) {        ByteArrayOutputStream os = new ByteArrayOutputStream(1024);        PrintStream ps = new PrintStream(os);        ps.println("An API incompatibility was encountered during configuration of mojo " + mojoDescriptor.getId() + ": " + e.getClass().getName() + ": " + e.getMessage());        pluginRealm.display(ps);        throw new PluginConfigurationException(mojoDescriptor.getPluginDescriptor(), os.toString(), e);    } finally {        if (configurator != null) {            try {                container.release(configurator);            } catch (ComponentLifecycleException e) {                            }        }    }}
private void maven_f2422_0(MojoDescriptor mojoDescriptor, PlexusConfiguration configuration, ExpressionEvaluator expressionEvaluator) throws ComponentConfigurationException, PluginParameterException
{    if (mojoDescriptor.getParameters() == null) {        return;    }    List<Parameter> invalidParameters = new ArrayList<>();    for (Parameter parameter : mojoDescriptor.getParameters()) {        if (!parameter.isRequired()) {            continue;        }        Object value = null;        PlexusConfiguration config = configuration.getChild(parameter.getName(), false);        if (config != null) {            String expression = config.getValue(null);            try {                value = expressionEvaluator.evaluate(expression);                if (value == null) {                    value = config.getAttribute("default-value", null);                }            } catch (ExpressionEvaluationException e) {                String msg = "Error evaluating the expression '" + expression + "' for configuration value '" + configuration.getName() + "'";                throw new ComponentConfigurationException(configuration, msg, e);            }        }        if (value == null && (config == null || config.getChildCount() <= 0)) {            invalidParameters.add(parameter);        }    }    if (!invalidParameters.isEmpty()) {        throw new PluginParameterException(mojoDescriptor, invalidParameters);    }}
public voidf2423_1Object mojo, MojoExecution mojoExecution)
{    if (mojo != null) {        try {            container.release(mojo);        } catch (ComponentLifecycleException e) {            String goalExecId = mojoExecution.getGoal();            if (mojoExecution.getExecutionId() != null) {                goalExecId += " {execution: " + mojoExecution.getExecutionId() + "}";            }                    }    }}
public ExtensionRealmCache.CacheRecordf2424_1MavenProject project, Plugin plugin, RepositorySystemSession session) throws PluginManagerException
{    @SuppressWarnings("unchecked")    Map<String, ExtensionRealmCache.CacheRecord> pluginRealms = (Map<String, ExtensionRealmCache.CacheRecord>) project.getContextValue(KEY_EXTENSIONS_REALMS);    if (pluginRealms == null) {        pluginRealms = new HashMap<>();        project.setContextValue(KEY_EXTENSIONS_REALMS, pluginRealms);    }    final String pluginKey = plugin.getId();    ExtensionRealmCache.CacheRecord extensionRecord = pluginRealms.get(pluginKey);    if (extensionRecord != null) {        return extensionRecord;    }    final List<RemoteRepository> repositories = project.getRemotePluginRepositories();        if (plugin.getVersion() == null) {        PluginVersionRequest versionRequest = new DefaultPluginVersionRequest(plugin, session, repositories);        try {            plugin.setVersion(pluginVersionResolver.resolve(versionRequest).getVersion());        } catch (PluginVersionResolutionException e) {            throw new PluginManagerException(plugin, e.getMessage(), e);        }    }        List<Artifact> artifacts;    PluginArtifactsCache.Key cacheKey = pluginArtifactsCache.createKey(plugin, null, repositories, session);    PluginArtifactsCache.CacheRecord recordArtifacts;    try {        recordArtifacts = pluginArtifactsCache.get(cacheKey);    } catch (PluginResolutionException e) {        throw new PluginManagerException(plugin, e.getMessage(), e);    }    if (recordArtifacts != null) {        artifacts = recordArtifacts.getArtifacts();    } else {        try {            artifacts = resolveExtensionArtifacts(plugin, repositories, session);            recordArtifacts = pluginArtifactsCache.put(cacheKey, artifacts);        } catch (PluginResolutionException e) {            pluginArtifactsCache.put(cacheKey, e);            pluginArtifactsCache.register(project, cacheKey, recordArtifacts);            throw new PluginManagerException(plugin, e.getMessage(), e);        }    }    pluginArtifactsCache.register(project, cacheKey, recordArtifacts);        final ExtensionRealmCache.Key extensionKey = extensionRealmCache.createKey(artifacts);    extensionRecord = extensionRealmCache.get(extensionKey);    if (extensionRecord == null) {        ClassRealm extensionRealm = classRealmManager.createExtensionRealm(plugin, toAetherArtifacts(artifacts));                PluginDescriptor pluginDescriptor = null;        if (plugin.isExtensions() && !artifacts.isEmpty()) {                        try {                pluginDescriptor = extractPluginDescriptor(artifacts.get(0), plugin);            } catch (PluginDescriptorParsingException | InvalidPluginDescriptorException e) {                        }        }        discoverPluginComponents(extensionRealm, plugin, pluginDescriptor);        ExtensionDescriptor extensionDescriptor = null;        Artifact extensionArtifact = artifacts.get(0);        try {            extensionDescriptor = extensionDescriptorBuilder.build(extensionArtifact.getFile());        } catch (IOException e) {            String message = "Invalid extension descriptor for " + plugin.getId() + ": " + e.getMessage();            if (logger.isDebugEnabled()) {                            } else {                            }        }        extensionRecord = extensionRealmCache.put(extensionKey, extensionRealm, extensionDescriptor, artifacts);    }    extensionRealmCache.register(project, extensionKey, extensionRecord);    pluginRealms.put(pluginKey, extensionRecord);    return extensionRecord;}
private List<Artifact> maven_f2425_0(Plugin extensionPlugin, List<RemoteRepository> repositories, RepositorySystemSession session) throws PluginResolutionException
{    DependencyNode root = pluginDependenciesResolver.resolve(extensionPlugin, null, null, repositories, session);    PreorderNodeListGenerator nlg = new PreorderNodeListGenerator();    root.accept(nlg);    return toMavenArtifacts(root, nlg);}
private Artifact maven_f2426_0(Plugin plugin, RepositorySystemSession session)
{    return new DefaultArtifact(plugin.getGroupId(), plugin.getArtifactId(), null, "jar", plugin.getVersion(), session.getArtifactTypeRegistry().get("maven-plugin"));}
public Artifact maven_f2427_0(Plugin plugin, List<RemoteRepository> repositories, RepositorySystemSession session) throws PluginResolutionException
{    RequestTrace trace = RequestTrace.newChild(null, plugin);    Artifact pluginArtifact = toArtifact(plugin, session);    try {        DefaultRepositorySystemSession pluginSession = new DefaultRepositorySystemSession(session);        pluginSession.setArtifactDescriptorPolicy(new SimpleArtifactDescriptorPolicy(true, false));        ArtifactDescriptorRequest request = new ArtifactDescriptorRequest(pluginArtifact, repositories, REPOSITORY_CONTEXT);        request.setTrace(trace);        ArtifactDescriptorResult result = repoSystem.readArtifactDescriptor(pluginSession, request);        pluginArtifact = result.getArtifact();        String requiredMavenVersion = (String) result.getProperties().get("prerequisites.maven");        if (requiredMavenVersion != null) {            Map<String, String> props = new LinkedHashMap<>(pluginArtifact.getProperties());            props.put("requiredMavenVersion", requiredMavenVersion);            pluginArtifact = pluginArtifact.setProperties(props);        }    } catch (ArtifactDescriptorException e) {        throw new PluginResolutionException(plugin, e);    }    try {        ArtifactRequest request = new ArtifactRequest(pluginArtifact, repositories, REPOSITORY_CONTEXT);        request.setTrace(trace);        pluginArtifact = repoSystem.resolveArtifact(session, request).getArtifact();    } catch (ArtifactResolutionException e) {        throw new PluginResolutionException(plugin, e);    }    return pluginArtifact;}
public DependencyNode maven_f2428_0(Plugin plugin, DependencyFilter dependencyFilter, List<RemoteRepository> repositories, RepositorySystemSession session) throws PluginResolutionException
{    return resolveInternal(plugin, null, /* pluginArtifact */    dependencyFilter, null, /* transformer */    repositories, session);}
public DependencyNode maven_f2429_0(Plugin plugin, Artifact pluginArtifact, DependencyFilter dependencyFilter, List<RemoteRepository> repositories, RepositorySystemSession session) throws PluginResolutionException
{    return resolveInternal(plugin, pluginArtifact, dependencyFilter, new PlexusUtilsInjector(), repositories, session);}
private DependencyNode maven_f2430_0(Plugin plugin, Artifact pluginArtifact, DependencyFilter dependencyFilter, DependencyGraphTransformer transformer, List<RemoteRepository> repositories, RepositorySystemSession session) throws PluginResolutionException
{    RequestTrace trace = RequestTrace.newChild(null, plugin);    if (pluginArtifact == null) {        pluginArtifact = toArtifact(plugin, session);    }    DependencyFilter collectionFilter = new ScopeDependencyFilter("provided", "test");    DependencyFilter resolutionFilter = AndDependencyFilter.newInstance(collectionFilter, dependencyFilter);    DependencyNode node;    try {        DependencySelector selector = AndDependencySelector.newInstance(session.getDependencySelector(), new WagonExcluder());        transformer = ChainedDependencyGraphTransformer.newInstance(session.getDependencyGraphTransformer(), transformer);        DefaultRepositorySystemSession pluginSession = new DefaultRepositorySystemSession(session);        pluginSession.setDependencySelector(selector);        pluginSession.setDependencyGraphTransformer(transformer);        CollectRequest request = new CollectRequest();        request.setRequestContext(REPOSITORY_CONTEXT);        request.setRepositories(repositories);        request.setRoot(new org.eclipse.aether.graph.Dependency(pluginArtifact, null));        for (Dependency dependency : plugin.getDependencies()) {            org.eclipse.aether.graph.Dependency pluginDep = RepositoryUtils.toDependency(dependency, session.getArtifactTypeRegistry());            if (!JavaScopes.SYSTEM.equals(pluginDep.getScope())) {                pluginDep = pluginDep.setScope(JavaScopes.RUNTIME);            }            request.addDependency(pluginDep);        }        DependencyRequest depRequest = new DependencyRequest(request, resolutionFilter);        depRequest.setTrace(trace);        request.setTrace(RequestTrace.newChild(trace, depRequest));        node = repoSystem.collectDependencies(pluginSession, request).getRoot();        if (logger.isDebugEnabled()) {            node.accept(new GraphLogger());        }        depRequest.setRoot(node);        repoSystem.resolveDependencies(session, depRequest);    } catch (DependencyCollectionException e) {        throw new PluginResolutionException(plugin, e);    } catch (DependencyResolutionException e) {        throw new PluginResolutionException(plugin, e.getCause());    }    return node;}
public booleanf2431_1DependencyNode node)
{    StringBuilder buffer = new StringBuilder(128);    buffer.append(indent);    org.eclipse.aether.graph.Dependency dep = node.getDependency();    if (dep != null) {        org.eclipse.aether.artifact.Artifact art = dep.getArtifact();        buffer.append(art);        if (StringUtils.isNotEmpty(dep.getScope())) {            buffer.append(':').append(dep.getScope());        }        if (dep.isOptional()) {            buffer.append(" (optional)");        }                if ((node.getManagedBits() & DependencyNode.MANAGED_SCOPE) == DependencyNode.MANAGED_SCOPE) {            final String premanagedScope = DependencyManagerUtils.getPremanagedScope(node);            buffer.append(" (scope managed from ");            buffer.append(StringUtils.defaultString(premanagedScope, "default"));            buffer.append(')');        }        if ((node.getManagedBits() & DependencyNode.MANAGED_VERSION) == DependencyNode.MANAGED_VERSION) {            final String premanagedVersion = DependencyManagerUtils.getPremanagedVersion(node);            buffer.append(" (version managed from ");            buffer.append(StringUtils.defaultString(premanagedVersion, "default"));            buffer.append(')');        }        if ((node.getManagedBits() & DependencyNode.MANAGED_OPTIONAL) == DependencyNode.MANAGED_OPTIONAL) {            final Boolean premanagedOptional = DependencyManagerUtils.getPremanagedOptional(node);            buffer.append(" (optionality managed from ");            buffer.append(StringUtils.defaultString(premanagedOptional, "default"));            buffer.append(')');        }        if ((node.getManagedBits() & DependencyNode.MANAGED_EXCLUSIONS) == DependencyNode.MANAGED_EXCLUSIONS) {            final Collection<org.eclipse.aether.graph.Exclusion> premanagedExclusions = DependencyManagerUtils.getPremanagedExclusions(node);            buffer.append(" (exclusions managed from ");            buffer.append(StringUtils.defaultString(premanagedExclusions, "default"));            buffer.append(')');        }        if ((node.getManagedBits() & DependencyNode.MANAGED_PROPERTIES) == DependencyNode.MANAGED_PROPERTIES) {            final Map<String, String> premanagedProperties = DependencyManagerUtils.getPremanagedProperties(node);            buffer.append(" (properties managed from ");            buffer.append(StringUtils.defaultString(premanagedProperties, "default"));            buffer.append(')');        }    }        indent += "   ";    return true;}
public boolean maven_f2432_0(DependencyNode node)
{    indent = indent.substring(0, indent.length() - 3);    return true;}
public void maven_f2433_0(MavenProject project, MojoExecution execution, MavenSession session) throws MojoExecutionException, ArtifactResolutionException, MojoFailureException, ArtifactNotFoundException, InvalidDependencyVersionException, PluginManagerException, PluginConfigurationException
{    throw new UnsupportedOperationException();}
public Object maven_f2434_0(Plugin plugin, String role, String roleHint) throws PluginManagerException, ComponentLookupException
{    MavenSession session = legacySupport.getSession();    PluginDescriptor pluginDescriptor;    try {        pluginDescriptor = pluginManager.getPluginDescriptor(plugin, session.getCurrentProject().getRemotePluginRepositories(), session.getRepositorySession());        pluginManager.setupPluginRealm(pluginDescriptor, session, null, null, null);    } catch (Exception e) {        throw new PluginManagerException(plugin, e.getMessage(), e);    }    ClassLoader oldClassLoader = Thread.currentThread().getContextClassLoader();    try {        Thread.currentThread().setContextClassLoader(pluginDescriptor.getClassRealm());        return container.lookup(role, roleHint);    } finally {        Thread.currentThread().setContextClassLoader(oldClassLoader);    }}
public Map<String, Object> maven_f2435_0(Plugin plugin, String role) throws ComponentLookupException, PluginManagerException
{    MavenSession session = legacySupport.getSession();    PluginDescriptor pluginDescriptor;    try {        pluginDescriptor = pluginManager.getPluginDescriptor(plugin, session.getCurrentProject().getRemotePluginRepositories(), session.getRepositorySession());        pluginManager.setupPluginRealm(pluginDescriptor, session, null, null, null);    } catch (Exception e) {        throw new PluginManagerException(plugin, e.getMessage(), e);    }    ClassLoader oldClassLoader = Thread.currentThread().getContextClassLoader();    try {        Thread.currentThread().setContextClassLoader(pluginDescriptor.getClassRealm());        return container.lookupMap(role);    } finally {        Thread.currentThread().setContextClassLoader(oldClassLoader);    }}
public Plugin maven_f2436_0(String prefix, MavenSession session, MavenProject project)
{    PluginPrefixRequest request = new DefaultPluginPrefixRequest(prefix, session);    request.setPom(project.getModel());    try {        PluginPrefixResult result = pluginPrefixResolver.resolve(request);        Plugin plugin = new Plugin();        plugin.setGroupId(result.getGroupId());        plugin.setArtifactId(result.getArtifactId());        return plugin;    } catch (NoPluginFoundForPrefixException e) {        return null;    }}
public PluginDescriptor maven_f2437_0(String prefix)
{    MavenSession session = legacySupport.getSession();    PluginPrefixRequest request = new DefaultPluginPrefixRequest(prefix, session);    try {        PluginPrefixResult result = pluginPrefixResolver.resolve(request);        Plugin plugin = new Plugin();        plugin.setGroupId(result.getGroupId());        plugin.setArtifactId(result.getArtifactId());        return loadPluginDescriptor(plugin, session.getCurrentProject(), session);    } catch (Exception e) {        return null;    }}
public PluginDescriptor maven_f2438_0(Plugin plugin, MavenProject project, MavenSession session) throws ArtifactResolutionException, PluginVersionResolutionException, ArtifactNotFoundException, InvalidVersionSpecificationException, InvalidPluginException, PluginManagerException, PluginNotFoundException, PluginVersionNotFoundException
{    return verifyPlugin(plugin, project, session.getSettings(), session.getLocalRepository());}
public PluginDescriptor maven_f2439_0(Plugin plugin, MavenProject project, MavenSession session) throws ArtifactResolutionException, PluginVersionResolutionException, ArtifactNotFoundException, InvalidVersionSpecificationException, InvalidPluginException, PluginManagerException, PluginNotFoundException, PluginVersionNotFoundException
{    PluginDescriptor pluginDescriptor = loadPluginDescriptor(plugin, project, session);    try {        pluginManager.setupPluginRealm(pluginDescriptor, session, null, null, null);    } catch (PluginResolutionException e) {        throw new PluginManagerException(plugin, e.getMessage(), e);    }    return pluginDescriptor;}
public PluginDescriptor maven_f2440_0(Plugin plugin, MavenProject project, Settings settings, ArtifactRepository localRepository) throws ArtifactResolutionException, PluginVersionResolutionException, ArtifactNotFoundException, InvalidVersionSpecificationException, InvalidPluginException, PluginManagerException, PluginNotFoundException, PluginVersionNotFoundException
{    MavenSession session = legacySupport.getSession();    if (plugin.getVersion() == null) {        PluginVersionRequest versionRequest = new DefaultPluginVersionRequest(plugin, session.getRepositorySession(), project.getRemotePluginRepositories());        plugin.setVersion(pluginVersionResolver.resolve(versionRequest).getVersion());    }    try {        return pluginManager.getPluginDescriptor(plugin, project.getRemotePluginRepositories(), session.getRepositorySession());    } catch (PluginResolutionException e) {        throw new PluginNotFoundException(plugin, project.getPluginArtifactRepositories());    } catch (PluginDescriptorParsingException | InvalidPluginDescriptorException e) {        throw new PluginManagerException(plugin, e.getMessage(), e);    }}
public DependencyNode maven_f2441_0(DependencyNode node, DependencyGraphTransformationContext context) throws RepositoryException
{    if (findPlexusUtils(node) == null) {        Artifact pu = new DefaultArtifact(GID, AID, null, EXT, VER);        DefaultDependencyNode child = new DefaultDependencyNode(new Dependency(pu, JavaScopes.RUNTIME));        child.setRepositories(node.getRepositories());        child.setRequestContext(node.getRequestContext());        node.getChildren().add(child);    }    return node;}
private DependencyNode maven_f2442_0(DependencyNode node)
{    Artifact artifact = node.getDependency().getArtifact();    if (AID.equals(artifact.getArtifactId()) && GID.equals(artifact.getGroupId()) && EXT.equals(artifact.getExtension()) && "".equals(artifact.getClassifier())) {        return node;    }    for (DependencyNode child : node.getChildren()) {        DependencyNode result = findPlexusUtils(child);        if (result != null) {            return result;        }    }    return null;}
public void maven_f2443_0(Collection<Artifact> artifacts)
{    if (!bannedArtifacts.isEmpty() && artifacts != null) {        for (Iterator<Artifact> it = artifacts.iterator(); it.hasNext(); ) {            Artifact artifact = it.next();            if (bannedArtifacts.containsKey(artifact)) {                it.remove();            }        }    }}
public void maven_f2444_0(Artifact artifact)
{    if (wagonProvider == null) {        if (isLegacyCoreArtifact(artifact)) {            coreArtifacts.addFirst(artifact);        } else if (!coreArtifacts.isEmpty() && isWagonProvider(artifact)) {            wagonProvider = artifact;            bannedArtifacts.put(artifact, null);        }    }}
private boolean maven_f2445_0(Artifact artifact)
{    String version = artifact.getVersion();    return version != null && version.startsWith("2.") && !coreFilter.include(artifact);}
public void maven_f2446_0(Artifact artifact)
{    if (wagonProvider == artifact) {        wagonProvider = null;    } else if (coreArtifacts.peek() == artifact) {        coreArtifacts.removeFirst();    }}
public void maven_f2447_0(Artifact artifact)
{    if (wagonProvider != null) {        bannedArtifacts.put(artifact, null);    }}
private boolean maven_f2448_0(Artifact artifact)
{    if ("org.apache.maven.wagon".equals(artifact.getGroupId())) {        return artifact.getArtifactId().startsWith("wagon-");    }    return false;}
public void maven_f2449_0(Artifact artifact, Artifact replacement)
{}
public void maven_f2450_0(Artifact artifact)
{}
public void maven_f2451_0(Artifact omitted, Artifact kept)
{}
public void maven_f2452_0(Artifact artifact, Artifact replacement, VersionRange newRange)
{}
public void maven_f2453_0(Artifact artifact)
{}
public void maven_f2454_0(Artifact node)
{}
public void maven_f2455_0(Artifact artifact, String scope)
{}
public void maven_f2456_0(Artifact artifact, String ignoredScope)
{}
public Collection<Parameter> maven_f2457_0()
{    return missingParameters.values();}
public void maven_f2458_0(String fieldName, Object value, Object target)
{    delegate.notifyFieldChangeUsingSetter(fieldName, value, target);    if (mojo == target) {        notify(fieldName, value);    }}
public void maven_f2459_0(String fieldName, Object value, Object target)
{    delegate.notifyFieldChangeUsingReflection(fieldName, value, target);    if (mojo == target) {        notify(fieldName, value);    }}
private void maven_f2460_0(String fieldName, Object value)
{    if (value != null) {        missingParameters.remove(fieldName);    }}
public boolean maven_f2461_0(Dependency dependency)
{    return !coreArtifact || !isWagonProvider(dependency.getArtifact());}
public DependencySelector maven_f2462_0(DependencyCollectionContext context)
{    if (coreArtifact || !isLegacyCoreArtifact(context.getDependency().getArtifact())) {        return this;    } else {        return new WagonExcluder(true);    }}
private boolean maven_f2463_0(Artifact artifact)
{    String version = artifact.getVersion();    return version != null && version.startsWith("2.") && artifact.getArtifactId().startsWith("maven-") && artifact.getGroupId().equals("org.apache.maven");}
private boolean maven_f2464_0(Artifact artifact)
{    if ("org.apache.maven.wagon".equals(artifact.getGroupId())) {        return artifact.getArtifactId().startsWith("wagon-");    }    return false;}
public boolean maven_f2465_0(Object obj)
{    if (obj == this) {        return true;    } else if (obj == null || !getClass().equals(obj.getClass())) {        return false;    }    WagonExcluder that = (WagonExcluder) obj;    return coreArtifact == that.coreArtifact;}
public int maven_f2466_0()
{    int hash = getClass().hashCode();    hash = hash * 31 + (coreArtifact ? 1 : 0);    return hash;}
private static String maven_f2467_0(String message, List<String> errors)
{    StringBuilder buffer = new StringBuilder(256);    buffer.append(message);    for (String error : errors) {        buffer.append(", ").append(error);    }    return buffer.toString();}
public void maven_f2468_0(PluginDescriptor pluginDescriptor)
{    /*         * NOTE: For plugins that depend on other plugin artifacts the plugin realm contains more than one plugin         * descriptor. However, only the first descriptor is of interest.         */    if (!firstDescriptor) {        return;    }    firstDescriptor = false;    if (!pluginArtifact.getGroupId().equals(pluginDescriptor.getGroupId())) {        errors.add("Plugin's descriptor contains the wrong group ID: " + pluginDescriptor.getGroupId());    }    if (!pluginArtifact.getArtifactId().equals(pluginDescriptor.getArtifactId())) {        errors.add("Plugin's descriptor contains the wrong artifact ID: " + pluginDescriptor.getArtifactId());    }    if (!pluginArtifact.getBaseVersion().equals(pluginDescriptor.getVersion())) {        errors.add("Plugin's descriptor contains the wrong version: " + pluginDescriptor.getVersion());    }}
public boolean maven_f2469_0()
{    return !errors.isEmpty();}
public List<String> maven_f2470_0()
{    return errors;}
public Source maven_f2471_0()
{    return source;}
public String maven_f2472_0()
{    return executionId;}
public Plugin maven_f2473_0()
{    if (mojoDescriptor != null) {        return mojoDescriptor.getPluginDescriptor().getPlugin();    }    return plugin;}
public MojoDescriptor maven_f2474_0()
{    return mojoDescriptor;}
public Xpp3Dom maven_f2475_0()
{    return configuration;}
public void maven_f2476_0(Xpp3Dom configuration)
{    this.configuration = configuration;}
public String maven_f2477_0()
{    StringBuilder sb = new StringBuilder(256);    sb.append(executionId);    sb.append(configuration.toString());    return sb.toString();}
public String maven_f2478_0()
{    return lifecyclePhase;}
public void maven_f2479_0(String lifecyclePhase)
{    this.lifecyclePhase = lifecyclePhase;}
public String maven_f2480_0()
{    StringBuilder buffer = new StringBuilder(128);    if (mojoDescriptor != null) {        buffer.append(mojoDescriptor.getId());    }    buffer.append(" {execution: ").append(executionId).append('}');    return buffer.toString();}
public String maven_f2481_0()
{    if (mojoDescriptor != null) {        return mojoDescriptor.getPluginDescriptor().getGroupId();    }    return plugin.getGroupId();}
public String maven_f2482_0()
{    if (mojoDescriptor != null) {        return mojoDescriptor.getPluginDescriptor().getArtifactId();    }    return plugin.getArtifactId();}
public String maven_f2483_0()
{    if (mojoDescriptor != null) {        return mojoDescriptor.getPluginDescriptor().getVersion();    }    return plugin.getVersion();}
public String maven_f2484_0()
{    if (mojoDescriptor != null) {        return mojoDescriptor.getGoal();    }    return goal;}
public void maven_f2485_0(MojoDescriptor mojoDescriptor)
{    this.mojoDescriptor = mojoDescriptor;}
public Map<String, List<MojoExecution>> maven_f2486_0()
{    return forkedExecutions;}
public void maven_f2487_0(String projectKey, List<MojoExecution> forkedExecutions)
{    this.forkedExecutions.put(projectKey, forkedExecutions);}
public List<Artifact> maven_f2488_0()
{    return artifacts;}
public PluginResolutionException maven_f2489_0()
{    return exception;}
public ClassRealm maven_f2490_0()
{    return pluginRealm;}
private static String maven_f2491_0(Plugin plugin, String descriptorLocation, Throwable e)
{    String message = "Failed to parse plugin descriptor";    if (plugin != null) {        message += " for " + plugin.getId();    }    if (descriptorLocation != null) {        message += " (" + descriptorLocation + ")";    }    if (e != null) {        message += ": " + e.getMessage();    }    return message;}
public MojoExecution maven_f2492_0()
{    return mojoExecution;}
private static String maven_f2493_0(MojoExecution mojoExecution, Throwable cause)
{    String message;    if (mojoExecution != null) {        message = "Execution " + mojoExecution.getExecutionId() + " of goal " + mojoExecution.getMojoDescriptor().getId() + " failed";    } else {        message = "Mojo execution failed";    }    if (cause != null && StringUtils.isNotEmpty(cause.getMessage())) {        message += ": " + cause.getMessage();    } else {        message += ".";    }    return message;}
public String maven_f2494_0()
{    return pluginKey;}
public String maven_f2495_0()
{    return pluginGroupId;}
public String maven_f2496_0()
{    return pluginArtifactId;}
public String maven_f2497_0()
{    return pluginVersion;}
public String maven_f2498_0()
{    return goal;}
public MavenProject maven_f2499_0()
{    return project;}
public Plugin maven_f2500_0()
{    return plugin;}
private static String maven_f2501_0(List<Parameter> parameters)
{    StringBuilder buffer = new StringBuilder(128);    if (parameters != null) {        for (Parameter parameter : parameters) {            if (buffer.length() > 0) {                buffer.append(", ");            }            buffer.append('\'').append(parameter.getName()).append('\'');        }    }    return buffer.toString();}
public MojoDescriptor maven_f2502_0()
{    return mojo;}
public List<Parameter> maven_f2503_0()
{    return parameters;}
private static void maven_f2504_0(MojoDescriptor mojo, Parameter param, StringBuilder messageBuffer)
{    String expression = param.getExpression();    if (param.isEditable()) {        boolean isArray = param.getType().endsWith("[]");        boolean isCollection = false;        boolean isMap = false;        boolean isProperties = false;        if (!isArray) {            try {                                isCollection = Collection.class.isAssignableFrom(Class.forName(param.getType()));                isMap = Map.class.isAssignableFrom(Class.forName(param.getType()));                isProperties = Properties.class.isAssignableFrom(Class.forName(param.getType()));            } catch (ClassNotFoundException e) {                        }        }        messageBuffer.append("Inside the definition for plugin \'");        messageBuffer.append(mojo.getPluginDescriptor().getArtifactId());        messageBuffer.append("\', specify the following:\n\n<configuration>\n  ...\n");        messageBuffer.append("  <").append(param.getName()).append('>');        if (isArray || isCollection) {            messageBuffer.append('\n');            messageBuffer.append("    <item>");        } else if (isProperties) {            messageBuffer.append('\n');            messageBuffer.append("    <property>\n");            messageBuffer.append("      <name>KEY</name>\n");            messageBuffer.append("      <value>");        } else if (isMap) {            messageBuffer.append('\n');            messageBuffer.append("    <KEY>");        }        messageBuffer.append("VALUE");        if (isArray || isCollection) {            messageBuffer.append("</item>\n");            messageBuffer.append("  ");        } else if (isProperties) {            messageBuffer.append("</value>\n");            messageBuffer.append("    </property>\n");            messageBuffer.append("  ");        } else if (isMap) {            messageBuffer.append("</KEY>\n");            messageBuffer.append("  ");        }        messageBuffer.append("</").append(param.getName()).append(">\n");        messageBuffer.append("</configuration>");        String alias = param.getAlias();        if (StringUtils.isNotEmpty(alias) && !alias.equals(param.getName())) {            messageBuffer.append("\n\n-OR-\n\n<configuration>\n  ...\n  <").append(alias).append(">VALUE</").append(alias).append(">\n</configuration>\n");        }    }    if (StringUtils.isEmpty(expression)) {        messageBuffer.append('.');    } else {        if (param.isEditable()) {            messageBuffer.append("\n\n-OR-\n\n");        }        }}
public String maven_f2505_0()
{    StringBuilder messageBuffer = new StringBuilder(256);    List<Parameter> params = getParameters();    MojoDescriptor mojo = getMojoDescriptor();    messageBuffer.append("One or more required plugin parameters are invalid/missing for \'").append(mojo.getPluginDescriptor().getGoalPrefix()).append(':').append(mojo.getGoal()).append("\'\n");    int idx = 0;    for (Iterator<Parameter> it = params.iterator(); it.hasNext(); idx++) {        Parameter param = it.next();        messageBuffer.append("\n[").append(idx).append("] ");        decomposeParameterIntoUserInstructions(mojo, param, messageBuffer);        messageBuffer.append('\n');    }    return messageBuffer.toString();}
public Object maven_f2506_0(String expr) throws ExpressionEvaluationException
{    return evaluate(expr, null);}
public Object maven_f2507_0(String expr, Class<?> type) throws ExpressionEvaluationException
{    Object value = null;    if (expr == null) {        return null;    }    String expression = stripTokens(expr);    if (expression.equals(expr)) {        int index = expr.indexOf("${");        if (index >= 0) {            int lastIndex = expr.indexOf('}', index);            if (lastIndex >= 0) {                String retVal = expr.substring(0, index);                if ((index > 0) && (expr.charAt(index - 1) == '$')) {                    retVal += expr.substring(index + 1, lastIndex + 1);                } else {                    Object subResult = evaluate(expr.substring(index, lastIndex + 1));                    if (subResult != null) {                        retVal += subResult;                    } else {                        retVal += "$" + expr.substring(index + 1, lastIndex + 1);                    }                }                retVal += evaluate(expr.substring(lastIndex + 1));                return retVal;            }        }                if (expression.contains("$$")) {            return expression.replaceAll("\\$\\$", "\\$");        } else {            return expression;        }    }    MojoDescriptor mojoDescriptor = mojoExecution.getMojoDescriptor();    if ("localRepository".equals(expression)) {        value = session.getLocalRepository();    } else if ("session".equals(expression)) {        value = session;    } else if (expression.startsWith("session")) {        try {            int pathSeparator = expression.indexOf('/');            if (pathSeparator > 0) {                String pathExpression = expression.substring(1, pathSeparator);                value = ReflectionValueExtractor.evaluate(pathExpression, session);                value = value + expression.substring(pathSeparator);            } else {                value = ReflectionValueExtractor.evaluate(expression.substring(1), session);            }        } catch (Exception e) {                        throw new ExpressionEvaluationException("Error evaluating plugin parameter expression: " + expression, e);        }    } else if ("reactorProjects".equals(expression)) {        value = session.getProjects();    } else if ("mojoExecution".equals(expression)) {        value = mojoExecution;    } else if ("project".equals(expression)) {        value = project;    } else if ("executedProject".equals(expression)) {        value = project.getExecutionProject();    } else if (expression.startsWith("project") || expression.startsWith("pom")) {        try {            int pathSeparator = expression.indexOf('/');            if (pathSeparator > 0) {                String pathExpression = expression.substring(0, pathSeparator);                value = ReflectionValueExtractor.evaluate(pathExpression, project);                value = value + expression.substring(pathSeparator);            } else {                value = ReflectionValueExtractor.evaluate(expression.substring(1), project);            }        } catch (Exception e) {                        throw new ExpressionEvaluationException("Error evaluating plugin parameter expression: " + expression, e);        }    } else if (expression.equals("repositorySystemSession")) {        value = session.getRepositorySession();    } else if (expression.equals("mojo")) {        value = mojoExecution;    } else if (expression.startsWith("mojo")) {        try {            int pathSeparator = expression.indexOf('/');            if (pathSeparator > 0) {                String pathExpression = expression.substring(1, pathSeparator);                value = ReflectionValueExtractor.evaluate(pathExpression, mojoExecution);                value = value + expression.substring(pathSeparator);            } else {                value = ReflectionValueExtractor.evaluate(expression.substring(1), mojoExecution);            }        } catch (Exception e) {                        throw new ExpressionEvaluationException("Error evaluating plugin parameter expression: " + expression, e);        }    } else if (expression.equals("plugin")) {        value = mojoDescriptor.getPluginDescriptor();    } else if (expression.startsWith("plugin")) {        try {            int pathSeparator = expression.indexOf('/');            PluginDescriptor pluginDescriptor = mojoDescriptor.getPluginDescriptor();            if (pathSeparator > 0) {                String pathExpression = expression.substring(1, pathSeparator);                value = ReflectionValueExtractor.evaluate(pathExpression, pluginDescriptor);                value = value + expression.substring(pathSeparator);            } else {                value = ReflectionValueExtractor.evaluate(expression.substring(1), pluginDescriptor);            }        } catch (Exception e) {            throw new ExpressionEvaluationException("Error evaluating plugin parameter expression: " + expression, e);        }    } else if ("settings".equals(expression)) {        value = session.getSettings();    } else if (expression.startsWith("settings")) {        try {            int pathSeparator = expression.indexOf('/');            if (pathSeparator > 0) {                String pathExpression = expression.substring(1, pathSeparator);                value = ReflectionValueExtractor.evaluate(pathExpression, session.getSettings());                value = value + expression.substring(pathSeparator);            } else {                value = ReflectionValueExtractor.evaluate(expression.substring(1), session.getSettings());            }        } catch (Exception e) {                        throw new ExpressionEvaluationException("Error evaluating plugin parameter expression: " + expression, e);        }    } else if ("basedir".equals(expression)) {        value = basedir;    } else if (expression.startsWith("basedir")) {        int pathSeparator = expression.indexOf('/');        if (pathSeparator > 0) {            value = basedir + expression.substring(pathSeparator);        }    }    /*         * MNG-4312: We neither have reserved all of the above magic expressions nor is their set fixed/well-known (it         * gets occasionally extended by newer Maven versions). This imposes the risk for existing plugins to         * unintentionally use such a magic expression for an ordinary system property. So here we check whether we         * ended up with a magic value that is not compatible with the type of the configured mojo parameter (a string         * could still be converted by the configurator so we leave those alone). If so, back off to evaluating the         * expression from properties only.         */    if (value != null && type != null && !(value instanceof String) && !isTypeCompatible(type, value)) {        value = null;    }    if (value == null) {        if (properties != null) {                                                            value = properties.getProperty(expression);        }        if ((value == null) && ((project != null) && (project.getProperties() != null))) {            value = project.getProperties().getProperty(expression);        }    }    if (value instanceof String) {                String val = (String) value;        int exprStartDelimiter = val.indexOf("${");        if (exprStartDelimiter >= 0) {            if (exprStartDelimiter > 0) {                value = val.substring(0, exprStartDelimiter) + evaluate(val.substring(exprStartDelimiter));            } else {                value = evaluate(val.substring(exprStartDelimiter));            }        }    }    return value;}
private static boolean maven_f2508_0(Class<?> type, Object value)
{    if (type.isInstance(value)) {        return true;    }        return ((type.isPrimitive() || type.getName().startsWith("java.lang.")) && value.getClass().getName().startsWith("java.lang."));}
private String maven_f2509_0(String expr)
{    if (expr.startsWith("${") && (expr.indexOf('}') == expr.length() - 1)) {        expr = expr.substring(2, expr.length() - 1);    }    return expr;}
public File maven_f2510_0(File file)
{        if (file != null) {        if (file.isAbsolute()) {                } else if (file.getPath().startsWith(File.separator)) {                        file = file.getAbsoluteFile();        } else {                        file = new File(new File(basedir, file.getPath()).toURI().normalize()).getAbsoluteFile();        }    }    return file;}
public ClassRealm maven_f2511_0()
{    return realm;}
public List<Artifact> maven_f2512_0()
{    return artifacts;}
public Plugin maven_f2513_0()
{    return plugin;}
public String maven_f2514_0()
{    return prefix;}
public DefaultPluginPrefixRequest maven_f2515_0(String prefix)
{    this.prefix = prefix;    return this;}
public List<String> maven_f2516_0()
{    return pluginGroups;}
public DefaultPluginPrefixRequest maven_f2517_0(List<String> pluginGroups)
{    if (pluginGroups != null) {        this.pluginGroups = Collections.unmodifiableList(pluginGroups);    } else {        this.pluginGroups = Collections.emptyList();    }    return this;}
public Model maven_f2518_0()
{    return pom;}
public DefaultPluginPrefixRequest maven_f2519_0(Model pom)
{    this.pom = pom;    return this;}
public List<RemoteRepository> maven_f2520_0()
{    return repositories;}
public DefaultPluginPrefixRequest maven_f2521_0(List<RemoteRepository> repositories)
{    if (repositories != null) {        this.repositories = Collections.unmodifiableList(repositories);    } else {        this.repositories = Collections.emptyList();    }    return this;}
public RepositorySystemSession maven_f2522_0()
{    return session;}
public DefaultPluginPrefixRequest maven_f2523_0(RepositorySystemSession session)
{    this.session = session;    return this;}
public PluginPrefixResultf2524_1PluginPrefixRequest request) throws NoPluginFoundForPrefixException
{        PluginPrefixResult result = resolveFromProject(request);    if (result == null) {        result = resolveFromRepository(request);        if (result == null) {            throw new NoPluginFoundForPrefixException(request.getPrefix(), request.getPluginGroups(), request.getRepositorySession().getLocalRepository(), request.getRepositories());        } else if (logger.isDebugEnabled()) {                    }    } else if (logger.isDebugEnabled()) {            }    return result;}
private PluginPrefixResult maven_f2525_0(PluginPrefixRequest request)
{    PluginPrefixResult result = null;    if (request.getPom() != null && request.getPom().getBuild() != null) {        Build build = request.getPom().getBuild();        result = resolveFromProject(request, build.getPlugins());        if (result == null && build.getPluginManagement() != null) {            result = resolveFromProject(request, build.getPluginManagement().getPlugins());        }    }    return result;}
private PluginPrefixResultf2526_1PluginPrefixRequest request, List<Plugin> plugins)
{    for (Plugin plugin : plugins) {        try {            PluginDescriptor pluginDescriptor = pluginManager.loadPlugin(plugin, request.getRepositories(), request.getRepositorySession());            if (request.getPrefix().equals(pluginDescriptor.getGoalPrefix())) {                return new DefaultPluginPrefixResult(plugin);            }        } catch (Exception e) {            if (logger.isDebugEnabled()) {                            } else {                            }        }    }    return null;}
private PluginPrefixResult maven_f2527_0(PluginPrefixRequest request)
{    RequestTrace trace = RequestTrace.newChild(null, request);    List<MetadataRequest> requests = new ArrayList<>();    for (String pluginGroup : request.getPluginGroups()) {        org.eclipse.aether.metadata.Metadata metadata = new DefaultMetadata(pluginGroup, "maven-metadata.xml", DefaultMetadata.Nature.RELEASE_OR_SNAPSHOT);        requests.add(new MetadataRequest(metadata, null, REPOSITORY_CONTEXT).setTrace(trace));        for (RemoteRepository repository : request.getRepositories()) {            requests.add(new MetadataRequest(metadata, repository, REPOSITORY_CONTEXT).setTrace(trace));        }    }        List<MetadataResult> results = repositorySystem.resolveMetadata(request.getRepositorySession(), requests);    requests.clear();    PluginPrefixResult result = processResults(request, trace, results, requests);    if (result != null) {        return result;    }    if (!request.getRepositorySession().isOffline() && !requests.isEmpty()) {        DefaultRepositorySystemSession session = new DefaultRepositorySystemSession(request.getRepositorySession());        session.setUpdatePolicy(RepositoryPolicy.UPDATE_POLICY_ALWAYS);        results = repositorySystem.resolveMetadata(session, requests);        return processResults(request, trace, results, null);    }    return null;}
private PluginPrefixResult maven_f2528_0(PluginPrefixRequest request, RequestTrace trace, List<MetadataResult> results, List<MetadataRequest> requests)
{    for (MetadataResult res : results) {        org.eclipse.aether.metadata.Metadata metadata = res.getMetadata();        if (metadata != null) {            ArtifactRepository repository = res.getRequest().getRepository();            if (repository == null) {                repository = request.getRepositorySession().getLocalRepository();            }            PluginPrefixResult result = resolveFromRepository(request, trace, metadata.getGroupId(), metadata, repository);            if (result != null) {                return result;            }        }        if (requests != null && !res.isUpdated()) {            requests.add(res.getRequest());        }    }    return null;}
private PluginPrefixResult maven_f2529_0(PluginPrefixRequest request, RequestTrace trace, String pluginGroup, org.eclipse.aether.metadata.Metadata metadata, ArtifactRepository repository)
{    if (metadata != null && metadata.getFile() != null && metadata.getFile().isFile()) {        try {            Map<String, ?> options = Collections.singletonMap(MetadataReader.IS_STRICT, Boolean.FALSE);            Metadata pluginGroupMetadata = metadataReader.read(metadata.getFile(), options);            List<org.apache.maven.artifact.repository.metadata.Plugin> plugins = pluginGroupMetadata.getPlugins();            if (plugins != null) {                for (org.apache.maven.artifact.repository.metadata.Plugin plugin : plugins) {                    if (request.getPrefix().equals(plugin.getPrefix())) {                        return new DefaultPluginPrefixResult(pluginGroup, plugin.getArtifactId(), repository);                    }                }            }        } catch (IOException e) {            invalidMetadata(request.getRepositorySession(), trace, metadata, repository, e);        }    }    return null;}
private void maven_f2530_0(RepositorySystemSession session, RequestTrace trace, org.eclipse.aether.metadata.Metadata metadata, ArtifactRepository repository, Exception exception)
{    RepositoryListener listener = session.getRepositoryListener();    if (listener != null) {        RepositoryEvent.Builder event = new RepositoryEvent.Builder(session, EventType.METADATA_INVALID);        event.setTrace(trace);        event.setMetadata(metadata);        event.setException(exception);        event.setRepository(repository);        listener.metadataInvalid(event.build());    }}
public String maven_f2531_0()
{    return groupId;}
public void maven_f2532_0(String groupId)
{    this.groupId = groupId;}
public String maven_f2533_0()
{    return artifactId;}
public void maven_f2534_0(String artifactId)
{    this.artifactId = artifactId;}
public ArtifactRepository maven_f2535_0()
{    return repository;}
public void maven_f2536_0(ArtifactRepository repository)
{    this.repository = repository;}
private static String maven_f2537_0(LocalRepository localRepository, List<RemoteRepository> remoteRepositories)
{    String repos = "[";    if (localRepository != null) {        repos += localRepository.getId() + " (" + localRepository.getBasedir() + ")";    }    if (remoteRepositories != null && !remoteRepositories.isEmpty()) {        for (RemoteRepository repository : remoteRepositories) {            repos += ", ";            if (repository != null) {                repos += repository.getId() + " (" + repository.getUrl() + ")";            }        }    }    repos += "]";    return repos;}
public String maven_f2538_0()
{    return groupId;}
public DefaultPluginVersionRequest maven_f2539_0(String groupId)
{    this.groupId = groupId;    return this;}
public String maven_f2540_0()
{    return artifactId;}
public DefaultPluginVersionRequest maven_f2541_0(String artifactId)
{    this.artifactId = artifactId;    return this;}
public Model maven_f2542_0()
{    return pom;}
public DefaultPluginVersionRequest maven_f2543_0(Model pom)
{    this.pom = pom;    return this;}
public List<RemoteRepository> maven_f2544_0()
{    return repositories;}
public DefaultPluginVersionRequest maven_f2545_0(List<RemoteRepository> repositories)
{    if (repositories != null) {        this.repositories = Collections.unmodifiableList(repositories);    } else {        this.repositories = Collections.emptyList();    }    return this;}
public RepositorySystemSession maven_f2546_0()
{    return session;}
public DefaultPluginVersionRequest maven_f2547_0(RepositorySystemSession session)
{    this.session = session;    return this;}
public PluginVersionResultf2548_1PluginVersionRequest request) throws PluginVersionResolutionException
{    PluginVersionResult result = resolveFromProject(request);    if (result == null) {        result = resolveFromRepository(request);        if (logger.isDebugEnabled()) {                    }    } else if (logger.isDebugEnabled()) {            }    return result;}
private PluginVersionResult maven_f2549_0(PluginVersionRequest request) throws PluginVersionResolutionException
{    RequestTrace trace = RequestTrace.newChild(null, request);    DefaultPluginVersionResult result = new DefaultPluginVersionResult();    org.eclipse.aether.metadata.Metadata metadata = new DefaultMetadata(request.getGroupId(), request.getArtifactId(), "maven-metadata.xml", DefaultMetadata.Nature.RELEASE_OR_SNAPSHOT);    List<MetadataRequest> requests = new ArrayList<>();    requests.add(new MetadataRequest(metadata, null, REPOSITORY_CONTEXT).setTrace(trace));    for (RemoteRepository repository : request.getRepositories()) {        requests.add(new MetadataRequest(metadata, repository, REPOSITORY_CONTEXT).setTrace(trace));    }    List<MetadataResult> results = repositorySystem.resolveMetadata(request.getRepositorySession(), requests);    Versions versions = new Versions();    for (MetadataResult res : results) {        ArtifactRepository repository = res.getRequest().getRepository();        if (repository == null) {            repository = request.getRepositorySession().getLocalRepository();        }        mergeMetadata(request.getRepositorySession(), trace, versions, res.getMetadata(), repository);    }    selectVersion(result, request, versions);    return result;}
private void maven_f2550_0(DefaultPluginVersionResult result, PluginVersionRequest request, Versions versions) throws PluginVersionResolutionException
{    String version = null;    ArtifactRepository repo = null;    if (StringUtils.isNotEmpty(versions.releaseVersion)) {        version = versions.releaseVersion;        repo = versions.releaseRepository;    } else if (StringUtils.isNotEmpty(versions.latestVersion)) {        version = versions.latestVersion;        repo = versions.latestRepository;    }    if (version != null && !isCompatible(request, version)) {        versions.versions.remove(version);        version = null;    }    if (version == null) {        VersionScheme versionScheme = new GenericVersionScheme();        TreeSet<Version> releases = new TreeSet<>(Collections.reverseOrder());        TreeSet<Version> snapshots = new TreeSet<>(Collections.reverseOrder());        for (String ver : versions.versions.keySet()) {            try {                Version v = versionScheme.parseVersion(ver);                if (ver.endsWith("-SNAPSHOT")) {                    snapshots.add(v);                } else {                    releases.add(v);                }            } catch (InvalidVersionSpecificationException e) {                        }        }        for (Version v : releases) {            String ver = v.toString();            if (isCompatible(request, ver)) {                version = ver;                repo = versions.versions.get(version);                break;            }        }        if (version == null) {            for (Version v : snapshots) {                String ver = v.toString();                if (isCompatible(request, ver)) {                    version = ver;                    repo = versions.versions.get(version);                    break;                }            }        }    }    if (version != null) {        result.setVersion(version);        result.setRepository(repo);    } else {        throw new PluginVersionResolutionException(request.getGroupId(), request.getArtifactId(), request.getRepositorySession().getLocalRepository(), request.getRepositories(), "Plugin not found in any plugin repository");    }}
private booleanf2551_1PluginVersionRequest request, String version)
{    Plugin plugin = new Plugin();    plugin.setGroupId(request.getGroupId());    plugin.setArtifactId(request.getArtifactId());    plugin.setVersion(version);    PluginDescriptor pluginDescriptor;    try {        pluginDescriptor = pluginManager.getPluginDescriptor(plugin, request.getRepositories(), request.getRepositorySession());    } catch (PluginResolutionException e) {                return false;    } catch (Exception e) {                return true;    }    try {        pluginManager.checkRequiredMavenVersion(pluginDescriptor);    } catch (Exception e) {                return false;    }    return true;}
private void maven_f2552_0(RepositorySystemSession session, RequestTrace trace, Versions versions, org.eclipse.aether.metadata.Metadata metadata, ArtifactRepository repository)
{    if (metadata != null && metadata.getFile() != null && metadata.getFile().isFile()) {        try {            Map<String, ?> options = Collections.singletonMap(MetadataReader.IS_STRICT, Boolean.FALSE);            Metadata repoMetadata = metadataReader.read(metadata.getFile(), options);            mergeMetadata(versions, repoMetadata, repository);        } catch (IOException e) {            invalidMetadata(session, trace, metadata, repository, e);        }    }}
private void maven_f2553_0(RepositorySystemSession session, RequestTrace trace, org.eclipse.aether.metadata.Metadata metadata, ArtifactRepository repository, Exception exception)
{    RepositoryListener listener = session.getRepositoryListener();    if (listener != null) {        RepositoryEvent.Builder event = new RepositoryEvent.Builder(session, EventType.METADATA_INVALID);        event.setTrace(trace);        event.setMetadata(metadata);        event.setException(exception);        event.setRepository(repository);        listener.metadataInvalid(event.build());    }}
private void maven_f2554_0(Versions versions, Metadata source, ArtifactRepository repository)
{    Versioning versioning = source.getVersioning();    if (versioning != null) {        String timestamp = StringUtils.clean(versioning.getLastUpdated());        if (StringUtils.isNotEmpty(versioning.getRelease()) && timestamp.compareTo(versions.releaseTimestamp) > 0) {            versions.releaseVersion = versioning.getRelease();            versions.releaseTimestamp = timestamp;            versions.releaseRepository = repository;        }        if (StringUtils.isNotEmpty(versioning.getLatest()) && timestamp.compareTo(versions.latestTimestamp) > 0) {            versions.latestVersion = versioning.getLatest();            versions.latestTimestamp = timestamp;            versions.latestRepository = repository;        }        for (String version : versioning.getVersions()) {            if (!versions.versions.containsKey(version)) {                versions.versions.put(version, repository);            }        }    }}
private PluginVersionResult maven_f2555_0(PluginVersionRequest request)
{    PluginVersionResult result = null;    if (request.getPom() != null && request.getPom().getBuild() != null) {        Build build = request.getPom().getBuild();        result = resolveFromProject(request, build.getPlugins());        if (result == null && build.getPluginManagement() != null) {            result = resolveFromProject(request, build.getPluginManagement().getPlugins());        }    }    return result;}
private PluginVersionResult maven_f2556_0(PluginVersionRequest request, List<Plugin> plugins)
{    for (Plugin plugin : plugins) {        if (request.getGroupId().equals(plugin.getGroupId()) && request.getArtifactId().equals(plugin.getArtifactId())) {            if (plugin.getVersion() != null) {                return new DefaultPluginVersionResult(plugin.getVersion());            } else {                return null;            }        }    }    return null;}
public String maven_f2557_0()
{    return version;}
public void maven_f2558_0(String version)
{    this.version = version;}
public ArtifactRepository maven_f2559_0()
{    return repository;}
public void maven_f2560_0(ArtifactRepository repository)
{    this.repository = repository;}
public String maven_f2561_0()
{    return groupId;}
public String maven_f2562_0()
{    return artifactId;}
public String maven_f2563_0()
{    return groupId;}
public String maven_f2564_0()
{    return artifactId;}
public String maven_f2565_0()
{    return baseMessage;}
private static String maven_f2566_0(LocalRepository localRepository, List<RemoteRepository> remoteRepositories)
{    String repos = "[";    if (localRepository != null) {        repos += localRepository.getId() + " (" + localRepository.getBasedir() + ")";    }    if (remoteRepositories != null && !remoteRepositories.isEmpty()) {        for (RemoteRepository repository : remoteRepositories) {            repos += ", ";            if (repository != null) {                repos += repository.getId() + " (" + repository.getUrl() + ")";            }        }    }    repos += "]";    return repos;}
public File maven_f2567_0()
{        return project.getArtifact().getFile();}
public String maven_f2568_0()
{    return artifact.getGroupId();}
public String maven_f2569_0()
{    return artifact.getArtifactId();}
public String maven_f2570_0()
{    return artifact.getVersion();}
public void maven_f2571_0(String version)
{    artifact.setVersion(version);}
public String maven_f2572_0()
{    return artifact.getScope();}
public String maven_f2573_0()
{    return artifact.getType();}
public String maven_f2574_0()
{    return artifact.getClassifier();}
public boolean maven_f2575_0()
{    return artifact.hasClassifier();}
public void maven_f2576_0(File destination)
{    artifact.setFile(destination);    project.getArtifact().setFile(destination);}
public String maven_f2577_0()
{    return artifact.getBaseVersion();}
public void maven_f2578_0(String baseVersion)
{    artifact.setBaseVersion(baseVersion);}
public String maven_f2579_0()
{    return artifact.getId();}
public String maven_f2580_0()
{    return artifact.getDependencyConflictId();}
public void maven_f2581_0(ArtifactMetadata metadata)
{    artifact.addMetadata(metadata);}
public Collection<ArtifactMetadata> maven_f2582_0()
{    return artifact.getMetadataList();}
public void maven_f2583_0(ArtifactRepository remoteRepository)
{    artifact.setRepository(remoteRepository);}
public ArtifactRepository maven_f2584_0()
{    return artifact.getRepository();}
public void maven_f2585_0(String version, ArtifactRepository localRepository)
{    artifact.updateVersion(version, localRepository);}
public String maven_f2586_0()
{    return artifact.getDownloadUrl();}
public void maven_f2587_0(String downloadUrl)
{    artifact.setDownloadUrl(downloadUrl);}
public ArtifactFilter maven_f2588_0()
{    return artifact.getDependencyFilter();}
public void maven_f2589_0(ArtifactFilter artifactFilter)
{    artifact.setDependencyFilter(artifactFilter);}
public ArtifactHandler maven_f2590_0()
{    return artifact.getArtifactHandler();}
public List<String> maven_f2591_0()
{    return artifact.getDependencyTrail();}
public void maven_f2592_0(List<String> dependencyTrail)
{    artifact.setDependencyTrail(dependencyTrail);}
public void maven_f2593_0(String scope)
{    artifact.setScope(scope);}
public VersionRange maven_f2594_0()
{    return artifact.getVersionRange();}
public void maven_f2595_0(VersionRange newRange)
{    artifact.setVersionRange(newRange);}
public void maven_f2596_0(String version)
{    artifact.selectVersion(version);}
public void maven_f2597_0(String groupId)
{    artifact.setGroupId(groupId);}
public void maven_f2598_0(String artifactId)
{    artifact.setArtifactId(artifactId);}
public boolean maven_f2599_0()
{    return artifact.isSnapshot();}
public int maven_f2600_0(Artifact a)
{    return artifact.compareTo(a);}
public void maven_f2601_0(boolean resolved)
{    artifact.setResolved(resolved);}
public boolean maven_f2602_0()
{    return artifact.isResolved();}
public void maven_f2603_0(String version)
{    artifact.setResolvedVersion(version);}
public void maven_f2604_0(ArtifactHandler handler)
{    artifact.setArtifactHandler(handler);}
public String maven_f2605_0()
{    return "active project artifact:\n\tartifact = " + artifact + ";\n\tproject: " + project;}
public boolean maven_f2606_0()
{    return artifact.isRelease();}
public void maven_f2607_0(boolean release)
{    artifact.setRelease(release);}
public List<ArtifactVersion> maven_f2608_0()
{    return artifact.getAvailableVersions();}
public void maven_f2609_0(List<ArtifactVersion> versions)
{    artifact.setAvailableVersions(versions);}
public boolean maven_f2610_0()
{    return artifact.isOptional();}
public ArtifactVersion maven_f2611_0() throws OverConstrainedVersionException
{    return artifact.getSelectedVersion();}
public boolean maven_f2612_0() throws OverConstrainedVersionException
{    return artifact.isSelectedVersionKnown();}
public void maven_f2613_0(boolean optional)
{    artifact.setOptional(optional);}
public int maven_f2614_0()
{    int result = 17;    result = 37 * result + getGroupId().hashCode();    result = 37 * result + getArtifactId().hashCode();    result = 37 * result + getType().hashCode();    if (getVersion() != null) {        result = 37 * result + getVersion().hashCode();    }    result = 37 * result + (getClassifier() != null ? getClassifier().hashCode() : 0);    return result;}
public boolean maven_f2615_0(Object o)
{    if (o == this) {        return true;    }    if (!(o instanceof Artifact)) {        return false;    }    Artifact a = (Artifact) o;    if (!a.getGroupId().equals(getGroupId())) {        return false;    } else if (!a.getArtifactId().equals(getArtifactId())) {        return false;    } else if (!a.getVersion().equals(getVersion())) {        return false;    } else if (!a.getType().equals(getType())) {        return false;    } else if (a.getClassifier() == null ? getClassifier() != null : !a.getClassifier().equals(getClassifier())) {        return false;    }    return true;}
public void maven_f2616_0(String artifactId)
{    throw new UnsupportedOperationException("Cannot change the artifactId for an attached artifact." + " It is derived from the main artifact.");}
public List<ArtifactVersion> maven_f2617_0()
{    return parent.getAvailableVersions();}
public void maven_f2618_0(List<ArtifactVersion> availableVersions)
{    throw new UnsupportedOperationException("Cannot change the version information for an attached artifact." + " It is derived from the main artifact.");}
public String maven_f2619_0()
{    return parent.getBaseVersion();}
public void maven_f2620_0(String baseVersion)
{    throw new UnsupportedOperationException("Cannot change the version information for an attached artifact." + " It is derived from the main artifact.");}
public String maven_f2621_0()
{    return parent.getDownloadUrl();}
public void maven_f2622_0(String downloadUrl)
{    throw new UnsupportedOperationException("Cannot change the download information for an attached artifact." + " It is derived from the main artifact.");}
public void maven_f2623_0(String groupId)
{    throw new UnsupportedOperationException("Cannot change the groupId for an attached artifact." + " It is derived from the main artifact.");}
public ArtifactRepository maven_f2624_0()
{    return parent.getRepository();}
public void maven_f2625_0(ArtifactRepository repository)
{    throw new UnsupportedOperationException("Cannot change the repository information for an attached artifact." + " It is derived from the main artifact.");}
public String maven_f2626_0()
{    return parent.getScope();}
public void maven_f2627_0(String scope)
{    throw new UnsupportedOperationException("Cannot change the scoping information for an attached artifact." + " It is derived from the main artifact.");}
public String maven_f2628_0()
{    return parent.getVersion();}
public void maven_f2629_0(String version)
{    throw new UnsupportedOperationException("Cannot change the version information for an attached artifact." + " It is derived from the main artifact.");}
public VersionRange maven_f2630_0()
{    return parent.getVersionRange();}
public void maven_f2631_0(VersionRange range)
{    throw new UnsupportedOperationException("Cannot change the version information for an attached artifact." + " It is derived from the main artifact.");}
public boolean maven_f2632_0()
{    return parent.isRelease();}
public void maven_f2633_0(boolean release)
{    throw new UnsupportedOperationException("Cannot change the version information for an attached artifact." + " It is derived from the main artifact.");}
public boolean maven_f2634_0()
{    return parent.isSnapshot();}
public void maven_f2635_0(ArtifactMetadata metadata)
{}
public Collection<ArtifactMetadata> maven_f2636_0()
{    return Collections.emptyList();}
public int maven_f2637_0()
{    return hashCode;}
public boolean maven_f2638_0(Object o)
{    if (o == this) {        return true;    }    if (!(o instanceof CacheKey)) {        return false;    }    CacheKey other = (CacheKey) o;    return pomHash == other.pomHash && artifactEquals(artifact, other.artifact) && resolveManagedVersions == other.resolveManagedVersions && repositoriesEquals(repositories, other.repositories);}
private static int maven_f2639_0(Artifact a)
{    int result = 17;    result = 31 * result + a.getGroupId().hashCode();    result = 31 * result + a.getArtifactId().hashCode();    result = 31 * result + a.getType().hashCode();    if (a.getVersion() != null) {        result = 31 * result + a.getVersion().hashCode();    }    result = 31 * result + (a.getClassifier() != null ? a.getClassifier().hashCode() : 0);    result = 31 * result + (a.getScope() != null ? a.getScope().hashCode() : 0);    result = 31 * result + (a.getDependencyFilter() != null ? a.getDependencyFilter().hashCode() : 0);    result = 31 * result + (a.isOptional() ? 1 : 0);    return result;}
private static boolean maven_f2640_0(Artifact a1, Artifact a2)
{    if (a1 == a2) {        return true;    }    return Objects.equals(a1.getGroupId(), a2.getGroupId()) && Objects.equals(a1.getArtifactId(), a2.getArtifactId()) && Objects.equals(a1.getType(), a2.getType()) && Objects.equals(a1.getVersion(), a2.getVersion()) && Objects.equals(a1.getClassifier(), a2.getClassifier()) && Objects.equals(a1.getScope(), a2.getScope()) && Objects.equals(a1.getDependencyFilter(), a2.getDependencyFilter()) && a1.isOptional() == a2.isOptional();}
private static int maven_f2641_0(ArtifactRepository repository)
{    int result = 17;    result = 31 * result + (repository.getId() != null ? repository.getId().hashCode() : 0);    return result;}
private static int maven_f2642_0(List<ArtifactRepository> repositories)
{    int result = 17;    for (ArtifactRepository repository : repositories) {        result = 31 * result + repositoryHashCode(repository);    }    return result;}
private static boolean maven_f2643_0(ArtifactRepository r1, ArtifactRepository r2)
{    if (r1 == r2) {        return true;    }    return Objects.equals(r1.getId(), r2.getId()) && Objects.equals(r1.getUrl(), r2.getUrl()) && repositoryPolicyEquals(r1.getReleases(), r2.getReleases()) && repositoryPolicyEquals(r1.getSnapshots(), r2.getSnapshots());}
private static boolean maven_f2644_0(ArtifactRepositoryPolicy p1, ArtifactRepositoryPolicy p2)
{    if (p1 == p2) {        return true;    }    return p1.isEnabled() == p2.isEnabled() && Objects.equals(p1.getUpdatePolicy(), p2.getUpdatePolicy());}
private static boolean maven_f2645_0(List<ArtifactRepository> r1, List<ArtifactRepository> r2)
{    if (r1.size() != r2.size()) {        return false;    }    for (Iterator<ArtifactRepository> it1 = r1.iterator(), it2 = r2.iterator(); it1.hasNext(); ) {        if (!repositoryEquals(it1.next(), it2.next())) {            return false;        }    }    return true;}
public Artifact maven_f2646_0()
{    return pomArtifact;}
public Artifact maven_f2647_0()
{    return relocatedArtifact;}
public List<Artifact> maven_f2648_0()
{    return artifacts;}
public Map<String, Artifact> maven_f2649_0()
{    return managedVersions;}
public List<ArtifactRepository> maven_f2650_0()
{    return remoteRepositories;}
public boolean maven_f2651_0()
{    File pomFile = pomArtifact.getFile();    if (pomFile != null) {        if (pomFile.canRead()) {            return length != pomFile.length() || timestamp != pomFile.lastModified();        } else {                        boolean snapshot = pomArtifact.isSnapshot();            for (ArtifactRepository repository : remoteRepositories) {                ArtifactRepositoryPolicy policy = snapshot ? repository.getSnapshots() : repository.getReleases();                if (ArtifactRepositoryPolicy.UPDATE_POLICY_ALWAYS.equals(policy.getUpdatePolicy())) {                    return true;                }            }        }    }    return length != -1 || timestamp != -1;}
public ResolutionGroup maven_f2652_0(Artifact artifact, boolean resolveManagedVersions, ArtifactRepository localRepository, List<ArtifactRepository> remoteRepositories)
{    CacheKey cacheKey = newCacheKey(artifact, resolveManagedVersions, localRepository, remoteRepositories);    CacheRecord cacheRecord = cache.get(cacheKey);    if (cacheRecord != null && !cacheRecord.isStale()) {        Artifact pomArtifact = ArtifactUtils.copyArtifact(cacheRecord.getArtifact());        Artifact relocatedArtifact = ArtifactUtils.copyArtifactSafe(cacheRecord.getRelocatedArtifact());        Set<Artifact> artifacts = ArtifactUtils.copyArtifacts(cacheRecord.getArtifacts(), new LinkedHashSet<Artifact>());        Map<String, Artifact> managedVersions = cacheRecord.getManagedVersions();        if (managedVersions != null) {            managedVersions = ArtifactUtils.copyArtifacts(managedVersions, new LinkedHashMap<String, Artifact>());        }        return new ResolutionGroup(pomArtifact, relocatedArtifact, artifacts, managedVersions, cacheRecord.getRemoteRepositories());    }    cache.remove(cacheKey);    return null;}
public void maven_f2653_0(Artifact artifact, boolean resolveManagedVersions, ArtifactRepository localRepository, List<ArtifactRepository> remoteRepositories, ResolutionGroup result)
{    put(newCacheKey(artifact, resolveManagedVersions, localRepository, remoteRepositories), result);}
protected CacheKey maven_f2654_0(Artifact artifact, boolean resolveManagedVersions, ArtifactRepository localRepository, List<ArtifactRepository> remoteRepositories)
{    return new CacheKey(artifact, resolveManagedVersions, localRepository, remoteRepositories);}
protected void maven_f2655_0(CacheKey cacheKey, ResolutionGroup result)
{    CacheRecord cacheRecord = new CacheRecord(result.getPomArtifact(), result.getRelocatedArtifact(), result.getArtifacts(), result.getManagedVersions(), result.getResolutionRepositories());    cache.put(cacheKey, cacheRecord);}
public void maven_f2656_0()
{    cache.clear();}
public String maven_f2657_0()
{    return groupId + ":" + artifactId + ":" + version;}
public int maven_f2658_0()
{    return hashCode;}
public boolean maven_f2659_0(Object o)
{    if (o == this) {        return true;    }    if (!(o instanceof CacheKey)) {        return false;    }    CacheKey that = (CacheKey) o;    return Objects.equals(groupId, that.groupId) && Objects.equals(artifactId, that.artifactId) && Objects.equals(version, that.version) && Objects.equals(dependencyArtifacts, that.dependencyArtifacts) && Objects.equals(workspace, that.workspace) && Objects.equals(localRepo, that.localRepo) && RepositoryUtils.repositoriesEquals(repositories, that.repositories) && Objects.equals(collect, that.collect) && Objects.equals(resolve, that.resolve) && aggregating == that.aggregating;}
public Key maven_f2660_0(MavenProject project, Collection<String> scopesToCollect, Collection<String> scopesToResolve, boolean aggregating, RepositorySystemSession session)
{    return new CacheKey(project, project.getRemoteProjectRepositories(), scopesToCollect, scopesToResolve, aggregating, session);}
public CacheRecord maven_f2661_0(Key key) throws LifecycleExecutionException
{    CacheRecord cacheRecord = cache.get(key);    if (cacheRecord != null && cacheRecord.getException() != null) {        throw cacheRecord.getException();    }    return cacheRecord;}
public CacheRecord maven_f2662_0(Key key, Set<Artifact> projectArtifacts)
{    Objects.requireNonNull(projectArtifacts, "projectArtifacts cannot be null");    assertUniqueKey(key);    CacheRecord record = new CacheRecord(Collections.unmodifiableSet(new LinkedHashSet<>(projectArtifacts)));    cache.put(key, record);    return record;}
protected void maven_f2663_0(Key key)
{    if (cache.containsKey(key)) {        throw new IllegalStateException("Duplicate artifact resolution result for project " + key);    }}
public CacheRecord maven_f2664_0(Key key, LifecycleExecutionException exception)
{    Objects.requireNonNull(exception, "exception cannot be null");    assertUniqueKey(key);    CacheRecord record = new CacheRecord(exception);    cache.put(key, record);    return record;}
public void maven_f2665_0()
{    cache.clear();}
public void maven_f2666_0(MavenProject project, Key cacheKey, CacheRecord record)
{}
private static String maven_f2667_0(Dependency dependency)
{    return "Dependency: " + ArtifactUtils.versionlessKey(dependency.getGroupId(), dependency.getArtifactId());}
public Dependency maven_f2668_0()
{    return dependency;}
private void maven_f2669_0(MetadataResolutionRequest request)
{    RepositorySystemSession session = legacySupport.getRepositorySession();    if (session != null) {        request.setOffline(session.isOffline());        request.setForceUpdate(RepositoryPolicy.UPDATE_POLICY_ALWAYS.equals(session.getUpdatePolicy()));    }}
public ResolutionGroup maven_f2670_0(Artifact artifact, ArtifactRepository localRepository, List<ArtifactRepository> remoteRepositories) throws ArtifactMetadataRetrievalException
{    return retrieve(artifact, localRepository, remoteRepositories, false);}
public ResolutionGroup maven_f2671_0(Artifact artifact, ArtifactRepository localRepository, List<ArtifactRepository> remoteRepositories, boolean resolveManagedVersions) throws ArtifactMetadataRetrievalException
{    MetadataResolutionRequest request = new DefaultMetadataResolutionRequest();    injectSession(request);    request.setArtifact(artifact);    request.setLocalRepository(localRepository);    request.setRemoteRepositories(remoteRepositories);    request.setResolveManagedVersions(resolveManagedVersions);    return retrieve(request);}
public ResolutionGroup maven_f2672_0(MetadataResolutionRequest request) throws ArtifactMetadataRetrievalException
{    Artifact artifact = request.getArtifact();        if (artifact.getScope() != null && artifact.getScope().equals(Artifact.SCOPE_SYSTEM)) {        return new ResolutionGroup(null, null, null);    }    ResolutionGroup cached = cache.get(artifact, request.isResolveManagedVersions(), request.getLocalRepository(), request.getRemoteRepositories());    if (cached != null &&     (!request.isForceUpdate() || hasFile(cached.getPomArtifact()))) {        return cached;    }    List<Dependency> dependencies;    List<Dependency> managedDependencies = null;    List<ArtifactRepository> pomRepositories = null;    Artifact pomArtifact;    Artifact relocatedArtifact = null;    final WorkspaceReader workspace = legacySupport.getRepositorySession().getWorkspaceReader();    Model model = null;    if (workspace instanceof MavenWorkspaceReader) {        model = ((MavenWorkspaceReader) workspace).findModel(RepositoryUtils.toArtifact(artifact));    }    if (model != null) {        pomArtifact = artifact;        dependencies = model.getDependencies();        DependencyManagement dependencyManagement = model.getDependencyManagement();        managedDependencies = dependencyManagement == null ? null : dependencyManagement.getDependencies();    } else if (artifact instanceof ArtifactWithDependencies) {        pomArtifact = artifact;        dependencies = ((ArtifactWithDependencies) artifact).getDependencies();        managedDependencies = ((ArtifactWithDependencies) artifact).getManagedDependencies();    } else {        ProjectRelocation rel = retrieveRelocatedProject(artifact, request);        if (rel == null) {            return null;        }        pomArtifact = rel.pomArtifact;        relocatedArtifact = rel.relocatedArtifact;        if (rel.project == null) {                                    dependencies = Collections.emptyList();        } else {            dependencies = rel.project.getDependencies();            DependencyManagement depMgmt = rel.project.getDependencyManagement();            managedDependencies = (depMgmt != null) ? depMgmt.getDependencies() : null;            pomRepositories = rel.project.getRemoteArtifactRepositories();        }    }    Set<Artifact> artifacts = Collections.emptySet();    if (!artifact.getArtifactHandler().isIncludesDependencies()) {        artifacts = new LinkedHashSet<>();        for (Dependency dependency : dependencies) {            Artifact dependencyArtifact = createDependencyArtifact(dependency, artifact, pomArtifact);            if (dependencyArtifact != null) {                artifacts.add(dependencyArtifact);            }        }    }    Map<String, Artifact> managedVersions = null;    if (managedDependencies != null && request.isResolveManagedVersions()) {        managedVersions = new HashMap<>();        for (Dependency managedDependency : managedDependencies) {            Artifact managedArtifact = createDependencyArtifact(managedDependency, null, pomArtifact);            managedVersions.put(managedDependency.getManagementKey(), managedArtifact);        }    }    List<ArtifactRepository> aggregatedRepositories = aggregateRepositories(request.getRemoteRepositories(), pomRepositories);    ResolutionGroup result = new ResolutionGroup(pomArtifact, relocatedArtifact, artifacts, managedVersions, aggregatedRepositories);    cache.put(artifact, request.isResolveManagedVersions(), request.getLocalRepository(), request.getRemoteRepositories(), result);    return result;}
private boolean maven_f2673_0(Artifact artifact)
{    return artifact != null && artifact.getFile() != null && artifact.getFile().exists();}
private List<ArtifactRepository> maven_f2674_0(List<ArtifactRepository> requestRepositories, List<ArtifactRepository> pomRepositories)
{    List<ArtifactRepository> repositories = requestRepositories;    if (pomRepositories != null && !pomRepositories.isEmpty()) {        Map<String, ArtifactRepository> repos = new LinkedHashMap<>();        for (ArtifactRepository repo : requestRepositories) {            if (!repos.containsKey(repo.getId())) {                repos.put(repo.getId(), repo);            }        }        for (ArtifactRepository repo : pomRepositories) {            if (!repos.containsKey(repo.getId())) {                repos.put(repo.getId(), repo);            }        }        repositories = new ArrayList<>(repos.values());    }    return repositories;}
private Artifact maven_f2675_0(Dependency dependency, Artifact owner, Artifact pom) throws ArtifactMetadataRetrievalException
{    try {        String inheritedScope = (owner != null) ? owner.getScope() : null;        ArtifactFilter inheritedFilter = (owner != null) ? owner.getDependencyFilter() : null;        return createDependencyArtifact(repositorySystem, dependency, inheritedScope, inheritedFilter);    } catch (InvalidVersionSpecificationException e) {        throw new ArtifactMetadataRetrievalException("Invalid version for dependency " + dependency.getManagementKey() + ": " + e.getMessage(), e, pom);    }}
private static Artifact maven_f2676_0(ArtifactFactory factory, Dependency dependency, String inheritedScope, ArtifactFilter inheritedFilter) throws InvalidVersionSpecificationException
{    String effectiveScope = getEffectiveScope(dependency.getScope(), inheritedScope);    if (effectiveScope == null) {        return null;    }    VersionRange versionRange = VersionRange.createFromVersionSpec(dependency.getVersion());    Artifact dependencyArtifact = factory.createDependencyArtifact(dependency.getGroupId(), dependency.getArtifactId(), versionRange, dependency.getType(), dependency.getClassifier(), effectiveScope, dependency.isOptional());    ArtifactFilter dependencyFilter = inheritedFilter;    if (dependencyFilter != null && !dependencyFilter.include(dependencyArtifact)) {        return null;    }    if (Artifact.SCOPE_SYSTEM.equals(effectiveScope)) {        dependencyArtifact.setFile(new File(dependency.getSystemPath()));    }    dependencyArtifact.setDependencyFilter(createDependencyFilter(dependency, dependencyFilter));    return dependencyArtifact;}
private static String maven_f2677_0(String originalScope, String inheritedScope)
{    String effectiveScope = Artifact.SCOPE_RUNTIME;    if (originalScope == null) {        originalScope = Artifact.SCOPE_COMPILE;    }    if (inheritedScope == null) {                effectiveScope = originalScope;    } else if (Artifact.SCOPE_TEST.equals(originalScope) || Artifact.SCOPE_PROVIDED.equals(originalScope)) {                effectiveScope = null;    } else if (Artifact.SCOPE_SYSTEM.equals(originalScope)) {                effectiveScope = Artifact.SCOPE_SYSTEM;    } else if (Artifact.SCOPE_COMPILE.equals(originalScope) && Artifact.SCOPE_COMPILE.equals(inheritedScope)) {                effectiveScope = Artifact.SCOPE_COMPILE;    } else if (Artifact.SCOPE_TEST.equals(inheritedScope)) {        effectiveScope = Artifact.SCOPE_TEST;    } else if (Artifact.SCOPE_PROVIDED.equals(inheritedScope)) {        effectiveScope = Artifact.SCOPE_PROVIDED;    }    return effectiveScope;}
private static ArtifactFilter maven_f2678_0(Dependency dependency, ArtifactFilter inheritedFilter)
{    ArtifactFilter effectiveFilter = inheritedFilter;    if (!dependency.getExclusions().isEmpty()) {        effectiveFilter = new ExclusionArtifactFilter(dependency.getExclusions());        if (inheritedFilter != null) {            effectiveFilter = new AndArtifactFilter(Arrays.asList(inheritedFilter, effectiveFilter));        }    }    return effectiveFilter;}
public List<ArtifactVersion> maven_f2679_0(Artifact artifact, ArtifactRepository localRepository, List<ArtifactRepository> remoteRepositories) throws ArtifactMetadataRetrievalException
{    MetadataResolutionRequest request = new DefaultMetadataResolutionRequest();    injectSession(request);    request.setArtifact(artifact);    request.setLocalRepository(localRepository);    request.setRemoteRepositories(remoteRepositories);    return retrieveAvailableVersions(request);}
public List<ArtifactVersion> maven_f2680_0(MetadataResolutionRequest request) throws ArtifactMetadataRetrievalException
{    RepositoryMetadata metadata = new ArtifactRepositoryMetadata(request.getArtifact());    try {        repositoryMetadataManager.resolve(metadata, request);    } catch (RepositoryMetadataResolutionException e) {        throw new ArtifactMetadataRetrievalException(e.getMessage(), e, request.getArtifact());    }    List<String> availableVersions = request.getLocalRepository().findVersions(request.getArtifact());    return retrieveAvailableVersionsFromMetadata(metadata.getMetadata(), availableVersions);}
public List<ArtifactVersion> maven_f2681_0(Artifact artifact, ArtifactRepository localRepository, ArtifactRepository deploymentRepository) throws ArtifactMetadataRetrievalException
{    RepositoryMetadata metadata = new ArtifactRepositoryMetadata(artifact);    try {        repositoryMetadataManager.resolveAlways(metadata, localRepository, deploymentRepository);    } catch (RepositoryMetadataResolutionException e) {        throw new ArtifactMetadataRetrievalException(e.getMessage(), e, artifact);    }    List<String> availableVersions = localRepository.findVersions(artifact);    return retrieveAvailableVersionsFromMetadata(metadata.getMetadata(), availableVersions);}
private List<ArtifactVersion> maven_f2682_0(Metadata repoMetadata, List<String> availableVersions)
{    Collection<String> versions = new LinkedHashSet<>();    if ((repoMetadata != null) && (repoMetadata.getVersioning() != null)) {        versions.addAll(repoMetadata.getVersioning().getVersions());    }    versions.addAll(availableVersions);    List<ArtifactVersion> artifactVersions = new ArrayList<>(versions.size());    for (String version : versions) {        artifactVersions.add(new DefaultArtifactVersion(version));    }    return artifactVersions;}
public static Set<Artifact> maven_f2683_0(ArtifactFactory artifactFactory, List<Dependency> dependencies, String inheritedScope, ArtifactFilter dependencyFilter, MavenProject project) throws InvalidDependencyVersionException
{    Set<Artifact> artifacts = new LinkedHashSet<>();    for (Dependency d : dependencies) {        Artifact dependencyArtifact;        try {            dependencyArtifact = createDependencyArtifact(artifactFactory, d, inheritedScope, dependencyFilter);        } catch (InvalidVersionSpecificationException e) {            throw new InvalidDependencyVersionException(project.getId(), d, project.getFile(), e);        }        if (dependencyArtifact != null) {            artifacts.add(dependencyArtifact);        }    }    return artifacts;}
private ProjectBuilder maven_f2684_0()
{    if (projectBuilder != null) {        return projectBuilder;    }    try {        projectBuilder = container.lookup(ProjectBuilder.class);    } catch (ComponentLookupException e) {        }    return projectBuilder;}
private ProjectRelocationf2685_1Artifact artifact, MetadataResolutionRequest repositoryRequest) throws ArtifactMetadataRetrievalException
{    MavenProject project;    Artifact pomArtifact;    Artifact relocatedArtifact = null;    boolean done = false;    do {        project = null;        pomArtifact = repositorySystem.createProjectArtifact(artifact.getGroupId(), artifact.getArtifactId(), artifact.getVersion(), artifact.getScope());        if ("pom".equals(artifact.getType())) {            pomArtifact.setFile(artifact.getFile());        }        if (Artifact.SCOPE_SYSTEM.equals(artifact.getScope())) {            done = true;        } else {            try {                ProjectBuildingRequest configuration = new DefaultProjectBuildingRequest();                configuration.setLocalRepository(repositoryRequest.getLocalRepository());                configuration.setRemoteRepositories(repositoryRequest.getRemoteRepositories());                configuration.setValidationLevel(ModelBuildingRequest.VALIDATION_LEVEL_MINIMAL);                configuration.setProcessPlugins(false);                configuration.setRepositoryMerging(ProjectBuildingRequest.RepositoryMerging.REQUEST_DOMINANT);                configuration.setSystemProperties(getSystemProperties());                configuration.setRepositorySession(legacySupport.getRepositorySession());                project = getProjectBuilder().build(pomArtifact, configuration).getProject();            } catch (ProjectBuildingException e) {                ModelProblem missingParentPom = hasMissingParentPom(e);                if (missingParentPom != null) {                    throw new ArtifactMetadataRetrievalException("Failed to process POM for " + artifact.getId() + ": " + missingParentPom.getMessage(), missingParentPom.getException(), artifact);                }                String message;                if (isMissingPom(e)) {                    message = "Missing POM for " + artifact.getId();                } else if (isNonTransferrablePom(e)) {                    throw new ArtifactMetadataRetrievalException("Failed to retrieve POM for " + artifact.getId() + ": " + e.getCause().getMessage(), e.getCause(), artifact);                } else {                    message = "Invalid POM for " + artifact.getId() + ", transitive dependencies (if any) will not be available" + ", enable debug logging for more details";                }                if (logger.isDebugEnabled()) {                    message += ": " + e.getMessage();                }                            }            if (project != null) {                Relocation relocation = null;                DistributionManagement distMgmt = project.getDistributionManagement();                if (distMgmt != null) {                    relocation = distMgmt.getRelocation();                    artifact.setDownloadUrl(distMgmt.getDownloadUrl());                    pomArtifact.setDownloadUrl(distMgmt.getDownloadUrl());                }                if (relocation != null) {                    if (relocation.getGroupId() != null) {                        artifact.setGroupId(relocation.getGroupId());                        relocatedArtifact = artifact;                        project.setGroupId(relocation.getGroupId());                    }                    if (relocation.getArtifactId() != null) {                        artifact.setArtifactId(relocation.getArtifactId());                        relocatedArtifact = artifact;                        project.setArtifactId(relocation.getArtifactId());                    }                    if (relocation.getVersion() != null) {                                                artifact.setVersionRange(VersionRange.createFromVersion(relocation.getVersion()));                        relocatedArtifact = artifact;                        project.setVersion(relocation.getVersion());                    }                    if (artifact.getDependencyFilter() != null && !artifact.getDependencyFilter().include(artifact)) {                        return null;                    }                                                                                List<ArtifactVersion> available = artifact.getAvailableVersions();                    if (available != null && !available.isEmpty()) {                        MetadataResolutionRequest metadataRequest = new DefaultMetadataResolutionRequest(repositoryRequest);                        metadataRequest.setArtifact(artifact);                        available = retrieveAvailableVersions(metadataRequest);                        artifact.setAvailableVersions(available);                    }                    String message = "\n  This artifact has been relocated to " + artifact.getGroupId() + ":" + artifact.getArtifactId() + ":" + artifact.getVersion() + ".\n";                    if (relocation.getMessage() != null) {                        message += "  " + relocation.getMessage() + "\n";                    }                    if (artifact.getDependencyTrail() != null && artifact.getDependencyTrail().size() == 1) {                                            } else {                                            }                } else {                    done = true;                }            } else {                done = true;            }        }    } while (!done);    ProjectRelocation rel = new ProjectRelocation();    rel.project = project;    rel.pomArtifact = pomArtifact;    rel.relocatedArtifact = relocatedArtifact;    return rel;}
private ModelProblem maven_f2686_0(ProjectBuildingException e)
{    if (e.getCause() instanceof ModelBuildingException) {        ModelBuildingException mbe = (ModelBuildingException) e.getCause();        for (ModelProblem problem : mbe.getProblems()) {            if (problem.getException() instanceof UnresolvableModelException) {                return problem;            }        }    }    return null;}
private boolean maven_f2687_0(Exception e)
{    if (e.getCause() instanceof MultipleArtifactsNotFoundException) {        return true;    }    return e.getCause() instanceof org.eclipse.aether.resolution.ArtifactResolutionException && e.getCause().getCause() instanceof ArtifactNotFoundException;}
private boolean maven_f2688_0(Exception e)
{    if (e.getCause() instanceof ArtifactResolutionException) {        return true;    }    return e.getCause() instanceof org.eclipse.aether.resolution.ArtifactResolutionException && !(e.getCause().getCause() instanceof ArtifactNotFoundException);}
private Properties maven_f2689_0()
{    Properties props = new Properties();    EnvironmentUtils.addEnvVars(props);    SystemProperties.addSystemProperties(props);    return props;}
public List<Dependency> maven_f2690_0()
{    return plugin.getDependencies();}
public List<Dependency> maven_f2691_0()
{    return Collections.emptyList();}
public String maven_f2692_0()
{    return null;}
public String maven_f2693_0()
{    return null;}
public String maven_f2694_0()
{    return "jar";}
public String maven_f2695_0()
{    return "none";}
public String maven_f2696_0()
{    return "maven-plugin";}
public boolean maven_f2697_0()
{    return true;}
public boolean maven_f2698_0()
{    return false;}
public MavenProject maven_f2699_0()
{    return project;}
public List<Dependency> maven_f2700_0()
{    return project.getDependencies();}
public List<Dependency> maven_f2701_0()
{    DependencyManagement depMngt = project.getDependencyManagement();    return (depMngt != null) ? Collections.unmodifiableList(depMngt.getDependencies()) : Collections.<Dependency>emptyList();}
public String maven_f2702_0()
{    return null;}
public String maven_f2703_0()
{    return null;}
public String maven_f2704_0()
{    return "pom";}
public String maven_f2705_0()
{    return "none";}
public String maven_f2706_0()
{    return "pom";}
public boolean maven_f2707_0()
{    return false;}
public boolean maven_f2708_0()
{    return false;}
public File maven_f2709_0()
{    return file;}
public String maven_f2710_0()
{    return getFilename();}
public String maven_f2711_0(ArtifactRepository repository)
{    return getFilename();}
private String maven_f2712_0()
{    return getArtifactId() + "-" + artifact.getVersion() + ".pom";}
public void maven_f2713_0(ArtifactRepository localRepository, ArtifactRepository remoteRepository) throws RepositoryMetadataStoreException
{    File destination = new File(localRepository.getBasedir(), localRepository.pathOfLocalRepositoryMetadata(this, remoteRepository));    try {        FileUtils.copyFile(file, destination);    } catch (IOException e) {        throw new RepositoryMetadataStoreException("Error copying POM to the local repository.", e);    }}
public String maven_f2714_0()
{    return "project information for " + artifact.getArtifactId() + " " + artifact.getVersion();}
public boolean maven_f2715_0()
{    return true;}
public String maven_f2716_0()
{    return artifact.getBaseVersion();}
public Object maven_f2717_0()
{    return "project " + artifact.getGroupId() + ":" + artifact.getArtifactId();}
public void maven_f2718_0(ArtifactMetadata metadata)
{    ProjectArtifactMetadata m = (ProjectArtifactMetadata) metadata;    if (!m.file.equals(file)) {        throw new IllegalStateException("Cannot add two different pieces of metadata for: " + getKey());    }}
public void maven_f2719_0(org.apache.maven.repository.legacy.metadata.ArtifactMetadata metadata)
{    this.merge((ArtifactMetadata) metadata);}
public Set<Artifact> maven_f2720_0()
{    return artifacts;}
public LifecycleExecutionException maven_f2721_0()
{    return exception;}
public DependencyFilter maven_f2722_0()
{    return filter;}
public MavenProject maven_f2723_0()
{    return project;}
public RepositorySystemSession maven_f2724_0()
{    return session;}
public DependencyResolutionRequest maven_f2725_0(DependencyFilter filter)
{    this.filter = filter;    return this;}
public DependencyResolutionRequest maven_f2726_0(MavenProject project)
{    this.project = project;    return this;}
public DependencyResolutionRequest maven_f2727_0(RepositorySystemSession repositorySession)
{    this.session = repositorySession;    return this;}
public DependencyNode maven_f2728_0()
{    return root;}
public void maven_f2729_0(DependencyNode root)
{    this.root = root;}
public List<Dependency> maven_f2730_0()
{    return dependencies;}
public List<Dependency> maven_f2731_0()
{    return resolvedDependencies;}
public void maven_f2732_0(Dependency dependency)
{    dependencies.add(dependency);    resolvedDependencies.add(dependency);}
public List<Dependency> maven_f2733_0()
{    return unresolvedDependencies;}
public List<Exception> maven_f2734_0()
{    return collectionErrors;}
public void maven_f2735_0(List<Exception> exceptions)
{    if (exceptions != null) {        this.collectionErrors = exceptions;    } else {        this.collectionErrors = new ArrayList<>();    }}
public List<Exception> maven_f2736_0(Dependency dependency)
{    List<Exception> errors = resolutionErrors.get(dependency);    return (errors != null) ? Collections.unmodifiableList(errors) : Collections.<Exception>emptyList();}
public void maven_f2737_0(Dependency dependency, List<Exception> errors)
{    dependencies.add(dependency);    unresolvedDependencies.add(dependency);    resolutionErrors.put(dependency, errors);}
public void maven_f2738_0(MavenProject project, String artifactType, String artifactClassifier, File artifactFile)
{    String type = artifactType;    ArtifactHandler handler = null;    if (type != null) {        handler = artifactHandlerManager.getArtifactHandler(artifactType);    }    if (handler == null) {        handler = artifactHandlerManager.getArtifactHandler("jar");    }    Artifact artifact = new AttachedArtifact(project.getArtifact(), artifactType, artifactClassifier, handler);    artifact.setFile(artifactFile);    artifact.setResolved(true);    attachArtifact(project, artifact);}
public void maven_f2739_0(MavenProject project, String artifactType, File artifactFile)
{    ArtifactHandler handler = artifactHandlerManager.getArtifactHandler(artifactType);    Artifact artifact = new AttachedArtifact(project.getArtifact(), artifactType, handler);    artifact.setFile(artifactFile);    artifact.setResolved(true);    attachArtifact(project, artifact);}
public void maven_f2740_0(MavenProject project, File artifactFile, String artifactClassifier)
{    Artifact projectArtifact = project.getArtifact();    Artifact artifact = new AttachedArtifact(projectArtifact, projectArtifact.getType(), artifactClassifier, projectArtifact.getArtifactHandler());    artifact.setFile(artifactFile);    artifact.setResolved(true);    attachArtifact(project, artifact);}
public void maven_f2741_0(MavenProject project, Artifact artifact)
{    project.addAttachedArtifact(artifact);}
public void maven_f2742_0(MavenProject project, String resourceDirectory, List<String> includes, List<String> excludes)
{    Resource resource = new Resource();    resource.setDirectory(resourceDirectory);    resource.setIncludes(includes);    resource.setExcludes(excludes);    project.addResource(resource);}
public void maven_f2743_0(MavenProject project, String resourceDirectory, List<String> includes, List<String> excludes)
{    Resource resource = new Resource();    resource.setDirectory(resourceDirectory);    resource.setIncludes(includes);    resource.setExcludes(excludes);    project.addTestResource(resource);}
public MavenProject maven_f2744_0()
{    return project;}
public void maven_f2745_0(ModelBuildingEvent event)
{    Model model = event.getModel();    try {        pluginRepositories = projectBuildingHelper.createArtifactRepositories(model.getPluginRepositories(), pluginRepositories, projectBuildingRequest);    } catch (Exception e) {        event.getProblems().add(new ModelProblemCollectorRequest(Severity.ERROR, Version.BASE).setMessage("Invalid plugin repository: " + e.getMessage()).setException(e));    }    project.setPluginArtifactRepositories(pluginRepositories);    if (event.getRequest().isProcessPlugins()) {        try {            ProjectRealmCache.CacheRecord record = projectBuildingHelper.createProjectRealm(project, model, projectBuildingRequest);            project.setClassRealm(record.getRealm());            project.setExtensionDependencyFilter(record.getExtensionArtifactFilter());        } catch (PluginResolutionException | PluginManagerException | PluginVersionResolutionException e) {            event.getProblems().add(new ModelProblemCollectorRequest(Severity.ERROR, Version.BASE).setMessage("Unresolveable build extension: " + e.getMessage()).setException(e));        }        projectBuildingHelper.selectProjectRealm(project);    }        try {        remoteRepositories = projectBuildingHelper.createArtifactRepositories(model.getRepositories(), remoteRepositories, projectBuildingRequest);    } catch (Exception e) {        event.getProblems().add(new ModelProblemCollectorRequest(Severity.ERROR, Version.BASE).setMessage("Invalid artifact repository: " + e.getMessage()).setException(e));    }    project.setRemoteArtifactRepositories(remoteRepositories);}
public ProjectBuildingResult maven_f2746_0(File pomFile, ProjectBuildingRequest request) throws ProjectBuildingException
{    return build(pomFile, new FileModelSource(pomFile), new InternalConfig(request, null, useGlobalModelCache() ? getModelCache() : null));}
private boolean maven_f2747_0()
{    return !Boolean.getBoolean(DISABLE_GLOBAL_MODEL_CACHE_SYSTEM_PROPERTY);}
public ProjectBuildingResult maven_f2748_0(ModelSource modelSource, ProjectBuildingRequest request) throws ProjectBuildingException
{    return build(null, modelSource, new InternalConfig(request, null, useGlobalModelCache() ? getModelCache() : null));}
private ProjectBuildingResult maven_f2749_0(File pomFile, ModelSource modelSource, InternalConfig config) throws ProjectBuildingException
{    ClassLoader oldContextClassLoader = Thread.currentThread().getContextClassLoader();    try {        ProjectBuildingRequest projectBuildingRequest = config.request;        MavenProject project = projectBuildingRequest.getProject();        List<ModelProblem> modelProblems = null;        Throwable error = null;        if (project == null) {            ModelBuildingRequest request = getModelBuildingRequest(config);            project = new MavenProject();            project.setFile(pomFile);            DefaultModelBuildingListener listener = new DefaultModelBuildingListener(project, projectBuildingHelper, projectBuildingRequest);            request.setModelBuildingListener(listener);            request.setPomFile(pomFile);            request.setModelSource(modelSource);            request.setLocationTracking(true);            ModelBuildingResult result;            try {                result = modelBuilder.build(request);            } catch (ModelBuildingException e) {                result = e.getResult();                if (result == null || result.getEffectiveModel() == null) {                    throw new ProjectBuildingException(e.getModelId(), e.getMessage(), pomFile, e);                }                                error = e;            }            modelProblems = result.getProblems();            initProject(project, Collections.<String, MavenProject>emptyMap(), true, result, new HashMap<File, Boolean>(), projectBuildingRequest);        } else if (projectBuildingRequest.isResolveDependencies()) {            projectBuildingHelper.selectProjectRealm(project);        }        DependencyResolutionResult resolutionResult = null;        if (projectBuildingRequest.isResolveDependencies()) {            resolutionResult = resolveDependencies(project, config.session);        }        ProjectBuildingResult result = new DefaultProjectBuildingResult(project, modelProblems, resolutionResult);        if (error != null) {            ProjectBuildingException e = new ProjectBuildingException(Arrays.asList(result));            e.initCause(error);            throw e;        }        return result;    } finally {        Thread.currentThread().setContextClassLoader(oldContextClassLoader);    }}
private DependencyResolutionResult maven_f2750_0(MavenProject project, RepositorySystemSession session)
{    DependencyResolutionResult resolutionResult;    try {        DefaultDependencyResolutionRequest resolution = new DefaultDependencyResolutionRequest(project, session);        resolutionResult = dependencyResolver.resolve(resolution);    } catch (DependencyResolutionException e) {        resolutionResult = e.getResult();    }    Set<Artifact> artifacts = new LinkedHashSet<>();    if (resolutionResult.getDependencyGraph() != null) {        RepositoryUtils.toArtifacts(artifacts, resolutionResult.getDependencyGraph().getChildren(), Collections.singletonList(project.getArtifact().getId()), null);                LocalRepositoryManager lrm = session.getLocalRepositoryManager();        for (Artifact artifact : artifacts) {            if (!artifact.isResolved()) {                String path = lrm.getPathForLocalArtifact(RepositoryUtils.toArtifact(artifact));                artifact.setFile(new File(lrm.getRepository().getBasedir(), path));            }        }    }    project.setResolvedArtifacts(artifacts);    project.setArtifacts(artifacts);    return resolutionResult;}
private List<String> maven_f2751_0(List<Profile> profiles)
{    List<String> ids = new ArrayList<>(profiles.size());    for (Profile profile : profiles) {        ids.add(profile.getId());    }    return ids;}
private ModelBuildingRequest maven_f2752_0(InternalConfig config)
{    ProjectBuildingRequest configuration = config.request;    ModelBuildingRequest request = new DefaultModelBuildingRequest();    RequestTrace trace = RequestTrace.newChild(null, configuration).newChild(request);    ModelResolver resolver = new ProjectModelResolver(config.session, trace, repoSystem, repositoryManager, config.repositories, configuration.getRepositoryMerging(), config.modelPool);    request.setValidationLevel(configuration.getValidationLevel());    request.setProcessPlugins(configuration.isProcessPlugins());    request.setProfiles(configuration.getProfiles());    request.setActiveProfileIds(configuration.getActiveProfileIds());    request.setInactiveProfileIds(configuration.getInactiveProfileIds());    request.setSystemProperties(configuration.getSystemProperties());    request.setUserProperties(configuration.getUserProperties());    request.setBuildStartTime(configuration.getBuildStartTime());    request.setModelResolver(resolver);    request.setModelCache(config.modelCache);    return request;}
public ProjectBuildingResult maven_f2753_0(Artifact artifact, ProjectBuildingRequest request) throws ProjectBuildingException
{    return build(artifact, false, request);}
public ProjectBuildingResult maven_f2754_0(Artifact artifact, boolean allowStubModel, ProjectBuildingRequest request) throws ProjectBuildingException
{    org.eclipse.aether.artifact.Artifact pomArtifact = RepositoryUtils.toArtifact(artifact);    pomArtifact = ArtifactDescriptorUtils.toPomArtifact(pomArtifact);    InternalConfig config = new InternalConfig(request, null, useGlobalModelCache() ? getModelCache() : null);    boolean localProject;    try {        ArtifactRequest pomRequest = new ArtifactRequest();        pomRequest.setArtifact(pomArtifact);        pomRequest.setRepositories(config.repositories);        ArtifactResult pomResult = repoSystem.resolveArtifact(config.session, pomRequest);        pomArtifact = pomResult.getArtifact();        localProject = pomResult.getRepository() instanceof WorkspaceRepository;    } catch (org.eclipse.aether.resolution.ArtifactResolutionException e) {        if (e.getResults().get(0).isMissing() && allowStubModel) {            return build(null, createStubModelSource(artifact), config);        }        throw new ProjectBuildingException(artifact.getId(), "Error resolving project artifact: " + e.getMessage(), e);    }    File pomFile = pomArtifact.getFile();    if ("pom".equals(artifact.getType())) {        artifact.selectVersion(pomArtifact.getVersion());        artifact.setFile(pomFile);        artifact.setResolved(true);    }    return build(localProject ? pomFile : null, new FileModelSource(pomFile), config);}
private ModelSource maven_f2755_0(Artifact artifact)
{    StringBuilder buffer = new StringBuilder(1024);    buffer.append("<?xml version='1.0'?>");    buffer.append("<project>");    buffer.append("<modelVersion>4.0.0</modelVersion>");    buffer.append("<groupId>").append(artifact.getGroupId()).append("</groupId>");    buffer.append("<artifactId>").append(artifact.getArtifactId()).append("</artifactId>");    buffer.append("<version>").append(artifact.getBaseVersion()).append("</version>");    buffer.append("<packaging>").append(artifact.getType()).append("</packaging>");    buffer.append("</project>");    return new StringModelSource(buffer, artifact.getId());}
public List<ProjectBuildingResult> maven_f2756_0(List<File> pomFiles, boolean recursive, ProjectBuildingRequest request) throws ProjectBuildingException
{    List<ProjectBuildingResult> results = new ArrayList<>();    List<InterimResult> interimResults = new ArrayList<>();    ReactorModelPool modelPool = new ReactorModelPool();    InternalConfig config = new InternalConfig(request, modelPool, useGlobalModelCache() ? getModelCache() : new ReactorModelCache());    Map<String, MavenProject> projectIndex = new HashMap<>(256);    boolean noErrors = build(results, interimResults, projectIndex, pomFiles, new LinkedHashSet<File>(), true, recursive, config);    populateReactorModelPool(modelPool, interimResults);    ClassLoader oldContextClassLoader = Thread.currentThread().getContextClassLoader();    try {        noErrors = build(results, new ArrayList<MavenProject>(), projectIndex, interimResults, request, new HashMap<File, Boolean>(), config.session) && noErrors;    } finally {        Thread.currentThread().setContextClassLoader(oldContextClassLoader);    }    if (!noErrors) {        throw new ProjectBuildingException(results);    }    return results;}
private boolean maven_f2757_0(List<ProjectBuildingResult> results, List<InterimResult> interimResults, Map<String, MavenProject> projectIndex, List<File> pomFiles, Set<File> aggregatorFiles, boolean isRoot, boolean recursive, InternalConfig config)
{    boolean noErrors = true;    for (File pomFile : pomFiles) {        aggregatorFiles.add(pomFile);        if (!build(results, interimResults, projectIndex, pomFile, aggregatorFiles, isRoot, recursive, config)) {            noErrors = false;        }        aggregatorFiles.remove(pomFile);    }    return noErrors;}
private boolean maven_f2758_0(List<ProjectBuildingResult> results, List<InterimResult> interimResults, Map<String, MavenProject> projectIndex, File pomFile, Set<File> aggregatorFiles, boolean isRoot, boolean recursive, InternalConfig config)
{    boolean noErrors = true;    ModelBuildingRequest request = getModelBuildingRequest(config);    MavenProject project = new MavenProject();    project.setFile(pomFile);    request.setPomFile(pomFile);    request.setTwoPhaseBuilding(true);    request.setLocationTracking(true);    DefaultModelBuildingListener listener = new DefaultModelBuildingListener(project, projectBuildingHelper, config.request);    request.setModelBuildingListener(listener);    ModelBuildingResult result;    try {        result = modelBuilder.build(request);    } catch (ModelBuildingException e) {        result = e.getResult();        if (result == null || result.getEffectiveModel() == null) {            results.add(new DefaultProjectBuildingResult(e.getModelId(), pomFile, e.getProblems()));            return false;        }                        noErrors = false;    }    Model model = result.getEffectiveModel();    try {                initProject(project, projectIndex, false, result, new HashMap<File, Boolean>(0), config.request);    } catch (InvalidArtifactRTException iarte) {        result.getProblems().add(new DefaultModelProblem(null, ModelProblem.Severity.ERROR, null, model, -1, -1, iarte));    }    projectIndex.put(result.getModelIds().get(0), project);    InterimResult interimResult = new InterimResult(pomFile, request, result, listener, isRoot);    interimResults.add(interimResult);    if (recursive && !model.getModules().isEmpty()) {        File basedir = pomFile.getParentFile();        List<File> moduleFiles = new ArrayList<>();        for (String module : model.getModules()) {            if (StringUtils.isEmpty(module)) {                continue;            }            module = module.replace('\\', File.separatorChar).replace('/', File.separatorChar);            File moduleFile = new File(basedir, module);            if (moduleFile.isDirectory()) {                moduleFile = modelProcessor.locatePom(moduleFile);            }            if (!moduleFile.isFile()) {                ModelProblem problem = new DefaultModelProblem("Child module " + moduleFile + " of " + pomFile + " does not exist", ModelProblem.Severity.ERROR, ModelProblem.Version.BASE, model, -1, -1, null);                result.getProblems().add(problem);                noErrors = false;                continue;            }            if (Os.isFamily(Os.FAMILY_WINDOWS)) {                                try {                    moduleFile = moduleFile.getCanonicalFile();                } catch (IOException e) {                    moduleFile = moduleFile.getAbsoluteFile();                }            } else {                moduleFile = new File(moduleFile.toURI().normalize());            }            if (aggregatorFiles.contains(moduleFile)) {                StringBuilder buffer = new StringBuilder(256);                for (File aggregatorFile : aggregatorFiles) {                    buffer.append(aggregatorFile).append(" -> ");                }                buffer.append(moduleFile);                ModelProblem problem = new DefaultModelProblem("Child module " + moduleFile + " of " + pomFile + " forms aggregation cycle " + buffer, ModelProblem.Severity.ERROR, ModelProblem.Version.BASE, model, -1, -1, null);                result.getProblems().add(problem);                noErrors = false;                continue;            }            moduleFiles.add(moduleFile);        }        interimResult.modules = new ArrayList<>();        if (!build(results, interimResult.modules, projectIndex, moduleFiles, aggregatorFiles, false, recursive, config)) {            noErrors = false;        }    }    return noErrors;}
private void maven_f2759_0(ReactorModelPool reactorModelPool, List<InterimResult> interimResults)
{    for (InterimResult interimResult : interimResults) {        Model model = interimResult.result.getEffectiveModel();        reactorModelPool.put(model.getGroupId(), model.getArtifactId(), model.getVersion(), model.getPomFile());        populateReactorModelPool(reactorModelPool, interimResult.modules);    }}
private boolean maven_f2760_0(List<ProjectBuildingResult> results, List<MavenProject> projects, Map<String, MavenProject> projectIndex, List<InterimResult> interimResults, ProjectBuildingRequest request, Map<File, Boolean> profilesXmls, RepositorySystemSession session)
{    boolean noErrors = true;    for (InterimResult interimResult : interimResults) {        MavenProject project = interimResult.listener.getProject();        try {            ModelBuildingResult result = modelBuilder.build(interimResult.request, interimResult.result);                        try {                initProject(project, projectIndex, true, result, profilesXmls, request);            } catch (InvalidArtifactRTException iarte) {                result.getProblems().add(new DefaultModelProblem(null, ModelProblem.Severity.ERROR, null, result.getEffectiveModel(), -1, -1, iarte));            }            List<MavenProject> modules = new ArrayList<>();            noErrors = build(results, modules, projectIndex, interimResult.modules, request, profilesXmls, session) && noErrors;            projects.addAll(modules);            projects.add(project);            project.setExecutionRoot(interimResult.root);            project.setCollectedProjects(modules);            DependencyResolutionResult resolutionResult = null;            if (request.isResolveDependencies()) {                resolutionResult = resolveDependencies(project, session);            }            results.add(new DefaultProjectBuildingResult(project, result.getProblems(), resolutionResult));        } catch (ModelBuildingException e) {            DefaultProjectBuildingResult result = null;            if (project == null) {                result = new DefaultProjectBuildingResult(e.getModelId(), interimResult.pomFile, e.getProblems());            } else {                result = new DefaultProjectBuildingResult(project, e.getProblems(), null);            }            results.add(result);            noErrors = false;        }    }    return noErrors;}
private void maven_f2761_0(MavenProject project, Map<String, MavenProject> projects, boolean buildParentIfNotExisting, ModelBuildingResult result, Map<File, Boolean> profilesXmls, ProjectBuildingRequest projectBuildingRequest)
{    Model model = result.getEffectiveModel();    project.setModel(model);    project.setOriginalModel(result.getRawModel());    project.setFile(model.getPomFile());    initParent(project, projects, buildParentIfNotExisting, result, projectBuildingRequest);    Artifact projectArtifact = repositorySystem.createArtifact(project.getGroupId(), project.getArtifactId(), project.getVersion(), null, project.getPackaging());    project.setArtifact(projectArtifact);    if (    project.getFile() != null && buildParentIfNotExisting) {        Build build = project.getBuild();        project.addScriptSourceRoot(build.getScriptSourceDirectory());        project.addCompileSourceRoot(build.getSourceDirectory());        project.addTestCompileSourceRoot(build.getTestSourceDirectory());    }    List<Profile> activeProfiles = new ArrayList<>();    activeProfiles.addAll(result.getActivePomProfiles(result.getModelIds().get(0)));    activeProfiles.addAll(result.getActiveExternalProfiles());    project.setActiveProfiles(activeProfiles);    project.setInjectedProfileIds("external", getProfileIds(result.getActiveExternalProfiles()));    for (String modelId : result.getModelIds()) {        project.setInjectedProfileIds(modelId, getProfileIds(result.getActivePomProfiles(modelId)));    }    String modelId = findProfilesXml(result, profilesXmls);    if (modelId != null) {        ModelProblem problem = new DefaultModelProblem("Detected profiles.xml alongside " + modelId + ", this file is no longer supported and was ignored" + ", please use the settings.xml instead", ModelProblem.Severity.WARNING, ModelProblem.Version.V30, model, -1, -1, null);        result.getProblems().add(problem);    }                project.setProjectBuildingRequest(projectBuildingRequest);        Set<Artifact> pluginArtifacts = new HashSet<>();    for (Plugin plugin : project.getBuildPlugins()) {        Artifact artifact = repositorySystem.createPluginArtifact(plugin);        if (artifact != null) {            pluginArtifacts.add(artifact);        }    }    project.setPluginArtifacts(pluginArtifacts);        Set<Artifact> reportArtifacts = new HashSet<>();    for (ReportPlugin report : project.getReportPlugins()) {        Plugin pp = new Plugin();        pp.setGroupId(report.getGroupId());        pp.setArtifactId(report.getArtifactId());        pp.setVersion(report.getVersion());        Artifact artifact = repositorySystem.createPluginArtifact(pp);        if (artifact != null) {            reportArtifacts.add(artifact);        }    }    project.setReportArtifacts(reportArtifacts);        Set<Artifact> extensionArtifacts = new HashSet<>();    List<Extension> extensions = project.getBuildExtensions();    if (extensions != null) {        for (Extension ext : extensions) {            String version;            if (StringUtils.isEmpty(ext.getVersion())) {                version = "RELEASE";            } else {                version = ext.getVersion();            }            Artifact artifact = repositorySystem.createArtifact(ext.getGroupId(), ext.getArtifactId(), version, null, "jar");            if (artifact != null) {                extensionArtifacts.add(artifact);            }        }    }    project.setExtensionArtifacts(extensionArtifacts);        Map<String, Artifact> map = null;    if (repositorySystem != null) {        final DependencyManagement dependencyManagement = project.getDependencyManagement();        if ((dependencyManagement != null) && ((dependencyManagement.getDependencies()) != null) && (dependencyManagement.getDependencies().size() > 0)) {            map = new AbstractMap<String, Artifact>() {                HashMap<String, Artifact> delegate;                @Override                public Set<Entry<String, Artifact>> entrySet() {                    return Collections.unmodifiableSet(compute().entrySet());                }                @Override                public Set<String> keySet() {                    return Collections.unmodifiableSet(compute().keySet());                }                @Override                public Collection<Artifact> values() {                    return Collections.unmodifiableCollection(compute().values());                }                @Override                public boolean containsValue(Object value) {                    return compute().containsValue(value);                }                @Override                public boolean containsKey(Object key) {                    return compute().containsKey(key);                }                @Override                public Artifact get(Object key) {                    return compute().get(key);                }                HashMap<String, Artifact> compute() {                    if (delegate == null) {                        delegate = new HashMap<>();                        for (Dependency d : dependencyManagement.getDependencies()) {                            Artifact artifact = repositorySystem.createDependencyArtifact(d);                            if (artifact != null) {                                delegate.put(d.getManagementKey(), artifact);                            }                        }                    }                    return delegate;                }            };        } else {            map = Collections.emptyMap();        }    }    project.setManagedVersionMap(map);        if (project.getDistributionManagement() != null && project.getDistributionManagement().getRepository() != null) {        try {            DeploymentRepository r = project.getDistributionManagement().getRepository();            if (!StringUtils.isEmpty(r.getId()) && !StringUtils.isEmpty(r.getUrl())) {                ArtifactRepository repo = repositorySystem.buildArtifactRepository(r);                repositorySystem.injectProxy(projectBuildingRequest.getRepositorySession(), Arrays.asList(repo));                repositorySystem.injectAuthentication(projectBuildingRequest.getRepositorySession(), Arrays.asList(repo));                project.setReleaseArtifactRepository(repo);            }        } catch (InvalidRepositoryException e) {            throw new IllegalStateException("Failed to create release distribution repository for " + project.getId(), e);        }    }        if (project.getDistributionManagement() != null && project.getDistributionManagement().getSnapshotRepository() != null) {        try {            DeploymentRepository r = project.getDistributionManagement().getSnapshotRepository();            if (!StringUtils.isEmpty(r.getId()) && !StringUtils.isEmpty(r.getUrl())) {                ArtifactRepository repo = repositorySystem.buildArtifactRepository(r);                repositorySystem.injectProxy(projectBuildingRequest.getRepositorySession(), Arrays.asList(repo));                repositorySystem.injectAuthentication(projectBuildingRequest.getRepositorySession(), Arrays.asList(repo));                project.setSnapshotArtifactRepository(repo);            }        } catch (InvalidRepositoryException e) {            throw new IllegalStateException("Failed to create snapshot distribution repository for " + project.getId(), e);        }    }}
public Set<Entry<String, Artifact>> maven_f2762_0()
{    return Collections.unmodifiableSet(compute().entrySet());}
public Set<String> maven_f2763_0()
{    return Collections.unmodifiableSet(compute().keySet());}
public Collection<Artifact> maven_f2764_0()
{    return Collections.unmodifiableCollection(compute().values());}
public boolean maven_f2765_0(Object value)
{    return compute().containsValue(value);}
public boolean maven_f2766_0(Object key)
{    return compute().containsKey(key);}
public Artifact maven_f2767_0(Object key)
{    return compute().get(key);}
 HashMap<String, Artifact> maven_f2768_0()
{    if (delegate == null) {        delegate = new HashMap<>();        for (Dependency d : dependencyManagement.getDependencies()) {            Artifact artifact = repositorySystem.createDependencyArtifact(d);            if (artifact != null) {                delegate.put(d.getManagementKey(), artifact);            }        }    }    return delegate;}
private voidf2769_1MavenProject project, Map<String, MavenProject> projects, boolean buildParentIfNotExisting, ModelBuildingResult result, ProjectBuildingRequest projectBuildingRequest)
{    Model parentModel = result.getModelIds().size() > 1 && !result.getModelIds().get(1).isEmpty() ? result.getRawModel(result.getModelIds().get(1)) : null;    if (parentModel != null) {        final String parentGroupId = inheritedGroupId(result, 1);        final String parentVersion = inheritedVersion(result, 1);        project.setParentArtifact(repositorySystem.createProjectArtifact(parentGroupId, parentModel.getArtifactId(), parentVersion));                String parentModelId = result.getModelIds().get(1);        File parentPomFile = result.getRawModel(parentModelId).getPomFile();        MavenProject parent = projects.get(parentModelId);        if (parent == null && buildParentIfNotExisting) {                                                                        projectBuildingRequest.setRemoteRepositories(project.getRemoteArtifactRepositories());            if (parentPomFile != null) {                project.setParentFile(parentPomFile);                try {                    parent = build(parentPomFile, projectBuildingRequest).getProject();                } catch (ProjectBuildingException e) {                                        if (logger.isDebugEnabled()) {                                                                    } else {                                                                    }                }            } else {                Artifact parentArtifact = project.getParentArtifact();                try {                    parent = build(parentArtifact, projectBuildingRequest).getProject();                } catch (ProjectBuildingException e) {                                        if (logger.isDebugEnabled()) {                                                                    } else {                                                                    }                }            }        }        project.setParent(parent);        if (project.getParentFile() == null && parent != null) {            project.setParentFile(parent.getFile());        }    }}
private static String maven_f2770_0(final ModelBuildingResult result, final int modelIndex)
{    String groupId = null;    final String modelId = result.getModelIds().get(modelIndex);    if (!modelId.isEmpty()) {        final Model model = result.getRawModel(modelId);        groupId = model.getGroupId() != null ? model.getGroupId() : inheritedGroupId(result, modelIndex + 1);    }    return groupId;}
private static String maven_f2771_0(final ModelBuildingResult result, final int modelIndex)
{    String version = null;    final String modelId = result.getModelIds().get(modelIndex);    if (!modelId.isEmpty()) {        final Model model = result.getRawModel(modelId);        version = model.getVersion() != null ? model.getVersion() : inheritedVersion(result, modelIndex + 1);    }    return version;}
private String maven_f2772_0(ModelBuildingResult result, Map<File, Boolean> profilesXmls)
{    for (String modelId : result.getModelIds()) {        Model model = result.getRawModel(modelId);        File basedir = model.getProjectDirectory();        if (basedir == null) {            break;        }        Boolean profilesXml = profilesXmls.get(basedir);        if (profilesXml == null) {            profilesXml = new File(basedir, "profiles.xml").exists();            profilesXmls.put(basedir, profilesXml);        }        if (profilesXml) {            return modelId;        }    }    return null;}
private ReactorModelCache maven_f2773_0()
{    return this.modelCache;}
public List<ArtifactRepository> maven_f2774_0(List<Repository> pomRepositories, List<ArtifactRepository> externalRepositories, ProjectBuildingRequest request) throws InvalidRepositoryException
{    List<ArtifactRepository> internalRepositories = new ArrayList<>();    for (Repository repository : pomRepositories) {        internalRepositories.add(repositorySystem.buildArtifactRepository(repository));    }    repositorySystem.injectMirror(request.getRepositorySession(), internalRepositories);    repositorySystem.injectProxy(request.getRepositorySession(), internalRepositories);    repositorySystem.injectAuthentication(request.getRepositorySession(), internalRepositories);    List<ArtifactRepository> dominantRepositories;    List<ArtifactRepository> recessiveRepositories;    if (ProjectBuildingRequest.RepositoryMerging.REQUEST_DOMINANT.equals(request.getRepositoryMerging())) {        dominantRepositories = externalRepositories;        recessiveRepositories = internalRepositories;    } else {        dominantRepositories = internalRepositories;        recessiveRepositories = externalRepositories;    }    List<ArtifactRepository> artifactRepositories = new ArrayList<>();    Collection<String> repoIds = new HashSet<>();    if (dominantRepositories != null) {        for (ArtifactRepository repository : dominantRepositories) {            repoIds.add(repository.getId());            artifactRepositories.add(repository);        }    }    if (recessiveRepositories != null) {        for (ArtifactRepository repository : recessiveRepositories) {            if (repoIds.add(repository.getId())) {                artifactRepositories.add(repository);            }        }    }    artifactRepositories = repositorySystem.getEffectiveRepositories(artifactRepositories);    return artifactRepositories;}
public synchronized ProjectRealmCache.CacheRecordf2775_1MavenProject project, Model model, ProjectBuildingRequest request) throws PluginResolutionException, PluginVersionResolutionException, PluginManagerException
{    ClassRealm projectRealm;    List<Plugin> extensionPlugins = new ArrayList<>();    Build build = model.getBuild();    if (build != null) {        for (Extension extension : build.getExtensions()) {            Plugin plugin = new Plugin();            plugin.setGroupId(extension.getGroupId());            plugin.setArtifactId(extension.getArtifactId());            plugin.setVersion(extension.getVersion());            extensionPlugins.add(plugin);        }        for (Plugin plugin : build.getPlugins()) {            if (plugin.isExtensions()) {                extensionPlugins.add(plugin);            }        }    }    if (extensionPlugins.isEmpty()) {        if (logger.isDebugEnabled()) {                    }        return new ProjectRealmCache.CacheRecord(null, null);    }    List<ClassRealm> extensionRealms = new ArrayList<>();    Map<ClassRealm, List<String>> exportedPackages = new HashMap<>();    Map<ClassRealm, List<String>> exportedArtifacts = new HashMap<>();    List<Artifact> publicArtifacts = new ArrayList<>();    for (Plugin plugin : extensionPlugins) {        ExtensionRealmCache.CacheRecord recordRealm = pluginManager.setupExtensionsRealm(project, plugin, request.getRepositorySession());        final ClassRealm extensionRealm = recordRealm.getRealm();        final ExtensionDescriptor extensionDescriptor = recordRealm.getDescriptor();        final List<Artifact> artifacts = recordRealm.getArtifacts();        extensionRealms.add(extensionRealm);        if (extensionDescriptor != null) {            exportedPackages.put(extensionRealm, extensionDescriptor.getExportedPackages());            exportedArtifacts.put(extensionRealm, extensionDescriptor.getExportedArtifacts());        }        if (!plugin.isExtensions() && artifacts.size() == 2 && artifacts.get(0).getFile() != null && "plexus-utils".equals(artifacts.get(1).getArtifactId())) {            /*                 * This is purely for backward-compat with 2.x where <extensions> consisting of a single artifact where                 * loaded into the core and hence available to plugins, in contrast to bigger extensions that were                 * loaded into a dedicated realm which is invisible to plugins (MNG-2749).                 */            publicArtifacts.add(artifacts.get(0));        }    }    if (logger.isDebugEnabled()) {            }    ProjectRealmCache.Key projectRealmKey = projectRealmCache.createKey(extensionRealms);    ProjectRealmCache.CacheRecord record = projectRealmCache.get(projectRealmKey);    if (record == null) {        projectRealm = classRealmManager.createProjectRealm(model, toAetherArtifacts(publicArtifacts));        Set<String> exclusions = new LinkedHashSet<>();        for (ClassRealm extensionRealm : extensionRealms) {            List<String> excludes = exportedArtifacts.get(extensionRealm);            if (excludes != null) {                exclusions.addAll(excludes);            }            List<String> exports = exportedPackages.get(extensionRealm);            if (exports == null || exports.isEmpty()) {                /*                     * Most existing extensions don't define exported packages, i.e. no classes are to be exposed to                     * plugins, yet the components provided by the extension (e.g. artifact handlers) must be                     * accessible, i.e. we still must import the extension realm into the project realm.                     */                exports = Arrays.asList(extensionRealm.getId());            }            for (String export : exports) {                projectRealm.importFrom(extensionRealm, export);            }        }        DependencyFilter extensionArtifactFilter = null;        if (!exclusions.isEmpty()) {            extensionArtifactFilter = new ExclusionsDependencyFilter(exclusions);        }        record = projectRealmCache.put(projectRealmKey, projectRealm, extensionArtifactFilter);    }    projectRealmCache.register(project, projectRealmKey, record);    return record;}
public void maven_f2776_0(MavenProject project)
{    ClassLoader projectRealm = project.getClassRealm();    if (projectRealm == null) {        projectRealm = classRealmManager.getCoreRealm();    }    Thread.currentThread().setContextClassLoader(projectRealm);}
private List<org.eclipse.aether.artifact.Artifact> maven_f2777_0(final List<Artifact> pluginArtifacts)
{    return new ArrayList<>(RepositoryUtils.toArtifacts(pluginArtifacts));}
public MavenProject maven_f2778_0()
{    return project;}
public void maven_f2779_0(MavenProject mavenProject)
{    this.project = mavenProject;}
public ProjectBuildingRequest maven_f2780_0(ArtifactRepository localRepository)
{    this.localRepository = localRepository;    return this;}
public ArtifactRepository maven_f2781_0()
{    return localRepository;}
public List<ArtifactRepository> maven_f2782_0()
{    return remoteRepositories;}
public ProjectBuildingRequest maven_f2783_0(List<ArtifactRepository> remoteRepositories)
{    if (remoteRepositories != null) {        this.remoteRepositories = new ArrayList<>(remoteRepositories);    } else {        this.remoteRepositories.clear();    }    return this;}
public List<ArtifactRepository> maven_f2784_0()
{    return pluginArtifactRepositories;}
public ProjectBuildingRequest maven_f2785_0(List<ArtifactRepository> pluginArtifactRepositories)
{    if (pluginArtifactRepositories != null) {        this.pluginArtifactRepositories = new ArrayList<>(pluginArtifactRepositories);    } else {        this.pluginArtifactRepositories.clear();    }    return this;}
public Properties maven_f2786_0()
{    return systemProperties;}
public ProjectBuildingRequest maven_f2787_0(Properties systemProperties)
{    if (systemProperties != null) {        this.systemProperties = SystemProperties.copyProperties(systemProperties);    } else {        this.systemProperties.clear();    }    return this;}
public Properties maven_f2788_0()
{    return userProperties;}
public ProjectBuildingRequest maven_f2789_0(Properties userProperties)
{    if (userProperties != null) {        this.userProperties = new Properties();        this.userProperties.putAll(userProperties);    } else {        this.userProperties.clear();    }    return this;}
public boolean maven_f2790_0()
{    return processPlugins;}
public ProjectBuildingRequest maven_f2791_0(boolean processPlugins)
{    this.processPlugins = processPlugins;    return this;}
public ProjectBuildingRequest maven_f2792_0(boolean resolveDependencies)
{    this.resolveDependencies = resolveDependencies;    return this;}
public boolean maven_f2793_0()
{    return resolveDependencies;}
public ProjectBuildingRequest maven_f2794_0(boolean value)
{    this.resolveVersionRanges = value;    return this;}
public boolean maven_f2795_0()
{    return this.resolveVersionRanges;}
public ProjectBuildingRequest maven_f2796_0(int validationLevel)
{    this.validationLevel = validationLevel;    return this;}
public int maven_f2797_0()
{    return validationLevel;}
public List<String> maven_f2798_0()
{    return activeProfileIds;}
public void maven_f2799_0(List<String> activeProfileIds)
{    if (activeProfileIds != null) {        this.activeProfileIds = new ArrayList<>(activeProfileIds);    } else {        this.activeProfileIds.clear();    }}
public List<String> maven_f2800_0()
{    return inactiveProfileIds;}
public void maven_f2801_0(List<String> inactiveProfileIds)
{    if (inactiveProfileIds != null) {        this.inactiveProfileIds = new ArrayList<>(inactiveProfileIds);    } else {        this.inactiveProfileIds.clear();    }}
public void maven_f2802_0(List<Profile> profiles)
{    if (profiles != null) {        this.profiles = new ArrayList<>(profiles);    } else {        this.profiles.clear();    }}
public void maven_f2803_0(Profile profile)
{    profiles.add(profile);}
public List<Profile> maven_f2804_0()
{    return profiles;}
public Date maven_f2805_0()
{    return buildStartTime;}
public void maven_f2806_0(Date buildStartTime)
{    this.buildStartTime = buildStartTime;}
public RepositorySystemSession maven_f2807_0()
{    return repositorySession;}
public DefaultProjectBuildingRequest maven_f2808_0(RepositorySystemSession repositorySession)
{    this.repositorySession = repositorySession;    return this;}
public DefaultProjectBuildingRequest maven_f2809_0(RepositoryMerging repositoryMerging)
{    this.repositoryMerging = Objects.requireNonNull(repositoryMerging, "repositoryMerging cannot be null");    return this;}
public RepositoryMerging maven_f2810_0()
{    return repositoryMerging;}
public String maven_f2811_0()
{    return projectId;}
public File maven_f2812_0()
{    return pomFile;}
public MavenProject maven_f2813_0()
{    return project;}
public List<ModelProblem> maven_f2814_0()
{    if (problems == null) {        problems = new ArrayList<>();    }    return problems;}
public DependencyResolutionResult maven_f2815_0()
{    return dependencyResolutionResult;}
public DependencyResolutionResultf2816_1DependencyResolutionRequest request) throws DependencyResolutionException
{    final RequestTrace trace = RequestTrace.newChild(null, request);    final DefaultDependencyResolutionResult result = new DefaultDependencyResolutionResult();    final MavenProject project = request.getMavenProject();    final DependencyFilter filter = request.getResolutionFilter();    RepositorySystemSession session = request.getRepositorySession();    ArtifactTypeRegistry stereotypes = session.getArtifactTypeRegistry();    if (logger.isDebugEnabled() && session.getConfigProperties().get(DependencyManagerUtils.CONFIG_PROP_VERBOSE) == null) {        DefaultRepositorySystemSession verbose = new DefaultRepositorySystemSession(session);        verbose.setConfigProperty(DependencyManagerUtils.CONFIG_PROP_VERBOSE, Boolean.TRUE);        session = verbose;    }    for (RepositorySessionDecorator decorator : decorators) {        RepositorySystemSession decorated = decorator.decorate(project, session);        if (decorated != null) {            session = decorated;        }    }    CollectRequest collect = new CollectRequest();    collect.setRootArtifact(RepositoryUtils.toArtifact(project.getArtifact()));    collect.setRequestContext("project");    collect.setRepositories(project.getRemoteProjectRepositories());    if (project.getDependencyArtifacts() == null) {        for (Dependency dependency : project.getDependencies()) {            if (StringUtils.isEmpty(dependency.getGroupId()) || StringUtils.isEmpty(dependency.getArtifactId()) || StringUtils.isEmpty(dependency.getVersion())) {                                continue;            }            collect.addDependency(RepositoryUtils.toDependency(dependency, stereotypes));        }    } else {        Map<String, Dependency> dependencies = new HashMap<>();        for (Dependency dependency : project.getDependencies()) {            String classifier = dependency.getClassifier();            if (classifier == null) {                ArtifactType type = stereotypes.get(dependency.getType());                if (type != null) {                    classifier = type.getClassifier();                }            }            String key = ArtifactIdUtils.toVersionlessId(dependency.getGroupId(), dependency.getArtifactId(), dependency.getType(), classifier);            dependencies.put(key, dependency);        }        for (Artifact artifact : project.getDependencyArtifacts()) {            String key = artifact.getDependencyConflictId();            Dependency dependency = dependencies.get(key);            Collection<Exclusion> exclusions = dependency != null ? dependency.getExclusions() : null;            org.eclipse.aether.graph.Dependency dep = RepositoryUtils.toDependency(artifact, exclusions);            if (!JavaScopes.SYSTEM.equals(dep.getScope()) && dep.getArtifact().getFile() != null) {                                org.eclipse.aether.artifact.Artifact art = dep.getArtifact();                art = art.setFile(null).setVersion(art.getBaseVersion());                dep = dep.setArtifact(art);            }            collect.addDependency(dep);        }    }    DependencyManagement depMgmt = project.getDependencyManagement();    if (depMgmt != null) {        for (Dependency dependency : depMgmt.getDependencies()) {            collect.addManagedDependency(RepositoryUtils.toDependency(dependency, stereotypes));        }    }    DependencyRequest depRequest = new DependencyRequest(collect, filter);    depRequest.setTrace(trace);    DependencyNode node;    try {        collect.setTrace(RequestTrace.newChild(trace, depRequest));        node = repoSystem.collectDependencies(session, collect).getRoot();        result.setDependencyGraph(node);    } catch (DependencyCollectionException e) {        result.setDependencyGraph(e.getResult().getRoot());        result.setCollectionErrors(e.getResult().getExceptions());        throw new DependencyResolutionException(result, "Could not resolve dependencies for project " + project.getId() + ": " + e.getMessage(), e);    }    depRequest.setRoot(node);    if (logger.isWarnEnabled()) {        for (DependencyNode child : node.getChildren()) {            if (!child.getRelocations().isEmpty()) {                            }        }    }    if (logger.isDebugEnabled()) {        node.accept(new GraphLogger(project));    }    try {        process(result, repoSystem.resolveDependencies(session, depRequest).getArtifactResults());    } catch (org.eclipse.aether.resolution.DependencyResolutionException e) {        process(result, e.getResult().getArtifactResults());        throw new DependencyResolutionException(result, "Could not resolve dependencies for project " + project.getId() + ": " + e.getMessage(), e);    }    return result;}
private void maven_f2817_0(DefaultDependencyResolutionResult result, Collection<ArtifactResult> results)
{    for (ArtifactResult ar : results) {        DependencyNode node = ar.getRequest().getDependencyNode();        if (ar.isResolved()) {            result.addResolvedDependency(node.getDependency());        } else {            result.setResolutionErrors(node.getDependency(), ar.getExceptions());        }    }}
public booleanf2818_1DependencyNode node)
{    StringBuilder buffer = new StringBuilder(128);    buffer.append(indent);    org.eclipse.aether.graph.Dependency dep = node.getDependency();    if (dep != null) {        org.eclipse.aether.artifact.Artifact art = dep.getArtifact();        buffer.append(art);        if (StringUtils.isNotEmpty(dep.getScope())) {            buffer.append(':').append(dep.getScope());        }        if (dep.isOptional()) {            buffer.append(" (optional)");        }                if ((node.getManagedBits() & DependencyNode.MANAGED_SCOPE) == DependencyNode.MANAGED_SCOPE) {            final String premanagedScope = DependencyManagerUtils.getPremanagedScope(node);            buffer.append(" (scope managed from ");            buffer.append(StringUtils.defaultString(premanagedScope, "default"));            buffer.append(')');        }        if ((node.getManagedBits() & DependencyNode.MANAGED_VERSION) == DependencyNode.MANAGED_VERSION) {            final String premanagedVersion = DependencyManagerUtils.getPremanagedVersion(node);            buffer.append(" (version managed from ");            buffer.append(StringUtils.defaultString(premanagedVersion, "default"));            buffer.append(')');        }        if ((node.getManagedBits() & DependencyNode.MANAGED_OPTIONAL) == DependencyNode.MANAGED_OPTIONAL) {            final Boolean premanagedOptional = DependencyManagerUtils.getPremanagedOptional(node);            buffer.append(" (optionality managed from ");            buffer.append(StringUtils.defaultString(premanagedOptional, "default"));            buffer.append(')');        }        if ((node.getManagedBits() & DependencyNode.MANAGED_EXCLUSIONS) == DependencyNode.MANAGED_EXCLUSIONS) {            final Collection<org.eclipse.aether.graph.Exclusion> premanagedExclusions = DependencyManagerUtils.getPremanagedExclusions(node);            buffer.append(" (exclusions managed from ");            buffer.append(StringUtils.defaultString(premanagedExclusions, "default"));            buffer.append(')');        }        if ((node.getManagedBits() & DependencyNode.MANAGED_PROPERTIES) == DependencyNode.MANAGED_PROPERTIES) {            final Map<String, String> premanagedProperties = DependencyManagerUtils.getPremanagedProperties(node);            buffer.append(" (properties managed from ");            buffer.append(StringUtils.defaultString(premanagedProperties, "default"));            buffer.append(')');        }    } else {        buffer.append(project.getGroupId());        buffer.append(':').append(project.getArtifactId());        buffer.append(':').append(project.getPackaging());        buffer.append(':').append(project.getVersion());    }        indent += "   ";    return true;}
public boolean maven_f2819_0(DependencyNode node)
{    indent = indent.substring(0, indent.length() - 3);    return true;}
public int maven_f2820_0()
{    return hashCode;}
public boolean maven_f2821_0(Object o)
{    if (o == this) {        return true;    }    if (!(o instanceof CacheKey)) {        return false;    }    CacheKey other = (CacheKey) o;    return extensionRealms.equals(other.extensionRealms);}
public String maven_f2822_0()
{    return extensionRealms.toString();}
public Key maven_f2823_0(List<? extends ClassRealm> extensionRealms)
{    return new CacheKey(extensionRealms);}
public CacheRecord maven_f2824_0(Key key)
{    return cache.get(key);}
public CacheRecord maven_f2825_0(Key key, ClassRealm projectRealm, DependencyFilter extensionArtifactFilter)
{    Objects.requireNonNull(projectRealm, "projectRealm cannot be null");    if (cache.containsKey(key)) {        throw new IllegalStateException("Duplicate project realm for extensions " + key);    }    CacheRecord record = new CacheRecord(projectRealm, extensionArtifactFilter);    cache.put(key, record);    return record;}
public void maven_f2826_0()
{    for (CacheRecord record : cache.values()) {        ClassRealm realm = record.getRealm();        try {            realm.getWorld().disposeRealm(realm.getId());        } catch (NoSuchRealmException e) {                }    }    cache.clear();}
public void maven_f2827_0(MavenProject project, Key key, CacheRecord record)
{}
public void maven_f2828_0()
{    flush();}
public DependencyResolutionResult maven_f2829_0()
{    return result;}
private static String maven_f2830_0(MavenProject project, Artifact artifact)
{    return DEFAULT_MESSAGE + " (project: " + project.getId() + "; illegal attachment: " + artifact.getId() + ")";}
public MavenProject maven_f2831_0()
{    return project;}
public Artifact maven_f2832_0()
{    return artifact;}
public String maven_f2833_0()
{    return projectId;}
public File maven_f2834_0()
{    return existingProjectFile;}
public File maven_f2835_0()
{    return conflictingProjectFile;}
public List<String> maven_f2836_0()
{    if (exportedPackages == null) {        exportedPackages = new ArrayList<>();    }    return exportedPackages;}
public void maven_f2837_0(List<String> exportedPackages)
{    if (exportedPackages == null) {        this.exportedPackages = null;    } else {        this.exportedPackages = new ArrayList<>(exportedPackages);    }}
public List<String> maven_f2838_0()
{    if (exportedArtifacts == null) {        exportedArtifacts = new ArrayList<>();    }    return exportedArtifacts;}
public void maven_f2839_0(List<String> exportedArtifacts)
{    if (exportedArtifacts == null) {        this.exportedArtifacts = null;    } else {        this.exportedArtifacts = new ArrayList<>(exportedArtifacts);    }}
public String maven_f2840_0()
{    return "META-INF/maven/extension.xml";}
public ExtensionDescriptor maven_f2841_0(File extensionJar) throws IOException
{    ExtensionDescriptor extensionDescriptor = null;    if (extensionJar.isFile()) {        try (JarFile pluginJar = new JarFile(extensionJar, false)) {            ZipEntry pluginDescriptorEntry = pluginJar.getEntry(getExtensionDescriptorLocation());            if (pluginDescriptorEntry != null) {                try (InputStream is = pluginJar.getInputStream(pluginDescriptorEntry)) {                    extensionDescriptor = build(is);                }            }        }    } else {        File pluginXml = new File(extensionJar, getExtensionDescriptorLocation());        if (pluginXml.canRead()) {            try (InputStream is = new BufferedInputStream(new FileInputStream(pluginXml))) {                extensionDescriptor = build(is);            }        }    }    return extensionDescriptor;}
public ExtensionDescriptor maven_f2842_0(InputStream is) throws IOException
{    ExtensionDescriptor extensionDescriptor = new ExtensionDescriptor();    Xpp3Dom dom;    try {        dom = Xpp3DomBuilder.build(ReaderFactory.newXmlReader(is));    } catch (XmlPullParserException e) {        throw (IOException) new IOException(e.getMessage()).initCause(e);    }    if (!"extension".equals(dom.getName())) {        throw new IOException("Unexpected root element \"" + dom.getName() + "\", expected \"extension\"");    }    extensionDescriptor.setExportedPackages(parseStrings(dom.getChild("exportedPackages")));    extensionDescriptor.setExportedArtifacts(parseStrings(dom.getChild("exportedArtifacts")));    return extensionDescriptor;}
private List<String> maven_f2843_0(Xpp3Dom dom)
{    List<String> strings = null;    if (dom != null) {        strings = new ArrayList<>();        for (Xpp3Dom child : dom.getChildren()) {            String string = child.getValue();            if (string != null) {                string = string.trim();                if (string.length() > 0) {                    strings.add(string);                }            }        }    }    return strings;}
private static String maven_f2844_0(String projectId, String locationInPom, String offendingVersion, InvalidVersionSpecificationException cause)
{    return "Invalid version: " + offendingVersion + " found for: " + locationInPom + " in project: " + projectId + ". Reason: " + cause.getMessage();}
public String maven_f2845_0()
{    return offendingVersion;}
public String maven_f2846_0()
{    return locationInPom;}
public File maven_f2847_0()
{    return parentFile;}
public void maven_f2848_0(File parentFile)
{    this.parentFile = parentFile;}
public Artifact maven_f2849_0()
{    return artifact;}
public void maven_f2850_0(Artifact artifact)
{    this.artifact = artifact;}
public Model maven_f2851_0()
{    return model;}
public MavenProject maven_f2852_0()
{    return parent;}
public void maven_f2853_0(MavenProject parent)
{    this.parent = parent;}
public boolean maven_f2854_0()
{    return getParent() != null;}
public File maven_f2855_0()
{    return file;}
public void maven_f2856_0(File file)
{    this.file = file;    this.basedir = file != null ? file.getParentFile() : null;}
public void maven_f2857_0(File file)
{    this.file = file;}
public File maven_f2858_0()
{    return basedir;}
public void maven_f2859_0(List<Dependency> dependencies)
{    getModel().setDependencies(dependencies);}
public List<Dependency> maven_f2860_0()
{    return getModel().getDependencies();}
public DependencyManagement maven_f2861_0()
{    return getModel().getDependencyManagement();}
private void maven_f2862_0(List<String> paths, String path)
{    if (path != null) {        path = path.trim();        if (path.length() > 0) {            File file = new File(path);            if (file.isAbsolute()) {                path = file.getAbsolutePath();            } else if (".".equals(path)) {                path = getBasedir().getAbsolutePath();            } else {                path = new File(getBasedir(), path).getAbsolutePath();            }            if (!paths.contains(path)) {                paths.add(path);            }        }    }}
public void maven_f2863_0(String path)
{    addPath(getCompileSourceRoots(), path);}
public void maven_f2864_0(String path)
{    addPath(getTestCompileSourceRoots(), path);}
public List<String> maven_f2865_0()
{    return compileSourceRoots;}
public List<String> maven_f2866_0()
{    return testCompileSourceRoots;}
public List<String> maven_f2867_0() throws DependencyResolutionRequiredException
{    List<String> list = new ArrayList<>(getArtifacts().size() + 1);    String d = getBuild().getOutputDirectory();    if (d != null) {        list.add(d);    }    for (Artifact a : getArtifacts()) {        if (a.getArtifactHandler().isAddedToClasspath()) {                        if (Artifact.SCOPE_COMPILE.equals(a.getScope()) || Artifact.SCOPE_PROVIDED.equals(a.getScope()) || Artifact.SCOPE_SYSTEM.equals(a.getScope())) {                addArtifactPath(a, list);            }        }    }    return list;}
public List<String> maven_f2868_0() throws DependencyResolutionRequiredException
{    List<String> list = new ArrayList<>(getArtifacts().size() + 2);    String d = getBuild().getTestOutputDirectory();    if (d != null) {        list.add(d);    }    d = getBuild().getOutputDirectory();    if (d != null) {        list.add(d);    }    for (Artifact a : getArtifacts()) {        if (a.getArtifactHandler().isAddedToClasspath()) {            addArtifactPath(a, list);        }    }    return list;}
public List<String> maven_f2869_0() throws DependencyResolutionRequiredException
{    List<String> list = new ArrayList<>(getArtifacts().size() + 1);    String d = getBuild().getOutputDirectory();    if (d != null) {        list.add(d);    }    for (Artifact a : getArtifacts()) {        if (a.getArtifactHandler().isAddedToClasspath() &&         (Artifact.SCOPE_COMPILE.equals(a.getScope()) || Artifact.SCOPE_RUNTIME.equals(a.getScope()))) {            addArtifactPath(a, list);        }    }    return list;}
public void maven_f2870_0(String pomVersion)
{    getModel().setModelVersion(pomVersion);}
public String maven_f2871_0()
{    return getModel().getModelVersion();}
public String maven_f2872_0()
{    return getModel().getId();}
public void maven_f2873_0(String groupId)
{    getModel().setGroupId(groupId);}
public String maven_f2874_0()
{    String groupId = getModel().getGroupId();    if ((groupId == null) && (getModel().getParent() != null)) {        groupId = getModel().getParent().getGroupId();    }    return groupId;}
public void maven_f2875_0(String artifactId)
{    getModel().setArtifactId(artifactId);}
public String maven_f2876_0()
{    return getModel().getArtifactId();}
public void maven_f2877_0(String name)
{    getModel().setName(name);}
public String maven_f2878_0()
{        if (getModel().getName() != null) {        return getModel().getName();    } else {        return getArtifactId();    }}
public void maven_f2879_0(String version)
{    getModel().setVersion(version);}
public String maven_f2880_0()
{    String version = getModel().getVersion();    if ((version == null) && (getModel().getParent() != null)) {        version = getModel().getParent().getVersion();    }    return version;}
public String maven_f2881_0()
{    return getModel().getPackaging();}
public void maven_f2882_0(String packaging)
{    getModel().setPackaging(packaging);}
public void maven_f2883_0(String inceptionYear)
{    getModel().setInceptionYear(inceptionYear);}
public String maven_f2884_0()
{    return getModel().getInceptionYear();}
public void maven_f2885_0(String url)
{    getModel().setUrl(url);}
public String maven_f2886_0()
{    return getModel().getUrl();}
public Prerequisites maven_f2887_0()
{    return getModel().getPrerequisites();}
public void maven_f2888_0(IssueManagement issueManagement)
{    getModel().setIssueManagement(issueManagement);}
public CiManagement maven_f2889_0()
{    return getModel().getCiManagement();}
public void maven_f2890_0(CiManagement ciManagement)
{    getModel().setCiManagement(ciManagement);}
public IssueManagement maven_f2891_0()
{    return getModel().getIssueManagement();}
public void maven_f2892_0(DistributionManagement distributionManagement)
{    getModel().setDistributionManagement(distributionManagement);}
public DistributionManagement maven_f2893_0()
{    return getModel().getDistributionManagement();}
public void maven_f2894_0(String description)
{    getModel().setDescription(description);}
public String maven_f2895_0()
{    return getModel().getDescription();}
public void maven_f2896_0(Organization organization)
{    getModel().setOrganization(organization);}
public Organization maven_f2897_0()
{    return getModel().getOrganization();}
public void maven_f2898_0(Scm scm)
{    getModel().setScm(scm);}
public Scm maven_f2899_0()
{    return getModel().getScm();}
public void maven_f2900_0(List<MailingList> mailingLists)
{    getModel().setMailingLists(mailingLists);}
public List<MailingList> maven_f2901_0()
{    return getModel().getMailingLists();}
public void maven_f2902_0(MailingList mailingList)
{    getModel().addMailingList(mailingList);}
public void maven_f2903_0(List<Developer> developers)
{    getModel().setDevelopers(developers);}
public List<Developer> maven_f2904_0()
{    return getModel().getDevelopers();}
public void maven_f2905_0(Developer developer)
{    getModel().addDeveloper(developer);}
public void maven_f2906_0(List<Contributor> contributors)
{    getModel().setContributors(contributors);}
public List<Contributor> maven_f2907_0()
{    return getModel().getContributors();}
public void maven_f2908_0(Contributor contributor)
{    getModel().addContributor(contributor);}
public void maven_f2909_0(Build build)
{    getModel().setBuild(build);}
public Build maven_f2910_0()
{    return getModelBuild();}
public List<Resource> maven_f2911_0()
{    return getBuild().getResources();}
public List<Resource> maven_f2912_0()
{    return getBuild().getTestResources();}
public void maven_f2913_0(Resource resource)
{    getBuild().addResource(resource);}
public void maven_f2914_0(Resource testResource)
{    getBuild().addTestResource(testResource);}
public void maven_f2915_0(List<License> licenses)
{    getModel().setLicenses(licenses);}
public List<License> maven_f2916_0()
{    return getModel().getLicenses();}
public void maven_f2917_0(License license)
{    getModel().addLicense(license);}
public void maven_f2918_0(Set<Artifact> artifacts)
{    this.artifacts = artifacts;        artifactMap = null;}
public Set<Artifact> maven_f2919_0()
{    if (artifacts == null) {        if (artifactFilter == null || resolvedArtifacts == null) {            artifacts = new LinkedHashSet<>();        } else {            artifacts = new LinkedHashSet<>(resolvedArtifacts.size() * 2);            for (Artifact artifact : resolvedArtifacts) {                if (artifactFilter.include(artifact)) {                    artifacts.add(artifact);                }            }        }    }    return artifacts;}
public Map<String, Artifact> maven_f2920_0()
{    if (artifactMap == null) {        artifactMap = ArtifactUtils.artifactMapByVersionlessId(getArtifacts());    }    return artifactMap;}
public void maven_f2921_0(Set<Artifact> pluginArtifacts)
{    this.pluginArtifacts = pluginArtifacts;    this.pluginArtifactMap = null;}
public Set<Artifact> maven_f2922_0()
{    return pluginArtifacts;}
public Map<String, Artifact> maven_f2923_0()
{    if (pluginArtifactMap == null) {        pluginArtifactMap = ArtifactUtils.artifactMapByVersionlessId(getPluginArtifacts());    }    return pluginArtifactMap;}
public void maven_f2924_0(Artifact parentArtifact)
{    this.parentArtifact = parentArtifact;}
public Artifact maven_f2925_0()
{    return parentArtifact;}
public List<Repository> maven_f2926_0()
{    return getModel().getRepositories();}
public List<Plugin> maven_f2927_0()
{    if (getModel().getBuild() == null) {        return Collections.emptyList();    }    return Collections.unmodifiableList(getModel().getBuild().getPlugins());}
public List<String> maven_f2928_0()
{    return getModel().getModules();}
public PluginManagement maven_f2929_0()
{    PluginManagement pluginMgmt = null;    Build build = getModel().getBuild();    if (build != null) {        pluginMgmt = build.getPluginManagement();    }    return pluginMgmt;}
private Build maven_f2930_0()
{    Build build = getModel().getBuild();    if (build == null) {        build = new Build();        getModel().setBuild(build);    }    return build;}
public void maven_f2931_0(List<ArtifactRepository> remoteArtifactRepositories)
{    this.remoteArtifactRepositories = remoteArtifactRepositories;    this.remoteProjectRepositories = RepositoryUtils.toRepos(getRemoteArtifactRepositories());}
public List<ArtifactRepository> maven_f2932_0()
{    if (remoteArtifactRepositories == null) {        remoteArtifactRepositories = new ArrayList<>();    }    return remoteArtifactRepositories;}
public void maven_f2933_0(List<ArtifactRepository> pluginArtifactRepositories)
{    this.pluginArtifactRepositories = pluginArtifactRepositories;    this.remotePluginRepositories = RepositoryUtils.toRepos(getPluginArtifactRepositories());}
public List<ArtifactRepository> maven_f2934_0()
{    if (pluginArtifactRepositories == null) {        pluginArtifactRepositories = new ArrayList<>();    }    return pluginArtifactRepositories;}
public ArtifactRepository maven_f2935_0()
{    return getArtifact().isSnapshot() && (getSnapshotArtifactRepository() != null) ? getSnapshotArtifactRepository() : getReleaseArtifactRepository();}
public List<Repository> maven_f2936_0()
{    return getModel().getPluginRepositories();}
public List<RemoteRepository> maven_f2937_0()
{    return remoteProjectRepositories;}
public List<RemoteRepository> maven_f2938_0()
{    return remotePluginRepositories;}
public void maven_f2939_0(List<Profile> activeProfiles)
{    this.activeProfiles = activeProfiles;}
public List<Profile> maven_f2940_0()
{    return activeProfiles;}
public void maven_f2941_0(String source, List<String> injectedProfileIds)
{    if (injectedProfileIds != null) {        this.injectedProfileIds.put(source, new ArrayList<>(injectedProfileIds));    } else {        this.injectedProfileIds.remove(source);    }}
public Map<String, List<String>> maven_f2942_0()
{    return this.injectedProfileIds;}
public void maven_f2943_0(Artifact artifact) throws DuplicateArtifactAttachmentException
{    getAttachedArtifacts().add(artifact);}
public List<Artifact> maven_f2944_0()
{    if (attachedArtifacts == null) {        attachedArtifacts = new ArrayList<>();    }    return attachedArtifacts;}
public Xpp3Dom maven_f2945_0(String pluginGroupId, String pluginArtifactId, String executionId, String goalId)
{    Xpp3Dom dom = null;    if (getBuildPlugins() != null) {        for (Plugin plugin : getBuildPlugins()) {            if (pluginGroupId.equals(plugin.getGroupId()) && pluginArtifactId.equals(plugin.getArtifactId())) {                dom = (Xpp3Dom) plugin.getConfiguration();                if (executionId != null) {                    PluginExecution execution = plugin.getExecutionsAsMap().get(executionId);                    if (execution != null) {                                                dom = (Xpp3Dom) execution.getConfiguration();                    }                }                break;            }        }    }    if (dom != null) {                dom = new Xpp3Dom(dom);    }    return dom;}
public MavenProject maven_f2946_0()
{    return (executionProject == null ? this : executionProject);}
public void maven_f2947_0(MavenProject executionProject)
{    this.executionProject = executionProject;}
public List<MavenProject> maven_f2948_0()
{    return collectedProjects;}
public void maven_f2949_0(List<MavenProject> collectedProjects)
{    this.collectedProjects = collectedProjects;}
public Set<Artifact> maven_f2950_0()
{    return dependencyArtifacts;}
public void maven_f2951_0(Set<Artifact> dependencyArtifacts)
{    this.dependencyArtifacts = dependencyArtifacts;}
public void maven_f2952_0(ArtifactRepository releaseArtifactRepository)
{    this.releaseArtifactRepository = releaseArtifactRepository;}
public void maven_f2953_0(ArtifactRepository snapshotArtifactRepository)
{    this.snapshotArtifactRepository = snapshotArtifactRepository;}
public void maven_f2954_0(Model originalModel)
{    this.originalModel = originalModel;}
public Model maven_f2955_0()
{    return originalModel;}
public void maven_f2956_0(Map<String, Artifact> map)
{    managedVersionMap = map;}
public Map<String, Artifact> maven_f2957_0()
{    return managedVersionMap;}
public boolean maven_f2958_0(Object other)
{    if (other == this) {        return true;    } else if (!(other instanceof MavenProject)) {        return false;    }    MavenProject that = (MavenProject) other;    return Objects.equals(getArtifactId(), that.getArtifactId()) && Objects.equals(getGroupId(), that.getGroupId()) && Objects.equals(getVersion(), that.getVersion());}
public int maven_f2959_0()
{    int hash = 17;    hash = 31 * hash + getGroupId().hashCode();    hash = 31 * hash + getArtifactId().hashCode();    hash = 31 * hash + getVersion().hashCode();    return hash;}
public List<Extension> maven_f2960_0()
{    Build build = getBuild();    if ((build == null) || (build.getExtensions() == null)) {        return Collections.emptyList();    } else {        return Collections.unmodifiableList(build.getExtensions());    }}
public void maven_f2961_0(MavenProject project)
{    projectReferences.put(getProjectReferenceId(project.getGroupId(), project.getArtifactId(), project.getVersion()), project);}
public Properties maven_f2962_0()
{    return getModel().getProperties();}
public List<String> maven_f2963_0()
{    return getBuild().getFilters();}
public Map<String, MavenProject> maven_f2964_0()
{    return projectReferences;}
public boolean maven_f2965_0()
{    return executionRoot;}
public void maven_f2966_0(boolean executionRoot)
{    this.executionRoot = executionRoot;}
public String maven_f2967_0()
{    return getBuild() != null ? getBuild().getDefaultGoal() : null;}
public Plugin maven_f2968_0(String pluginKey)
{    return getBuild().getPluginsAsMap().get(pluginKey);}
public String maven_f2969_0()
{    StringBuilder sb = new StringBuilder(128);    sb.append("MavenProject: ");    sb.append(getGroupId());    sb.append(':');    sb.append(getArtifactId());    sb.append(':');    sb.append(getVersion());    sb.append(" @ ");    try {        sb.append(getFile().getPath());    } catch (NullPointerException e) {        }    return sb.toString();}
public MavenProject maven_f2970_0()
{    MavenProject clone;    try {        clone = (MavenProject) super.clone();    } catch (CloneNotSupportedException e) {        throw new UnsupportedOperationException(e);    }    clone.deepCopy(this);    return clone;}
public void maven_f2971_0(Model model)
{    this.model = model;}
protected void maven_f2972_0(List<Artifact> attachedArtifacts)
{    this.attachedArtifacts = attachedArtifacts;}
protected void maven_f2973_0(List<String> compileSourceRoots)
{    this.compileSourceRoots = compileSourceRoots;}
protected void maven_f2974_0(List<String> testCompileSourceRoots)
{    this.testCompileSourceRoots = testCompileSourceRoots;}
protected ArtifactRepository maven_f2975_0()
{    return releaseArtifactRepository;}
protected ArtifactRepository maven_f2976_0()
{    return snapshotArtifactRepository;}
private void maven_f2977_0(MavenProject project)
{            file = project.file;    basedir = project.basedir;        if (project.getDependencyArtifacts() != null) {        setDependencyArtifacts(Collections.unmodifiableSet(project.getDependencyArtifacts()));    }    if (project.getArtifacts() != null) {        setArtifacts(Collections.unmodifiableSet(project.getArtifacts()));    }    if (project.getParentFile() != null) {        parentFile = new File(project.getParentFile().getAbsolutePath());    }    if (project.getPluginArtifacts() != null) {        setPluginArtifacts(Collections.unmodifiableSet(project.getPluginArtifacts()));    }    if (project.getReportArtifacts() != null) {        setReportArtifacts(Collections.unmodifiableSet(project.getReportArtifacts()));    }    if (project.getExtensionArtifacts() != null) {        setExtensionArtifacts(Collections.unmodifiableSet(project.getExtensionArtifacts()));    }    setParentArtifact((project.getParentArtifact()));    if (project.getRemoteArtifactRepositories() != null) {        setRemoteArtifactRepositories(Collections.unmodifiableList(project.getRemoteArtifactRepositories()));    }    if (project.getPluginArtifactRepositories() != null) {        setPluginArtifactRepositories(Collections.unmodifiableList(project.getPluginArtifactRepositories()));    }    if (project.getActiveProfiles() != null) {        setActiveProfiles((Collections.unmodifiableList(project.getActiveProfiles())));    }    if (project.getAttachedArtifacts() != null) {                setAttachedArtifacts(new ArrayList<>(project.getAttachedArtifacts()));    }    if (project.getCompileSourceRoots() != null) {                setCompileSourceRoots((new ArrayList<>(project.getCompileSourceRoots())));    }    if (project.getTestCompileSourceRoots() != null) {        setTestCompileSourceRoots((new ArrayList<>(project.getTestCompileSourceRoots())));    }    if (project.getScriptSourceRoots() != null) {        setScriptSourceRoots((new ArrayList<>(project.getScriptSourceRoots())));    }    if (project.getModel() != null) {        setModel(project.getModel().clone());    }    if (project.getOriginalModel() != null) {        setOriginalModel(project.getOriginalModel());    }    setExecutionRoot(project.isExecutionRoot());    if (project.getArtifact() != null) {        setArtifact(ArtifactUtils.copyArtifact(project.getArtifact()));    }    if (project.getManagedVersionMap() != null) {        setManagedVersionMap(project.getManagedVersionMap());    }    lifecyclePhases.addAll(project.lifecyclePhases);}
private void maven_f2978_0(Artifact artifact, List<String> classpath)
{    File file = artifact.getFile();    if (file != null) {        classpath.add(file.getPath());    }}
private static String maven_f2979_0(String groupId, String artifactId, String version)
{    StringBuilder buffer = new StringBuilder(128);    buffer.append(groupId).append(':').append(artifactId).append(':').append(version);    return buffer.toString();}
public void maven_f2980_0(String key, Object value)
{    if (context == null) {        context = new HashMap<>();    }    if (value != null) {        context.put(key, value);    } else {        context.remove(key);    }}
public Object maven_f2981_0(String key)
{    if (context == null) {        return null;    }    return context.get(key);}
public void maven_f2982_0(ClassRealm classRealm)
{    this.classRealm = classRealm;}
public ClassRealm maven_f2983_0()
{    return classRealm;}
public void maven_f2984_0(DependencyFilter extensionDependencyFilter)
{    this.extensionDependencyFilter = extensionDependencyFilter;}
public DependencyFilter maven_f2985_0()
{    return extensionDependencyFilter;}
public void maven_f2986_0(Set<Artifact> artifacts)
{    this.resolvedArtifacts = (artifacts != null) ? artifacts : Collections.<Artifact>emptySet();    this.artifacts = null;    this.artifactMap = null;}
public void maven_f2987_0(ArtifactFilter artifactFilter)
{    this.artifactFilter = artifactFilter;    this.artifacts = null;    this.artifactMap = null;}
public boolean maven_f2988_0(String phase)
{    return lifecyclePhases.contains(phase);}
public void maven_f2989_0(String lifecyclePhase)
{    lifecyclePhases.add(lifecyclePhase);}
public String maven_f2990_0(MavenProject moduleProject) throws IOException
{            String module = moduleProject.getArtifactId();    File moduleFile = moduleProject.getFile();    if (moduleFile != null) {        File moduleDir = moduleFile.getCanonicalFile().getParentFile();        module = moduleDir.getName();    }    if (moduleAdjustments == null) {        moduleAdjustments = new HashMap<>();        List<String> modules = getModules();        if (modules != null) {            for (String modulePath : modules) {                String moduleName = modulePath;                if (moduleName.endsWith("/") || moduleName.endsWith("\\")) {                    moduleName = moduleName.substring(0, moduleName.length() - 1);                }                int lastSlash = moduleName.lastIndexOf('/');                if (lastSlash < 0) {                    lastSlash = moduleName.lastIndexOf('\\');                }                String adjustment = null;                if (lastSlash > -1) {                    moduleName = moduleName.substring(lastSlash + 1);                    adjustment = modulePath.substring(0, lastSlash);                }                moduleAdjustments.put(moduleName, adjustment);            }        }    }    return moduleAdjustments.get(module);}
public Set<Artifact> maven_f2991_0(ArtifactFactory artifactFactory, String inheritedScope, ArtifactFilter filter) throws InvalidDependencyVersionException
{    return MavenMetadataSource.createArtifacts(artifactFactory, getDependencies(), inheritedScope, filter, this);}
protected void maven_f2992_0(List<String> scriptSourceRoots)
{    this.scriptSourceRoots = scriptSourceRoots;}
public void maven_f2993_0(String path)
{    if (path != null) {        path = path.trim();        if (path.length() != 0) {            if (!getScriptSourceRoots().contains(path)) {                getScriptSourceRoots().add(path);            }        }    }}
public List<String> maven_f2994_0()
{    return scriptSourceRoots;}
public List<Artifact> maven_f2995_0()
{    List<Artifact> list = new ArrayList<>(getArtifacts().size());    for (Artifact a : getArtifacts()) {                if (a.getArtifactHandler().isAddedToClasspath()) {                        if (Artifact.SCOPE_COMPILE.equals(a.getScope()) || Artifact.SCOPE_PROVIDED.equals(a.getScope()) || Artifact.SCOPE_SYSTEM.equals(a.getScope())) {                list.add(a);            }        }    }    return list;}
public List<Dependency> maven_f2996_0()
{    Set<Artifact> artifacts = getArtifacts();    if ((artifacts == null) || artifacts.isEmpty()) {        return Collections.emptyList();    }    List<Dependency> list = new ArrayList<>(artifacts.size());    for (Artifact a : getArtifacts()) {                if (Artifact.SCOPE_COMPILE.equals(a.getScope()) || Artifact.SCOPE_PROVIDED.equals(a.getScope()) || Artifact.SCOPE_SYSTEM.equals(a.getScope())) {            Dependency dependency = new Dependency();            dependency.setArtifactId(a.getArtifactId());            dependency.setGroupId(a.getGroupId());            dependency.setVersion(a.getVersion());            dependency.setScope(a.getScope());            dependency.setType(a.getType());            dependency.setClassifier(a.getClassifier());            list.add(dependency);        }    }    return Collections.unmodifiableList(list);}
public List<Artifact> maven_f2997_0()
{    List<Artifact> list = new ArrayList<>(getArtifacts().size());    for (Artifact a : getArtifacts()) {                if (a.getArtifactHandler().isAddedToClasspath()) {            list.add(a);        }    }    return list;}
public List<Dependency> maven_f2998_0()
{    Set<Artifact> artifacts = getArtifacts();    if ((artifacts == null) || artifacts.isEmpty()) {        return Collections.emptyList();    }    List<Dependency> list = new ArrayList<>(artifacts.size());    for (Artifact a : getArtifacts()) {        Dependency dependency = new Dependency();        dependency.setArtifactId(a.getArtifactId());        dependency.setGroupId(a.getGroupId());        dependency.setVersion(a.getVersion());        dependency.setScope(a.getScope());        dependency.setType(a.getType());        dependency.setClassifier(a.getClassifier());        list.add(dependency);    }    return Collections.unmodifiableList(list);}
public List<Dependency> maven_f2999_0()
{    Set<Artifact> artifacts = getArtifacts();    if ((artifacts == null) || artifacts.isEmpty()) {        return Collections.emptyList();    }    List<Dependency> list = new ArrayList<>(artifacts.size());    for (Artifact a : getArtifacts()) {                if (Artifact.SCOPE_COMPILE.equals(a.getScope()) || Artifact.SCOPE_RUNTIME.equals(a.getScope())) {            Dependency dependency = new Dependency();            dependency.setArtifactId(a.getArtifactId());            dependency.setGroupId(a.getGroupId());            dependency.setVersion(a.getVersion());            dependency.setScope(a.getScope());            dependency.setType(a.getType());            dependency.setClassifier(a.getClassifier());            list.add(dependency);        }    }    return Collections.unmodifiableList(list);}
public List<Artifact> maven_f3000_0()
{    List<Artifact> list = new ArrayList<>(getArtifacts().size());    for (Artifact a : getArtifacts()) {                if (a.getArtifactHandler().isAddedToClasspath() &&         (Artifact.SCOPE_COMPILE.equals(a.getScope()) || Artifact.SCOPE_RUNTIME.equals(a.getScope()))) {            list.add(a);        }    }    return list;}
public List<String> maven_f3001_0() throws DependencyResolutionRequiredException
{    List<String> list = new ArrayList<>(getArtifacts().size());    String d = getBuild().getOutputDirectory();    if (d != null) {        list.add(d);    }    for (Artifact a : getArtifacts()) {        if (a.getArtifactHandler().isAddedToClasspath()) {                        if (Artifact.SCOPE_SYSTEM.equals(a.getScope())) {                addArtifactPath(a, list);            }        }    }    return list;}
public List<Artifact> maven_f3002_0()
{    List<Artifact> list = new ArrayList<>(getArtifacts().size());    for (Artifact a : getArtifacts()) {                if (a.getArtifactHandler().isAddedToClasspath()) {                        if (Artifact.SCOPE_SYSTEM.equals(a.getScope())) {                list.add(a);            }        }    }    return list;}
public List<Dependency> maven_f3003_0()
{    Set<Artifact> artifacts = getArtifacts();    if ((artifacts == null) || artifacts.isEmpty()) {        return Collections.emptyList();    }    List<Dependency> list = new ArrayList<>(artifacts.size());    for (Artifact a : getArtifacts()) {                if (Artifact.SCOPE_SYSTEM.equals(a.getScope())) {            Dependency dependency = new Dependency();            dependency.setArtifactId(a.getArtifactId());            dependency.setGroupId(a.getGroupId());            dependency.setVersion(a.getVersion());            dependency.setScope(a.getScope());            dependency.setType(a.getType());            dependency.setClassifier(a.getClassifier());            list.add(dependency);        }    }    return Collections.unmodifiableList(list);}
public void maven_f3004_0(Reporting reporting)
{    getModel().setReporting(reporting);}
public Reporting maven_f3005_0()
{    return getModel().getReporting();}
public void maven_f3006_0(Set<Artifact> reportArtifacts)
{    this.reportArtifacts = reportArtifacts;    reportArtifactMap = null;}
public Set<Artifact> maven_f3007_0()
{    return reportArtifacts;}
public Map<String, Artifact> maven_f3008_0()
{    if (reportArtifactMap == null) {        reportArtifactMap = ArtifactUtils.artifactMapByVersionlessId(getReportArtifacts());    }    return reportArtifactMap;}
public void maven_f3009_0(Set<Artifact> extensionArtifacts)
{    this.extensionArtifacts = extensionArtifacts;    extensionArtifactMap = null;}
public Set<Artifact> maven_f3010_0()
{    return extensionArtifacts;}
public Map<String, Artifact> maven_f3011_0()
{    if (extensionArtifactMap == null) {        extensionArtifactMap = ArtifactUtils.artifactMapByVersionlessId(getExtensionArtifacts());    }    return extensionArtifactMap;}
public List<ReportPlugin> maven_f3012_0()
{    if (getModel().getReporting() == null) {        return Collections.emptyList();    }    return Collections.unmodifiableList(getModel().getReporting().getPlugins());}
public Xpp3Dom maven_f3013_0(String pluginGroupId, String pluginArtifactId, String reportSetId)
{    Xpp3Dom dom = null;    if (getReportPlugins() != null) {        for (ReportPlugin plugin : getReportPlugins()) {            if (pluginGroupId.equals(plugin.getGroupId()) && pluginArtifactId.equals(plugin.getArtifactId())) {                dom = (Xpp3Dom) plugin.getConfiguration();                if (reportSetId != null) {                    ReportSet reportSet = plugin.getReportSetsAsMap().get(reportSetId);                    if (reportSet != null) {                        Xpp3Dom executionConfiguration = (Xpp3Dom) reportSet.getConfiguration();                        if (executionConfiguration != null) {                            Xpp3Dom newDom = new Xpp3Dom(executionConfiguration);                            dom = Xpp3Dom.mergeXpp3Dom(newDom, dom);                        }                    }                }                break;            }        }    }    if (dom != null) {                dom = new Xpp3Dom(dom);    }    return dom;}
public void maven_f3014_0(String type, String classifier, File file)
{}
public void maven_f3015_0(Writer writer) throws IOException
{    MavenXpp3Writer pomWriter = new MavenXpp3Writer();    pomWriter.write(writer, getModel());}
public void maven_f3016_0(Writer writer) throws IOException
{    MavenXpp3Writer pomWriter = new MavenXpp3Writer();    pomWriter.write(writer, getOriginalModel());}
public Artifact maven_f3017_0(Artifact pluginArtifact)
{    return pluginArtifact;}
public ProjectBuildingRequest maven_f3018_0()
{    return projectBuilderConfiguration;}
public void maven_f3019_0(ProjectBuildingRequest projectBuildingRequest)
{    this.projectBuilderConfiguration = projectBuildingRequest;}
public File maven_f3020_0()
{    return pomFile;}
public String maven_f3021_0()
{    if (getPomFile() != null) {        return getPomFile().getAbsolutePath();    } else {        return "null";    }}
public String maven_f3022_0()
{    return projectId;}
public List<ProjectBuildingResult> maven_f3023_0()
{    return results;}
private static String maven_f3024_0(String message, String projectId, File pomFile)
{    StringBuilder buffer = new StringBuilder(256);    buffer.append(message);    buffer.append(" for project ").append(projectId);    if (pomFile != null) {        buffer.append(" at ").append(pomFile.getAbsolutePath());    }    return buffer.toString();}
private static String maven_f3025_0(List<ProjectBuildingResult> results)
{    StringWriter buffer = new StringWriter(1024);    PrintWriter writer = new PrintWriter(buffer);    writer.println("Some problems were encountered while processing the POMs:");    try {        for (ProjectBuildingResult result : results) {            for (ModelProblem problem : result.getProblems()) {                writer.print("[");                writer.print(problem.getSeverity());                writer.print("] ");                writer.print(problem.getMessage());                writer.print(" @ ");                writer.println(ModelProblemUtils.formatLocation(problem, result.getProjectId()));            }        }    } finally {        writer.close();    }    return buffer.toString();}
public void maven_f3026_0(Repository repository) throws InvalidRepositoryException
{    addRepository(repository, false);}
public void maven_f3027_0(final Repository repository, boolean replace) throws InvalidRepositoryException
{    if (!repositoryIds.add(repository.getId())) {        if (!replace) {            return;        }                removeMatchingRepository(repositories, repository.getId());        removeMatchingRepository(pomRepositories, repository.getId());    }    List<RemoteRepository> newRepositories = Collections.singletonList(ArtifactDescriptorUtils.toRemoteRepository(repository));    if (ProjectBuildingRequest.RepositoryMerging.REQUEST_DOMINANT.equals(repositoryMerging)) {        repositories = remoteRepositoryManager.aggregateRepositories(session, repositories, newRepositories, true);    } else {        pomRepositories = remoteRepositoryManager.aggregateRepositories(session, pomRepositories, newRepositories, true);        repositories = remoteRepositoryManager.aggregateRepositories(session, pomRepositories, externalRepositories, false);    }}
private static void maven_f3028_0(Iterable<RemoteRepository> repositories, final String id)
{    Iterator iterator = repositories.iterator();    while (iterator.hasNext()) {        RemoteRepository next = (RemoteRepository) iterator.next();        if (next.getId().equals(id)) {            iterator.remove();        }    }}
public ModelResolver maven_f3029_0()
{    return new ProjectModelResolver(this);}
public ModelSource maven_f3030_0(String groupId, String artifactId, String version) throws UnresolvableModelException
{    File pomFile = null;    if (modelPool != null) {        pomFile = modelPool.get(groupId, artifactId, version);    }    if (pomFile == null) {        Artifact pomArtifact = new DefaultArtifact(groupId, artifactId, "", "pom", version);        try {            ArtifactRequest request = new ArtifactRequest(pomArtifact, repositories, context);            request.setTrace(trace);            pomArtifact = resolver.resolveArtifact(session, request).getArtifact();        } catch (ArtifactResolutionException e) {            throw new UnresolvableModelException(e.getMessage(), groupId, artifactId, version, e);        }        pomFile = pomArtifact.getFile();    }    return new FileModelSource(pomFile);}
public ModelSource maven_f3031_0(final Parent parent) throws UnresolvableModelException
{    try {        final Artifact artifact = new DefaultArtifact(parent.getGroupId(), parent.getArtifactId(), "", "pom", parent.getVersion());        final VersionRangeRequest versionRangeRequest = new VersionRangeRequest(artifact, repositories, context);        versionRangeRequest.setTrace(trace);        final VersionRangeResult versionRangeResult = resolver.resolveVersionRange(session, versionRangeRequest);        if (versionRangeResult.getHighestVersion() == null) {            throw new UnresolvableModelException(String.format("No versions matched the requested parent version range '%s'", parent.getVersion()), parent.getGroupId(), parent.getArtifactId(), parent.getVersion());        }        if (versionRangeResult.getVersionConstraint() != null && versionRangeResult.getVersionConstraint().getRange() != null && versionRangeResult.getVersionConstraint().getRange().getUpperBound() == null) {                        throw new UnresolvableModelException(String.format("The requested parent version range '%s' does not specify an upper bound", parent.getVersion()), parent.getGroupId(), parent.getArtifactId(), parent.getVersion());        }        parent.setVersion(versionRangeResult.getHighestVersion().toString());        return resolveModel(parent.getGroupId(), parent.getArtifactId(), parent.getVersion());    } catch (final VersionRangeResolutionException e) {        throw new UnresolvableModelException(e.getMessage(), parent.getGroupId(), parent.getArtifactId(), parent.getVersion(), e);    }}
public ModelSource maven_f3032_0(final Dependency dependency) throws UnresolvableModelException
{    try {        final Artifact artifact = new DefaultArtifact(dependency.getGroupId(), dependency.getArtifactId(), "", "pom", dependency.getVersion());        final VersionRangeRequest versionRangeRequest = new VersionRangeRequest(artifact, repositories, context);        versionRangeRequest.setTrace(trace);        final VersionRangeResult versionRangeResult = resolver.resolveVersionRange(session, versionRangeRequest);        if (versionRangeResult.getHighestVersion() == null) {            throw new UnresolvableModelException(String.format("No versions matched the requested dependency version range '%s'", dependency.getVersion()), dependency.getGroupId(), dependency.getArtifactId(), dependency.getVersion());        }        if (versionRangeResult.getVersionConstraint() != null && versionRangeResult.getVersionConstraint().getRange() != null && versionRangeResult.getVersionConstraint().getRange().getUpperBound() == null) {                        throw new UnresolvableModelException(String.format("The requested dependency version range '%s' does not specify an upper bound", dependency.getVersion()), dependency.getGroupId(), dependency.getArtifactId(), dependency.getVersion());        }        dependency.setVersion(versionRangeResult.getHighestVersion().toString());        return resolveModel(dependency.getGroupId(), dependency.getArtifactId(), dependency.getVersion());    } catch (VersionRangeResolutionException e) {        throw new UnresolvableModelException(e.getMessage(), dependency.getGroupId(), dependency.getArtifactId(), dependency.getVersion(), e);    }}
public ClassRealm maven_f3033_0()
{    return realm;}
public DependencyFilter maven_f3034_0()
{    return extensionArtifactFilter;}
private void maven_f3035_0(Map<String, MavenProject> projectMap, Map<String, Map<String, Vertex>> vertexMap, MavenProject project, Vertex projectVertex, String groupId, String artifactId, String version, boolean force, boolean safe) throws CycleDetectedException
{    String projectKey = ArtifactUtils.versionlessKey(groupId, artifactId);    Map<String, Vertex> vertices = vertexMap.get(projectKey);    if (vertices != null) {        if (isSpecificVersion(version)) {            Vertex vertex = vertices.get(version);            if (vertex != null) {                addEdge(projectVertex, vertex, project, projectMap, force, safe);            }        } else {            for (Vertex vertex : vertices.values()) {                addEdge(projectVertex, vertex, project, projectMap, force, safe);            }        }    }}
private void maven_f3036_0(Vertex fromVertex, Vertex toVertex, MavenProject fromProject, Map<String, MavenProject> projectMap, boolean force, boolean safe) throws CycleDetectedException
{    if (fromVertex.equals(toVertex)) {        return;    }    if (fromProject != null) {        MavenProject toProject = projectMap.get(toVertex.getLabel());        fromProject.addProjectReference(toProject);    }    if (force && toVertex.getChildren().contains(fromVertex)) {        dag.removeEdge(toVertex, fromVertex);    }    try {        dag.addEdge(fromVertex, toVertex);    } catch (CycleDetectedException e) {        if (!safe) {            throw e;        }    }}
private boolean maven_f3037_0(String version)
{    return !(StringUtils.isEmpty(version) || version.startsWith("[") || version.startsWith("("));}
public MavenProject maven_f3038_0()
{    if (topLevelProject == null) {        for (Iterator<MavenProject> i = sortedProjects.iterator(); i.hasNext() && (topLevelProject == null); ) {            MavenProject project = i.next();            if (project.isExecutionRoot()) {                topLevelProject = project;            }        }    }    return topLevelProject;}
public List<MavenProject> maven_f3039_0()
{    return sortedProjects;}
public boolean maven_f3040_0()
{    return sortedProjects.size() > 1;}
public List<String> maven_f3041_0(String id)
{    return dag.getParentLabels(id);}
public List<String> maven_f3042_0(String id)
{    return dag.getChildLabels(id);}
public static String maven_f3043_0(MavenProject project)
{    return ArtifactUtils.key(project.getGroupId(), project.getArtifactId(), project.getVersion());}
public DAG maven_f3044_0()
{    return dag;}
public Map<String, MavenProject> maven_f3045_0()
{    return projectMap;}
public Object maven_f3046_0(String groupId, String artifactId, String version, String tag)
{    return models.get(new CacheKey(groupId, artifactId, version, tag));}
public void maven_f3047_0(String groupId, String artifactId, String version, String tag, Object data)
{    models.put(new CacheKey(groupId, artifactId, version, tag), data);}
public boolean maven_f3048_0(Object obj)
{    if (this == obj) {        return true;    }    if (!(obj instanceof CacheKey)) {        return false;    }    CacheKey that = (CacheKey) obj;    return artifactId.equals(that.artifactId) && groupId.equals(that.groupId) && version.equals(that.version) && tag.equals(that.tag);}
public int maven_f3049_0()
{    return hashCode;}
public File maven_f3050_0(String groupId, String artifactId, String version)
{    return pomFiles.get(new CacheKey(groupId, artifactId, version));}
public void maven_f3051_0(String groupId, String artifactId, String version, File pomFile)
{    pomFiles.put(new CacheKey(groupId, artifactId, version), pomFile);}
public boolean maven_f3052_0(Object obj)
{    if (this == obj) {        return true;    }    if (!(obj instanceof CacheKey)) {        return false;    }    CacheKey that = (CacheKey) obj;    return artifactId.equals(that.artifactId) && groupId.equals(that.groupId) && version.equals(that.version);}
public int maven_f3053_0()
{    return hashCode;}
public String maven_f3054_0()
{    StringBuilder buffer = new StringBuilder(128);    buffer.append(groupId).append(':').append(artifactId).append(':').append(version);    return buffer.toString();}
public MojoFailureException maven_f3055_0()
{    return (MojoFailureException) getCause();}
public String maven_f3056_0()
{    return projectId;}
public static void maven_f3057_0(Properties props)
{    if (props != null) {        if (envVars == null) {            Properties tmp = new Properties();            boolean caseSensitive = !Os.isFamily(Os.FAMILY_WINDOWS);            for (Map.Entry<String, String> entry : System.getenv().entrySet()) {                String key = "env." + (caseSensitive ? entry.getKey() : entry.getKey().toUpperCase(Locale.ENGLISH));                tmp.setProperty(key, entry.getValue());            }            envVars = tmp;        }        props.putAll(envVars);    }}
public static void maven_f3058_0(Properties props)
{    props.putAll(getSystemProperties());}
public static Properties maven_f3059_0()
{    return copyProperties(System.getProperties());}
public static Properties maven_f3060_0(Properties properties)
{    final Properties copyProperties = new Properties();        synchronized (properties) {        copyProperties.putAll(properties);    }    return copyProperties;}
public WorkspaceRepository maven_f3061_0()
{    return repository;}
public File maven_f3062_0(Artifact artifact)
{    String projectKey = ArtifactUtils.key(artifact.getGroupId(), artifact.getArtifactId(), artifact.getVersion());    MavenProject project = projectsByGAV.get(projectKey);    if (project != null) {        File file = find(project, artifact);        if (file == null && project != project.getExecutionProject()) {            file = find(project.getExecutionProject(), artifact);        }        return file;    }    return null;}
public List<String> maven_f3063_0(Artifact artifact)
{    String key = ArtifactUtils.versionlessKey(artifact.getGroupId(), artifact.getArtifactId());    List<MavenProject> projects = projectsByGA.get(key);    if (projects == null || projects.isEmpty()) {        return Collections.emptyList();    }    List<String> versions = new ArrayList<>();    for (MavenProject project : projects) {        if (find(project, artifact) != null) {            versions.add(project.getVersion());        }    }    return Collections.unmodifiableList(versions);}
public Model maven_f3064_0(Artifact artifact)
{    String projectKey = ArtifactUtils.key(artifact.getGroupId(), artifact.getArtifactId(), artifact.getVersion());    MavenProject project = projectsByGAV.get(projectKey);    return project == null ? null : project.getModel();}
private File maven_f3065_0(MavenProject project, Artifact artifact)
{    if ("pom".equals(artifact.getExtension())) {        return project.getFile();    }    Artifact projectArtifact = findMatchingArtifact(project, artifact);    if (hasArtifactFileFromPackagePhase(projectArtifact)) {        return projectArtifact.getFile();    } else if (!hasBeenPackaged(project)) {        if (isTestArtifact(artifact)) {            if (project.hasLifecyclePhase("test-compile")) {                return new File(project.getBuild().getTestOutputDirectory());            }        } else {            String type = artifact.getProperty("type", "");            if (project.hasLifecyclePhase("compile") && COMPILE_PHASE_TYPES.contains(type)) {                return new File(project.getBuild().getOutputDirectory());            }        }    }        return null;}
private boolean maven_f3066_0(Artifact projectArtifact)
{    return projectArtifact != null && projectArtifact.getFile() != null && projectArtifact.getFile().exists();}
private boolean maven_f3067_0(MavenProject project)
{    return project.hasLifecyclePhase("package") || project.hasLifecyclePhase("install") || project.hasLifecyclePhase("deploy");}
private Artifact maven_f3068_0(MavenProject project, Artifact requestedArtifact)
{    String requestedRepositoryConflictId = ArtifactIdUtils.toVersionlessId(requestedArtifact);    Artifact mainArtifact = RepositoryUtils.toArtifact(project.getArtifact());    if (requestedRepositoryConflictId.equals(ArtifactIdUtils.toVersionlessId(mainArtifact))) {        return mainArtifact;    }    for (Artifact attachedArtifact : RepositoryUtils.toArtifacts(project.getAttachedArtifacts())) {        if (attachedArtifactComparison(requestedArtifact, attachedArtifact)) {            return attachedArtifact;        }    }    return null;}
private boolean maven_f3069_0(Artifact requested, Artifact attached)
{        return requested.getArtifactId().equals(attached.getArtifactId()) && requested.getGroupId().equals(attached.getGroupId()) && requested.getVersion().equals(attached.getVersion()) && requested.getExtension().equals(attached.getExtension()) && requested.getClassifier().equals(attached.getClassifier());}
private static boolean maven_f3070_0(Artifact artifact)
{    return ("test-jar".equals(artifact.getProperty("type", ""))) || ("jar".equals(artifact.getExtension()) && "tests".equals(artifact.getClassifier()));}
public ArtifactTransferResource maven_f3071_0()
{    return artifact;}
public Exception maven_f3072_0()
{    return exception;}
public int maven_f3073_0()
{    return requestType;}
public void maven_f3074_0(final int requestType)
{    switch(requestType) {        case REQUEST_PUT:            break;        case REQUEST_GET:            break;        default:            throw new IllegalArgumentException("Illegal request type: " + requestType);    }    this.requestType = requestType;}
public int maven_f3075_0()
{    return eventType;}
public void maven_f3076_0(final int eventType)
{    switch(eventType) {        case TRANSFER_INITIATED:            break;        case TRANSFER_STARTED:            break;        case TRANSFER_COMPLETED:            break;        case TRANSFER_PROGRESS:            break;        case TRANSFER_ERROR:            break;        default:            throw new IllegalArgumentException("Illegal event type: " + eventType);    }    this.eventType = eventType;}
public File maven_f3077_0()
{    return localFile;}
public void maven_f3078_0(File localFile)
{    this.localFile = localFile;}
public long maven_f3079_0()
{    return transferredBytes;}
public void maven_f3080_0(long transferredBytes)
{    this.transferredBytes = transferredBytes;}
public byte[] maven_f3081_0()
{    return dataBuffer;}
public void maven_f3082_0(byte[] dataBuffer)
{    this.dataBuffer = dataBuffer;}
public int maven_f3083_0()
{    return dataOffset;}
public void maven_f3084_0(int dataOffset)
{    this.dataOffset = dataOffset;}
public int maven_f3085_0()
{    return dataLength;}
public void maven_f3086_0(int dataLength)
{    this.dataLength = dataLength;}
public String maven_f3087_0()
{    StringBuilder sb = new StringBuilder(64);    sb.append("TransferEvent[");    switch(this.getRequestType()) {        case REQUEST_GET:            sb.append("GET");            break;        case REQUEST_PUT:            sb.append("PUT");            break;        default:            sb.append(this.getRequestType());            break;    }    sb.append('|');    switch(this.getEventType()) {        case TRANSFER_COMPLETED:            sb.append("COMPLETED");            break;        case TRANSFER_ERROR:            sb.append("ERROR");            break;        case TRANSFER_INITIATED:            sb.append("INITIATED");            break;        case TRANSFER_PROGRESS:            sb.append("PROGRESS");            break;        case TRANSFER_STARTED:            sb.append("STARTED");            break;        default:            sb.append(this.getEventType());            break;    }    sb.append('|');    sb.append(this.getLocalFile()).append('|');    sb.append(']');    return sb.toString();}
public int maven_f3088_0()
{    final int prime = 31;    int result = 1;    result = prime * result + eventType;    result = prime * result + ((exception == null) ? 0 : exception.hashCode());    result = prime * result + ((localFile == null) ? 0 : localFile.hashCode());    result = prime * result + requestType;    return result;}
public boolean maven_f3089_0(Object obj)
{    if (this == obj) {        return true;    }    if ((obj == null) || (getClass() != obj.getClass())) {        return false;    }    final ArtifactTransferEvent other = (ArtifactTransferEvent) obj;    if (eventType != other.eventType) {        return false;    }    if (exception == null) {        if (other.exception != null) {            return false;        }    } else if (!exception.getClass().equals(other.exception.getClass())) {        return false;    }    if (requestType != other.requestType) {        return false;    } else if (!source.equals(other.source)) {        return false;    }    return true;}
public void maven_f3090_0(LocalArtifactRepository localRepository)
{    this.buildReactor = localRepository;}
public void maven_f3091_0(LocalArtifactRepository localRepository)
{    this.ideWorkspace = localRepository;}
public LocalArtifactRepository maven_f3092_0()
{    return ideWorkspace;}
public LocalArtifactRepository maven_f3093_0()
{    return getIdeWorspace();}
public Artifact maven_f3094_0(Artifact artifact)
{    if (!artifact.isRelease() && buildReactor != null) {        artifact = buildReactor.find(artifact);    }    if (!artifact.isResolved() && ideWorkspace != null) {        artifact = ideWorkspace.find(artifact);    }    if (!artifact.isResolved()) {        artifact = userLocalArtifactRepository.find(artifact);    }    return artifact;}
public List<String> maven_f3095_0(Artifact artifact)
{    Collection<String> versions = new LinkedHashSet<>();    if (buildReactor != null) {        versions.addAll(buildReactor.findVersions(artifact));    }    if (ideWorkspace != null) {        versions.addAll(ideWorkspace.findVersions(artifact));    }    versions.addAll(userLocalArtifactRepository.findVersions(artifact));    return Collections.unmodifiableList(new ArrayList<>(versions));}
public String maven_f3096_0(ArtifactMetadata metadata, ArtifactRepository repository)
{    return userLocalArtifactRepository.pathOfLocalRepositoryMetadata(metadata, repository);}
public String maven_f3097_0()
{    return userLocalArtifactRepository.getId();}
public String maven_f3098_0(Artifact artifact)
{    return userLocalArtifactRepository.pathOf(artifact);}
public String maven_f3099_0()
{    return (userLocalArtifactRepository != null) ? userLocalArtifactRepository.getBasedir() : null;}
public ArtifactRepositoryLayout maven_f3100_0()
{    return userLocalArtifactRepository.getLayout();}
public ArtifactRepositoryPolicy maven_f3101_0()
{    return userLocalArtifactRepository.getReleases();}
public ArtifactRepositoryPolicy maven_f3102_0()
{    return userLocalArtifactRepository.getSnapshots();}
public String maven_f3103_0()
{    return userLocalArtifactRepository.getKey();}
public String maven_f3104_0()
{    return userLocalArtifactRepository.getUrl();}
public int maven_f3105_0()
{    int hash = 17;    hash = hash * 31 + (buildReactor == null ? 0 : buildReactor.hashCode());    hash = hash * 31 + (ideWorkspace == null ? 0 : ideWorkspace.hashCode());    hash = hash * 31 + (userLocalArtifactRepository == null ? 0 : userLocalArtifactRepository.hashCode());    return hash;}
public boolean maven_f3106_0(Object obj)
{    if (this == obj) {        return true;    }    if (obj == null) {        return false;    }    if (getClass() != obj.getClass()) {        return false;    }    DelegatingLocalArtifactRepository other = (DelegatingLocalArtifactRepository) obj;    return eq(buildReactor, other.buildReactor) && eq(ideWorkspace, other.ideWorkspace) && eq(userLocalArtifactRepository, other.userLocalArtifactRepository);}
public boolean maven_f3107_0()
{    return false;}
public String maven_f3108_0()
{    return artifact.getGroupId();}
public String maven_f3109_0()
{    return artifact.getArtifactId();}
public String maven_f3110_0()
{    StringBuilder buffer = new StringBuilder(256);    buffer.append("\nArtifact Metadata\n--------------------------");    buffer.append("\nGroupId: ").append(getGroupId());    buffer.append("\nArtifactId: ").append(getArtifactId());    buffer.append("\nMetadata Type: ").append(getClass().getName());    return buffer.toString();}
public Artifact maven_f3111_0()
{    return artifact;}
public Artifact maven_f3112_0()
{    return artifact;}
public DefaultMetadataResolutionRequest maven_f3113_0(Artifact artifact)
{    this.artifact = artifact;    return this;}
public ArtifactRepository maven_f3114_0()
{    return repositoryRequest.getLocalRepository();}
public DefaultMetadataResolutionRequest maven_f3115_0(ArtifactRepository localRepository)
{    repositoryRequest.setLocalRepository(localRepository);    return this;}
public List<ArtifactRepository> maven_f3116_0()
{    return repositoryRequest.getRemoteRepositories();}
public DefaultMetadataResolutionRequest maven_f3117_0(List<ArtifactRepository> remoteRepositories)
{    repositoryRequest.setRemoteRepositories(remoteRepositories);    return this;}
public boolean maven_f3118_0()
{    return resolveManagedVersions;}
public DefaultMetadataResolutionRequest maven_f3119_0(boolean resolveManagedVersions)
{    this.resolveManagedVersions = resolveManagedVersions;    return this;}
public boolean maven_f3120_0()
{    return repositoryRequest.isOffline();}
public DefaultMetadataResolutionRequest maven_f3121_0(boolean offline)
{    repositoryRequest.setOffline(offline);    return this;}
public boolean maven_f3122_0()
{    return repositoryRequest.isForceUpdate();}
public DefaultMetadataResolutionRequest maven_f3123_0(boolean forceUpdate)
{    repositoryRequest.setForceUpdate(forceUpdate);    return this;}
public Artifact maven_f3124_0()
{    return pomArtifact;}
public Artifact maven_f3125_0()
{    return relocatedArtifact;}
public Set<Artifact> maven_f3126_0()
{    return artifacts;}
public List<ArtifactRepository> maven_f3127_0()
{    return resolutionRepositories;}
public Map<String, Artifact> maven_f3128_0()
{    return managedVersions;}
private static String maven_f3129_0(String string)
{    return (string == null || string.length() <= 0) ? null : string;}
private static org.apache.maven.artifact.Artifact maven_f3130_0(Dependency dependency)
{    if (dependency == null) {        return null;    }    org.apache.maven.artifact.Artifact result = toArtifact(dependency.getArtifact());    result.setScope(dependency.getScope());    result.setOptional(dependency.isOptional());    return result;}
public static org.apache.maven.artifact.Artifact maven_f3131_0(Artifact artifact)
{    if (artifact == null) {        return null;    }    ArtifactHandler handler = newHandler(artifact);    /*         * NOTE: From Artifact.hasClassifier(), an empty string and a null both denote "no classifier". However, some         * plugins only check for null, so be sure to nullify an empty classifier.         */    org.apache.maven.artifact.Artifact result = new org.apache.maven.artifact.DefaultArtifact(artifact.getGroupId(), artifact.getArtifactId(), artifact.getVersion(), null, artifact.getProperty(ArtifactProperties.TYPE, artifact.getExtension()), nullify(artifact.getClassifier()), handler);    result.setFile(artifact.getFile());    result.setResolved(artifact.getFile() != null);    List<String> trail = new ArrayList<>(1);    trail.add(result.getId());    result.setDependencyTrail(trail);    return result;}
public static void maven_f3132_0(Collection<org.apache.maven.artifact.Artifact> artifacts, Collection<? extends DependencyNode> nodes, List<String> trail, DependencyFilter filter)
{    for (DependencyNode node : nodes) {        org.apache.maven.artifact.Artifact artifact = toArtifact(node.getDependency());        List<String> nodeTrail = new ArrayList<>(trail.size() + 1);        nodeTrail.addAll(trail);        nodeTrail.add(artifact.getId());        if (filter == null || filter.accept(node, Collections.<DependencyNode>emptyList())) {            artifact.setDependencyTrail(nodeTrail);            artifacts.add(artifact);        }        toArtifacts(artifacts, node.getChildren(), nodeTrail, filter);    }}
public static Artifact maven_f3133_0(org.apache.maven.artifact.Artifact artifact)
{    if (artifact == null) {        return null;    }    String version = artifact.getVersion();    if (version == null && artifact.getVersionRange() != null) {        version = artifact.getVersionRange().toString();    }    Map<String, String> props = null;    if (org.apache.maven.artifact.Artifact.SCOPE_SYSTEM.equals(artifact.getScope())) {        String localPath = (artifact.getFile() != null) ? artifact.getFile().getPath() : "";        props = Collections.singletonMap(ArtifactProperties.LOCAL_PATH, localPath);    }    Artifact result = new DefaultArtifact(artifact.getGroupId(), artifact.getArtifactId(), artifact.getClassifier(), artifact.getArtifactHandler().getExtension(), version, props, newArtifactType(artifact.getType(), artifact.getArtifactHandler()));    result = result.setFile(artifact.getFile());    return result;}
public static Dependency maven_f3134_0(org.apache.maven.artifact.Artifact artifact, Collection<org.apache.maven.model.Exclusion> exclusions)
{    if (artifact == null) {        return null;    }    Artifact result = toArtifact(artifact);    List<Exclusion> excl = null;    if (exclusions != null) {        excl = new ArrayList<>(exclusions.size());        for (org.apache.maven.model.Exclusion exclusion : exclusions) {            excl.add(toExclusion(exclusion));        }    }    return new Dependency(result, artifact.getScope(), artifact.isOptional(), excl);}
public static List<RemoteRepository> maven_f3135_0(List<ArtifactRepository> repos)
{    if (repos == null) {        return null;    }    List<RemoteRepository> results = new ArrayList<>(repos.size());    for (ArtifactRepository repo : repos) {        results.add(toRepo(repo));    }    return results;}
public static RemoteRepository maven_f3136_0(ArtifactRepository repo)
{    RemoteRepository result = null;    if (repo != null) {        RemoteRepository.Builder builder = new RemoteRepository.Builder(repo.getId(), getLayout(repo), repo.getUrl());        builder.setSnapshotPolicy(toPolicy(repo.getSnapshots()));        builder.setReleasePolicy(toPolicy(repo.getReleases()));        builder.setAuthentication(toAuthentication(repo.getAuthentication()));        builder.setProxy(toProxy(repo.getProxy()));        builder.setMirroredRepositories(toRepos(repo.getMirroredRepositories()));        result = builder.build();    }    return result;}
public static String maven_f3137_0(ArtifactRepository repo)
{    try {        return repo.getLayout().getId();    } catch (LinkageError e) {        /*             * NOTE: getId() was added in 3.x and is as such not implemented by plugins compiled against 2.x APIs.             */        String className = repo.getLayout().getClass().getSimpleName();        if (className.endsWith("RepositoryLayout")) {            String layout = className.substring(0, className.length() - "RepositoryLayout".length());            if (layout.length() > 0) {                layout = Character.toLowerCase(layout.charAt(0)) + layout.substring(1);                return layout;            }        }        return "";    }}
private static RepositoryPolicy maven_f3138_0(ArtifactRepositoryPolicy policy)
{    RepositoryPolicy result = null;    if (policy != null) {        result = new RepositoryPolicy(policy.isEnabled(), policy.getUpdatePolicy(), policy.getChecksumPolicy());    }    return result;}
private static Authentication maven_f3139_0(org.apache.maven.artifact.repository.Authentication auth)
{    Authentication result = null;    if (auth != null) {        AuthenticationBuilder authBuilder = new AuthenticationBuilder();        authBuilder.addUsername(auth.getUsername()).addPassword(auth.getPassword());        authBuilder.addPrivateKey(auth.getPrivateKey(), auth.getPassphrase());        result = authBuilder.build();    }    return result;}
private static Proxy maven_f3140_0(org.apache.maven.repository.Proxy proxy)
{    Proxy result = null;    if (proxy != null) {        AuthenticationBuilder authBuilder = new AuthenticationBuilder();        authBuilder.addUsername(proxy.getUserName()).addPassword(proxy.getPassword());        result = new Proxy(proxy.getProtocol(), proxy.getHost(), proxy.getPort(), authBuilder.build());    }    return result;}
public static ArtifactHandler maven_f3141_0(Artifact artifact)
{    String type = artifact.getProperty(ArtifactProperties.TYPE, artifact.getExtension());    DefaultArtifactHandler handler = new DefaultArtifactHandler(type);    handler.setExtension(artifact.getExtension());    handler.setLanguage(artifact.getProperty(ArtifactProperties.LANGUAGE, null));    String addedToClasspath = artifact.getProperty(ArtifactProperties.CONSTITUTES_BUILD_PATH, "");    handler.setAddedToClasspath(Boolean.parseBoolean(addedToClasspath));    String includesDependencies = artifact.getProperty(ArtifactProperties.INCLUDES_DEPENDENCIES, "");    handler.setIncludesDependencies(Boolean.parseBoolean(includesDependencies));    return handler;}
public static ArtifactType maven_f3142_0(String id, ArtifactHandler handler)
{    return new DefaultArtifactType(id, handler.getExtension(), handler.getClassifier(), handler.getLanguage(), handler.isAddedToClasspath(), handler.isIncludesDependencies());}
public static Dependency maven_f3143_0(org.apache.maven.model.Dependency dependency, ArtifactTypeRegistry stereotypes)
{    ArtifactType stereotype = stereotypes.get(dependency.getType());    if (stereotype == null) {        stereotype = new DefaultArtifactType(dependency.getType());    }    boolean system = dependency.getSystemPath() != null && dependency.getSystemPath().length() > 0;    Map<String, String> props = null;    if (system) {        props = Collections.singletonMap(ArtifactProperties.LOCAL_PATH, dependency.getSystemPath());    }    Artifact artifact = new DefaultArtifact(dependency.getGroupId(), dependency.getArtifactId(), dependency.getClassifier(), null, dependency.getVersion(), props, stereotype);    List<Exclusion> exclusions = new ArrayList<>(dependency.getExclusions().size());    for (org.apache.maven.model.Exclusion exclusion : dependency.getExclusions()) {        exclusions.add(toExclusion(exclusion));    }    Dependency result = new Dependency(artifact, dependency.getScope(), dependency.getOptional() != null ? dependency.isOptional() : null, exclusions);    return result;}
private static Exclusion maven_f3144_0(org.apache.maven.model.Exclusion exclusion)
{    return new Exclusion(exclusion.getGroupId(), exclusion.getArtifactId(), "*", "*");}
public static ArtifactTypeRegistry maven_f3145_0(ArtifactHandlerManager handlerManager)
{    return new MavenArtifactTypeRegistry(handlerManager);}
public ArtifactType maven_f3146_0(String stereotypeId)
{    ArtifactHandler handler = handlerManager.getArtifactHandler(stereotypeId);    return newArtifactType(stereotypeId, handler);}
public static Collection<Artifact> maven_f3147_0(Collection<org.apache.maven.artifact.Artifact> artifactsToConvert)
{    List<Artifact> artifacts = new ArrayList<>();    for (org.apache.maven.artifact.Artifact a : artifactsToConvert) {        artifacts.add(toArtifact(a));    }    return artifacts;}
public static WorkspaceRepository maven_f3148_0(RepositorySystemSession session)
{    WorkspaceReader reader = session.getWorkspaceReader();    return (reader != null) ? reader.getRepository() : null;}
public static boolean maven_f3149_0(List<RemoteRepository> r1, List<RemoteRepository> r2)
{    if (r1.size() != r2.size()) {        return false;    }    for (Iterator<RemoteRepository> it1 = r1.iterator(), it2 = r2.iterator(); it1.hasNext(); ) {        if (!repositoryEquals(it1.next(), it2.next())) {            return false;        }    }    return true;}
public static int maven_f3150_0(List<RemoteRepository> repositories)
{    int result = 17;    for (RemoteRepository repository : repositories) {        result = 31 * result + repositoryHashCode(repository);    }    return result;}
private static int maven_f3151_0(RemoteRepository repository)
{    int result = 17;    Object obj = repository.getUrl();    result = 31 * result + (obj != null ? obj.hashCode() : 0);    return result;}
private static boolean maven_f3152_0(RepositoryPolicy p1, RepositoryPolicy p2)
{    if (p1 == p2) {        return true;    }        return p1.isEnabled() == p2.isEnabled() && Objects.equals(p1.getChecksumPolicy(), p2.getChecksumPolicy());}
private static boolean maven_f3153_0(RemoteRepository r1, RemoteRepository r2)
{    if (r1 == r2) {        return true;    }    return Objects.equals(r1.getId(), r2.getId()) && Objects.equals(r1.getUrl(), r2.getUrl()) && policyEquals(r1.getPolicy(false), r2.getPolicy(false)) && policyEquals(r1.getPolicy(true), r2.getPolicy(true));}
public Stringf3154_1)
{    if (mavenVersion == null) {        Properties props = new Properties();        String resource = "META-INF/maven/org.apache.maven/maven-core/pom.properties";        try (InputStream is = DefaultRuntimeInformation.class.getResourceAsStream("/" + resource)) {            if (is != null) {                props.load(is);            } else {                            }        } catch (IOException e) {            String msg = "Could not parse " + resource + ", Maven runtime information not available";            if (logger.isDebugEnabled()) {                            } else {                            }        }        String version = props.getProperty("version", "").trim();        if (!version.startsWith("${")) {            mavenVersion = version;        } else {            mavenVersion = "";        }    }    return mavenVersion;}
public boolean maven_f3155_0(String versionRange)
{    VersionScheme versionScheme = new GenericVersionScheme();    Validate.notBlank(versionRange, "versionRange can neither be null, empty nor blank");    VersionConstraint constraint;    try {        constraint = versionScheme.parseVersionConstraint(versionRange);    } catch (InvalidVersionSpecificationException e) {        throw new IllegalArgumentException(e.getMessage(), e);    }    Version current;    try {        String mavenVersion = getMavenVersion();        Validate.validState(StringUtils.isNotEmpty(mavenVersion), "Could not determine current Maven version");        current = versionScheme.parseVersion(mavenVersion);    } catch (InvalidVersionSpecificationException e) {        throw new IllegalStateException("Could not parse current Maven version: " + e.getMessage(), e);    }    if (constraint.getRange() == null) {        return constraint.getVersion().compareTo(current) <= 0;    }    return constraint.containsVersion(current);}
public Object maven_f3156_0()
{    throw new IllegalStateException();}
public void maven_f3157_0()
{    LinkedList<ScopeState> stack = values.get();    if (stack == null) {        stack = new LinkedList<>();        values.set(stack);    }    stack.addFirst(new ScopeState());}
public void maven_f3158_0(Memento memento)
{    enter();    getScopeState().seeded.putAll(memento.seeded);}
private ScopeState maven_f3159_0()
{    LinkedList<ScopeState> stack = values.get();    if (stack == null || stack.isEmpty()) {        throw new IllegalStateException();    }    return stack.getFirst();}
public void maven_f3160_0()
{    final LinkedList<ScopeState> stack = values.get();    if (stack == null || stack.isEmpty()) {        throw new IllegalStateException();    }    stack.removeFirst();    if (stack.isEmpty()) {        values.remove();    }}
public Memento maven_f3161_0()
{    LinkedList<ScopeState> stack = values.get();    return new Memento(stack != null ? stack.getFirst().seeded : Collections.<Key<?>, Provider<?>>emptyMap());}
public void maven_f3162_0(Class<T> clazz, Provider<T> value)
{    getScopeState().seeded.put(Key.get(clazz), value);}
public void maven_f3163_0(Class<T> clazz, final T value)
{    getScopeState().seeded.put(Key.get(clazz), Providers.of(value));}
public Provider<T> maven_f3164_0(final Key<T> key, final Provider<T> unscoped)
{    return new Provider<T>() {        @SuppressWarnings("unchecked")        public T get() {            LinkedList<ScopeState> stack = values.get();            if (stack == null || stack.isEmpty()) {                throw new OutOfScopeException("Cannot access " + key + " outside of a scoping block");            }            ScopeState state = stack.getFirst();            Provider<?> seeded = state.seeded.get(key);            if (seeded != null) {                return (T) seeded.get();            }            T provided = (T) state.provided.get(key);            if (provided == null && unscoped != null) {                provided = unscoped.get();                state.provided.put(key, provided);            }            return provided;        }    };}
public T maven_f3165_0()
{    LinkedList<ScopeState> stack = values.get();    if (stack == null || stack.isEmpty()) {        throw new OutOfScopeException("Cannot access " + key + " outside of a scoping block");    }    ScopeState state = stack.getFirst();    Provider<?> seeded = state.seeded.get(key);    if (seeded != null) {        return (T) seeded.get();    }    T provided = (T) state.provided.get(key);    if (provided == null && unscoped != null) {        provided = unscoped.get();        state.provided.put(key, provided);    }    return provided;}
public static Provider<T> maven_f3166_0()
{    return (Provider<T>) SEEDED_KEY_PROVIDER;}
protected void maven_f3167_0()
{    bindScope(SessionScoped.class, scope);    bind(SessionScope.class).toInstance(scope);    bind(MavenSession.class).toProvider(SessionScope.<MavenSession>seededKeyProvider()).in(scope);}
public Settings maven_f3168_0() throws IOException, XmlPullParserException
{    File userSettingsFile = getFile("${user.home}/.m2/settings.xml", "user.home", MavenSettingsBuilder.ALT_USER_SETTINGS_XML_LOCATION);    return buildSettings(userSettingsFile);}
public Settings maven_f3169_0(boolean useCachedSettings) throws IOException, XmlPullParserException
{    return buildSettings();}
public Settings maven_f3170_0(File userSettingsFile) throws IOException, XmlPullParserException
{    File globalSettingsFile = getFile("${maven.conf}/settings.xml", "maven.conf", MavenSettingsBuilder.ALT_GLOBAL_SETTINGS_XML_LOCATION);    SettingsBuildingRequest request = new DefaultSettingsBuildingRequest();    request.setUserSettingsFile(userSettingsFile);    request.setGlobalSettingsFile(globalSettingsFile);    request.setSystemProperties(SystemProperties.getSystemProperties());    return build(request);}
public Settings maven_f3171_0(File userSettingsFile, boolean useCachedSettings) throws IOException, XmlPullParserException
{    return buildSettings(userSettingsFile);}
private Settings maven_f3172_0(SettingsBuildingRequest request) throws IOException, XmlPullParserException
{    try {        return settingsBuilder.build(request).getEffectiveSettings();    } catch (SettingsBuildingException e) {        throw (IOException) new IOException(e.getMessage()).initCause(e);    }}
public Settings maven_f3173_0(MavenExecutionRequest request) throws IOException, XmlPullParserException
{    SettingsBuildingRequest settingsRequest = new DefaultSettingsBuildingRequest();    settingsRequest.setUserSettingsFile(request.getUserSettingsFile());    settingsRequest.setGlobalSettingsFile(request.getGlobalSettingsFile());    settingsRequest.setUserProperties(request.getUserProperties());    settingsRequest.setSystemProperties(request.getSystemProperties());    return build(settingsRequest);}
private File maven_f3174_0(String pathPattern, String basedirSysProp, String altLocationSysProp)
{                                                    String path = System.getProperty(altLocationSysProp);    if (StringUtils.isEmpty(path)) {                        String basedir = System.getProperty(basedirSysProp);        if (basedir == null) {            basedir = System.getProperty("user.dir");        }        basedir = basedir.replaceAll("\\\\", "/");        basedir = basedir.replaceAll("\\$", "\\\\\\$");        path = pathPattern.replaceAll("\\$\\{" + basedirSysProp + "\\}", basedir);        path = path.replaceAll("\\\\", "/");        return new File(path).getAbsoluteFile();    } else {        return new File(path).getAbsoluteFile();    }}
public int maven_f3175_0()
{    return columnNumber;}
public int maven_f3176_0()
{    return lineNumber;}
public static void maven_f3177_0(Settings dominant, Settings recessive, String recessiveSourceLevel)
{    new MavenSettingsMerger().merge(dominant, recessive, recessiveSourceLevel);}
public static Profile maven_f3178_0(org.apache.maven.model.Profile modelProfile)
{    Profile profile = new Profile();    profile.setId(modelProfile.getId());    org.apache.maven.model.Activation modelActivation = modelProfile.getActivation();    if (modelActivation != null) {        Activation activation = new Activation();        activation.setActiveByDefault(modelActivation.isActiveByDefault());        activation.setJdk(modelActivation.getJdk());        org.apache.maven.model.ActivationProperty modelProp = modelActivation.getProperty();        if (modelProp != null) {            ActivationProperty prop = new ActivationProperty();            prop.setName(modelProp.getName());            prop.setValue(modelProp.getValue());            activation.setProperty(prop);        }        org.apache.maven.model.ActivationOS modelOs = modelActivation.getOs();        if (modelOs != null) {            ActivationOS os = new ActivationOS();            os.setArch(modelOs.getArch());            os.setFamily(modelOs.getFamily());            os.setName(modelOs.getName());            os.setVersion(modelOs.getVersion());            activation.setOs(os);        }        ActivationFile modelFile = modelActivation.getFile();        if (modelFile != null) {            org.apache.maven.settings.ActivationFile file = new org.apache.maven.settings.ActivationFile();            file.setExists(modelFile.getExists());            file.setMissing(modelFile.getMissing());            activation.setFile(file);        }        profile.setActivation(activation);    }    profile.setProperties(modelProfile.getProperties());    List<org.apache.maven.model.Repository> repos = modelProfile.getRepositories();    if (repos != null) {        for (org.apache.maven.model.Repository repo : repos) {            profile.addRepository(convertToSettingsRepository(repo));        }    }    List<org.apache.maven.model.Repository> pluginRepos = modelProfile.getPluginRepositories();    if (pluginRepos != null) {        for (org.apache.maven.model.Repository pluginRepo : pluginRepos) {            profile.addPluginRepository(convertToSettingsRepository(pluginRepo));        }    }    return profile;}
public static org.apache.maven.model.Profile maven_f3179_0(Profile settingsProfile)
{    org.apache.maven.model.Profile profile = new org.apache.maven.model.Profile();    profile.setId(settingsProfile.getId());    profile.setSource("settings.xml");    Activation settingsActivation = settingsProfile.getActivation();    if (settingsActivation != null) {        org.apache.maven.model.Activation activation = new org.apache.maven.model.Activation();        activation.setActiveByDefault(settingsActivation.isActiveByDefault());        activation.setJdk(settingsActivation.getJdk());        ActivationProperty settingsProp = settingsActivation.getProperty();        if (settingsProp != null) {            org.apache.maven.model.ActivationProperty prop = new org.apache.maven.model.ActivationProperty();            prop.setName(settingsProp.getName());            prop.setValue(settingsProp.getValue());            activation.setProperty(prop);        }        ActivationOS settingsOs = settingsActivation.getOs();        if (settingsOs != null) {            org.apache.maven.model.ActivationOS os = new org.apache.maven.model.ActivationOS();            os.setArch(settingsOs.getArch());            os.setFamily(settingsOs.getFamily());            os.setName(settingsOs.getName());            os.setVersion(settingsOs.getVersion());            activation.setOs(os);        }        org.apache.maven.settings.ActivationFile settingsFile = settingsActivation.getFile();        if (settingsFile != null) {            ActivationFile file = new ActivationFile();            file.setExists(settingsFile.getExists());            file.setMissing(settingsFile.getMissing());            activation.setFile(file);        }        profile.setActivation(activation);    }    profile.setProperties(settingsProfile.getProperties());    List<Repository> repos = settingsProfile.getRepositories();    if (repos != null) {        for (Repository repo : repos) {            profile.addRepository(convertFromSettingsRepository(repo));        }    }    List<Repository> pluginRepos = settingsProfile.getPluginRepositories();    if (pluginRepos != null) {        for (Repository pluginRepo : pluginRepos) {            profile.addPluginRepository(convertFromSettingsRepository(pluginRepo));        }    }    return profile;}
private static org.apache.maven.model.Repository maven_f3180_0(Repository settingsRepo)
{    org.apache.maven.model.Repository repo = new org.apache.maven.model.Repository();    repo.setId(settingsRepo.getId());    repo.setLayout(settingsRepo.getLayout());    repo.setName(settingsRepo.getName());    repo.setUrl(settingsRepo.getUrl());    if (settingsRepo.getSnapshots() != null) {        repo.setSnapshots(convertRepositoryPolicy(settingsRepo.getSnapshots()));    }    if (settingsRepo.getReleases() != null) {        repo.setReleases(convertRepositoryPolicy(settingsRepo.getReleases()));    }    return repo;}
private static org.apache.maven.model.RepositoryPolicy maven_f3181_0(RepositoryPolicy settingsPolicy)
{    org.apache.maven.model.RepositoryPolicy policy = new org.apache.maven.model.RepositoryPolicy();    policy.setEnabled(settingsPolicy.isEnabled());    policy.setUpdatePolicy(settingsPolicy.getUpdatePolicy());    policy.setChecksumPolicy(settingsPolicy.getChecksumPolicy());    return policy;}
private static Repository maven_f3182_0(org.apache.maven.model.Repository modelRepo)
{    Repository repo = new Repository();    repo.setId(modelRepo.getId());    repo.setLayout(modelRepo.getLayout());    repo.setName(modelRepo.getName());    repo.setUrl(modelRepo.getUrl());    if (modelRepo.getSnapshots() != null) {        repo.setSnapshots(convertRepositoryPolicy(modelRepo.getSnapshots()));    }    if (modelRepo.getReleases() != null) {        repo.setReleases(convertRepositoryPolicy(modelRepo.getReleases()));    }    return repo;}
private static RepositoryPolicy maven_f3183_0(org.apache.maven.model.RepositoryPolicy modelPolicy)
{    RepositoryPolicy policy = new RepositoryPolicy();    policy.setEnabled(modelPolicy.isEnabled());    policy.setUpdatePolicy(modelPolicy.getUpdatePolicy());    policy.setChecksumPolicy(modelPolicy.getChecksumPolicy());    return policy;}
public static Settings maven_f3184_0(Settings settings)
{    if (settings == null) {        return null;    }    Settings clone = new Settings();    clone.setActiveProfiles(settings.getActiveProfiles());    clone.setInteractiveMode(settings.isInteractiveMode());    clone.setLocalRepository(settings.getLocalRepository());    clone.setMirrors(settings.getMirrors());    clone.setModelEncoding(settings.getModelEncoding());    clone.setOffline(settings.isOffline());    clone.setPluginGroups(settings.getPluginGroups());    clone.setProfiles(settings.getProfiles());    clone.setProxies(settings.getProxies());    clone.setServers(settings.getServers());    clone.setSourceLevel(settings.getSourceLevel());    clone.setUsePluginRegistry(settings.isUsePluginRegistry());    return clone;}
public ToolchainsBuildingResult maven_f3185_0(ToolchainsBuildingRequest request) throws ToolchainsBuildingException
{    ProblemCollector problems = ProblemCollectorFactory.newInstance(null);    PersistedToolchains globalToolchains = readToolchains(request.getGlobalToolchainsSource(), request, problems);    PersistedToolchains userToolchains = readToolchains(request.getUserToolchainsSource(), request, problems);    toolchainsMerger.merge(userToolchains, globalToolchains, TrackableBase.GLOBAL_LEVEL);    problems.setSource("");    userToolchains = interpolate(userToolchains, problems);    if (hasErrors(problems.getProblems())) {        throw new ToolchainsBuildingException(problems.getProblems());    }    return new DefaultToolchainsBuildingResult(userToolchains, problems.getProblems());}
private PersistedToolchains maven_f3186_0(PersistedToolchains toolchains, ProblemCollector problems)
{    StringWriter stringWriter = new StringWriter(1024 * 4);    try {        toolchainsWriter.write(stringWriter, null, toolchains);    } catch (IOException e) {        throw new IllegalStateException("Failed to serialize toolchains to memory", e);    }    String serializedToolchains = stringWriter.toString();    RegexBasedInterpolator interpolator = new RegexBasedInterpolator();    try {        interpolator.addValueSource(new EnvarBasedValueSource());    } catch (IOException e) {        problems.add(Problem.Severity.WARNING, "Failed to use environment variables for interpolation: " + e.getMessage(), -1, -1, e);    }    interpolator.addPostProcessor(new InterpolationPostProcessor() {        @Override        public Object execute(String expression, Object value) {            if (value != null) {                                value = value.toString().replace("&", "&amp;").replace("<", "&lt;").replace(">", "&gt;");                return value;            }            return null;        }    });    try {        serializedToolchains = interpolator.interpolate(serializedToolchains);    } catch (InterpolationException e) {        problems.add(Problem.Severity.ERROR, "Failed to interpolate toolchains: " + e.getMessage(), -1, -1, e);        return toolchains;    }    PersistedToolchains result;    try {        Map<String, ?> options = Collections.singletonMap(ToolchainsReader.IS_STRICT, Boolean.FALSE);        result = toolchainsReader.read(new StringReader(serializedToolchains), options);    } catch (IOException e) {        problems.add(Problem.Severity.ERROR, "Failed to interpolate toolchains: " + e.getMessage(), -1, -1, e);        return toolchains;    }    return result;}
public Object maven_f3187_0(String expression, Object value)
{    if (value != null) {                value = value.toString().replace("&", "&amp;").replace("<", "&lt;").replace(">", "&gt;");        return value;    }    return null;}
private PersistedToolchains maven_f3188_0(Source toolchainsSource, ToolchainsBuildingRequest request, ProblemCollector problems)
{    if (toolchainsSource == null) {        return new PersistedToolchains();    }    PersistedToolchains toolchains;    try {        Map<String, ?> options = Collections.singletonMap(ToolchainsReader.IS_STRICT, Boolean.TRUE);        try {            toolchains = toolchainsReader.read(toolchainsSource.getInputStream(), options);        } catch (ToolchainsParseException e) {            options = Collections.singletonMap(ToolchainsReader.IS_STRICT, Boolean.FALSE);            toolchains = toolchainsReader.read(toolchainsSource.getInputStream(), options);            problems.add(Problem.Severity.WARNING, e.getMessage(), e.getLineNumber(), e.getColumnNumber(), e);        }    } catch (ToolchainsParseException e) {        problems.add(Problem.Severity.FATAL, "Non-parseable toolchains " + toolchainsSource.getLocation() + ": " + e.getMessage(), e.getLineNumber(), e.getColumnNumber(), e);        return new PersistedToolchains();    } catch (IOException e) {        problems.add(Problem.Severity.FATAL, "Non-readable toolchains " + toolchainsSource.getLocation() + ": " + e.getMessage(), -1, -1, e);        return new PersistedToolchains();    }    return toolchains;}
private boolean maven_f3189_0(List<Problem> problems)
{    if (problems != null) {        for (Problem problem : problems) {            if (Problem.Severity.ERROR.compareTo(problem.getSeverity()) >= 0) {                return true;            }        }    }    return false;}
public Source maven_f3190_0()
{    return globalToolchainsSource;}
public ToolchainsBuildingRequest maven_f3191_0(Source globalToolchainsSource)
{    this.globalToolchainsSource = globalToolchainsSource;    return this;}
public Source maven_f3192_0()
{    return userToolchainsSource;}
public ToolchainsBuildingRequest maven_f3193_0(Source userToolchainsSource)
{    this.userToolchainsSource = userToolchainsSource;    return this;}
public PersistedToolchains maven_f3194_0()
{    return effectiveToolchains;}
public List<Problem> maven_f3195_0()
{    return problems;}
public List<Problem> maven_f3196_0()
{    return problems;}
private static String maven_f3197_0(List<Problem> problems)
{    StringWriter buffer = new StringWriter(1024);    PrintWriter writer = new PrintWriter(buffer);    writer.print(problems.size());    writer.print((problems.size() == 1) ? " problem was " : " problems were ");    writer.print("encountered while building the effective toolchains");    writer.println();    for (Problem problem : problems) {        writer.print("[");        writer.print(problem.getSeverity());        writer.print("] ");        writer.print(problem.getMessage());        String location = problem.getLocation();        if (!location.isEmpty()) {            writer.print(" @ ");            writer.print(location);        }        writer.println();    }    return buffer.toString();}
public final String maven_f3198_0()
{    return type != null ? type : model.getType();}
public final ToolchainModel maven_f3199_0()
{    return model;}
public final void maven_f3200_0(String type, RequirementMatcher matcher)
{    provides.put(type, matcher);}
public boolean maven_f3201_0(Map<String, String> requirements)
{    for (Map.Entry<String, String> requirement : requirements.entrySet()) {        String key = requirement.getKey();        RequirementMatcher matcher = provides.get(key);        if (matcher == null) {            getLog().debug("Toolchain " + this + " is missing required property: " + key);            return false;        }        if (!matcher.matches(requirement.getValue())) {            getLog().debug("Toolchain " + this + " doesn't match required property: " + key);            return false;        }    }    return true;}
protected Logger maven_f3202_0()
{    return logger;}
public boolean maven_f3203_0(Object obj)
{    if (obj == null) {        return false;    }    if (this == obj) {        return true;    }    if (!(obj instanceof DefaultToolchain)) {        return false;    }    DefaultToolchain other = (DefaultToolchain) obj;    if (!Objects.equals(type, other.type)) {        return false;    }    Properties thisProvides = this.getModel().getProvides();    Properties otherProvides = other.getModel().getProvides();    return Objects.equals(thisProvides, otherProvides);}
public int maven_f3204_0()
{    int hashCode = (type == null) ? 0 : type.hashCode();    if (this.getModel().getProvides() != null) {        hashCode = 31 * hashCode + this.getModel().getProvides().hashCode();    }    return hashCode;}
public String maven_f3205_0()
{    StringBuilder builder = new StringBuilder();    builder.append("type:").append(getType());    builder.append('{');    Iterator<Map.Entry<String, RequirementMatcher>> providesIter = provides.entrySet().iterator();    while (providesIter.hasNext()) {        Map.Entry<String, RequirementMatcher> provideEntry = providesIter.next();        builder.append(provideEntry.getKey()).append(" = ").append(provideEntry.getValue());        if (providesIter.hasNext()) {            builder.append(';');        }    }    builder.append('}');    return builder.toString();}
public Toolchain maven_f3206_0(String type, MavenSession session)
{    Map<String, Object> context = retrieveContext(session);    ToolchainModel model = (ToolchainModel) context.get(getStorageKey(type));    if (model != null) {        List<Toolchain> toolchains = selectToolchains(Collections.singletonList(model), type, null);        if (!toolchains.isEmpty()) {            return toolchains.get(0);        }    }    return null;}
public List<Toolchain> maven_f3207_0(MavenSession session, String type, Map<String, String> requirements)
{    List<ToolchainModel> models = session.getRequest().getToolchains().get(type);    return selectToolchains(models, type, requirements);}
private List<Toolchain>f3208_1List<ToolchainModel> models, String type, Map<String, String> requirements)
{    List<Toolchain> toolchains = new ArrayList<>();    if (models != null) {        ToolchainFactory fact = factories.get(type);        if (fact == null) {                    } else {            for (ToolchainModel model : models) {                try {                    ToolchainPrivate toolchain = fact.createToolchain(model);                    if (requirements == null || toolchain.matchesRequirements(requirements)) {                        toolchains.add(toolchain);                    }                } catch (MisconfiguredToolchainException ex) {                                    }            }        }    }    return toolchains;}
 Map<String, Object> maven_f3209_0(MavenSession session)
{    Map<String, Object> context = null;    if (session != null) {        PluginDescriptor desc = new PluginDescriptor();        desc.setGroupId(PluginDescriptor.getDefaultPluginGroupId());        desc.setArtifactId(PluginDescriptor.getDefaultPluginArtifactId("toolchains"));        MavenProject current = session.getCurrentProject();        if (current != null) {                        context = session.getPluginContext(desc, current);        }    }    return (context != null) ? context : new HashMap<String, Object>();}
public static final String maven_f3210_0(String type)
{        return "toolchain-" + type;}
public ToolchainPrivate[]f3211_1String type, MavenSession context) throws MisconfiguredToolchainException
{    List<ToolchainPrivate> toRet = new ArrayList<>();    ToolchainFactory fact = factories.get(type);    if (fact == null) {            } else {        List<ToolchainModel> availableToolchains = context.getRequest().getToolchains().get(type);        if (availableToolchains != null) {            for (ToolchainModel toolchainModel : availableToolchains) {                toRet.add(fact.createToolchain(toolchainModel));            }        }                ToolchainPrivate tool = fact.createDefaultToolchain();        if (tool != null) {            toRet.add(tool);        }    }    return toRet.toArray(new ToolchainPrivate[0]);}
public void maven_f3212_0(ToolchainPrivate toolchain, MavenSession session)
{    Map<String, Object> context = retrieveContext(session);    context.put(getStorageKey(toolchain.getType()), toolchain.getModel());}
public PersistedToolchainsf3213_1File userToolchainsFile) throws MisconfiguredToolchainException
{    PersistedToolchains toolchains = null;    if (userToolchainsFile != null && userToolchainsFile.isFile()) {        try (Reader in = ReaderFactory.newXmlReader(userToolchainsFile)) {            toolchains = new MavenToolchainsXpp3Reader().read(in);        } catch (Exception e) {            throw new MisconfiguredToolchainException("Cannot read toolchains file at " + userToolchainsFile.getAbsolutePath(), e);        }    } else if (userToolchainsFile != null) {            }    return toolchains;}
public PersistedToolchains maven_f3214_0(File input, Map<String, ?> options) throws IOException
{    Objects.requireNonNull(input, "input cannot be null");    return read(ReaderFactory.newXmlReader(input), options);}
public PersistedToolchains maven_f3215_0(Reader input, Map<String, ?> options) throws IOException
{    Objects.requireNonNull(input, "input cannot be null");    try (final Reader in = input) {        return new MavenToolchainsXpp3Reader().read(in, isStrict(options));    } catch (XmlPullParserException e) {        throw new ToolchainsParseException(e.getMessage(), e.getLineNumber(), e.getColumnNumber(), e);    }}
public PersistedToolchains maven_f3216_0(InputStream input, Map<String, ?> options) throws IOException
{    Objects.requireNonNull(input, "input cannot be null");    try (final InputStream in = input) {        return new MavenToolchainsXpp3Reader().read(in, isStrict(options));    } catch (XmlPullParserException e) {        throw new ToolchainsParseException(e.getMessage(), e.getLineNumber(), e.getColumnNumber(), e);    }}
private boolean maven_f3217_0(Map<String, ?> options)
{    Object value = (options != null) ? options.get(IS_STRICT) : null;    return value == null || Boolean.parseBoolean(value.toString());}
public void maven_f3218_0(Writer output, Map<String, Object> options, PersistedToolchains toolchains) throws IOException
{    Objects.requireNonNull(output, "output cannot be null");    Objects.requireNonNull(toolchains, "toolchains cannot be null");    try (final Writer out = output) {        new MavenToolchainsXpp3Writer().write(out, toolchains);    }}
public int maven_f3219_0()
{    return lineNumber;}
public int maven_f3220_0()
{    return columnNumber;}
public String maven_f3221_0()
{    return super.getJavaHome();}
public void maven_f3222_0(String javaHome)
{    super.setJavaHome(javaHome);}
public ToolchainPrivate maven_f3223_0(ToolchainModel model) throws MisconfiguredToolchainException
{    if (model == null) {        return null;    }        @SuppressWarnings("deprecation")    JavaToolchainImpl jtc = new DefaultJavaToolChain(model, logger);        Properties provides = model.getProvides();    for (Entry<Object, Object> provide : provides.entrySet()) {        String key = (String) provide.getKey();        String value = (String) provide.getValue();        if (value == null) {            throw new MisconfiguredToolchainException("Provides token '" + key + "' doesn't have any value configured.");        }        RequirementMatcher matcher;        if ("version".equals(key)) {            matcher = RequirementMatcherFactory.createVersionMatcher(value);        } else {            matcher = RequirementMatcherFactory.createExactMatcher(value);        }        jtc.addProvideToken(key, matcher);    }        Xpp3Dom dom = (Xpp3Dom) model.getConfiguration();    Xpp3Dom javahome = dom.getChild(JavaToolchainImpl.KEY_JAVAHOME);    if (javahome == null) {        throw new MisconfiguredToolchainException("Java toolchain without the " + JavaToolchainImpl.KEY_JAVAHOME + " configuration element.");    }    File normal = new File(FileUtils.normalize(javahome.getValue()));    if (normal.exists()) {        jtc.setJavaHome(FileUtils.normalize(javahome.getValue()));    } else {        throw new MisconfiguredToolchainException("Non-existing JDK home configuration at " + normal.getAbsolutePath());    }    return jtc;}
public ToolchainPrivate maven_f3224_0()
{        return null;}
protected Logger maven_f3225_0()
{    return logger;}
public String maven_f3226_0()
{    return javaHome;}
public void maven_f3227_0(String javaHome)
{    this.javaHome = javaHome;}
public String maven_f3228_0()
{    return "JDK[" + getJavaHome() + "]";}
public String maven_f3229_0(String toolName)
{    File toRet = findTool(toolName, new File(FileUtils.normalize(getJavaHome())));    if (toRet != null) {        return toRet.getAbsolutePath();    }    return null;}
private static File maven_f3230_0(String toolName, File installFolder)
{        File bin = new File(installFolder, "bin");    if (bin.exists()) {                File tool = new File(bin, toolName + (Os.isFamily("windows") ? ".exe" : ""));        if (tool.exists()) {            return tool;        }    }    return null;}
public void maven_f3231_0(PersistedToolchains dominant, PersistedToolchains recessive, String recessiveSourceLevel)
{    if (dominant == null || recessive == null) {        return;    }    recessive.setSourceLevel(recessiveSourceLevel);    shallowMerge(dominant.getToolchains(), recessive.getToolchains(), recessiveSourceLevel);}
private void maven_f3232_0(List<ToolchainModel> dominant, List<ToolchainModel> recessive, String recessiveSourceLevel)
{    Map<Object, ToolchainModel> merged = new LinkedHashMap<>();    for (ToolchainModel dominantModel : dominant) {        Object key = getToolchainModelKey(dominantModel);        merged.put(key, dominantModel);    }    for (ToolchainModel recessiveModel : recessive) {        Object key = getToolchainModelKey(recessiveModel);        ToolchainModel dominantModel = merged.get(key);        if (dominantModel == null) {            recessiveModel.setSourceLevel(recessiveSourceLevel);            dominant.add(recessiveModel);        } else {            mergeToolchainModelConfiguration(dominantModel, recessiveModel);        }    }}
protected void maven_f3233_0(ToolchainModel target, ToolchainModel source)
{    Xpp3Dom src = (Xpp3Dom) source.getConfiguration();    if (src != null) {        Xpp3Dom tgt = (Xpp3Dom) target.getConfiguration();        if (tgt == null) {            tgt = Xpp3Dom.mergeXpp3Dom(new Xpp3Dom(src), tgt);        } else {            tgt = Xpp3Dom.mergeXpp3Dom(tgt, src);        }        target.setConfiguration(tgt);    }}
protected Object maven_f3234_0(ToolchainModel model)
{    return model;}
public static RequirementMatcher maven_f3235_0(String provideValue)
{    return new ExactMatcher(provideValue);}
public static RequirementMatcher maven_f3236_0(String provideValue)
{    return new VersionMatcher(provideValue);}
public boolean maven_f3237_0(String requirement)
{    return provides.equalsIgnoreCase(requirement);}
public String maven_f3238_0()
{    return provides;}
public boolean maven_f3239_0(String requirement)
{    try {        VersionRange range = VersionRange.createFromVersionSpec(requirement);        if (range.hasRestrictions()) {            return range.containsVersion(version);        } else {            return range.getRecommendedVersion().compareTo(version) == 0;        }    } catch (InvalidVersionSpecificationException ex) {                ex.printStackTrace();        return false;    }}
public String maven_f3240_0()
{    return version.toString();}
protected void maven_f3241_0() throws Exception
{    repositorySystem = lookup(RepositorySystem.class);    projectBuilder = lookup(org.apache.maven.project.ProjectBuilder.class);}
protected void maven_f3242_0() throws Exception
{    repositorySystem = null;    projectBuilder = null;    super.tearDown();}
protected File maven_f3243_0(String name) throws Exception
{    File source = new File(new File(getBasedir(), getProjectsDirectory()), name);    File target = new File(new File(getBasedir(), "target"), name);    FileUtils.copyDirectoryStructureIfModified(source, target);    return new File(target, "pom.xml");}
protected void maven_f3244_0(ContainerConfiguration containerConfiguration)
{    containerConfiguration.setAutoWiring(true).setClassPathScanning(PlexusConstants.SCANNING_INDEX);}
protected MavenExecutionRequest maven_f3245_0(File pom) throws Exception
{    MavenExecutionRequest request = new DefaultMavenExecutionRequest().setPom(pom).setProjectPresent(true).setShowErrors(true).setPluginGroups(Arrays.asList("org.apache.maven.plugins")).setLocalRepository(getLocalRepository()).setRemoteRepositories(getRemoteRepositories()).setPluginArtifactRepositories(getPluginArtifactRepositories()).setGoals(Arrays.asList("package"));    return request;}
protected MavenSession maven_f3246_0(File pom) throws Exception
{    return createMavenSession(pom, new Properties());}
protected MavenSession maven_f3247_0(File pom, Properties executionProperties) throws Exception
{    return createMavenSession(pom, executionProperties, false);}
protected MavenSession maven_f3248_0(File pom, Properties executionProperties, boolean includeModules) throws Exception
{    MavenExecutionRequest request = createMavenExecutionRequest(pom);    ProjectBuildingRequest configuration = new DefaultProjectBuildingRequest().setLocalRepository(request.getLocalRepository()).setRemoteRepositories(request.getRemoteRepositories()).setPluginArtifactRepositories(request.getPluginArtifactRepositories()).setSystemProperties(executionProperties);    List<MavenProject> projects = new ArrayList<>();    if (pom != null) {        MavenProject project = projectBuilder.build(pom, configuration).getProject();        projects.add(project);        if (includeModules) {            for (String module : project.getModules()) {                File modulePom = new File(pom.getParentFile(), module);                if (modulePom.isDirectory()) {                    modulePom = new File(modulePom, "pom.xml");                }                projects.add(projectBuilder.build(modulePom, configuration).getProject());            }        }    } else {        MavenProject project = createStubMavenProject();        project.setRemoteArtifactRepositories(request.getRemoteRepositories());        project.setPluginArtifactRepositories(request.getPluginArtifactRepositories());        projects.add(project);    }    initRepoSession(configuration);    MavenSession session = new MavenSession(getContainer(), configuration.getRepositorySession(), request, new DefaultMavenExecutionResult());    session.setProjects(projects);    session.setAllProjects(session.getProjects());    return session;}
protected void maven_f3249_0(ProjectBuildingRequest request) throws Exception
{    File localRepoDir = new File(request.getLocalRepository().getBasedir());    LocalRepository localRepo = new LocalRepository(localRepoDir);    DefaultRepositorySystemSession session = MavenRepositorySystemUtils.newSession();    session.setLocalRepositoryManager(new SimpleLocalRepositoryManagerFactory().newInstance(session, localRepo));    request.setRepositorySession(session);}
protected MavenProject maven_f3250_0()
{    Model model = new Model();    model.setGroupId("org.apache.maven.test");    model.setArtifactId("maven-test");    model.setVersion("1.0");    return new MavenProject(model);}
protected List<ArtifactRepository> maven_f3251_0() throws InvalidRepositoryException
{    File repoDir = new File(getBasedir(), "src/test/remote-repo").getAbsoluteFile();    RepositoryPolicy policy = new RepositoryPolicy();    policy.setEnabled(true);    policy.setChecksumPolicy("ignore");    policy.setUpdatePolicy("always");    Repository repository = new Repository();    repository.setId(RepositorySystem.DEFAULT_REMOTE_REPO_ID);    repository.setUrl("file://" + repoDir.toURI().getPath());    repository.setReleases(policy);    repository.setSnapshots(policy);    return Arrays.asList(repositorySystem.buildArtifactRepository(repository));}
protected List<ArtifactRepository> maven_f3252_0() throws InvalidRepositoryException
{    return getRemoteRepositories();}
protected ArtifactRepository maven_f3253_0() throws InvalidRepositoryException
{    File repoDir = new File(getBasedir(), "target/local-repo").getAbsoluteFile();    return repositorySystem.createLocalRepository(repoDir);}
public ProjectBuilder maven_f3254_0(String groupId)
{    project.setGroupId(groupId);    return this;}
public ProjectBuilder maven_f3255_0(String artifactId)
{    project.setArtifactId(artifactId);    return this;}
public ProjectBuilder maven_f3256_0(String version)
{    project.setVersion(version);    return this;}
public ProjectBuilder maven_f3257_0(String groupId, String artifactId, String version, String scope)
{    return addDependency(groupId, artifactId, version, scope, (Exclusion) null);}
public ProjectBuilder maven_f3258_0(String groupId, String artifactId, String version, String scope, Exclusion exclusion)
{    return addDependency(groupId, artifactId, version, scope, null, exclusion);}
public ProjectBuilder maven_f3259_0(String groupId, String artifactId, String version, String scope, String systemPath)
{    return addDependency(groupId, artifactId, version, scope, systemPath, null);}
public ProjectBuilder maven_f3260_0(String groupId, String artifactId, String version, String scope, String systemPath, Exclusion exclusion)
{    Dependency d = new Dependency();    d.setGroupId(groupId);    d.setArtifactId(artifactId);    d.setVersion(version);    d.setScope(scope);    if (systemPath != null && scope.equals(Artifact.SCOPE_SYSTEM)) {        d.setSystemPath(systemPath);    }    if (exclusion != null) {        d.addExclusion(exclusion);    }    project.getDependencies().add(d);    return this;}
public ProjectBuilder maven_f3261_0(Plugin plugin)
{    project.getBuildPlugins().add(plugin);    return this;}
public MavenProject maven_f3262_0()
{    return project;}
public void maven_f3263_0() throws Exception
{    File apt = getTestFile("src/site/apt/artifact-handlers.apt");    @SuppressWarnings("unchecked")    List<String> lines = FileUtils.loadFile(apt);    for (String line : lines) {        if (line.startsWith("||")) {            String[] cols = line.split("\\|\\|");            String[] expected = new String[] { "", "type", "classifier", "extension", "packaging", "language", "added to classpath", "includesDependencies", "" };            int i = 0;            for (String col : cols) {                assertEquals("Wrong column header", expected[i++], col.trim());            }        } else if (line.startsWith("|")) {            String[] cols = line.split("\\|");            String type = trimApt(cols[1]);            String classifier = trimApt(cols[2]);            String extension = trimApt(cols[3], type);            String packaging = trimApt(cols[4], type);            String language = trimApt(cols[5]);            String addedToClasspath = trimApt(cols[6]);            String includesDependencies = trimApt(cols[7]);            ArtifactHandler handler = lookup(ArtifactHandler.class, type);            assertEquals(type + " extension", handler.getExtension(), extension);            assertEquals(type + " packaging", handler.getPackaging(), packaging);            assertEquals(type + " classifier", handler.getClassifier(), classifier);            assertEquals(type + " language", handler.getLanguage(), language);            assertEquals(type + " addedToClasspath", handler.isAddedToClasspath() ? "true" : null, addedToClasspath);            assertEquals(type + " includesDependencies", handler.isIncludesDependencies() ? "true" : null, includesDependencies);        }    }}
private String maven_f3264_0(String content, String type)
{    String value = trimApt(content);    return "= type".equals(value) ? type : value;}
private String maven_f3265_0(String content)
{    content = content.replace('<', ' ').replace('>', ' ').trim();    return (content.length() == 0) ? null : content;}
public void maven_f3266_0()
{    artifact = mock(Artifact.class);    when(artifact.getGroupId()).thenReturn("org.apache.maven");    when(artifact.getArtifactId()).thenReturn("maven-core");}
public void maven_f3267_0()
{    Exclusion exclusion = new Exclusion();    exclusion.setGroupId("org.apache.maven");    exclusion.setArtifactId("maven-core");    ExclusionArtifactFilter filter = new ExclusionArtifactFilter(Collections.singletonList(exclusion));    assertThat(filter.include(artifact), is(false));}
public void maven_f3268_0()
{    Exclusion exclusion = new Exclusion();    exclusion.setGroupId("org.apache.maven");    exclusion.setArtifactId("maven-model");    ExclusionArtifactFilter filter = new ExclusionArtifactFilter(Collections.singletonList(exclusion));    assertThat(filter.include(artifact), is(true));}
public void maven_f3269_0()
{    Exclusion exclusion = new Exclusion();    exclusion.setGroupId("*");    exclusion.setArtifactId("maven-core");    ExclusionArtifactFilter filter = new ExclusionArtifactFilter(Collections.singletonList(exclusion));    assertThat(filter.include(artifact), is(false));}
public void maven_f3270_0()
{    Exclusion exclusion = new Exclusion();    exclusion.setGroupId("*");    exclusion.setArtifactId("maven-compat");    ExclusionArtifactFilter filter = new ExclusionArtifactFilter(Collections.singletonList(exclusion));    assertThat(filter.include(artifact), is(true));}
public void maven_f3271_0()
{    Exclusion exclusion = new Exclusion();    exclusion.setGroupId("org.apache.maven");    exclusion.setArtifactId("*");    ExclusionArtifactFilter filter = new ExclusionArtifactFilter(Collections.singletonList(exclusion));    assertThat(filter.include(artifact), is(false));}
public void maven_f3272_0()
{    Exclusion exclusion = new Exclusion();    exclusion.setGroupId("org.apache.groovy");    exclusion.setArtifactId("*");    ExclusionArtifactFilter filter = new ExclusionArtifactFilter(Collections.singletonList(exclusion));    assertThat(filter.include(artifact), is(true));}
public void maven_f3273_0()
{    Exclusion exclusion = new Exclusion();    exclusion.setGroupId("*");    exclusion.setArtifactId("*");    ExclusionArtifactFilter filter = new ExclusionArtifactFilter(Collections.singletonList(exclusion));    assertThat(filter.include(artifact), is(false));}
public void maven_f3274_0()
{    Exclusion exclusion1 = new Exclusion();    exclusion1.setGroupId("org.apache.groovy");    exclusion1.setArtifactId("*");    Exclusion exclusion2 = new Exclusion();    exclusion2.setGroupId("org.apache.maven");    exclusion2.setArtifactId("maven-core");    ExclusionArtifactFilter filter = new ExclusionArtifactFilter(Arrays.asList(exclusion1, exclusion2));    assertThat(filter.include(artifact), is(false));}
public void maven_f3275_0()
{    Exclusion exclusion1 = new Exclusion();    exclusion1.setGroupId("*");    exclusion1.setArtifactId("maven-model");    Exclusion exclusion2 = new Exclusion();    exclusion2.setGroupId("org.apache.maven");    exclusion2.setArtifactId("maven-core");    ExclusionArtifactFilter filter = new ExclusionArtifactFilter(Arrays.asList(exclusion1, exclusion2));    assertThat(filter.include(artifact), is(false));}
protected void maven_f3276_0() throws Exception
{    super.setUp();    configurator = lookup(BeanConfigurator.class);}
protected void maven_f3277_0() throws Exception
{    configurator = null;    super.tearDown();}
private Xpp3Dom maven_f3278_0(String xml)
{    try {        return Xpp3DomBuilder.build(new StringReader("<configuration>" + xml + "</configuration>"));    } catch (XmlPullParserException | IOException e) {        throw new IllegalArgumentException(e);    }}
public void maven_f3279_0() throws BeanConfigurationException
{    SomeBean bean = new SomeBean();    Xpp3Dom config = toConfig("<file>test</file>");    DefaultBeanConfigurationRequest request = new DefaultBeanConfigurationRequest();    request.setBean(bean).setConfiguration(config);    configurator.configureBean(request);    assertEquals(new File("test"), bean.file);}
public void maven_f3280_0() throws BeanConfigurationException
{    SomeBean bean = new SomeBean();    Xpp3Dom config = toConfig("<file>${test}</file>");    BeanConfigurationValuePreprocessor preprocessor = new BeanConfigurationValuePreprocessor() {        public Object preprocessValue(String value, Class<?> type) throws BeanConfigurationException {            if (value != null && value.startsWith("${") && value.endsWith("}")) {                return value.substring(2, value.length() - 1);            }            return value;        }    };    BeanConfigurationPathTranslator translator = new BeanConfigurationPathTranslator() {        public File translatePath(File path) {            return new File("base", path.getPath()).getAbsoluteFile();        }    };    DefaultBeanConfigurationRequest request = new DefaultBeanConfigurationRequest();    request.setBean(bean).setConfiguration(config);    request.setValuePreprocessor(preprocessor).setPathTranslator(translator);    configurator.configureBean(request);    assertEquals(new File("base/test").getAbsoluteFile(), bean.file);}
public Object maven_f3281_0(String value, Class<?> type) throws BeanConfigurationException
{    if (value != null && value.startsWith("${") && value.endsWith("}")) {        return value.substring(2, value.length() - 1);    }    return value;}
public File maven_f3282_0(File path)
{    return new File("base", path.getPath()).getAbsoluteFile();}
public void maven_f3283_0() throws BeanConfigurationException
{    SomeBean bean = new SomeBean();    Xpp3Dom config = toConfig("<wrapper><file>test</file></wrapper>");    DefaultBeanConfigurationRequest request = new DefaultBeanConfigurationRequest();    request.setBean(bean).setConfiguration(config, "wrapper");    configurator.configureBean(request);    assertEquals(new File("test"), bean.file);}
public void maven_f3284_0() throws Exception
{    Maven maven = getContainer().lookup(Maven.class);    MavenExecutionRequest request = createMavenExecutionRequest(getProject("cyclic-reference")).setGoals(asList("validate"));    MavenExecutionResult result = maven.execute(request);    assertEquals(ProjectCycleException.class, result.getExceptions().get(0).getClass());}
protected String maven_f3285_0()
{    return "src/test/projects/default-maven";}
public void maven_f3286_0()
{    ConnectException connEx = new ConnectException("Connection refused: connect");    IOException ioEx = new IOException("Unable to establish loopback connection", connEx);    MojoExecutionException mojoEx = new MojoExecutionException("Error executing Jetty: Unable to establish loopback connection", ioEx);    ExceptionHandler exceptionHandler = new DefaultExceptionHandler();    ExceptionSummary exceptionSummary = exceptionHandler.handleException(mojoEx);    String expectedReference = "http://cwiki.apache.org/confluence/display/MAVEN/ConnectException";    assertEquals(expectedReference, exceptionSummary.getReference());}
public void maven_f3287_0()
{    Throwable cause2 = new NoClassDefFoundError("org/sonatype/aether/RepositorySystem");    Plugin plugin = new Plugin();    Exception cause = new PluginContainerException(plugin, null, null, cause2);    PluginDescriptor pluginDescriptor = new PluginDescriptor();    MojoDescriptor mojoDescriptor = new MojoDescriptor();    mojoDescriptor.setPluginDescriptor(pluginDescriptor);    MojoExecution mojoExecution = new MojoExecution(mojoDescriptor);    Throwable exception = new PluginExecutionException(mojoExecution, null, cause);    DefaultExceptionHandler handler = new DefaultExceptionHandler();    ExceptionSummary summary = handler.handleException(exception);    String expectedReference = "http://cwiki.apache.org/confluence/display/MAVEN/AetherClassNotFound";    assertEquals(expectedReference, summary.getReference());}
public void maven_f3288_0()
{    Throwable cause2 = new NoClassDefFoundError();    Plugin plugin = new Plugin();    Exception cause = new PluginContainerException(plugin, null, null, cause2);    PluginDescriptor pluginDescriptor = new PluginDescriptor();    MojoDescriptor mojoDescriptor = new MojoDescriptor();    mojoDescriptor.setPluginDescriptor(pluginDescriptor);    MojoExecution mojoExecution = new MojoExecution(mojoDescriptor);    Throwable exception = new PluginExecutionException(mojoExecution, null, cause);    DefaultExceptionHandler handler = new DefaultExceptionHandler();    ExceptionSummary summary = handler.handleException(exception);    String expectedReference = "http://cwiki.apache.org/confluence/display/MAVEN/PluginContainerException";    assertEquals(expectedReference, summary.getReference());}
public void maven_f3289_0() throws Exception
{    MavenExecutionRequest request = new DefaultMavenExecutionRequest();    Repository r = new Repository();    r.setId("test");    r.setUrl("file:///test");    Profile p = new Profile();    p.setId("test");    p.addPluginRepository(r);    Settings settings = new Settings();    settings.addProfile(p);    settings.addActiveProfile(p.getId());    testee.populateFromSettings(request, settings);    List<ArtifactRepository> repositories = request.getPluginArtifactRepositories();    assertEquals(1, repositories.size());    assertEquals(r.getId(), repositories.get(0).getId());    assertEquals(r.getUrl(), repositories.get(0).getUrl());}
public void maven_f3290_0()
{    MavenExecutionRequest original = new DefaultMavenExecutionRequest();    MavenExecutionRequest copy = DefaultMavenExecutionRequest.copy(original);    assertNotNull(copy);    assertNotSame(copy, original);}
public void maven_f3291_0()
{    MavenExecutionResult result = new DefaultMavenExecutionResult();    result.setTopologicallySortedProjects(null);    List<MavenProject> projects = result.getTopologicallySortedProjects();    assertNotNull(projects);    assertTrue(projects.isEmpty());}
public void maven_f3292_0() throws Exception
{    MojoExecutionScope scope = new MojoExecutionScope();    scope.enter();    Object o1 = new Object();    scope.seed(Object.class, o1);    assertSame(o1, scope.scope(Key.get(Object.class), null).get());    scope.enter();    Object o2 = new Object();    scope.seed(Object.class, o2);    assertSame(o2, scope.scope(Key.get(Object.class), null).get());    scope.exit();    assertSame(o1, scope.scope(Key.get(Object.class), null).get());    scope.exit();    try {        scope.exit();        fail();    } catch (IllegalStateException expected) {    }}
public void maven_f3293_0() throws Exception
{    MojoExecutionScope scope = new MojoExecutionScope();    scope.enter();    final AtomicInteger beforeExecution = new AtomicInteger();    final AtomicInteger afterExecutionSuccess = new AtomicInteger();    final AtomicInteger afterExecutionFailure = new AtomicInteger();    final WeakMojoExecutionListener instance = new WeakMojoExecutionListener() {        @Override        public void beforeMojoExecution(MojoExecutionEvent event) throws MojoExecutionException {            beforeExecution.incrementAndGet();        }        @Override        public void afterMojoExecutionSuccess(MojoExecutionEvent event) throws MojoExecutionException {            afterExecutionSuccess.incrementAndGet();        }        @Override        public void afterExecutionFailure(MojoExecutionEvent event) {            afterExecutionFailure.incrementAndGet();        }    };    assertSame(instance, scope.scope(Key.get(Object.class), new Provider<Object>() {        @Override        public Object get() {            return instance;        }    }).get());    assertSame(instance, scope.scope(Key.get(WeakMojoExecutionListener.class), new Provider<WeakMojoExecutionListener>() {        @Override        public WeakMojoExecutionListener get() {            return instance;        }    }).get());    final MojoExecutionEvent event = new MojoExecutionEvent(null, null, null, null);    scope.beforeMojoExecution(event);    scope.afterMojoExecutionSuccess(event);    scope.afterExecutionFailure(event);    assertEquals(1, beforeExecution.get());    assertEquals(1, afterExecutionSuccess.get());    assertEquals(1, afterExecutionFailure.get());    scope.exit();}
public void maven_f3294_0(MojoExecutionEvent event) throws MojoExecutionException
{    beforeExecution.incrementAndGet();}
public void maven_f3295_0(MojoExecutionEvent event) throws MojoExecutionException
{    afterExecutionSuccess.incrementAndGet();}
public void maven_f3296_0(MojoExecutionEvent event)
{    afterExecutionFailure.incrementAndGet();}
public Object maven_f3297_0()
{    return instance;}
public WeakMojoExecutionListener maven_f3298_0()
{    return instance;}
public void maven_f3299_0() throws DuplicateProjectException, CycleDetectedException
{    ProjectDependencyGraph graph = new DefaultProjectDependencyGraph(Arrays.asList(depender1, aProject));    final List<MavenProject> sortedProjects = graph.getSortedProjects();    assertEquals(aProject, sortedProjects.get(0));    assertEquals(depender1, sortedProjects.get(1));}
public void maven_f3300_0() throws CycleDetectedException, DuplicateProjectException
{        ProjectDependencyGraph graph = threeProjectsDependingOnASingle();    final List<MavenProject> sortedProjects = graph.getSortedProjects();    assertEquals(aProject, sortedProjects.get(0));    assertEquals(depender1, sortedProjects.get(1));    assertEquals(depender2, sortedProjects.get(2));    assertEquals(depender3, sortedProjects.get(3));}
public void maven_f3301_0() throws CycleDetectedException, DuplicateProjectException
{    final List<MavenProject> downstreamProjects = threeProjectsDependingOnASingle().getDownstreamProjects(aProject, true);    assertEquals(depender1, downstreamProjects.get(0));    assertEquals(depender2, downstreamProjects.get(1));    assertEquals(depender3, downstreamProjects.get(2));}
public void maven_f3302_0() throws CycleDetectedException, DuplicateProjectException
{    final ProjectDependencyGraph graph = new DefaultProjectDependencyGraph(Arrays.asList(depender1, depender4, depender2, depender3, aProject));    final List<MavenProject> downstreamProjects = graph.getDownstreamProjects(aProject, true);    assertEquals(depender1, downstreamProjects.get(0));    assertEquals(depender3, downstreamProjects.get(1));    assertEquals(depender4, downstreamProjects.get(2));    assertEquals(depender2, downstreamProjects.get(3));}
public void maven_f3303_0() throws CycleDetectedException, DuplicateProjectException
{    final ProjectDependencyGraph graph = new DefaultProjectDependencyGraph(Arrays.asList(depender1, depender4, depender2, depender3, aProject));    final List<MavenProject> downstreamProjects = graph.getDownstreamProjects(aProject, false);    assertEquals(depender1, downstreamProjects.get(0));    assertEquals(depender3, downstreamProjects.get(1));    assertEquals(depender4, downstreamProjects.get(2));    assertEquals(depender2, downstreamProjects.get(3));}
public void maven_f3304_0() throws CycleDetectedException, DuplicateProjectException
{    final ProjectDependencyGraph graph = new DefaultProjectDependencyGraph(Arrays.asList(depender1, transitiveOnly, depender2, depender3, aProject));    final List<MavenProject> downstreamProjects = graph.getDownstreamProjects(aProject, true);    assertEquals(depender1, downstreamProjects.get(0));    assertEquals(depender3, downstreamProjects.get(1));    assertEquals(transitiveOnly, downstreamProjects.get(2));    assertEquals(depender2, downstreamProjects.get(3));}
public void maven_f3305_0() throws CycleDetectedException, DuplicateProjectException
{    final ProjectDependencyGraph graph = new DefaultProjectDependencyGraph(Arrays.asList(depender1, transitiveOnly, depender2, depender3, aProject));    final List<MavenProject> downstreamProjects = graph.getDownstreamProjects(aProject, false);    assertEquals(depender1, downstreamProjects.get(0));    assertEquals(depender3, downstreamProjects.get(1));    assertEquals(depender2, downstreamProjects.get(2));}
public void maven_f3306_0() throws CycleDetectedException, DuplicateProjectException
{    ProjectDependencyGraph graph = threeProjectsDependingOnASingle();    final List<MavenProject> downstreamProjects = graph.getUpstreamProjects(depender1, true);    assertEquals(aProject, downstreamProjects.get(0));}
private ProjectDependencyGraph maven_f3307_0() throws CycleDetectedException, DuplicateProjectException
{    return new DefaultProjectDependencyGraph(Arrays.asList(depender1, depender2, depender3, aProject));}
private static MavenProject maven_f3308_0()
{    MavenProject result = new MavenProject();    result.setGroupId("org.apache");    result.setArtifactId("A");    result.setVersion("1.2");    return result;}
 static Dependency maven_f3309_0(MavenProject mavenProject)
{    final Dependency dependency = new Dependency();    dependency.setArtifactId(mavenProject.getArtifactId());    dependency.setGroupId(mavenProject.getGroupId());    dependency.setVersion(mavenProject.getVersion());    return dependency;}
private static MavenProject maven_f3310_0(List<Dependency> dependencies, String artifactId)
{    MavenProject result = new MavenProject();    result.setGroupId("org.apache");    result.setArtifactId(artifactId);    result.setVersion("1.2");    result.setDependencies(dependencies);    return result;}
protected void maven_f3311_0() throws Exception
{    super.setUp();    defaultLifeCycles = lookup(DefaultLifecycles.class);}
protected void maven_f3312_0() throws Exception
{    defaultLifeCycles = null;    super.tearDown();}
public void maven_f3313_0() throws Exception
{    final List<Lifecycle> cycles = defaultLifeCycles.getLifeCycles();    assertNotNull(cycles);    final Lifecycle lifecycle = cycles.get(0);    assertEquals("default", lifecycle.getId());    assertEquals(23, lifecycle.getPhases().size());}
public void maven_f3314_0(MojoExecutionEvent event) throws MojoExecutionException
{    for (MojoExecutionListener listener : listeners) {        listener.beforeMojoExecution(event);    }}
public void maven_f3315_0(MojoExecutionEvent event) throws MojoExecutionException
{    for (MojoExecutionListener listener : listeners) {        listener.afterMojoExecutionSuccess(event);    }}
public void maven_f3316_0(MojoExecutionEvent event)
{    for (MojoExecutionListener listener : listeners) {        listener.afterExecutionFailure(event);    }}
public void maven_f3317_0(MojoExecutionListener listener)
{    this.listeners.add(listener);}
public void maven_f3318_0(MojoExecutionListener listener)
{    this.listeners.remove(listener);}
public void maven_f3319_0(ProjectExecutionEvent event) throws LifecycleExecutionException
{    for (ProjectExecutionListener listener : listeners) {        listener.beforeProjectExecution(event);    }}
public void maven_f3320_0(ProjectExecutionEvent event) throws LifecycleExecutionException
{    for (ProjectExecutionListener listener : listeners) {        listener.beforeProjectLifecycleExecution(event);    }}
public void maven_f3321_0(ProjectExecutionEvent event) throws LifecycleExecutionException
{    for (ProjectExecutionListener listener : listeners) {        listener.afterProjectExecutionSuccess(event);    }}
public void maven_f3322_0(ProjectExecutionEvent event)
{    for (ProjectExecutionListener listener : listeners) {        listener.afterProjectExecutionFailure(event);    }}
public void maven_f3323_0(ProjectExecutionListener listener)
{    this.listeners.add(listener);}
public void maven_f3324_0(ProjectExecutionListener listener)
{    this.listeners.remove(listener);}
public Set<Plugin> maven_f3325_0(String packaging)
{    Set<Plugin> plugins;        if ("JAR".equals(packaging)) {        plugins = new LinkedHashSet<>();        plugins.add(newPlugin("maven-compiler-plugin", "compile", "testCompile"));        plugins.add(newPlugin("maven-resources-plugin", "resources", "testResources"));        plugins.add(newPlugin("maven-surefire-plugin", "test"));        plugins.add(newPlugin("maven-jar-plugin", "jar"));        plugins.add(newPlugin("maven-install-plugin", "install"));        plugins.add(newPlugin("maven-deploy-plugin", "deploy"));    } else {        plugins = Collections.emptySet();    }    return plugins;}
private Plugin maven_f3326_0(String artifactId, String... goals)
{    Plugin plugin = new Plugin();    plugin.setGroupId("org.apache.maven.plugins");    plugin.setArtifactId(artifactId);    for (String goal : goals) {        PluginExecution pluginExecution = new PluginExecution();        pluginExecution.setId("default-" + goal);        pluginExecution.addGoal(goal);        plugin.addExecution(pluginExecution);    }    return plugin;}
public void maven_f3327_0() throws Exception
{    ProjectBuildList projectBuildList = ProjectDependencyGraphStub.getProjectBuildList(ProjectDependencyGraphStub.getMavenSession());    ProjectDependencyGraph projectDependencyGraph = new ProjectDependencyGraphStub();    ConcurrencyDependencyGraph graph = new ConcurrencyDependencyGraph(projectBuildList, projectDependencyGraph);        assertEquals(0, graph.getFinishedProjects().size());    assertEquals(6, graph.getNumberOfBuilds());    List<MavenProject> rootSchedulableBuilds = graph.getRootSchedulableBuilds();        assertEquals(1, rootSchedulableBuilds.size());    assertEquals(ProjectDependencyGraphStub.A, rootSchedulableBuilds.iterator().next());        List<MavenProject> dependenciesA = graph.getDependencies(ProjectDependencyGraphStub.A);    assertEquals(0, dependenciesA.size());    assertEquals(6, graph.getUnfinishedProjects().size());    List<MavenProject> schedulableNewProcesses = graph.markAsFinished(ProjectDependencyGraphStub.A);        assertEquals(2, schedulableNewProcesses.size());    assertEquals(1, graph.getFinishedProjects().size());    graph.markAsFinished(ProjectDependencyGraphStub.A);        assertEquals(1, graph.getFinishedProjects().size());    Set<MavenProject> unfinishedProjects = graph.getUnfinishedProjects();    assertEquals(5, unfinishedProjects.size());    graph.markAsFinished(schedulableNewProcesses.get(0));    assertEquals(2, graph.getFinishedProjects().size());    assertEquals(4, graph.getUnfinishedProjects().size());    List<MavenProject> dependenciesC = graph.getDependencies(ProjectDependencyGraphStub.C);        assertEquals(1, dependenciesC.size());    List<MavenProject> dependenciesX = graph.getDependencies(ProjectDependencyGraphStub.X);        assertEquals(2, dependenciesX.size());    List<MavenProject> activeDependenciesC = graph.getActiveDependencies(ProjectDependencyGraphStub.C);        assertEquals(0, activeDependenciesC.size());    List<MavenProject> activeDependenciesX = graph.getActiveDependencies(ProjectDependencyGraphStub.X);        assertEquals(1, activeDependenciesX.size());}
public void maven_f3328_0() throws Exception
{    ProjectBuildList src = getProjectBuildList();    ProjectBuildList projectBuildList = new ProjectBuildList(Arrays.asList(src.get(0), src.get(1), src.get(2)));    ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream();    PrintStream systemOut = new PrintStream(byteArrayOutputStream);    ThreadOutputMuxer threadOutputMuxer = new ThreadOutputMuxer(projectBuildList, systemOut);    threadOutputMuxer.associateThreadWithProjectSegment(projectBuildList.get(0));        System.out.print(paid);    assertEquals(paid.length(), byteArrayOutputStream.size());    threadOutputMuxer.associateThreadWithProjectSegment(projectBuildList.get(1));        System.out.print(in);    assertEquals(paid.length(), byteArrayOutputStream.size());    threadOutputMuxer.associateThreadWithProjectSegment(projectBuildList.get(2));        System.out.print(full);    assertEquals(paid.length(), byteArrayOutputStream.size());    threadOutputMuxer.setThisModuleComplete(projectBuildList.get(0));    threadOutputMuxer.setThisModuleComplete(projectBuildList.get(1));    threadOutputMuxer.setThisModuleComplete(projectBuildList.get(2));    threadOutputMuxer.close();    assertEquals((paid + in + full).length(), byteArrayOutputStream.size());}
public void maven_f3329_0() throws Exception
{    ProjectBuildList projectBuildList = getProjectBuildList();    ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream();    PrintStream systemOut = new PrintStream(byteArrayOutputStream);    final ThreadOutputMuxer threadOutputMuxer = new ThreadOutputMuxer(projectBuildList, systemOut);    final List<String> stringList = Arrays.asList("Thinkin", "of", "a", "master", "plan", "Cuz", "ain’t", "nuthin", "but", "sweat", "inside", "my", "hand");    Iterator<String> lyrics = stringList.iterator();    ExecutorService executor = Executors.newFixedThreadPool(10);    CompletionService<ProjectSegment> service = new ExecutorCompletionService<>(executor);    List<Future<ProjectSegment>> futures = new ArrayList<>();    for (ProjectSegment projectBuild : projectBuildList) {        final Future<ProjectSegment> buildFuture = service.submit(new Outputter(threadOutputMuxer, projectBuild, lyrics.next()));        futures.add(buildFuture);    }    for (Future<ProjectSegment> future : futures) {        future.get();    }    int expectedLength = 0;    for (int i = 0; i < projectBuildList.size(); i++) {        expectedLength += stringList.get(i).length();    }    threadOutputMuxer.close();    final byte[] bytes = byteArrayOutputStream.toByteArray();    String result = new String(bytes);    assertEquals(result, expectedLength, bytes.length);}
public ProjectSegment maven_f3330_0() throws Exception
{    threadOutputMuxer.associateThreadWithProjectSegment(item);    System.out.print(response);    threadOutputMuxer.setThisModuleComplete(item);    return item;}
private ProjectBuildList maven_f3331_0() throws InvalidPluginDescriptorException, PluginVersionResolutionException, PluginDescriptorParsingException, NoPluginFoundForPrefixException, MojoNotFoundException, PluginNotFoundException, PluginResolutionException, LifecyclePhaseNotFoundException, LifecycleNotFoundException
{    final MavenSession session = ProjectDependencyGraphStub.getMavenSession();    return ProjectDependencyGraphStub.getProjectBuildList(session);}
public void maven_f3332_0() throws Exception
{    MavenSession original = ProjectDependencyGraphStub.getMavenSession();    final TaskSegment taskSegment1 = new TaskSegment(false);    final MavenSession session1 = original.clone();    session1.setCurrentProject(ProjectDependencyGraphStub.A);    final BuilderCommon builderCommon = getBuilderCommon();    final MavenExecutionPlan plan = builderCommon.resolveBuildPlan(session1, ProjectDependencyGraphStub.A, taskSegment1, new HashSet<Artifact>());    assertEquals(LifecycleExecutionPlanCalculatorStub.getProjectAExceutionPlan().size(), plan.size());}
public void maven_f3333_0() throws Exception
{}
public void maven_f3334_0() throws Exception
{}
public void maven_f3335_0() throws Exception
{}
public static BuilderCommon maven_f3336_0()
{    final LifecycleDebugLogger logger = new LifecycleDebugLogger(new LoggerStub());    return new BuilderCommon(logger, new LifecycleExecutionPlanCalculatorStub(), new LoggerStub());}
public void maven_f3337_0() throws Exception
{    LifecycleTaskSegmentCalculator lifecycleTaskSegmentCalculator = getTaskSegmentCalculator();    BuildListCalculator buildListCalculator = new BuildListCalculator();    final MavenSession session = ProjectDependencyGraphStub.getMavenSession();    List<TaskSegment> taskSegments = lifecycleTaskSegmentCalculator.calculateTaskSegments(session);    final ProjectBuildList buildList = buildListCalculator.calculateProjectBuilds(session, taskSegments);    final ProjectBuildList segments = buildList.getByTaskSegment(taskSegments.get(0));    assertEquals("Stub data contains 3 segments", 3, taskSegments.size());    assertEquals("Stub data contains 6 items", 6, segments.size());    final ProjectSegment build = segments.get(0);    assertNotNull(build);}
private static LifecycleTaskSegmentCalculator maven_f3338_0()
{    return new LifecycleTaskSegmentCalculatorStub();}
public void maven_f3339_0() throws InvalidPluginDescriptorException, PluginVersionResolutionException, PluginDescriptorParsingException, NoPluginFoundForPrefixException, MojoNotFoundException, PluginNotFoundException, PluginResolutionException, LifecyclePhaseNotFoundException, LifecycleNotFoundException
{    ProjectDependencyGraph dependencyGraph = new ProjectDependencyGraphStub();    final MavenSession session = ProjectDependencyGraphStub.getMavenSession();    ConcurrencyDependencyGraph graph = new ConcurrencyDependencyGraph(getProjectBuildList(session), dependencyGraph);    final List<MavenProject> projectBuilds = graph.getRootSchedulableBuilds();    assertEquals(1, projectBuilds.size());    assertEquals(A, projectBuilds.iterator().next());    final List<MavenProject> subsequent = graph.markAsFinished(A);    assertEquals(2, subsequent.size());    assertEquals(ProjectDependencyGraphStub.B, subsequent.get(0));    assertEquals(C, subsequent.get(1));    final List<MavenProject> bDescendants = graph.markAsFinished(B);    assertEquals(1, bDescendants.size());    assertEquals(Y, bDescendants.get(0));    final List<MavenProject> cDescendants = graph.markAsFinished(C);    assertEquals(2, cDescendants.size());    assertEquals(X, cDescendants.get(0));    assertEquals(Z, cDescendants.get(1));}
public void maven_f3340_0() throws InvalidPluginDescriptorException, PluginVersionResolutionException, PluginDescriptorParsingException, NoPluginFoundForPrefixException, MojoNotFoundException, PluginNotFoundException, PluginResolutionException, LifecyclePhaseNotFoundException, LifecycleNotFoundException
{    ProjectDependencyGraph dependencyGraph = new ProjectDependencyGraphStub();    final MavenSession session = ProjectDependencyGraphStub.getMavenSession();    ConcurrencyDependencyGraph graph = new ConcurrencyDependencyGraph(getProjectBuildList(session), dependencyGraph);    graph.markAsFinished(A);    final List<MavenProject> cDescendants = graph.markAsFinished(C);    assertEquals(1, cDescendants.size());    assertEquals(Z, cDescendants.get(0));    final List<MavenProject> bDescendants = graph.markAsFinished(B);    assertEquals(2, bDescendants.size());    assertEquals(X, bDescendants.get(0));    assertEquals(Y, bDescendants.get(1));}
protected String maven_f3341_0()
{    return null;}
protected void maven_f3342_0() throws Exception
{    super.setUp();    resolver = lookup(LifecycleDependencyResolver.class);}
public void maven_f3343_0() throws Exception
{    MavenSession session = createMavenSession(new File("src/test/projects/lifecycle-dependency-resolver/pom.xml"), new Properties(), true);    Collection<String> scopesToCollect = null;    Collection<String> scopesToResolve = Collections.singletonList("compile");    boolean aggregating = false;    Set<Artifact> reactorArtifacts = new HashSet<>(3);    for (MavenProject reactorProject : session.getProjects()) {        reactorProject.setArtifactFilter(new ArtifactFilter() {            @Override            public boolean include(Artifact artifact) {                return true;            }        });        resolver.resolveProjectDependencies(reactorProject, scopesToCollect, scopesToResolve, session, aggregating, reactorArtifacts);        reactorArtifacts.add(reactorProject.getArtifact());    }    MavenProject lib = session.getProjects().get(1);    MavenProject war = session.getProjects().get(2);    assertEquals(null, war.getArtifactMap().get("org.apache.maven.its.mng6300:mng6300-lib").getFile());    lib.getArtifact().setFile(new File("lib.jar"));    resolver.resolveProjectDependencies(war, scopesToCollect, scopesToResolve, session, aggregating, reactorArtifacts);    assertEquals(new File("lib.jar"), war.getArtifactMap().get("org.apache.maven.its.mng6300:mng6300-lib").getFile());}
public boolean maven_f3344_0(Artifact artifact)
{    return true;}
public void maven_f3345_0() throws Exception
{    MojoDescriptorCreator mojoDescriptorCreator = createMojoDescriptorCreator();    LifecycleExecutionPlanCalculator lifecycleExecutionPlanCalculator = createExecutionPlaceCalculator(mojoDescriptorCreator);    final GoalTask goalTask1 = new GoalTask("compiler:compile");    final GoalTask goalTask2 = new GoalTask("surefire:test");    final TaskSegment taskSegment1 = new TaskSegment(false, goalTask1, goalTask2);    final MavenSession session1 = ProjectDependencyGraphStub.getMavenSession(ProjectDependencyGraphStub.A);    MavenExecutionPlan executionPlan = lifecycleExecutionPlanCalculator.calculateExecutionPlan(session1, ProjectDependencyGraphStub.A, taskSegment1.getTasks());    assertEquals(2, executionPlan.size());    final GoalTask goalTask3 = new GoalTask("surefire:test");    final TaskSegment taskSegment2 = new TaskSegment(false, goalTask1, goalTask2, goalTask3);    MavenExecutionPlan executionPlan2 = lifecycleExecutionPlanCalculator.calculateExecutionPlan(session1, ProjectDependencyGraphStub.A, taskSegment2.getTasks());    assertEquals(3, executionPlan2.size());}
public static LifecycleExecutionPlanCalculator maven_f3346_0(MojoDescriptorCreator mojoDescriptorCreator)
{    LifecyclePluginResolver lifecyclePluginResolver = new LifecyclePluginResolver(new PluginVersionResolverStub());    return new DefaultLifecycleExecutionPlanCalculator(new BuildPluginManagerStub(), DefaultLifecyclesStub.createDefaultLifecycles(), mojoDescriptorCreator, lifecyclePluginResolver);}
public static MojoDescriptorCreator maven_f3347_0()
{    return new MojoDescriptorCreator(new PluginVersionResolverStub(), new BuildPluginManagerStub(), new PluginPrefixResolverStub(), new LifecyclePluginResolver(new PluginVersionResolverStub()));}
protected String maven_f3348_0()
{    return "src/test/projects/lifecycle-executor";}
public void maven_f3349_0() throws Exception
{    LifecycleTaskSegmentCalculator lifecycleTaskSegmentCalculator = getTaskSegmentCalculator();    BuildListCalculator buildListCalculator = new BuildListCalculator();    final MavenSession session = ProjectDependencyGraphStub.getMavenSession();    List<TaskSegment> taskSegments = lifecycleTaskSegmentCalculator.calculateTaskSegments(session);    final ProjectBuildList buildList = buildListCalculator.calculateProjectBuilds(session, taskSegments);    final ProjectBuildList segments = buildList.getByTaskSegment(taskSegments.get(0));    assertEquals("Stub data contains 3 segments", 3, taskSegments.size());    assertEquals("Stub data contains 6 items", 6, segments.size());    final ProjectSegment build = segments.get(0);    assertNotNull(build);}
private static LifecycleTaskSegmentCalculator maven_f3350_0()
{    return new LifecycleTaskSegmentCalculatorStub();}
public void maven_f3351_0() throws Exception
{    PhaseRecorder phaseRecorder = new PhaseRecorder(ProjectDependencyGraphStub.A);    MavenExecutionPlan plan = LifecycleExecutionPlanCalculatorStub.getProjectAExceutionPlan();    final List<MojoExecution> executions = plan.getMojoExecutions();    final MojoExecution mojoExecution1 = executions.get(0);    final MojoExecution mojoExecution2 = executions.get(1);    phaseRecorder.observeExecution(mojoExecution1);    assertTrue(ProjectDependencyGraphStub.A.hasLifecyclePhase(mojoExecution1.getLifecyclePhase()));    assertFalse(ProjectDependencyGraphStub.A.hasLifecyclePhase(mojoExecution2.getLifecyclePhase()));    assertFalse(phaseRecorder.isDifferentPhase(mojoExecution1));    assertTrue(phaseRecorder.isDifferentPhase(mojoExecution2));}
public void maven_f3352_0() throws Exception
{    final MavenSession session = ProjectDependencyGraphStub.getMavenSession();    ProjectBuildList projectBuildList = ProjectDependencyGraphStub.getProjectBuildList(session);    TaskSegment taskSegment = projectBuildList.get(0).getTaskSegment();    assertTrue("This test assumes there are at least 6 elements in projectBuilds", projectBuildList.size() >= 6);    final ProjectBuildList byTaskSegment = projectBuildList.getByTaskSegment(taskSegment);    assertEquals(projectBuildList.size(),     byTaskSegment.size());}
public PluginDescriptor maven_f3353_0(Plugin plugin, List<RemoteRepository> repositories, RepositorySystemSession session)
{    return null;}
public MojoDescriptor maven_f3354_0(Plugin plugin, String goal, List<RemoteRepository> repositories, RepositorySystemSession session)
{    return MojoExecutorStub.createMojoDescriptor(plugin.getKey());}
public ClassRealm maven_f3355_0(MavenSession session, PluginDescriptor pluginDescriptor)
{    return null;}
public void maven_f3356_0(MavenSession session, MojoExecution execution)
{}
public int maven_f3357_0()
{    return projectBuildFutureTasks.size();}
public Future<ProjectSegment> maven_f3358_0(Callable<ProjectSegment> task)
{    FutureTask<ProjectSegment> projectBuildFutureTask = new FutureTask<>(task);    projectBuildFutureTasks.add(projectBuildFutureTask);    if (finishImmediately) {        projectBuildFutureTask.run();    }    return projectBuildFutureTask;}
public Future<ProjectSegment> maven_f3359_0(Runnable task, ProjectSegment result)
{    FutureTask<ProjectSegment> projectBuildFutureTask = new FutureTask<>(task, result);    projectBuildFutureTasks.add(projectBuildFutureTask);    if (finishImmediately) {        projectBuildFutureTask.run();    }    return projectBuildFutureTask;}
public Future<ProjectSegment> maven_f3360_0() throws InterruptedException
{    return null;}
public Future<ProjectSegment> maven_f3361_0()
{    return null;}
public Future<ProjectSegment> maven_f3362_0(long timeout, TimeUnit unit) throws InterruptedException
{    return null;}
public static DefaultLifecycles maven_f3363_0()
{    List<String> stubDefaultCycle = Arrays.asList(VALIDATE.getPhase(), INITIALIZE.getPhase(), PROCESS_RESOURCES.getPhase(), COMPILE.getPhase(), TEST.getPhase(), PROCESS_TEST_RESOURCES.getPhase(), PACKAGE.getPhase(), "BEER", INSTALL.getPhase());            List<String> stubCleanCycle = Arrays.asList(PRE_CLEAN.getPhase(), CLEAN.getPhase(), POST_CLEAN.getPhase());    List<String> stubSiteCycle = Arrays.asList(PRE_SITE.getPhase(), SITE.getPhase(), POST_SITE.getPhase(), SITE_DEPLOY.getPhase());    @SuppressWarnings("unchecked")    Iterator<List<String>> lcs = Arrays.asList(stubDefaultCycle, stubCleanCycle, stubSiteCycle).iterator();    Map<String, Lifecycle> lifeCycles = new HashMap<>();    for (String s : DefaultLifecycles.STANDARD_LIFECYCLES) {        final Lifecycle lifecycle = new Lifecycle(s, lcs.next(), null);        lifeCycles.put(s, lifecycle);    }    return new DefaultLifecycles(lifeCycles, new LoggerStub());}
public void maven_f3364_0(Type eventType, MavenSession session, MojoExecution mojoExecution)
{}
public void maven_f3365_0(Type eventType, MavenSession session, MojoExecution mojoExecution, Exception exception)
{}
public int maven_f3366_0(ProjectBuildList projectBuildList) throws InvalidPluginDescriptorException, PluginVersionResolutionException, PluginDescriptorParsingException, NoPluginFoundForPrefixException, MojoNotFoundException, PluginNotFoundException, PluginResolutionException, LifecyclePhaseNotFoundException, LifecycleNotFoundException
{    int result = 0;    for (ProjectSegment projectBuild : projectBuildList) {        MavenExecutionPlan plan = calculateExecutionPlan(projectBuild.getSession(), projectBuild.getProject(), projectBuild.getTaskSegment().getTasks());        result += plan.size();    }    return result;}
public int maven_f3367_0(ProjectBuildList projectBuildList) throws InvalidPluginDescriptorException, PluginVersionResolutionException, PluginDescriptorParsingException, NoPluginFoundForPrefixException, MojoNotFoundException, PluginNotFoundException, PluginResolutionException, LifecyclePhaseNotFoundException, LifecycleNotFoundException
{    return getNumberOfExceutions(projectBuildList);}
public void maven_f3368_0(MojoExecution mojoExecution, MavenSession session) throws MojoNotFoundException, PluginNotFoundException, PluginResolutionException, PluginDescriptorParsingException, NoPluginFoundForPrefixException, InvalidPluginDescriptorException, LifecyclePhaseNotFoundException, LifecycleNotFoundException, PluginVersionResolutionException
{}
public MavenExecutionPlan maven_f3369_0(MavenSession session, MavenProject project, List<Object> tasks, boolean setup) throws PluginNotFoundException, PluginResolutionException, LifecyclePhaseNotFoundException, PluginDescriptorParsingException, MojoNotFoundException, InvalidPluginDescriptorException, NoPluginFoundForPrefixException, LifecycleNotFoundException, PluginVersionResolutionException
{    if (project.equals(ProjectDependencyGraphStub.A)) {        return getProjectAExceutionPlan();    }    if (project.equals(ProjectDependencyGraphStub.B)) {        return getProjectBExecutionPlan();    }        List<MojoExecution> me = new ArrayList<>();    me.add(createMojoExecution("resources", "default-resources", PROCESS_RESOURCES));    me.add(createMojoExecution("compile", "default-compile", COMPILE));    return createExecutionPlan(project, me);}
public MavenExecutionPlan maven_f3370_0(MavenSession session, MavenProject project, List<Object> tasks) throws PluginNotFoundException, PluginResolutionException, LifecyclePhaseNotFoundException, PluginDescriptorParsingException, MojoNotFoundException, InvalidPluginDescriptorException, NoPluginFoundForPrefixException, LifecycleNotFoundException, PluginVersionResolutionException
{    return calculateExecutionPlan(session, project, tasks, true);}
public void maven_f3371_0(MavenSession session, MavenProject project, MojoExecution mojoExecution) throws PluginNotFoundException, PluginResolutionException, PluginDescriptorParsingException, MojoNotFoundException, InvalidPluginDescriptorException, NoPluginFoundForPrefixException, LifecyclePhaseNotFoundException, LifecycleNotFoundException, PluginVersionResolutionException
{}
public static MavenExecutionPlan maven_f3372_0() throws PluginNotFoundException, PluginResolutionException, LifecyclePhaseNotFoundException, PluginDescriptorParsingException, MojoNotFoundException, InvalidPluginDescriptorException, NoPluginFoundForPrefixException, LifecycleNotFoundException, PluginVersionResolutionException
{    List<MojoExecution> me = new ArrayList<>();    me.add(createMojoExecution("initialize", "default-initialize", INITIALIZE));    me.add(createMojoExecution("resources", "default-resources", PROCESS_RESOURCES));    me.add(createMojoExecution("compile", "default-compile", COMPILE));    me.add(createMojoExecution("testResources", "default-testResources", PROCESS_TEST_RESOURCES));    me.add(createMojoExecution("testCompile", "default-testCompile", TEST_COMPILE));    me.add(createMojoExecution("test", "default-test", TEST));    me.add(createMojoExecution("war", "default-war", PACKAGE));    me.add(createMojoExecution("install", "default-install", INSTALL));    return createExecutionPlan(ProjectDependencyGraphStub.A.getExecutionProject(), me);}
public static MavenExecutionPlan maven_f3373_0() throws PluginNotFoundException, PluginResolutionException, LifecyclePhaseNotFoundException, PluginDescriptorParsingException, MojoNotFoundException, InvalidPluginDescriptorException, NoPluginFoundForPrefixException, LifecycleNotFoundException, PluginVersionResolutionException
{    List<MojoExecution> me = new ArrayList<>();    me.add(createMojoExecution("enforce", "enforce-versions", VALIDATE));    me.add(createMojoExecution("resources", "default-resources", PROCESS_RESOURCES));    me.add(createMojoExecution("compile", "default-compile", COMPILE));    me.add(createMojoExecution("testResources", "default-testResources", PROCESS_TEST_RESOURCES));    me.add(createMojoExecution("testCompile", "default-testCompile", TEST_COMPILE));    me.add(createMojoExecution("test", "default-test", TEST));    return createExecutionPlan(ProjectDependencyGraphStub.B.getExecutionProject(), me);}
private static MavenExecutionPlan maven_f3374_0(MavenProject project, List<MojoExecution> mojoExecutions) throws InvalidPluginDescriptorException, PluginVersionResolutionException, PluginDescriptorParsingException, NoPluginFoundForPrefixException, MojoNotFoundException, PluginNotFoundException, PluginResolutionException, LifecyclePhaseNotFoundException, LifecycleNotFoundException
{    final List<ExecutionPlanItem> planItemList = ExecutionPlanItem.createExecutionPlanItems(project, mojoExecutions);    return new MavenExecutionPlan(planItemList, DefaultLifecyclesStub.createDefaultLifecycles());}
private static MojoExecution maven_f3375_0(String goal, String executionId, MojoDescriptor mojoDescriptor)
{    final Plugin plugin = mojoDescriptor.getPluginDescriptor().getPlugin();    MojoExecution result = new MojoExecution(plugin, goal, executionId);    result.setConfiguration(new Xpp3Dom(executionId + "-" + goal));    result.setMojoDescriptor(mojoDescriptor);    result.setLifecyclePhase(mojoDescriptor.getPhase());    return result;}
public static MojoDescriptor maven_f3376_0(String phaseName)
{    return createMojoDescriptor(phaseName, false);}
public static MojoDescriptor maven_f3377_0(String phaseName, boolean threadSafe)
{    final MojoDescriptor mojoDescriptor = new MojoDescriptor();    mojoDescriptor.setPhase(phaseName);    final PluginDescriptor descriptor = new PluginDescriptor();    Plugin plugin = new Plugin();    plugin.setArtifactId("org.apache.maven.test.MavenExecutionPlan");    plugin.setGroupId("stub-plugin-" + phaseName);    descriptor.setPlugin(plugin);    descriptor.setArtifactId("artifact." + phaseName);    mojoDescriptor.setPluginDescriptor(descriptor);    mojoDescriptor.setThreadSafe(threadSafe);    return mojoDescriptor;}
public static Set<String> maven_f3378_0()
{    return new HashSet<>(Arrays.asList("compile"));}
public Set<Plugin> maven_f3379_0(String packaging)
{    Set<Plugin> plugins;        if ("JAR".equals(packaging)) {        plugins = new LinkedHashSet<>();        plugins.add(newPlugin("maven-compiler-plugin", "compile", "testCompile"));        plugins.add(newPlugin("maven-resources-plugin", "resources", "testResources"));        plugins.add(newPlugin("maven-surefire-plugin", "test"));        plugins.add(newPlugin("maven-jar-plugin", "jar"));        plugins.add(newPlugin("maven-install-plugin", "install"));        plugins.add(newPlugin("maven-deploy-plugin", "deploy"));    } else {        plugins = Collections.emptySet();    }    return plugins;}
private Plugin maven_f3380_0(String artifactId, String... goals)
{    Plugin plugin = new Plugin();    plugin.setGroupId("org.apache.maven.plugins");    plugin.setArtifactId(artifactId);    for (String goal : goals) {        PluginExecution pluginExecution = new PluginExecution();        pluginExecution.setId("default-" + goal);        pluginExecution.addGoal(goal);        plugin.addExecution(pluginExecution);    }    return plugin;}
public List<TaskSegment> maven_f3381_0(MavenSession session, List<String> tasks) throws PluginNotFoundException, PluginResolutionException, PluginDescriptorParsingException, MojoNotFoundException, NoPluginFoundForPrefixException, InvalidPluginDescriptorException, PluginVersionResolutionException
{    List<TaskSegment> taskSegments = new ArrayList<>(tasks.size());    TaskSegment currentSegment = null;    for (String task : tasks) {        if (aggr.equals(task)) {            boolean aggregating = true;            if (currentSegment == null || currentSegment.isAggregating() != aggregating) {                currentSegment = new TaskSegment(aggregating);                taskSegments.add(currentSegment);            }            currentSegment.getTasks().add(new GoalTask(task));        } else {                        if (currentSegment == null || currentSegment.isAggregating()) {                currentSegment = new TaskSegment(false);                taskSegments.add(currentSegment);            }            currentSegment.getTasks().add(new LifecycleTask(task));        }    }    return taskSegments;}
public boolean maven_f3382_0(MavenSession session)
{    return true;}
public void maven_f3383_0(String s)
{}
public void maven_f3384_0(String s, Throwable throwable)
{}
public boolean maven_f3385_0()
{    return true;}
public void maven_f3386_0(String s)
{}
public void maven_f3387_0(String s, Throwable throwable)
{}
public boolean maven_f3388_0()
{    return true;}
public void maven_f3389_0(String s)
{}
public void maven_f3390_0(String s, Throwable throwable)
{}
public boolean maven_f3391_0()
{    return true;}
public void maven_f3392_0(String s)
{}
public void maven_f3393_0(String s, Throwable throwable)
{}
public boolean maven_f3394_0()
{    return true;}
public void maven_f3395_0(String s)
{}
public void maven_f3396_0(String s, Throwable throwable)
{}
public boolean maven_f3397_0()
{    return true;}
public Logger maven_f3398_0(String s)
{    return null;}
public int maven_f3399_0()
{    return 0;}
public void maven_f3400_0(int i)
{}
public String maven_f3401_0()
{    return "StubLogger";}
public void maven_f3402_0(MavenSession session, MojoExecution mojoExecution, ProjectIndex projectIndex, DependencyContext dependencyContext, PhaseRecorder phaseRecorder) throws LifecycleExecutionException
{    executions.add(mojoExecution);}
public void maven_f3403_0(MavenSession session, List<MojoExecution> mojoExecutions, ProjectIndex projectIndex) throws LifecycleExecutionException
{    executions.addAll(mojoExecutions);}
public static MojoDescriptor maven_f3404_0(String mojoDescription)
{    final PluginDescriptor descriptor = new PluginDescriptor();    descriptor.setArtifactId(mojoDescription);    final MojoDescriptor mojoDescriptor = new MojoDescriptor();    mojoDescriptor.setDescription(mojoDescription);    mojoDescriptor.setPluginDescriptor(descriptor);    return mojoDescriptor;}
public PluginPrefixResult maven_f3405_0(PluginPrefixRequest request) throws NoPluginFoundForPrefixException
{    return new PluginPrefixResult() {        public String getGroupId() {            return "com.foobar";        }        public String getArtifactId() {            return "bazbaz";        }        public ArtifactRepository getRepository() {            return null;        }    };}
public String maven_f3406_0()
{    return "com.foobar";}
public String maven_f3407_0()
{    return "bazbaz";}
public ArtifactRepository maven_f3408_0()
{    return null;}
public PluginVersionResult maven_f3409_0(PluginVersionRequest request) throws PluginVersionResolutionException
{    return new PluginVersionResult() {        public String getVersion() {            return "0.42";        }        public ArtifactRepository getRepository() {            return null;        }    };}
public String maven_f3410_0()
{    return "0.42";}
public ArtifactRepository maven_f3411_0()
{    return null;}
public Set<Artifact> maven_f3412_0(MavenProject project, Collection<String> scopesToResolve, MavenSession session) throws ArtifactResolutionException, ArtifactNotFoundException
{    return new HashSet<>();}
public Set<Artifact> maven_f3413_0(MavenProject project, Collection<String> scopesToCollect, Collection<String> scopesToResolve, MavenSession session) throws ArtifactResolutionException, ArtifactNotFoundException
{    return new HashSet<>();}
public Set<Artifact> maven_f3414_0(Collection<? extends MavenProject> projects, Collection<String> scopes, MavenSession session) throws ArtifactResolutionException, ArtifactNotFoundException
{    return new HashSet<>();}
public Set<Artifact> maven_f3415_0(MavenProject project, Collection<String> scopesToCollect, Collection<String> scopesToResolve, MavenSession session, Set<Artifact> ignoreableArtifacts) throws ArtifactResolutionException, ArtifactNotFoundException
{    return new HashSet<>();}
public DependencyResolutionResult maven_f3416_0(DependencyResolutionRequest request) throws DependencyResolutionException
{    return new DependencyResolutionResult() {        public List<Dependency> getUnresolvedDependencies() {            return Collections.emptyList();        }        public List<Dependency> getResolvedDependencies() {            return Collections.emptyList();        }        public List<Exception> getResolutionErrors(Dependency dependency) {            return Collections.emptyList();        }        public DependencyNode getDependencyGraph() {            return new DefaultDependencyNode((Dependency) null);        }        public List<Dependency> getDependencies() {            return Collections.emptyList();        }        public List<Exception> getCollectionErrors() {            return Collections.emptyList();        }    };}
public List<Dependency> maven_f3417_0()
{    return Collections.emptyList();}
public List<Dependency> maven_f3418_0()
{    return Collections.emptyList();}
public List<Exception> maven_f3419_0(Dependency dependency)
{    return Collections.emptyList();}
public DependencyNode maven_f3420_0()
{    return new DefaultDependencyNode((Dependency) null);}
public List<Dependency> maven_f3421_0()
{    return Collections.emptyList();}
public List<Exception> maven_f3422_0()
{    return Collections.emptyList();}
public static ProjectBuildList maven_f3423_0(MavenSession session) throws InvalidPluginDescriptorException, PluginVersionResolutionException, PluginDescriptorParsingException, NoPluginFoundForPrefixException, MojoNotFoundException, PluginNotFoundException, PluginResolutionException, LifecyclePhaseNotFoundException, LifecycleNotFoundException
{    final List<ProjectSegment> list = getProjectBuilds(session);    return new ProjectBuildList(list);}
public static List<ProjectSegment> maven_f3424_0(MavenSession session) throws InvalidPluginDescriptorException, PluginVersionResolutionException, PluginDescriptorParsingException, NoPluginFoundForPrefixException, PluginNotFoundException, MojoNotFoundException, PluginResolutionException, LifecyclePhaseNotFoundException, LifecycleNotFoundException
{    List<ProjectSegment> projectBuilds = new ArrayList<>();    TaskSegment segment = createTaskSegment();    projectBuilds.add(createProjectBuild(A, session, segment));    projectBuilds.add(createProjectBuild(B, session, segment));    projectBuilds.add(createProjectBuild(C, session, segment));    projectBuilds.add(createProjectBuild(X, session, segment));    projectBuilds.add(createProjectBuild(Y, session, segment));    projectBuilds.add(createProjectBuild(Z, session, segment));    return projectBuilds;}
private static ProjectSegment maven_f3425_0(MavenProject project, MavenSession session, TaskSegment taskSegment) throws InvalidPluginDescriptorException, PluginVersionResolutionException, PluginDescriptorParsingException, NoPluginFoundForPrefixException, MojoNotFoundException, PluginNotFoundException, PluginResolutionException, LifecyclePhaseNotFoundException, LifecycleNotFoundException
{    final MavenSession session1 = session.clone();    return new ProjectSegment(project, taskSegment, session1);}
private static TaskSegment maven_f3426_0()
{    TaskSegment result = new TaskSegment(false);    result.getTasks().add(new GoalTask("t1"));    result.getTasks().add(new GoalTask("t2"));    return result;}
 void maven_f3427_0(MavenProject mavenProject, List<MavenProject> result)
{    if (dependency == mavenProject) {        result.add(dependant);    }}
 void maven_f3428_0(MavenProject mavenProject, List<MavenProject> result)
{    if (dependant == mavenProject) {                result.add(dependency);    }}
private List<Dependency> maven_f3429_0()
{    List<Dependency> dependencies = new ArrayList<>();    dependencies.add(new Dependency(B, A));    dependencies.add(new Dependency(C, A));    dependencies.add(new Dependency(X, B));    dependencies.add(new Dependency(X, C));    dependencies.add(new Dependency(Y, B));    dependencies.add(new Dependency(Z, C));    return dependencies;}
public List<MavenProject> maven_f3430_0()
{    return Arrays.asList(A, B, C, X, Y, Z, UNKNOWN);}
public List<MavenProject> maven_f3431_0()
{        return Arrays.asList(A, B, C, X, Y, Z);}
public List<MavenProject> maven_f3432_0(MavenProject project, boolean transitive)
{    if (transitive) {        throw new RuntimeException("Not implemented yet");    }    List<MavenProject> result = new ArrayList<>();    for (Dependency dependency : getDependencies()) {        dependency.addIfDownstream(project, result);    }    return result;}
public List<MavenProject> maven_f3433_0(MavenProject project, boolean transitive)
{    /*  if ( transitive )        {            throw new RuntimeException( "Not implemented yet" );        }*/    List<MavenProject> result = new ArrayList<>();    final List<Dependency> dependencies = getDependencies();    for (Dependency dependency : dependencies) {        dependency.addIfUpstreamOf(project, result);    }    return result;}
public static MavenSession maven_f3434_0(MavenProject mavenProject)
{    final MavenSession session = getMavenSession();    session.setCurrentProject(mavenProject);    return session;}
public static MavenSession maven_f3435_0()
{    final DefaultMavenExecutionResult defaultMavenExecutionResult = new DefaultMavenExecutionResult();    MavenExecutionRequest mavenExecutionRequest = new DefaultMavenExecutionRequest();    mavenExecutionRequest.setExecutionListener(new AbstractExecutionListener());    mavenExecutionRequest.setGoals(Arrays.asList("clean", "aggr", "install"));    mavenExecutionRequest.setDegreeOfConcurrency(1);    final MavenSession session = new MavenSession(null, null, mavenExecutionRequest, defaultMavenExecutionResult);    final ProjectDependencyGraphStub dependencyGraphStub = new ProjectDependencyGraphStub();    session.setProjectDependencyGraph(dependencyGraphStub);    session.setProjects(dependencyGraphStub.getSortedProjects());    return session;}
public void maven_f3436_0()
{    ProjectDependencyGraphStub stub = new ProjectDependencyGraphStub();    final List<MavenProject> mavenProjects = stub.getUpstreamProjects(ProjectDependencyGraphStub.A, false);    assertEquals(0, mavenProjects.size());}
public void maven_f3437_0(ProjectDependencyGraphStub stub)
{    final List<MavenProject> bProjects = stub.getUpstreamProjects(ProjectDependencyGraphStub.B, false);    assertEquals(1, bProjects.size());    assertTrue(bProjects.contains(ProjectDependencyGraphStub.A));}
public void maven_f3438_0(ProjectDependencyGraphStub stub)
{    final List<MavenProject> cProjects = stub.getUpstreamProjects(ProjectDependencyGraphStub.C, false);    assertEquals(1, cProjects.size());    assertTrue(cProjects.contains(ProjectDependencyGraphStub.C));}
public void maven_f3439_0(ProjectDependencyGraphStub stub)
{    final List<MavenProject> cProjects = stub.getUpstreamProjects(ProjectDependencyGraphStub.X, false);    assertEquals(2, cProjects.size());    assertTrue(cProjects.contains(ProjectDependencyGraphStub.C));    assertTrue(cProjects.contains(ProjectDependencyGraphStub.B));}
protected void maven_f3440_0() throws Exception
{    super.setUp();    defaultLifeCycles = lookup(DefaultLifecycles.class);    mojoExecutor = lookup(MojoExecutor.class);    lifeCycleBuilder = lookup(LifecycleModuleBuilder.class);    lifeCycleDependencyResolver = lookup(LifecycleDependencyResolver.class);    lifeCycleExecutionPlanCalculator = lookup(LifecycleExecutionPlanCalculator.class);    lifeCyclePluginAnalyzer = lookup(LifeCyclePluginAnalyzer.class);    lifeCycleTaskSegmentCalculator = lookup(LifecycleTaskSegmentCalculator.class);    lookup(ExceptionHandler.class);}
protected void maven_f3441_0() throws Exception
{    defaultLifeCycles = null;    super.tearDown();}
protected String maven_f3442_0()
{    return "src/test/projects/lifecycle-executor";}
public void maven_f3443_0() throws Exception
{    assertNotNull(defaultLifeCycles);    assertNotNull(mojoExecutor);    assertNotNull(lifeCycleBuilder);    assertNotNull(lifeCycleDependencyResolver);    assertNotNull(lifeCycleExecutionPlanCalculator);    assertNotNull(lifeCyclePluginAnalyzer);    assertNotNull(lifeCycleTaskSegmentCalculator);}
protected void maven_f3444_0() throws Exception
{    super.setUp();    lifecycleExecutor = (DefaultLifecycleExecutor) lookup(LifecycleExecutor.class);    lifeCycleTaskSegmentCalculator = (DefaultLifecycleTaskSegmentCalculator) lookup(LifecycleTaskSegmentCalculator.class);    lifeCycleExecutionPlanCalculator = lookup(LifecycleExecutionPlanCalculator.class);    mojoDescriptorCreator = lookup(MojoDescriptorCreator.class);    lookup(ExceptionHandler.class);}
protected void maven_f3445_0() throws Exception
{    lifecycleExecutor = null;    super.tearDown();}
protected String maven_f3446_0()
{    return "src/test/projects/lifecycle-executor";}
public void maven_f3447_0() throws Exception
{            File pom = getProject("project-basic");    MavenSession session = createMavenSession(pom);    assertEquals("project-basic", session.getCurrentProject().getArtifactId());    assertEquals("1.0", session.getCurrentProject().getVersion());    List<MojoExecution> executionPlan = getExecutions(calculateExecutionPlan(session, "resources:resources"));    assertEquals(1, executionPlan.size());    MojoExecution mojoExecution = executionPlan.get(0);    assertNotNull(mojoExecution);    assertEquals("org.apache.maven.plugins", mojoExecution.getMojoDescriptor().getPluginDescriptor().getGroupId());    assertEquals("maven-resources-plugin", mojoExecution.getMojoDescriptor().getPluginDescriptor().getArtifactId());    assertEquals("0.1", mojoExecution.getMojoDescriptor().getPluginDescriptor().getVersion());}
public void maven_f3448_0() throws Exception
{            File pom = getProject("project-basic");    MavenSession session = createMavenSession(pom);    assertEquals("project-basic", session.getCurrentProject().getArtifactId());    assertEquals("1.0", session.getCurrentProject().getVersion());    List<MojoExecution> executionPlan = getExecutions(calculateExecutionPlan(session, "clean"));    assertEquals(1, executionPlan.size());    MojoExecution mojoExecution = executionPlan.get(0);    assertNotNull(mojoExecution);    assertEquals("org.apache.maven.plugins", mojoExecution.getMojoDescriptor().getPluginDescriptor().getGroupId());    assertEquals("maven-clean-plugin", mojoExecution.getMojoDescriptor().getPluginDescriptor().getArtifactId());    assertEquals("0.1", mojoExecution.getMojoDescriptor().getPluginDescriptor().getVersion());}
public void maven_f3449_0() throws Exception
{            File pom = getProject("project-basic");    MavenSession session = createMavenSession(pom);    assertEquals("project-basic", session.getCurrentProject().getArtifactId());    assertEquals("1.0", session.getCurrentProject().getVersion());    List<MojoExecution> executionPlan = getExecutions(calculateExecutionPlan(session, "clean:clean"));    assertEquals(1, executionPlan.size());    MojoExecution mojoExecution = executionPlan.get(0);    assertNotNull(mojoExecution);    assertEquals("org.apache.maven.plugins", mojoExecution.getMojoDescriptor().getPluginDescriptor().getGroupId());    assertEquals("maven-clean-plugin", mojoExecution.getMojoDescriptor().getPluginDescriptor().getArtifactId());    assertEquals("0.1", mojoExecution.getMojoDescriptor().getPluginDescriptor().getVersion());}
 List<MojoExecution> maven_f3450_0(MavenExecutionPlan mavenExecutionPlan)
{    List<MojoExecution> result = new ArrayList<>();    for (ExecutionPlanItem executionPlanItem : mavenExecutionPlan) {        result.add(executionPlanItem.getMojoExecution());    }    return result;}
public void maven_f3451_0() throws Exception
{    File pom = getProject("project-with-additional-lifecycle-elements");    MavenSession session = createMavenSession(pom);    assertEquals("project-with-additional-lifecycle-elements", session.getCurrentProject().getArtifactId());    assertEquals("1.0", session.getCurrentProject().getVersion());    List<MojoExecution> executionPlan = getExecutions(calculateExecutionPlan(session, "clean", "install"));                                                assertEquals(10, executionPlan.size());    assertEquals("clean:clean", executionPlan.get(0).getMojoDescriptor().getFullGoalName());    assertEquals("resources:resources", executionPlan.get(1).getMojoDescriptor().getFullGoalName());    assertEquals("compiler:compile", executionPlan.get(2).getMojoDescriptor().getFullGoalName());    assertEquals("it:generate-metadata", executionPlan.get(3).getMojoDescriptor().getFullGoalName());    assertEquals("resources:testResources", executionPlan.get(4).getMojoDescriptor().getFullGoalName());    assertEquals("compiler:testCompile", executionPlan.get(5).getMojoDescriptor().getFullGoalName());    assertEquals("it:generate-test-metadata", executionPlan.get(6).getMojoDescriptor().getFullGoalName());    assertEquals("surefire:test", executionPlan.get(7).getMojoDescriptor().getFullGoalName());    assertEquals("jar:jar", executionPlan.get(8).getMojoDescriptor().getFullGoalName());    assertEquals("install:install", executionPlan.get(9).getMojoDescriptor().getFullGoalName());}
public void maven_f3452_0() throws Exception
{    File pom = getProject("project-with-multiple-executions");    MavenSession session = createMavenSession(pom);    assertEquals("project-with-multiple-executions", session.getCurrentProject().getArtifactId());    assertEquals("1.0.1", session.getCurrentProject().getVersion());    MavenExecutionPlan plan = calculateExecutionPlan(session, "clean", "install");    List<MojoExecution> executions = getExecutions(plan);                                                                        assertEquals(16, executions.size());    assertEquals("clean:clean", executions.get(0).getMojoDescriptor().getFullGoalName());    assertEquals("it:xpp3-writer", executions.get(1).getMojoDescriptor().getFullGoalName());    assertEquals("it:java", executions.get(2).getMojoDescriptor().getFullGoalName());    assertEquals("it:xpp3-reader", executions.get(3).getMojoDescriptor().getFullGoalName());    assertEquals("it:xpp3-writer", executions.get(4).getMojoDescriptor().getFullGoalName());    assertEquals("it:java", executions.get(5).getMojoDescriptor().getFullGoalName());    assertEquals("it:xpp3-reader", executions.get(6).getMojoDescriptor().getFullGoalName());    assertEquals("resources:resources", executions.get(7).getMojoDescriptor().getFullGoalName());    assertEquals("compiler:compile", executions.get(8).getMojoDescriptor().getFullGoalName());    assertEquals("plugin:descriptor", executions.get(9).getMojoDescriptor().getFullGoalName());    assertEquals("resources:testResources", executions.get(10).getMojoDescriptor().getFullGoalName());    assertEquals("compiler:testCompile", executions.get(11).getMojoDescriptor().getFullGoalName());    assertEquals("surefire:test", executions.get(12).getMojoDescriptor().getFullGoalName());    assertEquals("jar:jar", executions.get(13).getMojoDescriptor().getFullGoalName());    assertEquals("plugin:addPluginArtifactMetadata", executions.get(14).getMojoDescriptor().getFullGoalName());    assertEquals("install:install", executions.get(15).getMojoDescriptor().getFullGoalName());    assertEquals("src/main/mdo/remote-resources.mdo", new MojoExecutionXPathContainer(executions.get(1)).getValue("configuration/models[1]/model"));    assertEquals("src/main/mdo/supplemental-model.mdo", new MojoExecutionXPathContainer(executions.get(4)).getValue("configuration/models[1]/model"));}
public void maven_f3453_0() throws Exception
{    File pom = getProject("project-with-additional-lifecycle-elements");    MavenSession session = createMavenSession(pom);    assertEquals("project-with-additional-lifecycle-elements", session.getCurrentProject().getArtifactId());    assertEquals("1.0", session.getCurrentProject().getVersion());    List<MojoExecution> executionPlan = getExecutions(calculateExecutionPlan(session, "package"));                                        assertEquals(8, executionPlan.size());    assertEquals("resources:resources", executionPlan.get(0).getMojoDescriptor().getFullGoalName());    assertEquals("compiler:compile", executionPlan.get(1).getMojoDescriptor().getFullGoalName());    assertEquals("it:generate-metadata", executionPlan.get(2).getMojoDescriptor().getFullGoalName());    assertEquals("resources:testResources", executionPlan.get(3).getMojoDescriptor().getFullGoalName());    assertEquals("compiler:testCompile", executionPlan.get(4).getMojoDescriptor().getFullGoalName());    assertEquals("it:generate-test-metadata", executionPlan.get(5).getMojoDescriptor().getFullGoalName());    assertEquals("surefire:test", executionPlan.get(6).getMojoDescriptor().getFullGoalName());    assertEquals("jar:jar", executionPlan.get(7).getMojoDescriptor().getFullGoalName());}
public void maven_f3454_0() throws Exception
{    List<Plugin> plugins = new ArrayList<>(lifecycleExecutor.getPluginsBoundByDefaultToAllLifecycles("jar"));    assertEquals(8, plugins.size());}
public void maven_f3455_0() throws Exception
{    File pom = getProject("project-with-additional-lifecycle-elements");    MavenSession session = createMavenSession(pom);    MojoDescriptor mojoDescriptor = mojoDescriptorCreator.getMojoDescriptor("org.apache.maven.its.plugins:maven-it-plugin:0.1:java", session, session.getCurrentProject());    Xpp3Dom dom = MojoDescriptorCreator.convert(mojoDescriptor);    System.out.println(dom);}
 MavenExecutionPlan maven_f3456_0(MavenSession session, String... tasks) throws Exception
{    List<TaskSegment> taskSegments = lifeCycleTaskSegmentCalculator.calculateTaskSegments(session, Arrays.asList(tasks));    TaskSegment mergedSegment = new TaskSegment(false);    for (TaskSegment taskSegment : taskSegments) {        mergedSegment.getTasks().addAll(taskSegment.getTasks());    }    return lifeCycleExecutionPlanCalculator.calculateExecutionPlan(session, session.getCurrentProject(), mergedSegment.getTasks());}
public void maven_f3457_0() throws Exception
{    File pom = getProject("project-basic");    MavenSession session = createMavenSession(pom);    try {        getExecutions(calculateExecutionPlan(session, "resources:"));        fail("expected a MojoNotFoundException");    } catch (MojoNotFoundException e) {        assertEquals("", e.getGoal());    }    try {        getExecutions(calculateExecutionPlan(session, "org.apache.maven.plugins:maven-resources-plugin:0.1:resources:toomany"));        fail("expected a MojoNotFoundException");    } catch (MojoNotFoundException e) {        assertEquals("resources:toomany", e.getGoal());    }}
public void maven_f3458_0() throws Exception
{    File pom = getProject("project-basic");    MavenSession session = createMavenSession(pom);    Plugin plugin = mojoDescriptorCreator.findPluginForPrefix("resources", session);    assertEquals("org.apache.maven.plugins", plugin.getGroupId());    assertEquals("maven-resources-plugin", plugin.getArtifactId());}
public void maven_f3459_0() throws Exception
{    File pom = getProject("project-basic");    MavenSession session = createMavenSession(pom);    Plugin plugin = mojoDescriptorCreator.findPluginForPrefix("clean", session);    assertNotNull(plugin);}
public void maven_f3460_0() throws Exception
{    File pom = getProject("mojo-configuration");    MavenSession session = createMavenSession(pom);    LifecycleTask task = new LifecycleTask("generate-sources");    MavenExecutionPlan executionPlan = lifeCycleExecutionPlanCalculator.calculateExecutionPlan(session, session.getCurrentProject(), Arrays.asList((Object) task), false);    MojoExecution execution = executionPlan.getMojoExecutions().get(0);    assertEquals(execution.toString(), "maven-it-plugin", execution.getArtifactId());    assertNull(execution.getConfiguration());    lifeCycleExecutionPlanCalculator.setupMojoExecution(session, session.getCurrentProject(), execution);    assertNotNull(execution.getConfiguration());    assertEquals("1.0", execution.getConfiguration().getChild("version").getAttribute("default-value"));}
public void maven_f3461_0() throws Exception
{    final File pom = getProject("project-basic");    final MavenSession session = createMavenSession(pom);    session.setProjectDependencyGraph(new ProjectDependencyGraph() {        public List<MavenProject> getUpstreamProjects(MavenProject project, boolean transitive) {            return Collections.emptyList();        }        public List<MavenProject> getAllProjects() {            return session.getAllProjects();        }        public List<MavenProject> getSortedProjects() {            return Collections.singletonList(session.getCurrentProject());        }        public List<MavenProject> getDownstreamProjects(MavenProject project, boolean transitive) {            return Collections.emptyList();        }        public java.util.List<MavenProject> getAllSortedProjects() {            return Collections.emptyList();        }    });    final List<String> log = new ArrayList<>();    MojoExecutionListener mojoListener = new MojoExecutionListener() {        public void beforeMojoExecution(MojoExecutionEvent event) throws MojoExecutionException {            assertNotNull(event.getSession());            assertNotNull(event.getProject());            assertNotNull(event.getExecution());            assertNotNull(event.getMojo());            assertNull(event.getCause());            log.add("beforeMojoExecution " + event.getProject().getArtifactId() + ":" + event.getExecution().getExecutionId());        }        public void afterMojoExecutionSuccess(MojoExecutionEvent event) throws MojoExecutionException {            assertNotNull(event.getSession());            assertNotNull(event.getProject());            assertNotNull(event.getExecution());            assertNotNull(event.getMojo());            assertNull(event.getCause());            log.add("afterMojoExecutionSuccess " + event.getProject().getArtifactId() + ":" + event.getExecution().getExecutionId());        }        public void afterExecutionFailure(MojoExecutionEvent event) {            assertNotNull(event.getSession());            assertNotNull(event.getProject());            assertNotNull(event.getExecution());            assertNotNull(event.getMojo());            assertNotNull(event.getCause());            log.add("afterExecutionFailure " + event.getProject().getArtifactId() + ":" + event.getExecution().getExecutionId());        }    };    ProjectExecutionListener projectListener = new ProjectExecutionListener() {        public void beforeProjectExecution(ProjectExecutionEvent event) throws LifecycleExecutionException {            assertNotNull(event.getSession());            assertNotNull(event.getProject());            assertNull(event.getExecutionPlan());            assertNull(event.getCause());            log.add("beforeProjectExecution " + event.getProject().getArtifactId());        }        public void beforeProjectLifecycleExecution(ProjectExecutionEvent event) throws LifecycleExecutionException {            assertNotNull(event.getSession());            assertNotNull(event.getProject());            assertNotNull(event.getExecutionPlan());            assertNull(event.getCause());            log.add("beforeProjectLifecycleExecution " + event.getProject().getArtifactId());        }        public void afterProjectExecutionSuccess(ProjectExecutionEvent event) throws LifecycleExecutionException {            assertNotNull(event.getSession());            assertNotNull(event.getProject());            assertNotNull(event.getExecutionPlan());            assertNull(event.getCause());            log.add("afterProjectExecutionSuccess " + event.getProject().getArtifactId());        }        public void afterProjectExecutionFailure(ProjectExecutionEvent event) {            assertNotNull(event.getSession());            assertNotNull(event.getProject());            assertNull(event.getExecutionPlan());            assertNotNull(event.getCause());            log.add("afterProjectExecutionFailure " + event.getProject().getArtifactId());        }    };    lookup(DelegatingProjectExecutionListener.class).addProjectExecutionListener(projectListener);    lookup(DelegatingMojoExecutionListener.class).addMojoExecutionListener(mojoListener);    try {        lifecycleExecutor.execute(session);    } finally {        lookup(DelegatingProjectExecutionListener.class).removeProjectExecutionListener(projectListener);        lookup(DelegatingMojoExecutionListener.class).removeMojoExecutionListener(mojoListener);    }    List<String> expectedLog =     Arrays.asList(    "beforeProjectExecution project-basic",     "beforeProjectLifecycleExecution project-basic",     "beforeMojoExecution project-basic:default-resources",     "afterMojoExecutionSuccess project-basic:default-resources",     "beforeMojoExecution project-basic:default-compile",     "afterMojoExecutionSuccess project-basic:default-compile",     "beforeMojoExecution project-basic:default-testResources",     "afterMojoExecutionSuccess project-basic:default-testResources",     "beforeMojoExecution project-basic:default-testCompile",     "afterMojoExecutionSuccess project-basic:default-testCompile",     "beforeMojoExecution project-basic:default-test",     "afterMojoExecutionSuccess project-basic:default-test",     "beforeMojoExecution project-basic:default-jar",     "afterMojoExecutionSuccess project-basic:default-jar",     "afterProjectExecutionSuccess project-basic");    assertEventLog(expectedLog, log);}
public List<MavenProject> maven_f3462_0(MavenProject project, boolean transitive)
{    return Collections.emptyList();}
public List<MavenProject> maven_f3463_0()
{    return session.getAllProjects();}
public List<MavenProject> maven_f3464_0()
{    return Collections.singletonList(session.getCurrentProject());}
public List<MavenProject> maven_f3465_0(MavenProject project, boolean transitive)
{    return Collections.emptyList();}
public java.util.List<MavenProject> maven_f3466_0()
{    return Collections.emptyList();}
public void maven_f3467_0(MojoExecutionEvent event) throws MojoExecutionException
{    assertNotNull(event.getSession());    assertNotNull(event.getProject());    assertNotNull(event.getExecution());    assertNotNull(event.getMojo());    assertNull(event.getCause());    log.add("beforeMojoExecution " + event.getProject().getArtifactId() + ":" + event.getExecution().getExecutionId());}
public void maven_f3468_0(MojoExecutionEvent event) throws MojoExecutionException
{    assertNotNull(event.getSession());    assertNotNull(event.getProject());    assertNotNull(event.getExecution());    assertNotNull(event.getMojo());    assertNull(event.getCause());    log.add("afterMojoExecutionSuccess " + event.getProject().getArtifactId() + ":" + event.getExecution().getExecutionId());}
public void maven_f3469_0(MojoExecutionEvent event)
{    assertNotNull(event.getSession());    assertNotNull(event.getProject());    assertNotNull(event.getExecution());    assertNotNull(event.getMojo());    assertNotNull(event.getCause());    log.add("afterExecutionFailure " + event.getProject().getArtifactId() + ":" + event.getExecution().getExecutionId());}
public void maven_f3470_0(ProjectExecutionEvent event) throws LifecycleExecutionException
{    assertNotNull(event.getSession());    assertNotNull(event.getProject());    assertNull(event.getExecutionPlan());    assertNull(event.getCause());    log.add("beforeProjectExecution " + event.getProject().getArtifactId());}
public void maven_f3471_0(ProjectExecutionEvent event) throws LifecycleExecutionException
{    assertNotNull(event.getSession());    assertNotNull(event.getProject());    assertNotNull(event.getExecutionPlan());    assertNull(event.getCause());    log.add("beforeProjectLifecycleExecution " + event.getProject().getArtifactId());}
public void maven_f3472_0(ProjectExecutionEvent event) throws LifecycleExecutionException
{    assertNotNull(event.getSession());    assertNotNull(event.getProject());    assertNotNull(event.getExecutionPlan());    assertNull(event.getCause());    log.add("afterProjectExecutionSuccess " + event.getProject().getArtifactId());}
public void maven_f3473_0(ProjectExecutionEvent event)
{    assertNotNull(event.getSession());    assertNotNull(event.getProject());    assertNull(event.getExecutionPlan());    assertNotNull(event.getCause());    log.add("afterProjectExecutionFailure " + event.getProject().getArtifactId());}
private static void maven_f3474_0(List<String> expectedList, List<String> actualList)
{    assertEquals(toString(expectedList), toString(actualList));}
private static String maven_f3475_0(List<String> lines)
{    StringBuilder sb = new StringBuilder();    for (String line : lines) {        sb.append(line).append('\n');    }    return sb.toString();}
public void maven_f3476_0()
{    LifecyclePhase phase = new LifecyclePhase();    assertEquals("", phase.toString());    LifecycleMojo mojo1 = new LifecycleMojo();    mojo1.setGoal("jar:jar");    phase.setMojos(Arrays.asList(mojo1));    assertEquals("jar:jar", phase.toString());    LifecycleMojo mojo2 = new LifecycleMojo();    mojo2.setGoal("war:war");    phase.setMojos(Arrays.asList(mojo1, mojo2));    assertEquals("jar:jar,war:war", phase.toString());}
public void maven_f3477_0()
{    LifecyclePhase phase = new LifecyclePhase();    assertNull(phase.getMojos());    phase.set("");    assertNotNull(phase.getMojos());    assertEquals(0, phase.getMojos().size());    phase.set("jar:jar, war:war");    List<LifecycleMojo> mojos = phase.getMojos();    assertNotNull(mojos);    assertEquals(2, mojos.size());    LifecycleMojo mojo1 = mojos.get(0);    assertNotNull(mojo1);    assertEquals("jar:jar", mojo1.getGoal());    LifecycleMojo mojo2 = mojos.get(1);    assertNotNull(mojo2);    assertEquals("war:war", mojo2.getGoal());}
public void maven_f3478_0() throws Exception
{    MavenExecutionPlan plan = LifecycleExecutionPlanCalculatorStub.getProjectAExceutionPlan();    ExecutionPlanItem expected = plan.findLastInPhase("package");        ExecutionPlanItem beerPhase = plan.findLastInPhase("BEER");    assertEquals(expected, beerPhase);    assertNotNull(expected);}
public void maven_f3479_0() throws Exception
{    MavenExecutionPlan plan = LifecycleExecutionPlanCalculatorStub.getProjectAExceutionPlan();    final Set<Plugin> unSafePlugins = plan.getNonThreadSafePlugins();        assertEquals(plan.size() - 1, unSafePlugins.size());}
public void maven_f3480_0() throws Exception
{    MavenExecutionPlan plan = LifecycleExecutionPlanCalculatorStub.getProjectAExceutionPlan();    ExecutionPlanItem beerPhase = plan.findLastInPhase(    LifecycleExecutionPlanCalculatorStub.VALIDATE.getPhase());    assertNull(beerPhase);}
public void maven_f3481_0() throws Exception
{    MavenExecutionPlan plan = LifecycleExecutionPlanCalculatorStub.getProjectAExceutionPlan();    assertNull(plan.findLastInPhase("pacXkage"));        assertNotNull(plan.findLastInPhase(LifecycleExecutionPlanCalculatorStub.INITIALIZE.getPhase()));}
public Iterator<?> maven_f3482_0(String expression)
{    return context.iterate(expression);}
public boolean maven_f3483_0(String expression)
{    return context.getValue(expression) != null;}
public Object maven_f3484_0(String expression)
{    try {        return context.getValue(expression);    } catch (JXPathNotFoundException e) {        return null;    }}
public boolean maven_f3485_0(String expression, String value)
{    return context.getValue(expression) != null && context.getValue(expression).equals(value);}
public void maven_f3486_0(MavenSession session)
{    MavenProject project = session.getProjects().get(0);    Dependency dependency = new Dependency();    dependency.setArtifactId(INJECTED_ARTIFACT_ID);    dependency.setGroupId("foo");    dependency.setVersion("1.2.3");    dependency.setScope("system");    try {        dependency.setSystemPath(new File("src/test/projects/lifecycle-executor/project-with-additional-lifecycle-elements/pom.xml").getCanonicalPath());    } catch (IOException e) {        throw new RuntimeException(e);    }    project.getModel().addDependency(dependency);}
public void maven_f3487_0(MavenSession session)
{    session.getUserProperties().setProperty("injected", "bar");}
public void maven_f3488_0(MavenSession session)
{    injectReactorDependency(session.getProjects(), "module-a", "module-b");}
private void maven_f3489_0(List<MavenProject> projects, String moduleFrom, String moduleTo)
{    for (MavenProject project : projects) {        if (moduleFrom.equals(project.getArtifactId())) {            Dependency dependency = new Dependency();            dependency.setArtifactId(moduleTo);            dependency.setGroupId(project.getGroupId());            dependency.setVersion(project.getVersion());            project.getModel().addDependency(dependency);        }    }}
protected void maven_f3490_0()
{    super.setupContainer();}
protected String maven_f3491_0()
{    return "src/test/projects/lifecycle-listener";}
public void maven_f3492_0() throws Exception
{    PlexusContainer container = getContainer();    ComponentDescriptor<? extends AbstractMavenLifecycleParticipant> cd = new ComponentDescriptor<>(InjectDependencyLifecycleListener.class, container.getContainerRealm());    cd.setRoleClass(AbstractMavenLifecycleParticipant.class);    container.addComponentDescriptor(cd);    Maven maven = container.lookup(Maven.class);    File pom = getProject("lifecycle-listener-dependency-injection");    MavenExecutionRequest request = createMavenExecutionRequest(pom);    request.setGoals(Arrays.asList("validate"));    MavenExecutionResult result = maven.execute(request);    assertFalse(result.getExceptions().toString(), result.hasExceptions());    MavenProject project = result.getProject();    assertEquals("bar", project.getProperties().getProperty("foo"));    ArrayList<Artifact> artifacts = new ArrayList<>(project.getArtifacts());    assertEquals(1, artifacts.size());    assertEquals(INJECTED_ARTIFACT_ID, artifacts.get(0).getArtifactId());}
public void maven_f3493_0() throws Exception
{    List<String> reactorOrder = getReactorOrder("lifecycle-participant-reactor-dependency-injection", InjectReactorDependency.class);    assertEquals(Arrays.asList("parent", "module-b", "module-a"), reactorOrder);}
private List<String> maven_f3494_0(String testProject, Class<T> participant) throws Exception
{    PlexusContainer container = getContainer();    ComponentDescriptor<T> cd = new ComponentDescriptor<>(participant, container.getContainerRealm());    cd.setRoleClass(AbstractMavenLifecycleParticipant.class);    container.addComponentDescriptor(cd);    Maven maven = container.lookup(Maven.class);    File pom = getProject(testProject);    MavenExecutionRequest request = createMavenExecutionRequest(pom);    request.setGoals(Arrays.asList("validate"));    MavenExecutionResult result = maven.execute(request);    assertFalse(result.getExceptions().toString(), result.hasExceptions());    List<String> order = new ArrayList<>();    for (MavenProject project : result.getTopologicallySortedProjects()) {        order.add(project.getArtifactId());    }    return order;}
protected void maven_f3495_0() throws Exception
{    super.setUp();    maven = lookup(Maven.class);    exceptionHandler = lookup(ExceptionHandler.class);}
protected void maven_f3496_0() throws Exception
{    maven = null;    exceptionHandler = null;    super.tearDown();}
protected String maven_f3497_0()
{    return "src/test/projects/lifecycle-executor";}
public void maven_f3498_0() throws Exception
{/*        File pom = getProject( "project-with-additional-lifecycle-elements" );        MavenExecutionRequest request = createMavenExecutionRequest( pom );        MavenExecutionResult result = maven.execute( request );        if ( result.hasExceptions() )        {            ExceptionSummary es = exceptionHandler.handleException( result.getExceptions().get( 0 ) );            System.out.println( es.getMessage() );            es.getException().printStackTrace();            fail( "Maven did not execute correctly." );        }        */}
public void maven_f3499_0() throws Exception
{    MavenExecutionRequest mavenExecutionRequest = new DefaultMavenExecutionRequest();    MavenSession m1 = new MavenSession(null, null, mavenExecutionRequest, null);    defaultLegacySupport.setSession(m1);    MyRunnable myRunnable = new MyRunnable();    Thread thread = new Thread(myRunnable);    thread.start();    MavenSession m2 = new MavenSession(null, null, mavenExecutionRequest, null);    defaultLegacySupport.setSession(m2);    latch.countDown();    thread.join();    assertNull(myRunnable.getSession());}
public void maven_f3500_0()
{    try {        latch.await();    } catch (InterruptedException ignore) {        }    session = defaultLegacySupport.getSession();}
public MavenSession maven_f3501_0()
{    return session;}
protected void maven_f3502_0() throws Exception
{    super.setUp();    pluginManager = (DefaultBuildPluginManager) lookup(BuildPluginManager.class);}
protected void maven_f3503_0() throws Exception
{    pluginManager = null;    super.tearDown();}
protected String maven_f3504_0()
{    return "src/test/projects/plugin-manager";}
public void maven_f3505_0() throws Exception
{    MavenSession session = createMavenSession(null);    Plugin plugin = new Plugin();    plugin.setGroupId("org.apache.maven.its.plugins");    plugin.setArtifactId("maven-it-plugin");    plugin.setVersion("0.1");    PluginDescriptor pluginDescriptor = pluginManager.loadPlugin(plugin, session.getCurrentProject().getRemotePluginRepositories(), session.getRepositorySession());    assertNotNull(pluginDescriptor);}
public void maven_f3506_0() throws Exception
{    MavenSession session = createMavenSession(null);    String goal = "it";    Plugin plugin = new Plugin();    plugin.setGroupId("org.apache.maven.its.plugins");    plugin.setArtifactId("maven-it-plugin");    plugin.setVersion("0.1");    MojoDescriptor mojoDescriptor = pluginManager.getMojoDescriptor(plugin, goal, session.getCurrentProject().getRemotePluginRepositories(), session.getRepositorySession());    assertNotNull(mojoDescriptor);    assertEquals(goal, mojoDescriptor.getGoal());            PluginDescriptor pluginDescriptor = mojoDescriptor.getPluginDescriptor();    assertNotNull(pluginDescriptor);    assertEquals("org.apache.maven.its.plugins", pluginDescriptor.getGroupId());    assertEquals("maven-it-plugin", pluginDescriptor.getArtifactId());    assertEquals("0.1", pluginDescriptor.getVersion());}
public void maven_f3507_0() throws Exception
{/*        This will not work until the RR plugin is released to get rid of the binding to the reporting exception which is a mistake.        This happens after removing the reporting API from the core:        java.lang.NoClassDefFoundError: org/apache/maven/reporting/MavenReportException        MavenSession session = createMavenSession( getProject( "project-with-inheritance" ) );        String goal = "process";        Plugin plugin = new Plugin();        plugin.setGroupId( "org.apache.maven.plugins" );        plugin.setArtifactId( "maven-remote-resources-plugin" );        plugin.setVersion( "1.0-beta-2" );        MojoDescriptor mojoDescriptor = pluginManager.getMojoDescriptor( plugin, goal, session.getCurrentProject(), session.getLocalRepository() );        assertPluginDescriptor( mojoDescriptor, "org.apache.maven.plugins", "maven-remote-resources-plugin", "1.0-beta-2" );        MojoExecution mojoExecution = new MojoExecution( mojoDescriptor );        pluginManager.executeMojo( session, mojoExecution );        */}
public void maven_f3508_0() throws Exception
{/*        MavenSession session = createMavenSession( getProject( "project-with-inheritance" ) );        String goal = "test";        Plugin plugin = new Plugin();        plugin.setGroupId( "org.apache.maven.plugins" );        plugin.setArtifactId( "maven-surefire-plugin" );        plugin.setVersion( "2.4.2" );                MojoDescriptor mojoDescriptor = pluginManager.getMojoDescriptor( plugin, goal, session.getLocalRepository(), session.getCurrentProject().getPluginArtifactRepositories() );        assertPluginDescriptor( mojoDescriptor, "org.apache.maven.plugins", "maven-surefire-plugin", "2.4.2" );        System.out.println( session.getCurrentProject().getBuild().getPluginsAsMap() );        Xpp3Dom configuration = (Xpp3Dom) session.getCurrentProject().getBuild().getPluginsAsMap().get( plugin.getKey() ).getExecutions().get( 0 ).getConfiguration();        MojoExecution mojoExecution = new MojoExecution( mojoDescriptor, configuration );        pluginManager.executeMojo( session, mojoExecution );        */}
public void maven_f3509_0() throws Exception
{}
public void maven_f3510_0() throws Exception
{}
public void maven_f3511_0() throws Exception
{}
public void maven_f3512_0() throws Exception
{}
public void maven_f3513_0() throws Exception
{}
public void maven_f3514_0() throws Exception
{    MavenSession session = createMavenSession(getProject("project-contributing-system-scope-plugin-dep"));    MavenProject project = session.getCurrentProject();    Plugin plugin = project.getPlugin("org.apache.maven.its.plugins:maven-it-plugin");    RepositoryRequest repositoryRequest = new DefaultRepositoryRequest();    repositoryRequest.setLocalRepository(getLocalRepository());    repositoryRequest.setRemoteRepositories(getPluginArtifactRepositories());    PluginDescriptor pluginDescriptor = pluginManager.loadPlugin(plugin, session.getCurrentProject().getRemotePluginRepositories(), session.getRepositorySession());    pluginManager.getPluginRealm(session, pluginDescriptor);    List<Artifact> artifacts = pluginDescriptor.getArtifacts();    for (Artifact a : artifacts) {        if (a.getGroupId().equals("org.apache.maven.its.mng3586") && a.getArtifactId().equals("tools")) {                        return;        }    }    fail("Can't find the system scoped dependency in the plugin artifacts.");}
protected void maven_f3515_0(MojoDescriptor mojoDescriptor, String groupId, String artifactId, String version)
{    assertNotNull(mojoDescriptor);    PluginDescriptor pd = mojoDescriptor.getPluginDescriptor();    assertNotNull(pd);    assertEquals(groupId, pd.getGroupId());    assertEquals(artifactId, pd.getArtifactId());    assertEquals(version, pd.getVersion());}
public void maven_f3516_0() throws Exception
{    RepositoryRequest repositoryRequest = new DefaultRepositoryRequest();    repositoryRequest.setLocalRepository(getLocalRepository());    repositoryRequest.setRemoteRepositories(getPluginArtifactRepositories());        MavenSession session = createMavenSession(getProject("project-contributing-system-scope-plugin-dep"));    MavenProject project = session.getCurrentProject();    Plugin plugin = project.getPlugin("org.apache.maven.its.plugins:maven-it-plugin");    PluginDescriptor pluginDescriptor = pluginManager.loadPlugin(plugin, session.getCurrentProject().getRemotePluginRepositories(), session.getRepositorySession());    pluginManager.getPluginRealm(session, pluginDescriptor);    assertEquals(1, pluginDescriptor.getDependencies().size());    for (ComponentDescriptor<?> descriptor : pluginDescriptor.getComponents()) {        assertNotNull(descriptor.getRealm());        assertNotNull(descriptor.getImplementationClass());    }        session = createMavenSession(getProject("project-contributing-system-scope-plugin-dep"));    project = session.getCurrentProject();    plugin = project.getPlugin("org.apache.maven.its.plugins:maven-it-plugin");    pluginDescriptor = pluginManager.loadPlugin(plugin, session.getCurrentProject().getRemotePluginRepositories(), session.getRepositorySession());    pluginManager.getPluginRealm(session, pluginDescriptor);    assertEquals(1, pluginDescriptor.getDependencies().size());    for (ComponentDescriptor<?> descriptor : pluginDescriptor.getComponents()) {        assertNotNull(descriptor.getRealm());        assertNotNull(descriptor.getImplementationClass());    }}
public void maven_f3517_0() throws Exception
{    RepositoryRequest repositoryRequest = new DefaultRepositoryRequest();    repositoryRequest.setLocalRepository(getLocalRepository());    repositoryRequest.setRemoteRepositories(getPluginArtifactRepositories());        MavenSession session = createMavenSession(getProject("project-with-build-extensions-plugin"));    MavenProject project = session.getCurrentProject();    Plugin plugin = project.getPlugin("org.apache.maven.its.plugins:maven-it-plugin");    PluginDescriptor pluginDescriptor = pluginManager.loadPlugin(plugin, session.getCurrentProject().getRemotePluginRepositories(), session.getRepositorySession());    ClassRealm pluginRealm = pluginManager.getPluginRealm(session, pluginDescriptor);    assertEquals(pluginRealm, pluginDescriptor.getComponents().get(0).getRealm());}
public void maven_f3518_0()
{    MojoDescriptor mojoDescriptor = new MojoDescriptor();    mojoDescriptor.setGoal("goal");    PluginDescriptor pluginDescriptor = new PluginDescriptor();    pluginDescriptor.setGoalPrefix("goalPrefix");    pluginDescriptor.setArtifactId("artifactId");    mojoDescriptor.setPluginDescriptor(pluginDescriptor);    Parameter parameter = new Parameter();    parameter.setType("java.lang.String[]");    parameter.setName("toAddresses");    parameter.setRequired(true);    PluginParameterException exception = new PluginParameterException(mojoDescriptor, Collections.singletonList(parameter));    assertEquals("One or more required plugin parameters are invalid/missing for 'goalPrefix:goal'\n" + "\n" + "[0] Inside the definition for plugin 'artifactId', specify the following:\n" + "\n" + "<configuration>\n" + "  ...\n" + "  <toAddresses>\n" + "    <item>VALUE</item>\n" + "  </toAddresses>\n" + "</configuration>.\n", exception.buildDiagnosticMessage());}
public void maven_f3519_0()
{    MojoDescriptor mojoDescriptor = new MojoDescriptor();    mojoDescriptor.setGoal("goal");    PluginDescriptor pluginDescriptor = new PluginDescriptor();    pluginDescriptor.setGoalPrefix("goalPrefix");    pluginDescriptor.setArtifactId("artifactId");    mojoDescriptor.setPluginDescriptor(pluginDescriptor);    Parameter parameter = new Parameter();    parameter.setType("java.util.List");    parameter.setName("toAddresses");    parameter.setRequired(true);    PluginParameterException exception = new PluginParameterException(mojoDescriptor, Collections.singletonList(parameter));    assertEquals("One or more required plugin parameters are invalid/missing for 'goalPrefix:goal'\n" + "\n" + "[0] Inside the definition for plugin 'artifactId', specify the following:\n" + "\n" + "<configuration>\n" + "  ...\n" + "  <toAddresses>\n" + "    <item>VALUE</item>\n" + "  </toAddresses>\n" + "</configuration>.\n", exception.buildDiagnosticMessage());}
public void maven_f3520_0()
{    MojoDescriptor mojoDescriptor = new MojoDescriptor();    mojoDescriptor.setGoal("goal");    PluginDescriptor pluginDescriptor = new PluginDescriptor();    pluginDescriptor.setGoalPrefix("goalPrefix");    pluginDescriptor.setArtifactId("artifactId");    mojoDescriptor.setPluginDescriptor(pluginDescriptor);    Parameter parameter = new Parameter();    parameter.setType("java.util.Map");    parameter.setName("toAddresses");    parameter.setRequired(true);    PluginParameterException exception = new PluginParameterException(mojoDescriptor, Collections.singletonList(parameter));    assertEquals("One or more required plugin parameters are invalid/missing for 'goalPrefix:goal'\n" + "\n" + "[0] Inside the definition for plugin 'artifactId', specify the following:\n" + "\n" + "<configuration>\n" + "  ...\n" + "  <toAddresses>\n" + "    <KEY>VALUE</KEY>\n" + "  </toAddresses>\n" + "</configuration>.\n", exception.buildDiagnosticMessage());}
public void maven_f3521_0()
{    MojoDescriptor mojoDescriptor = new MojoDescriptor();    mojoDescriptor.setGoal("goal");    PluginDescriptor pluginDescriptor = new PluginDescriptor();    pluginDescriptor.setGoalPrefix("goalPrefix");    pluginDescriptor.setArtifactId("artifactId");    mojoDescriptor.setPluginDescriptor(pluginDescriptor);    Parameter parameter = new Parameter();    parameter.setType("java.util.Properties");    parameter.setName("toAddresses");    parameter.setRequired(true);    PluginParameterException exception = new PluginParameterException(mojoDescriptor, Collections.singletonList(parameter));    assertEquals("One or more required plugin parameters are invalid/missing for 'goalPrefix:goal'\n" + "\n" + "[0] Inside the definition for plugin 'artifactId', specify the following:\n" + "\n" + "<configuration>\n" + "  ...\n" + "  <toAddresses>\n" + "    <property>\n" + "      <name>KEY</name>\n" + "      <value>VALUE</value>\n" + "    </property>\n" + "  </toAddresses>\n" + "</configuration>.\n", exception.buildDiagnosticMessage());}
public void maven_f3522_0() throws Exception
{    super.setUp();    factory = lookup(RepositorySystem.class);}
protected void maven_f3523_0() throws Exception
{    factory = null;    super.tearDown();}
public void maven_f3524_0() throws Exception
{    MojoExecution exec = newMojoExecution();    MavenSession session = newMavenSession();    Object result = new PluginParameterExpressionEvaluator(session, exec).evaluate("${plugin}");    System.out.println("Result: " + result);    assertSame("${plugin} expression does not return plugin descriptor.", exec.getMojoDescriptor().getPluginDescriptor(), result);}
public void maven_f3525_0() throws Exception
{    MojoExecution exec = newMojoExecution();    Artifact depArtifact = createArtifact("group", "artifact", "1");    List<Artifact> deps = new ArrayList<>();    deps.add(depArtifact);    exec.getMojoDescriptor().getPluginDescriptor().setArtifacts(deps);    MavenSession session = newMavenSession();    @SuppressWarnings("unchecked")    List<Artifact> depResults = (List<Artifact>) new PluginParameterExpressionEvaluator(session, exec).evaluate("${plugin.artifacts}");    System.out.println("Result: " + depResults);    assertNotNull(depResults);    assertEquals(1, depResults.size());    assertSame("dependency artifact is wrong.", depArtifact, depResults.get(0));}
public void maven_f3526_0() throws Exception
{    MojoExecution exec = newMojoExecution();    Artifact depArtifact = createArtifact("group", "artifact", "1");    List<Artifact> deps = new ArrayList<>();    deps.add(depArtifact);    exec.getMojoDescriptor().getPluginDescriptor().setArtifacts(deps);    MavenSession session = newMavenSession();    @SuppressWarnings("unchecked")    Map<String, Artifact> depResults = (Map<String, Artifact>) new PluginParameterExpressionEvaluator(session, exec).evaluate("${plugin.artifactMap}");    System.out.println("Result: " + depResults);    assertNotNull(depResults);    assertEquals(1, depResults.size());    assertSame("dependency artifact is wrong.", depArtifact, depResults.get(ArtifactUtils.versionlessKey(depArtifact)));}
public void maven_f3527_0() throws Exception
{    MojoExecution exec = newMojoExecution();    MavenSession session = newMavenSession();    Object result = new PluginParameterExpressionEvaluator(session, exec).evaluate("${plugin.artifactId}");    System.out.println("Result: " + result);    assertSame("${plugin.artifactId} expression does not return plugin descriptor's artifactId.", exec.getMojoDescriptor().getPluginDescriptor().getArtifactId(), result);}
public void maven_f3528_0() throws Exception
{    String expected = getTestFile("target/test-classes/target/classes").getCanonicalPath();    Build build = new Build();    build.setDirectory(expected.substring(0, expected.length() - "/classes".length()));    Model model = new Model();    model.setBuild(build);    MavenProject project = new MavenProject(model);    project.setFile(new File("pom.xml").getCanonicalFile());    ExpressionEvaluator expressionEvaluator = createExpressionEvaluator(project, null, new Properties());    Object value = expressionEvaluator.evaluate("${project.build.directory}/classes");    String actual = new File(value.toString()).getCanonicalPath();    assertEquals(expected, actual);}
public void maven_f3529_0() throws Exception
{    String var = "${var}";    Model model = new Model();    model.setVersion("1");    MavenProject project = new MavenProject(model);    ExpressionEvaluator ee = createExpressionEvaluator(project, null, new Properties());    Object value = ee.evaluate("$" + var);    assertEquals(var, value);}
public void maven_f3530_0() throws Exception
{    String var = "${var}";    String key = var + " with version: ${project.version}";    Model model = new Model();    model.setVersion("1");    MavenProject project = new MavenProject(model);    ExpressionEvaluator ee = createExpressionEvaluator(project, null, new Properties());    Object value = ee.evaluate("$" + key);    assertEquals("${var} with version: 1", value);}
public void maven_f3531_0() throws Exception
{    String key = "${project.artifactId} with version: ${project.version}";    Model model = new Model();    model.setArtifactId("test");    model.setVersion("1");    MavenProject project = new MavenProject(model);    ExpressionEvaluator ee = createExpressionEvaluator(project, null, new Properties());    Object value = ee.evaluate(key);    assertEquals("test with version: 1", value);}
public void maven_f3532_0() throws Exception
{    String expr = "/path/to/someproject-${baseVersion}";    MavenProject project = new MavenProject(new Model());    ExpressionEvaluator ee = createExpressionEvaluator(project, null, new Properties());    Object value = ee.evaluate(expr);    assertEquals(expr, value);}
public void maven_f3533_0() throws Exception
{    String key = "m2.name";    String checkValue = "value";    Properties properties = new Properties();    properties.setProperty(key, checkValue);    Model model = new Model();    model.setProperties(properties);    MavenProject project = new MavenProject(model);    ExpressionEvaluator ee = createExpressionEvaluator(project, null, new Properties());    Object value = ee.evaluate("${" + key + "}");    assertEquals(checkValue, value);}
public void maven_f3534_0() throws Exception
{    ExpressionEvaluator ee = createExpressionEvaluator(null, null, new Properties());    Object value = ee.evaluate("${basedir}");    assertEquals(System.getProperty("user.dir"), value);}
public void maven_f3535_0() throws Exception
{    String sysprop = "PPEET_sysprop1";    Properties executionProperties = new Properties();    if (executionProperties.getProperty(sysprop) == null) {        executionProperties.setProperty(sysprop, "value");    }    ExpressionEvaluator ee = createExpressionEvaluator(null, null, executionProperties);    Object value = ee.evaluate("${" + sysprop + "}");    assertEquals("value", value);}
public void maven_f3536_0() throws Exception
{    String sysprop = "PPEET.sysprop2";    Properties executionProperties = new Properties();    if (executionProperties.getProperty(sysprop) == null) {        executionProperties.setProperty(sysprop, "value");    }    ExpressionEvaluator ee = createExpressionEvaluator(null, null, executionProperties);    Object value = ee.evaluate("${" + sysprop + "}");    assertEquals("value", value);}
private static MavenSession maven_f3537_0(PlexusContainer container, ArtifactRepository repo, Properties properties) throws CycleDetectedException, DuplicateProjectException
{    MavenExecutionRequest request = new DefaultMavenExecutionRequest().setSystemProperties(properties).setGoals(Collections.<String>emptyList()).setBaseDirectory(new File("")).setLocalRepository(repo);    return new MavenSession(container, request, new DefaultMavenExecutionResult(), Collections.<MavenProject>emptyList());}
public void maven_f3538_0() throws Exception
{    ExpressionEvaluator expressionEvaluator = createExpressionEvaluator(createDefaultProject(), null, new Properties());    Object value = expressionEvaluator.evaluate("${localRepository}");    assertEquals("local", ((ArtifactRepository) value).getId());}
public void maven_f3539_0() throws Exception
{    Build build = new Build();    build.setDirectory("expected-directory");    build.setFinalName("expected-finalName");    Model model = new Model();    model.setBuild(build);    ExpressionEvaluator expressionEvaluator = createExpressionEvaluator(new MavenProject(model), null, new Properties());    Object value = expressionEvaluator.evaluate("${project.build.directory}" + FS + "${project.build.finalName}");    assertEquals("expected-directory" + File.separatorChar + "expected-finalName", value);}
public void maven_f3540_0() throws Exception
{    PluginDescriptor pd = new PluginDescriptor();    Artifact artifact = createArtifact("testGroup", "testArtifact", "1.0");    pd.setArtifacts(Collections.singletonList(artifact));    ExpressionEvaluator ee = createExpressionEvaluator(createDefaultProject(), pd, new Properties());    Object value = ee.evaluate("${plugin.artifacts}");    assertTrue(value instanceof List);    @SuppressWarnings("unchecked")    List<Artifact> artifacts = (List<Artifact>) value;    assertEquals(1, artifacts.size());    Artifact result = artifacts.get(0);    assertEquals("testGroup", result.getGroupId());}
private MavenProject maven_f3541_0()
{    return new MavenProject(new Model());}
private ExpressionEvaluator maven_f3542_0(MavenProject project, PluginDescriptor pluginDescriptor, Properties executionProperties) throws Exception
{    ArtifactRepository repo = factory.createDefaultLocalRepository();    MutablePlexusContainer container = (MutablePlexusContainer) getContainer();    MavenSession session = createSession(container, repo, executionProperties);    session.setCurrentProject(project);    MojoDescriptor mojo = new MojoDescriptor();    mojo.setPluginDescriptor(pluginDescriptor);    mojo.setGoal("goal");    MojoExecution mojoExecution = new MojoExecution(mojo);    return new PluginParameterExpressionEvaluator(session, mojoExecution);}
protected Artifact maven_f3543_0(String groupId, String artifactId, String version) throws Exception
{    Dependency dependency = new Dependency();    dependency.setGroupId(groupId);    dependency.setArtifactId(artifactId);    dependency.setVersion(version);    dependency.setType("jar");    dependency.setScope("compile");    return factory.createDependencyArtifact(dependency);}
private MojoExecution maven_f3544_0()
{    PluginDescriptor pd = new PluginDescriptor();    pd.setArtifactId("my-plugin");    pd.setGroupId("org.myco.plugins");    pd.setVersion("1");    MojoDescriptor md = new MojoDescriptor();    md.setPluginDescriptor(pd);    pd.addComponentDescriptor(md);    return new MojoExecution(md);}
private MavenSession maven_f3545_0() throws Exception
{    return createMavenSession(null);}
protected String maven_f3546_0()
{        return null;}
protected void maven_f3547_0(ContainerConfiguration containerConfiguration)
{    super.customizeContainerConfiguration(containerConfiguration);    containerConfiguration.setAutoWiring(true);    containerConfiguration.setClassPathScanning(PlexusConstants.SCANNING_INDEX);}
protected void maven_f3548_0() throws Exception
{    super.setUp();    if (getContainer().hasComponent(ProjectBuilder.class, "test")) {        projectBuilder = lookup(ProjectBuilder.class, "test");    } else {                projectBuilder = lookup(ProjectBuilder.class);    }    repositorySystem = lookup(RepositorySystem.class);}
protected void maven_f3549_0() throws Exception
{    projectBuilder = null;    super.tearDown();}
protected ProjectBuilder maven_f3550_0()
{    return projectBuilder;}
protected String maven_f3551_0()
{    String name = AbstractMavenProjectTestCase.class.getName().replace('.', '/') + ".xml";    System.out.println(name);    return name;}
protected File maven_f3552_0() throws FileNotFoundException, URISyntaxException
{    File markerFile = getFileForClasspathResource("local-repo/marker.txt");    return markerFile.getAbsoluteFile().getParentFile();}
protected static File maven_f3553_0(String resource) throws FileNotFoundException
{    ClassLoader cloader = Thread.currentThread().getContextClassLoader();    URL resourceUrl = cloader.getResource(resource);    if (resourceUrl == null) {        throw new FileNotFoundException("Unable to find: " + resource);    }    return new File(URI.create(resourceUrl.toString().replaceAll(" ", "%20")));}
protected ArtifactRepository maven_f3554_0() throws Exception
{    ArtifactRepositoryLayout repoLayout = lookup(ArtifactRepositoryLayout.class, "legacy");    ArtifactRepository r = repositorySystem.createArtifactRepository("local", "file://" + getLocalRepositoryPath().getAbsolutePath(), repoLayout, null, null);    return r;}
protected MavenProject maven_f3555_0(File pom) throws Exception
{    ProjectBuildingRequest configuration = newBuildingRequest();    configuration.setRemoteRepositories(Arrays.asList(new ArtifactRepository[] {}));    configuration.setProcessPlugins(false);    configuration.setResolveDependencies(true);    try {        return projectBuilder.build(pom, configuration).getProject();    } catch (Exception e) {        Throwable cause = e.getCause();        if (cause instanceof ModelBuildingException) {            String message = "In: " + pom + "\n\n";            for (ModelProblem problem : ((ModelBuildingException) cause).getProblems()) {                message += problem + "\n";            }            System.out.println(message);        }        throw e;    }}
protected MavenProject maven_f3556_0(File pom) throws Exception
{    ProjectBuildingRequest configuration = newBuildingRequest();    return projectBuilder.build(pom, configuration).getProject();}
protected MavenProject maven_f3557_0(final File pom) throws Exception
{    final ProjectBuildingRequest configuration = new DefaultProjectBuildingRequest();    configuration.setLocalRepository(this.getLocalRepository());    configuration.setRemoteRepositories(Arrays.asList(this.repositorySystem.createDefaultRemoteRepository()));    initRepoSession(configuration);    return projectBuilder.build(pom, configuration).getProject();}
protected ProjectBuildingRequest maven_f3558_0() throws Exception
{    ProjectBuildingRequest configuration = new DefaultProjectBuildingRequest();    configuration.setLocalRepository(getLocalRepository());    initRepoSession(configuration);    return configuration;}
protected void maven_f3559_0(ProjectBuildingRequest request)
{    File localRepo = new File(request.getLocalRepository().getBasedir());    DefaultRepositorySystemSession repoSession = MavenRepositorySystemUtils.newSession();    repoSession.setLocalRepositoryManager(new LegacyLocalRepositoryManager(localRepo));    request.setRepositorySession(repoSession);}
protected void maven_f3560_0() throws Exception
{    super.setUp();    repositorySystem = new TestRepositorySystem();}
protected void maven_f3561_0() throws Exception
{    repositorySystem = null;    super.tearDown();}
public void maven_f3562_0() throws Exception
{    Artifact a1 = repositorySystem.createArtifact("testGroup", "testArtifact", "1.2.3", "jar");    @SuppressWarnings("deprecation")    ArtifactRepository lr1 = new DelegatingLocalArtifactRepository(repositorySystem.createDefaultLocalRepository());    ArtifactRepository rr1 = repositorySystem.createDefaultRemoteRepository();    a1.setDependencyFilter(new ExcludesArtifactFilter(Arrays.asList("foo")));    Artifact a2 = repositorySystem.createArtifact("testGroup", "testArtifact", "1.2.3", "jar");    @SuppressWarnings("deprecation")    ArtifactRepository lr2 = new DelegatingLocalArtifactRepository(repositorySystem.createDefaultLocalRepository());    ArtifactRepository rr2 = repositorySystem.createDefaultRemoteRepository();    a2.setDependencyFilter(new ExcludesArtifactFilter(Arrays.asList("foo")));        assertNotSame(a1, a2);    assertNotSame(lr1, lr2);    assertNotSame(rr1, rr2);    CacheKey k1 = new CacheKey(a1, false, lr1, Collections.singletonList(rr1));    CacheKey k2 = new CacheKey(a2, false, lr2, Collections.singletonList(rr2));    assertEquals(k1.hashCode(), k2.hashCode());}
protected void maven_f3563_0() throws Exception
{    super.setUp();    cache = lookup(ProjectArtifactsCache.class);}
public void maven_f3564_0() throws Exception
{    ProjectArtifactsCache.Key project1 = new ProjectArtifactsCache.Key() {    };    Set<Artifact> artifacts = new LinkedHashSet<>(4);    artifacts.add(new DefaultArtifact("g", "a1", "v", "compile", "jar", "", null));    artifacts.add(new DefaultArtifact("g", "a2", "v", "compile", "jar", "", null));    artifacts.add(new DefaultArtifact("g", "a3", "v", "compile", "jar", "", null));    artifacts.add(new DefaultArtifact("g", "a4", "v", "compile", "jar", "", null));    cache.put(project1, artifacts);    assertArrayEquals(artifacts.toArray(new Artifact[0]), cache.get(project1).getArtifacts().toArray(new Artifact[0]));    ProjectArtifactsCache.Key project2 = new ProjectArtifactsCache.Key() {    };    Set<Artifact> reversedArtifacts = new LinkedHashSet<>(4);    artifacts.add(new DefaultArtifact("g", "a4", "v", "compile", "jar", "", null));    artifacts.add(new DefaultArtifact("g", "a3", "v", "compile", "jar", "", null));    artifacts.add(new DefaultArtifact("g", "a2", "v", "compile", "jar", "", null));    artifacts.add(new DefaultArtifact("g", "a1", "v", "compile", "jar", "", null));    cache.put(project2, reversedArtifacts);    assertArrayEquals(reversedArtifacts.toArray(new Artifact[0]), cache.get(project2).getArtifacts().toArray(new Artifact[0]));}
protected void maven_f3565_0() throws Exception
{    super.setUp();    repositorySystem = lookup(RepositorySystem.class);}
protected void maven_f3566_0() throws Exception
{    repositorySystem = null;    super.tearDown();}
public void maven_f3567_0() throws Exception
{/*        Dependency dep1 = new Dependency();        dep1.setGroupId( "test" );        dep1.setArtifactId( "test-artifact" );        dep1.setVersion( "1" );        dep1.setType( "jar" );        Exclusion exc = new Exclusion();        exc.setGroupId( "test" );        exc.setArtifactId( "test-artifact3" );        dep1.addExclusion( exc );        Dependency dep2 = new Dependency();        dep2.setGroupId( "test" );        dep2.setArtifactId( "test-artifact2" );        dep2.setVersion( "1" );        dep2.setType( "jar" );        List deps = new ArrayList();        deps.add( dep1 );        deps.add( dep2 );        ArtifactFactory factory = lookup( ArtifactFactory.class );        ArtifactFilter dependencyFilter = new ScopeArtifactFilter( Artifact.SCOPE_COMPILE );        MavenProject project = new MavenProject( new Model() );        Set result = project.createArtifacts( dependencyFilter );        for ( Iterator it = result.iterator(); it.hasNext(); )        {            Artifact artifact = ( Artifact ) it.next();            if ( "test-artifact2".equals( artifact.getArtifactId() ) )            {                ArtifactFilter filter = artifact.getDependencyFilter();                assertSame( dependencyFilter, filter );            }        }        */}
public void maven_f3568_0() throws Exception
{    File f = getFileForClasspathResource("canonical-pom.xml");    MavenProject project = getProject(f);                assertEquals("4.0.0", project.getModelVersion());                List<Plugin> plugins = project.getBuildPlugins();        String key = "org.apache.maven.plugins:maven-plexus-plugin";    Plugin plugin = null;    for (Plugin check : plugins) {        if (key.equals(check.getKey())) {            plugin = check;            break;        }    }    assertNotNull(plugin);    assertEquals("1.0", plugin.getVersion());    Xpp3Dom configuration = (Xpp3Dom) plugin.getConfiguration();    assertEquals("src/conf/plexus.conf", configuration.getChild("plexusConfiguration").getValue());    assertEquals("src/conf/plexus.properties", configuration.getChild("plexusConfigurationPropertiesFile").getValue());    assertEquals("Continuum", configuration.getChild("plexusApplicationName").getValue());                List<PluginExecution> executions = plugin.getExecutions();    PluginExecution execution = executions.get(0);    String g0 = execution.getGoals().get(0);    assertEquals("plexus:runtime", g0);    configuration = (Xpp3Dom) execution.getConfiguration();    assertEquals("ContinuumPro", configuration.getChild("plexusApplicationName").getValue());}
public void maven_f3569_0() throws Exception
{    super.setUp();    projectBuilder = lookup(ProjectBuilder.class);    localRepoDir = new File(System.getProperty("java.io.tmpdir"), "local-repo." + System.currentTimeMillis());    localRepoDir.mkdirs();    filesToDelete.add(localRepoDir);}
public void maven_f3570_0() throws Exception
{    super.tearDown();    if (!filesToDelete.isEmpty()) {        for (File file : filesToDelete) {            if (file.exists()) {                if (file.isDirectory()) {                    FileUtils.deleteDirectory(file);                } else {                    file.delete();                }            }        }    }}
protected MavenProject maven_f3571_0(Artifact pom, boolean allowStub) throws Exception
{    ProjectBuildingRequest configuration = new DefaultProjectBuildingRequest();    configuration.setLocalRepository(getLocalRepository());    initRepoSession(configuration);    return projectBuilder.build(pom, allowStub, configuration).getProject();}
public void maven_f3572_0() throws Exception
{    File f1 = getTestFile("src/test/resources/projects/grandchild-check/child/pom.xml");    File f2 = getTestFile("src/test/resources/projects/grandchild-check/child/grandchild/pom.xml");    getProject(f1);            getProject(f2);}
public void maven_f3573_0() throws Exception
{    File f1 = getTestFile("src/test/resources/projects/duplicate-plugins-merged-pom.xml");    MavenProject project = getProject(f1);    assertEquals(2, project.getBuildPlugins().get(0).getDependencies().size());    assertEquals(2, project.getBuildPlugins().get(0).getExecutions().size());    assertEquals("first", project.getBuildPlugins().get(0).getExecutions().get(0).getId());}
public void maven_f3574_0() throws Exception
{    File f1 = getTestFile("src/test/resources/projects/future-model-version-pom.xml");    try {        getProject(f1);        fail("Expected to fail for future versions");    } catch (ProjectBuildingException e) {        assertContains("Building this project requires a newer version of Maven", e.getMessage());    }}
public void maven_f3575_0() throws Exception
{            File f1 = getTestFile("src/test/resources/projects/past-model-version-pom.xml");    try {        getProject(f1);        fail("Expected to fail for past versions");    } catch (ProjectBuildingException e) {        assertContains("Building this project requires an older version of Maven", e.getMessage());    }}
public void maven_f3576_0() throws Exception
{    File f1 = getTestFile("src/test/resources/projects/future-schema-model-version-pom.xml");    try {        getProject(f1);        fail("Expected to fail for future versions");    } catch (ProjectBuildingException e) {        assertContains("Building this project requires a newer version of Maven", e.getMessage());    }}
private void maven_f3577_0(String expected, String actual)
{    if (actual == null || !actual.contains(expected)) {        fail("Expected: a string containing " + expected + "\nActual: " + (actual == null ? "null" : "'" + actual + "'"));    }}
public void maven_f3578_0() throws Exception
{    Artifact pom = repositorySystem.createProjectArtifact("org.apache.maven.its", "missing", "0.1");    MavenProject project = getProject(pom, true);    assertNotNull(project.getArtifactId());    assertNotNull(project.getRemoteArtifactRepositories());    assertFalse(project.getRemoteArtifactRepositories().isEmpty());    assertNotNull(project.getPluginArtifactRepositories());    assertFalse(project.getPluginArtifactRepositories().isEmpty());    assertNull(project.getParent());    assertNull(project.getParentArtifact());    assertFalse(project.isExecutionRoot());}
protected ArtifactRepository maven_f3579_0() throws Exception
{    ArtifactRepositoryLayout repoLayout = lookup(ArtifactRepositoryLayout.class, "default");    ArtifactRepository r = repositorySystem.createArtifactRepository("local", "file://" + localRepoDir.getAbsolutePath(), repoLayout, null, null);    return r;}
public void maven_f3580_0() throws Exception
{    while (true) {        File f1 = getTestFile("src/test/resources/projects/duplicate-plugins-merged-pom.xml");        getProject(f1);    }}
public void maven_f3581_0() throws Exception
{    File pomFile = getTestFile("src/test/resources/projects/bad-dependency.xml");    try {        ProjectBuildingRequest request = newBuildingRequest();        request.setProcessPlugins(false);        request.setResolveDependencies(true);        projectBuilder.build(pomFile, request);        fail("Project building did not fail despite invalid POM");    } catch (ProjectBuildingException e) {        List<ProjectBuildingResult> results = e.getResults();        assertNotNull(results);        assertEquals(1, results.size());        ProjectBuildingResult result = results.get(0);        assertNotNull(result);        assertNotNull(result.getProject());        assertEquals(1, result.getProblems().size());        assertEquals(1, result.getProject().getArtifacts().size());        assertNotNull(result.getDependencyResolutionResult());    }}
public void maven_f3582_0() throws Exception
{    File pomFile = getTestFile("src/test/resources/projects/import-scope-pom-resolves-from-property-based-repository.xml");    ProjectBuildingRequest request = newBuildingRequest();    request.setProcessPlugins(false);    request.setResolveDependencies(true);    projectBuilder.build(pomFile, request);}
public void maven_f3583_0() throws Exception
{    File f1 = getTestFile("src/test/resources/projects/parent-version-range-local-valid/child/pom.xml");    final MavenProject childProject = getProject(f1);    assertNotNull(childProject.getParentArtifact());    assertEquals(childProject.getParentArtifact().getVersion(), "1");    assertNotNull(childProject.getParent());    assertEquals(childProject.getParent().getVersion(), "1");    assertNotNull(childProject.getModel().getParent());    assertEquals(childProject.getModel().getParent().getVersion(), "[1,10]");}
public void maven_f3584_0() throws Exception
{    File f1 = getTestFile("src/test/resources/projects/parent-version-range-local-child-without-version/child/pom.xml");    try {        getProject(f1);        fail("Expected 'ProjectBuildingException' not thrown.");    } catch (final ProjectBuildingException e) {        assertNotNull(e.getMessage());        assertTrue(e.getMessage().contains("Version must be a constant"));    }}
public void maven_f3585_0() throws Exception
{    File f1 = getTestFile("src/test/resources/projects/parent-version-range-local-child-version-expression/child/pom.xml");    try {        getProject(f1);        fail("Expected 'ProjectBuildingException' not thrown.");    } catch (final ProjectBuildingException e) {        assertNotNull(e.getMessage());        assertTrue(e.getMessage().contains("Version must be a constant"));    }}
public void maven_f3586_0() throws Exception
{    File f1 = getTestFile("src/test/resources/projects/parent-version-range-external-valid/pom.xml");    final MavenProject childProject = this.getProjectFromRemoteRepository(f1);    assertNotNull(childProject.getParentArtifact());    assertEquals(childProject.getParentArtifact().getVersion(), "1");    assertNotNull(childProject.getParent());    assertEquals(childProject.getParent().getVersion(), "1");    assertNotNull(childProject.getModel().getParent());    assertEquals(childProject.getModel().getParent().getVersion(), "[1,1]");}
public void maven_f3587_0() throws Exception
{    File f1 = getTestFile("src/test/resources/projects/parent-version-range-external-child-without-version/pom.xml");    try {        this.getProjectFromRemoteRepository(f1);        fail("Expected 'ProjectBuildingException' not thrown.");    } catch (final ProjectBuildingException e) {        assertNotNull(e.getMessage());        assertTrue(e.getMessage().contains("Version must be a constant"));    }}
public void maven_f3588_0() throws Exception
{    File f1 = getTestFile("src/test/resources/projects/parent-version-range-external-child-version-expression/pom.xml");    try {        this.getProjectFromRemoteRepository(f1);        fail("Expected 'ProjectBuildingException' not thrown.");    } catch (final ProjectBuildingException e) {        assertNotNull(e.getMessage());        assertTrue(e.getMessage().contains("Version must be a constant"));    }}
public MavenExecutionPlan maven_f3589_0(MavenSession session, String... tasks)
{    return new MavenExecutionPlan(null, null);}
public MavenExecutionPlan maven_f3590_0(MavenSession session, boolean setup, String... tasks)
{    return new MavenExecutionPlan(null, null);}
public void maven_f3591_0(MavenSession session)
{}
public Set<Plugin> maven_f3592_0(String packaging)
{    Set<Plugin> plugins;        if ("JAR".equals(packaging)) {        plugins = new LinkedHashSet<>();        plugins.add(newPlugin("maven-compiler-plugin", "compile", "testCompile"));        plugins.add(newPlugin("maven-resources-plugin", "resources", "testResources"));        plugins.add(newPlugin("maven-surefire-plugin", "test"));        plugins.add(newPlugin("maven-jar-plugin", "jar"));        plugins.add(newPlugin("maven-install-plugin", "install"));        plugins.add(newPlugin("maven-deploy-plugin", "deploy"));    } else {        plugins = Collections.emptySet();    }    return plugins;}
private Plugin maven_f3593_0(String artifactId, String... goals)
{    Plugin plugin = new Plugin();    plugin.setGroupId("org.apache.maven.plugins");    plugin.setArtifactId(artifactId);    for (String goal : goals) {        PluginExecution pluginExecution = new PluginExecution();        pluginExecution.setId("default-" + goal);        pluginExecution.addGoal(goal);        plugin.addExecution(pluginExecution);    }    return plugin;}
public void maven_f3594_0(MojoExecution mojoExecution, MavenSession session)
{}
public List<MavenProject> maven_f3595_0(MojoExecution mojoExecution, MavenSession session)
{    return Collections.emptyList();}
public List<ArtifactRepository> maven_f3596_0(List<Repository> pomRepositories, List<ArtifactRepository> externalRepositories, ProjectBuildingRequest request)
{    if (externalRepositories != null) {        return externalRepositories;    } else {        return new ArrayList<>();    }}
public ProjectRealmCache.CacheRecord maven_f3597_0(MavenProject project, Model model, ProjectBuildingRequest request)
{    return new ProjectRealmCache.CacheRecord(null, null);}
public void maven_f3598_0(MavenProject project)
{}
protected void maven_f3599_0() throws Exception
{    super.setUp();    builder = new ExtensionDescriptorBuilder();}
protected void maven_f3600_0() throws Exception
{    builder = null;    super.tearDown();}
private InputStream maven_f3601_0(String xml)
{    try {        return new ByteArrayInputStream(xml.getBytes("UTF-8"));    } catch (UnsupportedEncodingException e) {        throw new IllegalStateException(e);    }}
public void maven_f3602_0() throws Exception
{    String xml = "<extension></extension>";    ExtensionDescriptor ed = builder.build(toStream(xml));    assertNotNull(ed);    assertNotNull(ed.getExportedPackages());    assertTrue(ed.getExportedPackages().isEmpty());    assertNotNull(ed.getExportedArtifacts());    assertTrue(ed.getExportedArtifacts().isEmpty());}
public void maven_f3603_0() throws Exception
{    String xml = "<?xml version='1.0' encoding='UTF-8'?>" + "<extension>" + "<exportedPackages>" + "<exportedPackage>a</exportedPackage>" + "<exportedPackage>b</exportedPackage>" + "<exportedPackage>c</exportedPackage>" + "</exportedPackages>" + "<exportedArtifacts>" + "<exportedArtifact>x</exportedArtifact>" + "<exportedArtifact>y</exportedArtifact>" + "<exportedArtifact> z </exportedArtifact>" + "</exportedArtifacts>" + "</extension>";    ExtensionDescriptor ed = builder.build(toStream(xml));    assertNotNull(ed);    assertEquals(Arrays.asList("a", "b", "c"), ed.getExportedPackages());    assertEquals(Arrays.asList("x", "y", "z"), ed.getExportedArtifacts());}
public MavenProject maven_f3604_0()
{    return mavenProject;}
public File maven_f3605_0()
{    return (pomFile != null) ? pomFile.getParentFile() : null;}
public void maven_f3606_0(String expression, Object value)
{    context.setValue(expression, value);}
public Iterator<?> maven_f3607_0(String expression)
{    return context.iterate(expression);}
public boolean maven_f3608_0(String expression)
{    return context.getValue(expression) != null;}
public Object maven_f3609_0(String expression)
{    try {        return context.getValue(expression);    } catch (JXPathNotFoundException e) {        return null;    }}
public boolean maven_f3610_0(String expression, String value)
{    return context.getValue(expression) != null && context.getValue(expression).equals(value);}
public NodePointer maven_f3611_0()
{    if (position == 0) {        setPosition(1);    }    return (attribute == null) ? null : new Xpp3DomAttributePointer(parent, attribute);}
public int maven_f3612_0()
{    return position;}
public boolean maven_f3613_0(int position)
{    this.position = position;    attribute = (position > 0 && position <= attributes.size()) ? attributes.get(position - 1) : null;    return attribute != null;}
public int maven_f3614_0(NodePointer pointer1, NodePointer pointer2)
{        return 0;}
public Object maven_f3615_0()
{    return attrib.getValue();}
public Object maven_f3616_0()
{    return attrib;}
public Object maven_f3617_0()
{    return attrib;}
public int maven_f3618_0()
{    return 1;}
public QName maven_f3619_0()
{    return new QName(null, attrib.getKey());}
public boolean maven_f3620_0()
{    return true;}
public boolean maven_f3621_0()
{    return false;}
public boolean maven_f3622_0()
{    return true;}
public void maven_f3623_0(Object value)
{    throw new UnsupportedOperationException();}
public NodePointer maven_f3624_0()
{    if (position == 0) {        setPosition(1);    }    return (child == null) ? null : new Xpp3DomNodePointer(parent, child);}
public int maven_f3625_0()
{    return position;}
public boolean maven_f3626_0(int position)
{    this.position = position;    filterChildren(position);    child = (position > 0 && position <= filteredChildren.size()) ? filteredChildren.get(position - 1) : null;    return child != null;}
private void maven_f3627_0(int position)
{    for (; position > filteredChildren.size() && filteredIndex < children.length; filteredIndex++) {        Xpp3Dom child = children[filteredIndex];        if (testNode(child)) {            filteredChildren.add(child);        }    }}
private boolean maven_f3628_0(Xpp3Dom node)
{    if (test == null) {        return true;    }    if (test instanceof NodeNameTest) {        String nodeName = node.getName();        if (StringUtils.isEmpty(nodeName)) {            return false;        }        NodeNameTest nodeNameTest = (NodeNameTest) test;        String namespaceURI = nodeNameTest.getNamespaceURI();        boolean wildcard = nodeNameTest.isWildcard();        String testName = nodeNameTest.getNodeName().getName();        String testPrefix = nodeNameTest.getNodeName().getPrefix();        if (wildcard && testPrefix == null) {            return true;        }        if (wildcard || testName.equals(nodeName)) {            return StringUtils.isEmpty(namespaceURI) || StringUtils.isEmpty(testPrefix);        }        return false;    }    if (test instanceof NodeTypeTest) {        switch(((NodeTypeTest) test).getNodeType()) {            case Compiler.NODE_TYPE_NODE:                return true;            case Compiler.NODE_TYPE_TEXT:                return node.getValue() != null;            default:                return false;        }    }    return false;}
public int maven_f3629_0(NodePointer pointer1, NodePointer pointer2)
{    Xpp3Dom node1 = (Xpp3Dom) pointer1.getBaseValue();    Xpp3Dom node2 = (Xpp3Dom) pointer2.getBaseValue();    if (node1 == node2) {        return 0;    }    for (int i = 0; i < node.getChildCount(); i++) {        Xpp3Dom child = node.getChild(i);        if (child == node1) {            return -1;        }        if (child == node2) {            return 1;        }    }    return 0;}
public Object maven_f3630_0()
{    return getValue(node);}
private static Object maven_f3631_0(Xpp3Dom node)
{    if (node.getValue() != null) {        return node.getValue();    } else {        List<Object> children = new ArrayList<>();        for (int i = 0; i < node.getChildCount(); i++) {            children.add(getValue(node.getChild(i)));        }        return children;    }}
public Object maven_f3632_0()
{    return node;}
public Object maven_f3633_0()
{    return node;}
public int maven_f3634_0()
{    return 1;}
public QName maven_f3635_0()
{    return new QName(null, node.getName());}
public boolean maven_f3636_0()
{    return false;}
public boolean maven_f3637_0()
{    return node.getChildCount() <= 0;}
public void maven_f3638_0(Object value)
{    throw new UnsupportedOperationException();}
public NodeIterator maven_f3639_0(NodeTest test, boolean reverse, NodePointer startWith)
{    return new Xpp3DomNodeIterator(this, test, reverse, startWith);}
public NodeIterator maven_f3640_0(QName qname)
{    return new Xpp3DomAttributeIterator(this, qname);}
public int maven_f3641_0()
{    return 200;}
public NodePointer maven_f3642_0(QName name, Object object, Locale locale)
{    if (object instanceof Xpp3Dom) {        return new Xpp3DomNodePointer((Xpp3Dom) object);    }    return null;}
public NodePointer maven_f3643_0(NodePointer parent, QName name, Object object)
{    if (object instanceof Xpp3Dom) {        return new Xpp3DomNodePointer(parent, (Xpp3Dom) object);    }    return null;}
public LocalRepository maven_f3644_0()
{    return repository;}
public String maven_f3645_0(Artifact artifact)
{    StringBuilder path = new StringBuilder(128);    path.append(artifact.getGroupId()).append('/');    path.append(artifact.getExtension()).append("s/");    path.append(artifact.getArtifactId()).append('-').append(artifact.getVersion());    if (artifact.getClassifier().length() > 0) {        path.append('-').append(artifact.getClassifier());    }    path.append('.').append(artifact.getExtension());    return path.toString();}
public String maven_f3646_0(Artifact artifact, RemoteRepository repository, String context)
{    return getPathForLocalArtifact(artifact);}
public String maven_f3647_0(Metadata metadata)
{    return getPath(metadata, "local");}
public String maven_f3648_0(Metadata metadata, RemoteRepository repository, String context)
{    return getPath(metadata, getRepositoryKey(repository, context));}
 String maven_f3649_0(RemoteRepository repository, String context)
{    return repository.getId();}
private String maven_f3650_0(Metadata metadata, String repositoryKey)
{    StringBuilder path = new StringBuilder(128);    if (metadata.getGroupId().length() > 0) {        path.append(metadata.getGroupId().replace('.', '/')).append('/');        if (metadata.getArtifactId().length() > 0) {            path.append(metadata.getArtifactId()).append('/');            if (metadata.getVersion().length() > 0) {                path.append(metadata.getVersion()).append('/');            }        }    }    path.append(insertRepositoryKey(metadata.getType(), repositoryKey));    return path.toString();}
private String maven_f3651_0(String filename, String repositoryKey)
{    String result;    int idx = filename.indexOf('.');    if (idx < 0) {        result = filename + '-' + repositoryKey;    } else {        result = filename.substring(0, idx) + '-' + repositoryKey + filename.substring(idx);    }    return result;}
public LocalArtifactResult maven_f3652_0(RepositorySystemSession session, LocalArtifactRequest request)
{    String path = getPathForLocalArtifact(request.getArtifact());    File file = new File(getRepository().getBasedir(), path);    LocalArtifactResult result = new LocalArtifactResult(request);    if (file.isFile()) {        result.setFile(file);        result.setAvailable(true);    }    return result;}
public void maven_f3653_0(RepositorySystemSession session, LocalArtifactRegistration request)
{}
public LocalMetadataResult maven_f3654_0(RepositorySystemSession session, LocalMetadataRequest request)
{    LocalMetadataResult result = new LocalMetadataResult(request);    String path;    Metadata metadata = request.getMetadata();    String context = request.getContext();    RemoteRepository remote = request.getRepository();    if (remote != null) {        path = getPathForRemoteMetadata(metadata, remote, context);    } else {        path = getPathForLocalMetadata(metadata);    }    File file = new File(getRepository().getBasedir(), path);    if (file.isFile()) {        result.setFile(file);    }    return result;}
public void maven_f3655_0(RepositorySystemSession session, LocalMetadataRegistration request)
{}
public String maven_f3656_0()
{    return String.valueOf(getRepository());}
public void maven_f3657_0() throws IOException
{    Model parentModel = new Model();    parentModel.addModule("../child");    MavenProject parentProject = new MavenProject(parentModel);    Model childModel = new Model();    childModel.setArtifactId("artifact");    MavenProject childProject = new MavenProject(childModel);    File childFile = new File(System.getProperty("java.io.tmpdir"), "maven-project-tests" + System.currentTimeMillis() + "/child/pom.xml");    childProject.setFile(childFile);    String adjustment = parentProject.getModulePathAdjustment(childProject);    assertNotNull(adjustment);    assertEquals("..", adjustment);}
public void maven_f3658_0()
{    Parent parent = new Parent();    parent.setGroupId("test-group");    parent.setVersion("1000");    parent.setArtifactId("test-artifact");    Model model = new Model();    model.setParent(parent);    model.setArtifactId("real-artifact");    MavenProject project = new MavenProject(model);    assertEquals("groupId proto-inheritance failed.", "test-group", project.getGroupId());    assertEquals("artifactId is masked.", "real-artifact", project.getArtifactId());    assertEquals("version proto-inheritance failed.", "1000", project.getVersion());        project.getId();}
public void maven_f3659_0()
{    MavenProject project = new MavenProject();    assertEquals(MavenProject.EMPTY_PROJECT_GROUP_ID + ":" + MavenProject.EMPTY_PROJECT_ARTIFACT_ID + ":jar:" + MavenProject.EMPTY_PROJECT_VERSION, project.getId());}
public void maven_f3660_0() throws Exception
{    File f = getFileForClasspathResource("canonical-pom.xml");    MavenProject projectToClone = getProject(f);    MavenProject clonedProject = projectToClone.clone();    assertEquals("maven-core", clonedProject.getArtifactId());    Map<?, ?> clonedMap = clonedProject.getManagedVersionMap();    assertNotNull("ManagedVersionMap not copied", clonedMap);    assertTrue("ManagedVersionMap is not empty", clonedMap.isEmpty());}
public void maven_f3661_0() throws Exception
{    File f = getFileForClasspathResource("dependencyManagement-pom.xml");    MavenProject projectToClone = getProjectWithDependencies(f);    DependencyManagement dep = projectToClone.getDependencyManagement();    assertNotNull("No dependencyManagement", dep);    List<?> list = dep.getDependencies();    assertNotNull("No dependencies", list);    assertTrue("Empty dependency list", !list.isEmpty());    Map<?, ?> map = projectToClone.getManagedVersionMap();    assertNotNull("No ManagedVersionMap", map);    assertTrue("ManagedVersionMap is empty", !map.isEmpty());    MavenProject clonedProject = projectToClone.clone();    assertEquals("maven-core", clonedProject.getArtifactId());    Map<?, ?> clonedMap = clonedProject.getManagedVersionMap();    assertNotNull("ManagedVersionMap not copied", clonedMap);    assertTrue("ManagedVersionMap is empty", !clonedMap.isEmpty());    assertTrue("ManagedVersionMap does not contain test key", clonedMap.containsKey("maven-test:maven-test-b:jar"));}
public void maven_f3662_0() throws IOException
{    Model moduleModel = new Model();    MavenProject module = new MavenProject(moduleModel);    module.setFile(new File("module-dir/pom.xml"));    Model parentModel = new Model();    parentModel.addModule("../module-dir");    MavenProject parent = new MavenProject(parentModel);    parent.setFile(new File("parent-dir/pom.xml"));    String pathAdjustment = parent.getModulePathAdjustment(module);    assertEquals("..", pathAdjustment);}
public void maven_f3663_0() throws Exception
{    File f = getFileForClasspathResource("distributionManagement-pom.xml");    MavenProject projectToClone = getProject(f);    MavenProject clonedProject = projectToClone.clone();    assertNotNull("clonedProject - distributionManagement", clonedProject.getDistributionManagementArtifactRepository());}
public void maven_f3664_0() throws Exception
{    File f = getFileForClasspathResource("withActiveByDefaultProfile-pom.xml");    MavenProject projectToClone = getProject(f);    List<Profile> activeProfilesOrig = projectToClone.getActiveProfiles();    assertEquals("Expecting 1 active profile", 1, activeProfilesOrig.size());    MavenProject clonedProject = projectToClone.clone();    List<Profile> activeProfilesClone = clonedProject.getActiveProfiles();    assertEquals("Expecting 1 active profile", 1, activeProfilesClone.size());    assertNotSame("The list of active profiles should have been cloned too but is same", activeProfilesOrig, activeProfilesClone);}
public void maven_f3665_0() throws Exception
{    File f = getFileForClasspathResource("canonical-pom.xml");    MavenProject projectToClone = getProject(f);    projectToClone.setPomFile(new File(new File(f.getParentFile(), "target"), "flattened.xml"));    MavenProject clonedProject = projectToClone.clone();    assertEquals("POM file is preserved across clone", projectToClone.getFile(), clonedProject.getFile());    assertEquals("Base directory is preserved across clone", projectToClone.getBasedir(), clonedProject.getBasedir());}
public void maven_f3666_0() throws Exception
{    MavenProject p = new MavenProject();    assertNoNulls(p.getCompileClasspathElements());    assertNoNulls(p.getSystemClasspathElements());    assertNoNulls(p.getRuntimeClasspathElements());    assertNoNulls(p.getTestClasspathElements());}
public void maven_f3667_0()
{    MavenProject project = new MavenProject();    File basedir = new File(System.getProperty("java.io.tmpdir"));    project.setFile(new File(basedir, "file"));    project.addCompileSourceRoot(basedir.getAbsolutePath());    project.addCompileSourceRoot(".");    assertEquals(1, project.getCompileSourceRoots().size());}
private void maven_f3668_0(List<String> elements)
{    assertFalse(elements.contains(null));}
protected void maven_f3669_0(ContainerConfiguration containerConfiguration)
{    super.customizeContainerConfiguration(containerConfiguration);    containerConfiguration.setAutoWiring(true);    containerConfiguration.setClassPathScanning(PlexusConstants.SCANNING_INDEX);}
protected void maven_f3670_0() throws Exception
{    testDirectory = new File(getBasedir(), BASE_POM_DIR);    new File(getBasedir(), BASE_MIXIN_DIR);    projectBuilder = (DefaultProjectBuilder) lookup(ProjectBuilder.class);    repositorySystem = lookup(RepositorySystem.class);}
protected void maven_f3671_0() throws Exception
{    projectBuilder = null;    super.tearDown();}
public void maven_f3672_0() throws Exception
{    buildPom("empty-distMng-repo-url");}
public void maven_f3673_0() throws Exception
{    PomTestWrapper pom = buildPom("profile-module", "a");        assertEquals("test-prop", pom.getValue("properties[1]/b"));    assertEquals(4, ((List<?>) pom.getValue("modules")).size());    assertEquals("module-2", pom.getValue("modules[1]"));    assertEquals("module-1", pom.getValue("modules[2]"));    assertEquals("module-3", pom.getValue("modules[3]"));    assertEquals("module-4", pom.getValue("modules[4]"));}
public void maven_f3674_0() throws Exception
{    buildPom("parent-inheritance/sub");}
public void maven_f3675_0() throws Exception
{    PomTestWrapper pom = buildPom("execution-configuration-join");    assertEquals(2, ((List<?>) pom.getValue("build/plugins[1]/executions[1]/configuration[1]/fileset[1]")).size());}
public void maven_f3676_0() throws Exception
{    PomTestWrapper pom = buildPom("plugin-config-properties");    assertEquals("my.property", pom.getValue("build/plugins[1]/configuration[1]/systemProperties[1]/property[1]/name"));}
public void maven_f3677_0() throws Exception
{    PomTestWrapper pom = buildPom("profile-properties-interpolation", "interpolation-profile");    assertEquals("PASSED", pom.getValue("properties[1]/test"));    assertEquals("PASSED", pom.getValue("properties[1]/property"));}
public void maven_f3678_0() throws Exception
{    PomTestWrapper tester = buildPom("micromailer");    assertModelEquals(tester, "child-descriptor", "build/plugins[1]/executions[1]/goals[1]");}
public void maven_f3679_0() throws Exception
{    PomTestWrapper pom = buildPom("duplicate-exclusions-dependency/sub");    assertEquals(1, ((List<?>) pom.getValue("dependencies[1]/exclusions")).size());}
public void maven_f3680_0() throws Exception
{    PomTestWrapper pom = buildPom("multiple-filters");    assertEquals(4, ((List<?>) pom.getValue("build/filters")).size());}
public void maven_f3681_0() throws Exception
{    PomTestWrapper pom = buildPom("unique-dependency-key/deps", true, null);    assertEquals(1, ((List<?>) pom.getValue("dependencies")).size());    assertEquals("0.2", pom.getValue("dependencies[1]/version"));}
public void maven_f3682_0() throws Exception
{    PomTestWrapper pom = buildPom("parent-interpolation/sub");    pom = new PomTestWrapper(pom.getMavenProject().getParent());    assertEquals("1.3.0-SNAPSHOT", pom.getValue("build/plugins[1]/version"));}
public void maven_f3683_0() throws Exception
{    PomTestWrapper pom = buildPom("pluginmanagement-inherited/sub");    assertEquals("1.0-alpha-21", pom.getValue("build/plugins[1]/version"));}
public void maven_f3684_0() throws Exception
{    PomTestWrapper pom = buildPom("plugin-management-dependencies/sub", "test");    assertEquals("1.0-alpha-21", pom.getValue("build/plugins[1]/version"));    assertEquals("1.0", pom.getValue("build/plugins[1]/dependencies[1]/version"));}
public void maven_f3685_0() throws Exception
{    PomTestWrapper pom = buildPom("reporting-interpolation");    assertEquals(createPath(Arrays.asList(System.getProperty("user.dir"), "src", "test", "resources-project-builder", "reporting-interpolation", "target", "site")), pom.getValue("reporting/outputDirectory"));}
public void maven_f3686_0() throws Exception
{    PomTestWrapper pom = buildPom("plugin-order");    assertEquals("plexus-component-metadata", pom.getValue("build/plugins[1]/artifactId"));    assertEquals("maven-surefire-plugin", pom.getValue("build/plugins[2]/artifactId"));}
public void maven_f3687_0() throws Exception
{    PomTestWrapper pom = buildPom("equal-plugin-deps");    assertEquals("maven-it-plugin-a", pom.getValue("build/plugins[1]/artifactId"));    assertEquals(1, ((List<?>) pom.getValue("build/plugins[1]/dependencies")).size());    assertEquals("maven-it-plugin-b", pom.getValue("build/plugins[2]/artifactId"));    assertEquals(1, ((List<?>) pom.getValue("build/plugins[1]/dependencies")).size());}
public void maven_f3688_0() throws Exception
{    PomTestWrapper pom = buildPom("equal-plugin-exec-ids");    assertEquals("maven-it-plugin-a", pom.getValue("build/plugins[1]/artifactId"));    assertEquals(1, ((List<?>) pom.getValue("build/plugins[1]/executions")).size());    assertEquals("maven-it-plugin-b", pom.getValue("build/plugins[2]/artifactId"));    assertEquals(1, ((List<?>) pom.getValue("build/plugins[1]/executions")).size());    assertEquals("maven-it-plugin-a", pom.getValue("reporting/plugins[1]/artifactId"));    assertEquals(1, ((List<?>) pom.getValue("reporting/plugins[1]/reportSets")).size());    assertEquals("maven-it-plugin-b", pom.getValue("reporting/plugins[2]/artifactId"));    assertEquals(1, ((List<?>) pom.getValue("reporting/plugins[1]/reportSets")).size());}
public void maven_f3689_0() throws Exception
{    PomTestWrapper pom = buildPom("execution-configuration");    assertEquals(2, ((List<?>) pom.getValue("build/plugins[1]/executions")).size());    assertEquals("src/main/mdo/nexus.xml", (pom.getValue("build/plugins[1]/executions[1]/configuration[1]/model")));    assertEquals("src/main/mdo/security.xml", (pom.getValue("build/plugins[1]/executions[2]/configuration[1]/model")));}
public void maven_f3690_0() throws Exception
{    PomTestWrapper pom = buildPom("single-configuration-inheritance");    assertEquals(2, ((List<?>) pom.getValue("build/plugins[1]/executions[1]/configuration[1]/rules")).size());    assertEquals("2.0.6", pom.getValue("build/plugins[1]/executions[1]/configuration[1]/rules[1]/requireMavenVersion[1]/version"));    assertEquals("[1.4,)", pom.getValue("build/plugins[1]/executions[1]/configuration[1]/rules[1]/requireJavaVersion[1]/version"));}
public void maven_f3691_0() throws Exception
{    PomTestWrapper pom = buildPom("config-with-plugin-mng");    assertEquals(2, ((List<?>) pom.getValue("build/plugins[1]/executions")).size());    assertEquals("src/main/mdo/security.xml", pom.getValue("build/plugins[1]/executions[2]/configuration[1]/model"));    assertEquals("1.0.8", pom.getValue("build/plugins[1]/executions[1]/configuration[1]/version"));}
public void maven_f3692_0() throws Exception
{    PomTestWrapper pom = buildPom("execution-configuration-subcollections");    assertEquals(2, ((List<?>) pom.getValue("build/plugins[1]/executions[1]/configuration[1]/rules[1]/bannedDependencies")).size());}
public void maven_f3693_0() throws Exception
{    PomTestWrapper pom = buildPom("multiple-repos/sub");    assertEquals(3, ((List<?>) pom.getValue("repositories")).size());}
public void maven_f3694_0() throws Exception
{    PomTestWrapper pom = buildPom("dual-execution-ids/sub");    assertEquals(1, ((List<?>) pom.getValue("build/plugins[1]/executions")).size());}
public void maven_f3695_0() throws Exception
{    buildPom("consecutive_empty_elements");}
public void maven_f3696_0() throws Exception
{    PomTestWrapper pom = buildPom("plugin-exec-goals-order/wo-plugin-mgmt");    assertEquals(5, ((List<?>) pom.getValue("build/plugins[1]/executions[1]/goals")).size());    assertEquals("b", pom.getValue("build/plugins[1]/executions[1]/goals[1]"));    assertEquals("a", pom.getValue("build/plugins[1]/executions[1]/goals[2]"));    assertEquals("d", pom.getValue("build/plugins[1]/executions[1]/goals[3]"));    assertEquals("c", pom.getValue("build/plugins[1]/executions[1]/goals[4]"));    assertEquals("e", pom.getValue("build/plugins[1]/executions[1]/goals[5]"));}
public void maven_f3697_0() throws Exception
{    PomTestWrapper pom = buildPom("plugin-exec-goals-order/w-plugin-mgmt");    assertEquals(5, ((List<?>) pom.getValue("build/plugins[1]/executions[1]/goals")).size());    assertEquals("b", pom.getValue("build/plugins[1]/executions[1]/goals[1]"));    assertEquals("a", pom.getValue("build/plugins[1]/executions[1]/goals[2]"));    assertEquals("d", pom.getValue("build/plugins[1]/executions[1]/goals[3]"));    assertEquals("c", pom.getValue("build/plugins[1]/executions[1]/goals[4]"));    assertEquals("e", pom.getValue("build/plugins[1]/executions[1]/goals[5]"));}
public void maven_f3698_0() throws Exception
{    PomTestWrapper pom = buildPom("plugin-exec-order/wo-plugin-mgmt");    assertEquals(5, ((List<?>) pom.getValue("build/plugins[1]/executions")).size());    assertEquals("b", pom.getValue("build/plugins[1]/executions[1]/id"));    assertEquals("a", pom.getValue("build/plugins[1]/executions[2]/id"));    assertEquals("d", pom.getValue("build/plugins[1]/executions[3]/id"));    assertEquals("c", pom.getValue("build/plugins[1]/executions[4]/id"));    assertEquals("e", pom.getValue("build/plugins[1]/executions[5]/id"));}
public void maven_f3699_0() throws Exception
{    PomTestWrapper pom = buildPom("plugin-exec-order/w-plugin-mgmt");    assertEquals(5, ((List<?>) pom.getValue("build/plugins[1]/executions")).size());    assertEquals("b", pom.getValue("build/plugins[1]/executions[1]/id"));    assertEquals("a", pom.getValue("build/plugins[1]/executions[2]/id"));    assertEquals("d", pom.getValue("build/plugins[1]/executions[3]/id"));    assertEquals("c", pom.getValue("build/plugins[1]/executions[4]/id"));    assertEquals("e", pom.getValue("build/plugins[1]/executions[5]/id"));}
public void maven_f3700_0() throws Exception
{    PomTestWrapper pom = buildPom("plugin-exec-merging-wo-version/sub");    assertEquals(4, ((List<?>) pom.getValue("build/plugins[1]/executions")).size());}
public void maven_f3701_0() throws Exception
{    PomTestWrapper pom = buildPom("plugin-exec-merging-version-insensitive/sub");    assertEquals(4, ((List<?>) pom.getValue("build/plugins[1]/executions")).size());}
public void maven_f3702_0() throws Exception
{    PomTestWrapper pom = buildPom("xml-markup-interpolation");    assertEquals("<?xml version='1.0'?>Tom&Jerry", pom.getValue("properties/xmlTest"));}
public void maven_f3703_0() throws Exception
{    PomTestWrapper pom = buildPom("merged-plugin-exec-order/wo-plugin-mgmt/sub");    assertEquals(5, ((List<?>) pom.getValue("build/plugins[1]/executions")).size());    assertEquals("parent-1", pom.getValue("build/plugins[1]/executions[1]/goals[1]"));    assertEquals("parent-2", pom.getValue("build/plugins[1]/executions[2]/goals[1]"));    assertEquals("child-default", pom.getValue("build/plugins[1]/executions[3]/goals[1]"));    assertEquals("child-1", pom.getValue("build/plugins[1]/executions[4]/goals[1]"));    assertEquals("child-2", pom.getValue("build/plugins[1]/executions[5]/goals[1]"));}
public void maven_f3704_0() throws Exception
{    PomTestWrapper pom = buildPom("merged-plugin-exec-order/w-plugin-mgmt/sub");    assertEquals(5, ((List<?>) pom.getValue("build/plugins[1]/executions")).size());    assertEquals("parent-1", pom.getValue("build/plugins[1]/executions[1]/goals[1]"));    assertEquals("parent-2", pom.getValue("build/plugins[1]/executions[2]/goals[1]"));    assertEquals("child-default", pom.getValue("build/plugins[1]/executions[3]/goals[1]"));    assertEquals("child-1", pom.getValue("build/plugins[1]/executions[4]/goals[1]"));    assertEquals("child-2", pom.getValue("build/plugins[1]/executions[5]/goals[1]"));}
public void maven_f3705_0() throws Exception
{    PomTestWrapper pom = buildPom("join-different-containers-same-id");    assertEquals(1, ((List<?>) pom.getValue("build/plugins[1]/executions[1]/goals")).size());    assertEquals(1, ((List<?>) pom.getValue("build/pluginManagement/plugins[@artifactId='maven-it-plugin-b']/executions[1]/goals")).size());}
public void maven_f3706_0() throws Exception
{    PomTestWrapper pom = buildPom("merged-plugin-exec-goals-order/wo-plugin-mgmt/sub");    assertEquals(5, ((List<?>) pom.getValue("build/plugins[1]/executions[1]/goals")).size());    assertEquals("child-a", pom.getValue("build/plugins[1]/executions[1]/goals[1]"));    assertEquals("merged", pom.getValue("build/plugins[1]/executions[1]/goals[2]"));    assertEquals("child-b", pom.getValue("build/plugins[1]/executions[1]/goals[3]"));    assertEquals("parent-b", pom.getValue("build/plugins[1]/executions[1]/goals[4]"));    assertEquals("parent-a", pom.getValue("build/plugins[1]/executions[1]/goals[5]"));}
public void maven_f3707_0() throws Exception
{    PomTestWrapper pom = buildPom("merged-plugin-exec-goals-order/w-plugin-mgmt/sub");    assertEquals(5, ((List<?>) pom.getValue("build/plugins[1]/executions[1]/goals")).size());    assertEquals("child-a", pom.getValue("build/plugins[1]/executions[1]/goals[1]"));    assertEquals("merged", pom.getValue("build/plugins[1]/executions[1]/goals[2]"));    assertEquals("child-b", pom.getValue("build/plugins[1]/executions[1]/goals[3]"));    assertEquals("parent-b", pom.getValue("build/plugins[1]/executions[1]/goals[4]"));    assertEquals("parent-a", pom.getValue("build/plugins[1]/executions[1]/goals[5]"));}
public void maven_f3708_0() throws Exception
{    PomTestWrapper pom = buildPom("plugin-exec-merging/wo-plugin-mgmt/sub");    assertEquals(2, ((List<?>) pom.getValue("build/plugins[1]/executions")).size());    assertEquals("child-default", pom.getValue("build/plugins[1]/executions[@id='default']/phase"));    assertEquals("child-non-default", pom.getValue("build/plugins[1]/executions[@id='non-default']/phase"));}
public void maven_f3709_0() throws Exception
{    PomTestWrapper pom = buildPom("plugin-exec-merging/w-plugin-mgmt/sub");    assertEquals(2, ((List<?>) pom.getValue("build/plugins[1]/executions")).size());    assertEquals("child-default", pom.getValue("build/plugins[1]/executions[@id='default']/phase"));    assertEquals("child-non-default", pom.getValue("build/plugins[1]/executions[@id='non-default']/phase"));}
public void maven_f3710_0() throws Exception
{    PomTestWrapper pom = buildPom("merged-plugin-class-path-order/wo-plugin-mgmt/sub");    assertEquals(5, ((List<?>) pom.getValue("build/plugins[1]/dependencies")).size());    assertNotNull(pom.getValue("build/plugins[1]/dependencies[1]"));    assertEquals("c", pom.getValue("build/plugins[1]/dependencies[1]/artifactId"));    assertEquals("1", pom.getValue("build/plugins[1]/dependencies[1]/version"));    assertEquals("a", pom.getValue("build/plugins[1]/dependencies[2]/artifactId"));    assertEquals("2", pom.getValue("build/plugins[1]/dependencies[2]/version"));    assertEquals("b", pom.getValue("build/plugins[1]/dependencies[3]/artifactId"));    assertEquals("1", pom.getValue("build/plugins[1]/dependencies[3]/version"));    assertEquals("e", pom.getValue("build/plugins[1]/dependencies[4]/artifactId"));    assertEquals("1", pom.getValue("build/plugins[1]/dependencies[4]/version"));    assertEquals("d", pom.getValue("build/plugins[1]/dependencies[5]/artifactId"));    assertEquals("1", pom.getValue("build/plugins[1]/dependencies[5]/version"));}
public void maven_f3711_0() throws Exception
{    PomTestWrapper pom = buildPom("merged-plugin-class-path-order/w-plugin-mgmt/sub");    assertEquals(5, ((List<?>) pom.getValue("build/plugins[1]/dependencies")).size());    assertEquals("c", pom.getValue("build/plugins[1]/dependencies[1]/artifactId"));    assertEquals("1", pom.getValue("build/plugins[1]/dependencies[1]/version"));    assertEquals("a", pom.getValue("build/plugins[1]/dependencies[2]/artifactId"));    assertEquals("2", pom.getValue("build/plugins[1]/dependencies[2]/version"));    assertEquals("b", pom.getValue("build/plugins[1]/dependencies[3]/artifactId"));    assertEquals("1", pom.getValue("build/plugins[1]/dependencies[3]/version"));    assertEquals("e", pom.getValue("build/plugins[1]/dependencies[4]/artifactId"));    assertEquals("1", pom.getValue("build/plugins[1]/dependencies[4]/version"));    assertEquals("d", pom.getValue("build/plugins[1]/dependencies[5]/artifactId"));    assertEquals("1", pom.getValue("build/plugins[1]/dependencies[5]/version"));}
public void maven_f3712_0() throws Exception
{    PomTestWrapper pom = buildPom("nested-build-dir-interpolation");    assertEquals(new File(pom.getBasedir(), "target/classes/dir0"), new File((String) pom.getValue("properties/dir0")));    assertEquals(new File(pom.getBasedir(), "src/test/dir1"), new File((String) pom.getValue("properties/dir1")));    assertEquals(new File(pom.getBasedir(), "target/site/dir2"), new File((String) pom.getValue("properties/dir2")));}
public void maven_f3713_0() throws Exception
{    PomTestWrapper pom = buildPom("url-inheritance/sub");    assertEquals("http://parent.url/child", pom.getValue("url"));    assertEquals("http://parent.url/org", pom.getValue("organization/url"));    assertEquals("http://parent.url/license.txt", pom.getValue("licenses[1]/url"));    assertEquals("http://parent.url/viewvc/child", pom.getValue("scm/url"));    assertEquals("http://parent.url/scm/child", pom.getValue("scm/connection"));    assertEquals("https://parent.url/scm/child", pom.getValue("scm/developerConnection"));    assertEquals("http://parent.url/issues", pom.getValue("issueManagement/url"));    assertEquals("http://parent.url/ci", pom.getValue("ciManagement/url"));    assertEquals("http://parent.url/dist", pom.getValue("distributionManagement/repository/url"));    assertEquals("http://parent.url/snaps", pom.getValue("distributionManagement/snapshotRepository/url"));    assertEquals("http://parent.url/site/child", pom.getValue("distributionManagement/site/url"));    assertEquals("http://parent.url/download", pom.getValue("distributionManagement/downloadUrl"));}
public void maven_f3714_0() throws Exception
{    PomTestWrapper pom = buildPom("url-inheritance/another-parent/sub");    assertEquals("http://parent.url/ap/child", pom.getValue("url"));    assertEquals("http://parent.url/org", pom.getValue("organization/url"));    assertEquals("http://parent.url/license.txt", pom.getValue("licenses[1]/url"));    assertEquals("http://parent.url/viewvc/ap/child", pom.getValue("scm/url"));    assertEquals("http://parent.url/scm/ap/child", pom.getValue("scm/connection"));    assertEquals("https://parent.url/scm/ap/child", pom.getValue("scm/developerConnection"));    assertEquals("http://parent.url/issues", pom.getValue("issueManagement/url"));    assertEquals("http://parent.url/ci", pom.getValue("ciManagement/url"));    assertEquals("http://parent.url/dist", pom.getValue("distributionManagement/repository/url"));    assertEquals("http://parent.url/snaps", pom.getValue("distributionManagement/snapshotRepository/url"));    assertEquals("http://parent.url/site/ap/child", pom.getValue("distributionManagement/site/url"));    assertEquals("http://parent.url/download", pom.getValue("distributionManagement/downloadUrl"));}
public void maven_f3715_0() throws Exception
{    PomTestWrapper pom = buildPom("limited-inheritance/child");    assertEquals(null, pom.getValue("organization/url"));    assertEquals(null, pom.getValue("issueManagement/system"));    assertEquals(0, ((List<?>) pom.getValue("ciManagement/notifiers")).size());    assertEquals("child-distros", pom.getValue("distributionManagement/repository/id"));    assertEquals("ssh://child.url/distros", pom.getValue("distributionManagement/repository/url"));    assertEquals(null, pom.getValue("distributionManagement/repository/name"));    assertEquals(true, pom.getValue("distributionManagement/repository/uniqueVersion"));    assertEquals("default", pom.getValue("distributionManagement/repository/layout"));    assertEquals("child-snaps", pom.getValue("distributionManagement/snapshotRepository/id"));    assertEquals("ssh://child.url/snaps", pom.getValue("distributionManagement/snapshotRepository/url"));    assertEquals(null, pom.getValue("distributionManagement/snapshotRepository/name"));    assertEquals(true, pom.getValue("distributionManagement/snapshotRepository/uniqueVersion"));    assertEquals("default", pom.getValue("distributionManagement/snapshotRepository/layout"));    assertEquals("child-site", pom.getValue("distributionManagement/site/id"));    assertEquals("scp://child.url/site", pom.getValue("distributionManagement/site/url"));    assertEquals(null, pom.getValue("distributionManagement/site/name"));}
public void maven_f3716_0() throws Exception
{    PomTestWrapper pom = buildPom("xml-coalesce-text");    assertEquals("A  Test  Project Property", pom.getValue("properties/prop0"));    assertEquals("That's a test!", pom.getValue("properties/prop1"));    assertEquals(32 * 1024, pom.getValue("properties/prop2").toString().trim().replaceAll("[\n\r]", "").length());}
public void maven_f3717_0() throws Exception
{    PomTestWrapper pom = buildPom("full-interpolation");    for (int i = 0; i < 24; i++) {        String index = ((i < 10) ? "0" : "") + i;        assertEquals("PASSED", pom.getValue("properties/property" + index));    }}
public void maven_f3718_0() throws Exception
{    PomTestWrapper pom = buildPom("unprefixed-expression-interpolation/child");    assertEquals(pom.getBasedir(), new File(pom.getValue("properties/projectDir").toString()));    assertEquals("org.apache.maven.its.mng3831.child", pom.getValue("properties/projectGroupId"));    assertEquals("child", pom.getValue("properties/projectArtifactId"));    assertEquals("2.0-alpha-1", pom.getValue("properties/projectVersion"));    assertEquals("jar", pom.getValue("properties/projectPackaging"));    assertEquals("child-name", pom.getValue("properties/projectName"));    assertEquals("child-desc", pom.getValue("properties/projectDesc"));    assertEquals("http://child.org/", pom.getValue("properties/projectUrl"));    assertEquals("2008", pom.getValue("properties/projectYear"));    assertEquals("child-org-name", pom.getValue("properties/projectOrgName"));    assertEquals("2.0.0", pom.getValue("properties/projectPrereqMvn"));    assertEquals("http://scm.org/", pom.getValue("properties/projectScmUrl"));    assertEquals("http://issue.org/", pom.getValue("properties/projectIssueUrl"));    assertEquals("http://ci.org/", pom.getValue("properties/projectCiUrl"));    assertEquals("child-dist-repo", pom.getValue("properties/projectDistRepoName"));    assertEquals("http://dist.org/", pom.getValue("properties/projectDistRepoUrl"));    assertEquals("http://site.org/", pom.getValue("properties/projectDistSiteUrl"));    assertEquals("org.apache.maven.its.mng3831", pom.getValue("properties/parentGroupId"));    assertEquals("parent", pom.getValue("properties/parentArtifactId"));    assertEquals("1.0", pom.getValue("properties/parentVersion"));    assertTrue(pom.getValue("properties/projectBuildOut").toString().endsWith("bin"));    assertTrue(pom.getValue("properties/projectSiteOut").toString().endsWith("doc"));}
public void maven_f3719_0() throws Exception
{    PomTestWrapper pom = buildPom("basedir-aligned-interpolation");    assertEquals(new File(pom.getBasedir(), "src/main/java"), new File(pom.getValue("properties/buildMainSrc").toString()));    assertEquals(new File(pom.getBasedir(), "src/test/java"), new File(pom.getValue("properties/buildTestSrc").toString()));    assertEquals(new File(pom.getBasedir(), "src/main/scripts"), new File(pom.getValue("properties/buildScriptSrc").toString()));    assertEquals(new File(pom.getBasedir(), "target"), new File(pom.getValue("properties/buildOut").toString()));    assertEquals(new File(pom.getBasedir(), "target/classes"), new File(pom.getValue("properties/buildMainOut").toString()));    assertEquals(new File(pom.getBasedir(), "target/test-classes"), new File(pom.getValue("properties/buildTestOut").toString()));    assertEquals(new File(pom.getBasedir(), "target/site"), new File(pom.getValue("properties/siteOut").toString()));}
public void maven_f3720_0() throws Exception
{    PomTestWrapper pom = buildPom("basedir-interpolation/pom-with-unusual-name.xml");    assertEquals(pom.getBasedir(), new File(pom.getValue("properties/prop0").toString()));    assertEquals(pom.getBasedir(), new File(pom.getValue("properties/prop1").toString()));}
public void maven_f3721_0() throws Exception
{    PomTestWrapper pom = buildPom("id-container-joining-with-empty-elements/sub");    assertNotNull(pom);}
public void maven_f3722_0() throws Exception
{    PomTestWrapper pom = buildPom("plugin-config-order/wo-plugin-mgmt");    assertEquals("one", pom.getValue("build/plugins[1]/configuration/stringParams/stringParam[1]"));    assertEquals("two", pom.getValue("build/plugins[1]/configuration/stringParams/stringParam[2]"));    assertEquals("three", pom.getValue("build/plugins[1]/configuration/stringParams/stringParam[3]"));    assertEquals("four", pom.getValue("build/plugins[1]/configuration/stringParams/stringParam[4]"));}
public void maven_f3723_0() throws Exception
{    PomTestWrapper pom = buildPom("plugin-config-order/w-plugin-mgmt");    assertEquals("one", pom.getValue("build/plugins[1]/configuration/stringParams/stringParam[1]"));    assertEquals("two", pom.getValue("build/plugins[1]/configuration/stringParams/stringParam[2]"));    assertEquals("three", pom.getValue("build/plugins[1]/configuration/stringParams/stringParam[3]"));    assertEquals("four", pom.getValue("build/plugins[1]/configuration/stringParams/stringParam[4]"));}
public void maven_f3724_0() throws Exception
{    PomTestWrapper pom = buildPom("plugin-exec-config-order/wo-plugin-mgmt");    String prefix = "build/plugins[1]/executions[1]/configuration/";    assertEquals("one", pom.getValue(prefix + "stringParams/stringParam[1]"));    assertEquals("two", pom.getValue(prefix + "stringParams/stringParam[2]"));    assertEquals("three", pom.getValue(prefix + "stringParams/stringParam[3]"));    assertEquals("four", pom.getValue(prefix + "stringParams/stringParam[4]"));    assertEquals("key1", pom.getValue(prefix + "propertiesParam/property[1]/name"));    assertEquals("key2", pom.getValue(prefix + "propertiesParam/property[2]/name"));}
public void maven_f3725_0() throws Exception
{    PomTestWrapper pom = buildPom("plugin-exec-config-order/w-plugin-mgmt");    String prefix = "build/plugins[1]/executions[1]/configuration/";    assertEquals("one", pom.getValue(prefix + "stringParams/stringParam[1]"));    assertEquals("two", pom.getValue(prefix + "stringParams/stringParam[2]"));    assertEquals("three", pom.getValue(prefix + "stringParams/stringParam[3]"));    assertEquals("four", pom.getValue(prefix + "stringParams/stringParam[4]"));    assertEquals("key1", pom.getValue(prefix + "propertiesParam/property[1]/name"));    assertEquals("key2", pom.getValue(prefix + "propertiesParam/property[2]/name"));}
public void maven_f3726_0() throws Exception
{    PomTestWrapper pom = buildPom("plugin-config-merging/child");    String prefix = "build/plugins[1]/configuration/";    assertEquals("PASSED", pom.getValue(prefix + "propertiesFile"));    assertEquals("PASSED", pom.getValue(prefix + "parent"));    assertEquals("PASSED-1", pom.getValue(prefix + "stringParams/stringParam[1]"));    assertEquals("PASSED-3", pom.getValue(prefix + "stringParams/stringParam[2]"));    assertEquals("PASSED-2", pom.getValue(prefix + "stringParams/stringParam[3]"));    assertEquals("PASSED-4", pom.getValue(prefix + "stringParams/stringParam[4]"));    assertEquals("PASSED-1", pom.getValue(prefix + "listParam/listParam[1]"));    assertEquals("PASSED-3", pom.getValue(prefix + "listParam/listParam[2]"));    assertEquals("PASSED-2", pom.getValue(prefix + "listParam/listParam[3]"));    assertEquals("PASSED-4", pom.getValue(prefix + "listParam/listParam[4]"));}
public void maven_f3727_0() throws Exception
{    testAppendOfInheritedPluginConfiguration("no-profile");}
public void maven_f3728_0() throws Exception
{    testAppendOfInheritedPluginConfiguration("with-profile");}
private void maven_f3729_0(String test) throws Exception
{    PomTestWrapper pom = buildPom("plugin-config-append/" + test + "/subproject");    String prefix = "build/plugins[1]/configuration/";    assertEquals("PARENT-1", pom.getValue(prefix + "stringParams/stringParam[1]"));    assertEquals("PARENT-3", pom.getValue(prefix + "stringParams/stringParam[2]"));    assertEquals("PARENT-2", pom.getValue(prefix + "stringParams/stringParam[3]"));    assertEquals("PARENT-4", pom.getValue(prefix + "stringParams/stringParam[4]"));    assertEquals("CHILD-1", pom.getValue(prefix + "stringParams/stringParam[5]"));    assertEquals("CHILD-3", pom.getValue(prefix + "stringParams/stringParam[6]"));    assertEquals("CHILD-2", pom.getValue(prefix + "stringParams/stringParam[7]"));    assertEquals("CHILD-4", pom.getValue(prefix + "stringParams/stringParam[8]"));    assertEquals(null, pom.getValue(prefix + "stringParams/stringParam[9]"));    assertEquals("PARENT-1", pom.getValue(prefix + "listParam/listParam[1]"));    assertEquals("PARENT-3", pom.getValue(prefix + "listParam/listParam[2]"));    assertEquals("PARENT-2", pom.getValue(prefix + "listParam/listParam[3]"));    assertEquals("PARENT-4", pom.getValue(prefix + "listParam/listParam[4]"));    assertEquals("CHILD-1", pom.getValue(prefix + "listParam/listParam[5]"));    assertEquals("CHILD-3", pom.getValue(prefix + "listParam/listParam[6]"));    assertEquals("CHILD-2", pom.getValue(prefix + "listParam/listParam[7]"));    assertEquals("CHILD-4", pom.getValue(prefix + "listParam/listParam[8]"));    assertEquals(null, pom.getValue(prefix + "listParam/listParam[9]"));}
public void maven_f3730_0() throws Exception
{    PomTestWrapper pom = buildPom("plugin-exec-w-and-wo-id/wo-plugin-mgmt");    assertEquals(2, ((List<?>) pom.getValue("build/plugins[1]/executions")).size());    assertEquals("log-string", pom.getValue("build/plugins[1]/executions[1]/goals[1]"));    assertEquals("log-string", pom.getValue("build/plugins[1]/executions[2]/goals[1]"));}
public void maven_f3731_0() throws Exception
{    PomTestWrapper pom = buildPom("plugin-exec-w-and-wo-id/w-plugin-mgmt");    assertEquals(2, ((List<?>) pom.getValue("build/plugins[1]/executions")).size());    assertEquals("log-string", pom.getValue("build/plugins[1]/executions[1]/goals[1]"));    assertEquals("log-string", pom.getValue("build/plugins[1]/executions[2]/goals[1]"));}
public void maven_f3732_0() throws Exception
{    PomTestWrapper pom = buildPom("dependency-order/wo-plugin-mgmt");    assertEquals(4, ((List<?>) pom.getValue("dependencies")).size());    assertEquals("a", pom.getValue("dependencies[1]/artifactId"));    assertEquals("c", pom.getValue("dependencies[2]/artifactId"));    assertEquals("b", pom.getValue("dependencies[3]/artifactId"));    assertEquals("d", pom.getValue("dependencies[4]/artifactId"));}
public void maven_f3733_0() throws Exception
{    PomTestWrapper pom = buildPom("dependency-order/w-plugin-mgmt");    assertEquals(4, ((List<?>) pom.getValue("dependencies")).size());    assertEquals("a", pom.getValue("dependencies[1]/artifactId"));    assertEquals("c", pom.getValue("dependencies[2]/artifactId"));    assertEquals("b", pom.getValue("dependencies[3]/artifactId"));    assertEquals("d", pom.getValue("dependencies[4]/artifactId"));}
public void maven_f3734_0() throws Exception
{    PomTestWrapper pom = buildPom("platform-file-separator");    assertPathWithNormalizedFileSeparators(pom.getValue("build/directory"));    assertPathWithNormalizedFileSeparators(pom.getValue("build/outputDirectory"));    assertPathWithNormalizedFileSeparators(pom.getValue("build/testOutputDirectory"));    assertPathWithNormalizedFileSeparators(pom.getValue("build/sourceDirectory"));    assertPathWithNormalizedFileSeparators(pom.getValue("build/testSourceDirectory"));    assertPathWithNormalizedFileSeparators(pom.getValue("build/resources[1]/directory"));    assertPathWithNormalizedFileSeparators(pom.getValue("build/testResources[1]/directory"));    assertPathWithNormalizedFileSeparators(pom.getValue("build/filters[1]"));    assertPathWithNormalizedFileSeparators(pom.getValue("reporting/outputDirectory"));}
public void maven_f3735_0() throws Exception
{    PomTestWrapper pom = buildPom("merged-filter-order/sub");    assertEquals(7, ((List<?>) pom.getValue("build/filters")).size());    assertTrue(pom.getValue("build/filters[1]").toString().endsWith("child-a.properties"));    assertTrue(pom.getValue("build/filters[2]").toString().endsWith("child-c.properties"));    assertTrue(pom.getValue("build/filters[3]").toString().endsWith("child-b.properties"));    assertTrue(pom.getValue("build/filters[4]").toString().endsWith("child-d.properties"));    assertTrue(pom.getValue("build/filters[5]").toString().endsWith("parent-c.properties"));    assertTrue(pom.getValue("build/filters[6]").toString().endsWith("parent-b.properties"));    assertTrue(pom.getValue("build/filters[7]").toString().endsWith("parent-d.properties"));}
public void maven_f3736_0() throws Exception
{    PomTestWrapper pom = buildPom("profile-injected-dependencies");    assertEquals(4, ((List<?>) pom.getValue("dependencies")).size());    assertEquals("a", pom.getValue("dependencies[1]/artifactId"));    assertEquals("c", pom.getValue("dependencies[2]/artifactId"));    assertEquals("b", pom.getValue("dependencies[3]/artifactId"));    assertEquals("d", pom.getValue("dependencies[4]/artifactId"));}
public void maven_f3737_0() throws Exception
{    PomTestWrapper pom = buildPom("profile-dependencies-multiple-profiles", "profile-1", "profile-2");    assertEquals(2, ((List<?>) pom.getValue("dependencies")).size());}
public void maven_f3738_0() throws Exception
{    PomTestWrapper pom = buildPom("dependency-inheritance/sub");    assertEquals(1, ((List<?>) pom.getValue("dependencies")).size());    assertEquals("4.4", pom.getValue("dependencies[1]/version"));}
public void maven_f3739_0() throws Exception
{    PomTestWrapper pom = this.buildPom("managed-profile-dependency/sub", "maven-core-it");    assertEquals(1, ((List<?>) pom.getValue("dependencies")).size());    assertEquals("org.apache.maven.its", pom.getValue("dependencies[1]/groupId"));    assertEquals("maven-core-it-support", pom.getValue("dependencies[1]/artifactId"));    assertEquals("1.3", pom.getValue("dependencies[1]/version"));    assertEquals("runtime", pom.getValue("dependencies[1]/scope"));    assertEquals(1, ((List<?>) pom.getValue("dependencies[1]/exclusions")).size());    assertEquals("commons-lang", pom.getValue("dependencies[1]/exclusions[1]/groupId"));}
public void maven_f3740_0() throws Exception
{    PomTestWrapper pom = this.buildPom("profile-module-inheritance/sub", "dist");    assertEquals(0, ((List<?>) pom.getValue("modules")).size());}
public void maven_f3741_0() throws Exception
{    PomTestWrapper pom = this.buildPom("unc-path/sub");    assertEquals("file:////host/site/test-child", pom.getValue("distributionManagement/site/url"));}
public void maven_f3742_0() throws Exception
{    PomTestWrapper pom = this.buildPom("url-append/child");    assertEquals("http://project.url/child", pom.getValue("url"));    assertEquals("http://viewvc.project.url/child", pom.getValue("scm/url"));    assertEquals("http://scm.project.url/child", pom.getValue("scm/connection"));    assertEquals("https://scm.project.url/child", pom.getValue("scm/developerConnection"));    assertEquals("http://site.project.url/child", pom.getValue("distributionManagement/site/url"));}
public void maven_f3743_0() throws Exception
{    PomTestWrapper pom = this.buildPom("repo-inheritance");    assertEquals(1, ((List<?>) pom.getValue("repositories")).size());    assertEquals("it0043", pom.getValue("repositories[1]/name"));}
public void maven_f3744_0() throws Exception
{    PomTestWrapper pom = this.buildPom("empty-scm");    assertNull(pom.getValue("scm"));}
public void maven_f3745_0() throws Exception
{    PomTestWrapper pom = buildPom("plugin-config-attributes/wo-plugin-mgmt");    assertEquals("src", pom.getValue("build/plugins[1]/configuration/domParam/copy/@todir"));    assertEquals("true", pom.getValue("build/plugins[1]/configuration/domParam/copy/@overwrite"));    assertEquals("target", pom.getValue("build/plugins[1]/configuration/domParam/copy/fileset/@dir"));    assertEquals(null, pom.getValue("build/plugins[1]/configuration/domParam/copy/fileset/@todir"));    assertEquals(null, pom.getValue("build/plugins[1]/configuration/domParam/copy/fileset/@overwrite"));}
public void maven_f3746_0() throws Exception
{    PomTestWrapper pom = buildPom("plugin-config-attributes/w-plugin-mgmt");    assertEquals("src", pom.getValue("build/plugins[1]/configuration/domParam/copy/@todir"));    assertEquals("true", pom.getValue("build/plugins[1]/configuration/domParam/copy/@overwrite"));    assertEquals("target", pom.getValue("build/plugins[1]/configuration/domParam/copy/fileset/@dir"));    assertEquals(null, pom.getValue("build/plugins[1]/configuration/domParam/copy/fileset/@todir"));    assertEquals(null, pom.getValue("build/plugins[1]/configuration/domParam/copy/fileset/@overwrite"));}
public void maven_f3747_0() throws Exception
{    PomTestWrapper pom = buildPom("plugin-config-attributes/w-profile", "maven-core-it");    assertEquals("src", pom.getValue("build/plugins[1]/configuration/domParam/copy/@todir"));    assertEquals("true", pom.getValue("build/plugins[1]/configuration/domParam/copy/@overwrite"));    assertEquals("target", pom.getValue("build/plugins[1]/configuration/domParam/copy/fileset/@dir"));    assertEquals(null, pom.getValue("build/plugins[1]/configuration/domParam/copy/fileset/@todir"));    assertEquals(null, pom.getValue("build/plugins[1]/configuration/domParam/copy/fileset/@overwrite"));}
public void maven_f3748_0() throws Exception
{    PomTestWrapper pom = buildPom("pom-encoding/utf-8");    assertEquals("TEST-CHARS: \u00DF\u0131\u03A3\u042F\u05D0\u20AC", pom.getValue("description"));    pom = buildPom("pom-encoding/latin-1");    assertEquals("TEST-CHARS: \u00C4\u00D6\u00DC\u00E4\u00F6\u00FC\u00DF", pom.getValue("description"));}
public void maven_f3749_0() throws Exception
{    PomTestWrapper pom = buildPom("xml-whitespace/sub");    assertEquals("org.apache.maven.its.mng4070", pom.getValue("groupId"));}
public void maven_f3750_0() throws Exception
{    PomTestWrapper pom = buildPom("baseuri-interpolation/pom.xml");    assertNotEquals(pom.getBasedir().toURI().toString(), pom.getValue("properties/prop1").toString());}
public void maven_f3751_0() throws Exception
{    PomTestWrapper pom = buildPom("baseuri-interpolation/pom.xml");    String prop1 = pom.getValue("properties/prop1").toString();    assertEquals(pom.getBasedir().toPath().toUri().toASCIIString(), prop1);    assertTrue(prop1.startsWith("file:///"));}
public void maven_f3752_0() throws Exception
{    PomTestWrapper pom = buildPom("reporting-plugin-config/sub");    assertEquals(3, ((List<?>) pom.getValue("reporting/plugins[1]/configuration/stringParams")).size());    assertEquals("parentParam", pom.getValue("reporting/plugins[1]/configuration/stringParams[1]/stringParam[1]"));    assertEquals("childParam", pom.getValue("reporting/plugins[1]/configuration/stringParams[1]/stringParam[2]"));    assertEquals("  preserve space  ", pom.getValue("reporting/plugins[1]/configuration/stringParams[1]/stringParam[3]"));    assertEquals("true", pom.getValue("reporting/plugins[1]/configuration/booleanParam"));}
public void maven_f3753_0() throws Exception
{    PomTestWrapper pom = buildPom("properties-no-duplication/sub");    assertEquals(1, ((Properties) pom.getValue("properties")).size());    assertEquals("child", pom.getValue("properties/pomProfile"));}
public void maven_f3754_0() throws Exception
{    PomTestWrapper pom = buildPom("pom-inheritance/sub");    assertEquals("parent-description", pom.getValue("description"));    assertEquals("jar", pom.getValue("packaging"));}
public void maven_f3755_0() throws Exception
{    PomTestWrapper pom = buildPom("complete-model/wo-parent");    testCompleteModel(pom);}
public void maven_f3756_0() throws Exception
{    PomTestWrapper pom = buildPom("complete-model/w-parent/sub");    testCompleteModel(pom);}
private void maven_f3757_0(PomTestWrapper pom) throws Exception
{    assertEquals("4.0.0", pom.getValue("modelVersion"));    assertEquals("org.apache.maven.its.mng", pom.getValue("groupId"));    assertEquals("test", pom.getValue("artifactId"));    assertEquals("0.2", pom.getValue("version"));    assertEquals("pom", pom.getValue("packaging"));    assertEquals("project-name", pom.getValue("name"));    assertEquals("project-description", pom.getValue("description"));    assertEquals("http://project.url/", pom.getValue("url"));    assertEquals("2009", pom.getValue("inceptionYear"));    assertEquals("project-org", pom.getValue("organization/name"));    assertEquals("http://project-org.url/", pom.getValue("organization/url"));    assertEquals(1, ((List<?>) pom.getValue("licenses")).size());    assertEquals("project-license", pom.getValue("licenses[1]/name"));    assertEquals("http://project.url/license", pom.getValue("licenses[1]/url"));    assertEquals("repo", pom.getValue("licenses[1]/distribution"));    assertEquals("free", pom.getValue("licenses[1]/comments"));    assertEquals(1, ((List<?>) pom.getValue("developers")).size());    assertEquals("dev", pom.getValue("developers[1]/id"));    assertEquals("project-developer", pom.getValue("developers[1]/name"));    assertEquals("developer@", pom.getValue("developers[1]/email"));    assertEquals("http://developer", pom.getValue("developers[1]/url"));    assertEquals("developer", pom.getValue("developers[1]/organization"));    assertEquals("http://devel.org", pom.getValue("developers[1]/organizationUrl"));    assertEquals("-1", pom.getValue("developers[1]/timezone"));    assertEquals("yes", pom.getValue("developers[1]/properties/developer"));    assertEquals(1, ((List<?>) pom.getValue("developers[1]/roles")).size());    assertEquals("devel", pom.getValue("developers[1]/roles[1]"));    assertEquals(1, ((List<?>) pom.getValue("contributors")).size());    assertEquals("project-contributor", pom.getValue("contributors[1]/name"));    assertEquals("contributor@", pom.getValue("contributors[1]/email"));    assertEquals("http://contributor", pom.getValue("contributors[1]/url"));    assertEquals("contributor", pom.getValue("contributors[1]/organization"));    assertEquals("http://contrib.org", pom.getValue("contributors[1]/organizationUrl"));    assertEquals("+1", pom.getValue("contributors[1]/timezone"));    assertEquals("yes", pom.getValue("contributors[1]/properties/contributor"));    assertEquals(1, ((List<?>) pom.getValue("contributors[1]/roles")).size());    assertEquals("contrib", pom.getValue("contributors[1]/roles[1]"));    assertEquals(1, ((List<?>) pom.getValue("mailingLists")).size());    assertEquals("project-mailing-list", pom.getValue("mailingLists[1]/name"));    assertEquals("subscribe@", pom.getValue("mailingLists[1]/subscribe"));    assertEquals("unsubscribe@", pom.getValue("mailingLists[1]/unsubscribe"));    assertEquals("post@", pom.getValue("mailingLists[1]/post"));    assertEquals("mail-archive", pom.getValue("mailingLists[1]/archive"));    assertEquals(1, ((List<?>) pom.getValue("mailingLists[1]/otherArchives")).size());    assertEquals("other-archive", pom.getValue("mailingLists[1]/otherArchives[1]"));    assertEquals("2.0.1", pom.getValue("prerequisites/maven"));    assertEquals("http://project.url/trunk", pom.getValue("scm/url"));    assertEquals("http://project.url/scm", pom.getValue("scm/connection"));    assertEquals("https://project.url/scm", pom.getValue("scm/developerConnection"));    assertEquals("TAG", pom.getValue("scm/tag"));    assertEquals("issues", pom.getValue("issueManagement/system"));    assertEquals("http://project.url/issues", pom.getValue("issueManagement/url"));    assertEquals("ci", pom.getValue("ciManagement/system"));    assertEquals("http://project.url/ci", pom.getValue("ciManagement/url"));    assertEquals(1, ((List<?>) pom.getValue("ciManagement/notifiers")).size());    assertEquals("irc", pom.getValue("ciManagement/notifiers[1]/type"));    assertEquals("ci@", pom.getValue("ciManagement/notifiers[1]/address"));    assertEquals(Boolean.TRUE, pom.getValue("ciManagement/notifiers[1]/sendOnError"));    assertEquals(Boolean.FALSE, pom.getValue("ciManagement/notifiers[1]/sendOnFailure"));    assertEquals(Boolean.FALSE, pom.getValue("ciManagement/notifiers[1]/sendOnWarning"));    assertEquals(Boolean.FALSE, pom.getValue("ciManagement/notifiers[1]/sendOnSuccess"));    assertEquals("ci", pom.getValue("ciManagement/notifiers[1]/configuration/ciProp"));    assertEquals("project.distros", pom.getValue("distributionManagement/repository/id"));    assertEquals("distros", pom.getValue("distributionManagement/repository/name"));    assertEquals("http://project.url/dist", pom.getValue("distributionManagement/repository/url"));    assertEquals(Boolean.TRUE, pom.getValue("distributionManagement/repository/uniqueVersion"));    assertEquals("project.snaps", pom.getValue("distributionManagement/snapshotRepository/id"));    assertEquals("snaps", pom.getValue("distributionManagement/snapshotRepository/name"));    assertEquals("http://project.url/snaps", pom.getValue("distributionManagement/snapshotRepository/url"));    assertEquals(Boolean.FALSE, pom.getValue("distributionManagement/snapshotRepository/uniqueVersion"));    assertEquals("project.site", pom.getValue("distributionManagement/site/id"));    assertEquals("docs", pom.getValue("distributionManagement/site/name"));    assertEquals("http://project.url/site", pom.getValue("distributionManagement/site/url"));    assertEquals("http://project.url/download", pom.getValue("distributionManagement/downloadUrl"));    assertEquals("reloc-gid", pom.getValue("distributionManagement/relocation/groupId"));    assertEquals("reloc-aid", pom.getValue("distributionManagement/relocation/artifactId"));    assertEquals("reloc-version", pom.getValue("distributionManagement/relocation/version"));    assertEquals("project-reloc-msg", pom.getValue("distributionManagement/relocation/message"));    assertEquals(1, ((List<?>) pom.getValue("modules")).size());    assertEquals("sub", pom.getValue("modules[1]"));    assertEquals(1, ((Map<?, ?>) pom.getValue("properties")).size());    assertEquals("project-property", pom.getValue("properties[1]/itProperty"));    assertEquals(1, ((List<?>) pom.getValue("dependencyManagement/dependencies")).size());    assertEquals("org.apache.maven.its", pom.getValue("dependencyManagement/dependencies[1]/groupId"));    assertEquals("managed-dep", pom.getValue("dependencyManagement/dependencies[1]/artifactId"));    assertEquals("0.1", pom.getValue("dependencyManagement/dependencies[1]/version"));    assertEquals("war", pom.getValue("dependencyManagement/dependencies[1]/type"));    assertEquals("runtime", pom.getValue("dependencyManagement/dependencies[1]/scope"));    assertEquals(Boolean.FALSE, pom.getValue("dependencyManagement/dependencies[1]/optional"));    assertEquals(1, ((List<?>) pom.getValue("dependencyManagement/dependencies[1]/exclusions")).size());    assertEquals("org.apache.maven.its", pom.getValue("dependencyManagement/dependencies[1]/exclusions[1]/groupId"));    assertEquals("excluded-managed-dep", pom.getValue("dependencyManagement/dependencies[1]/exclusions[1]/artifactId"));    assertEquals(1, ((List<?>) pom.getValue("dependencies")).size());    assertEquals("org.apache.maven.its", pom.getValue("dependencies[1]/groupId"));    assertEquals("dep", pom.getValue("dependencies[1]/artifactId"));    assertEquals("0.2", pom.getValue("dependencies[1]/version"));    assertEquals("ejb", pom.getValue("dependencies[1]/type"));    assertEquals("test", pom.getValue("dependencies[1]/scope"));    assertEquals(Boolean.TRUE, pom.getValue("dependencies[1]/optional"));    assertEquals(1, ((List<?>) pom.getValue("dependencies[1]/exclusions")).size());    assertEquals("org.apache.maven.its", pom.getValue("dependencies[1]/exclusions[1]/groupId"));    assertEquals("excluded-dep", pom.getValue("dependencies[1]/exclusions[1]/artifactId"));    assertEquals(2, ((List<?>) pom.getValue("repositories")).size());    assertEquals("project-remote-repo", pom.getValue("repositories[1]/id"));    assertEquals("http://project.url/remote", pom.getValue("repositories[1]/url"));    assertEquals("repo", pom.getValue("repositories[1]/name"));    assertEquals(RepositorySystem.DEFAULT_REMOTE_REPO_ID, pom.getValue("repositories[2]/id"));    assertEquals(RepositorySystem.DEFAULT_REMOTE_REPO_URL, pom.getValue("repositories[2]/url"));    assertEquals("test", pom.getValue("build/defaultGoal"));    assertEquals("coreit", pom.getValue("build/finalName"));    assertPathSuffixEquals("build", pom.getValue("build/directory"));    assertPathSuffixEquals("build/main", pom.getValue("build/outputDirectory"));    assertPathSuffixEquals("build/test", pom.getValue("build/testOutputDirectory"));    assertPathSuffixEquals("sources/main", pom.getValue("build/sourceDirectory"));    assertPathSuffixEquals("sources/test", pom.getValue("build/testSourceDirectory"));    assertPathSuffixEquals("sources/scripts", pom.getValue("build/scriptSourceDirectory"));    assertEquals(1, ((List<?>) pom.getValue("build/filters")).size());    assertPathSuffixEquals("src/main/filter/it.properties", pom.getValue("build/filters[1]"));    assertEquals(1, ((List<?>) pom.getValue("build/resources")).size());    assertPathSuffixEquals("res/main", pom.getValue("build/resources[1]/directory"));    assertPathSuffixEquals("main", pom.getValue("build/resources[1]/targetPath"));    assertEquals(Boolean.TRUE, pom.getValue("build/resources[1]/filtering"));    assertEquals(1, ((List<?>) pom.getValue("build/resources[1]/includes")).size());    assertPathSuffixEquals("main.included", pom.getValue("build/resources[1]/includes[1]"));    assertEquals(1, ((List<?>) pom.getValue("build/resources[1]/excludes")).size());    assertPathSuffixEquals("main.excluded", pom.getValue("build/resources[1]/excludes[1]"));    assertEquals(1, ((List<?>) pom.getValue("build/testResources")).size());    assertPathSuffixEquals("res/test", pom.getValue("build/testResources[1]/directory"));    assertPathSuffixEquals("test", pom.getValue("build/testResources[1]/targetPath"));    assertEquals(Boolean.TRUE, pom.getValue("build/testResources[1]/filtering"));    assertEquals(1, ((List<?>) pom.getValue("build/testResources[1]/includes")).size());    assertPathSuffixEquals("test.included", pom.getValue("build/testResources[1]/includes[1]"));    assertEquals(1, ((List<?>) pom.getValue("build/testResources[1]/excludes")).size());    assertPathSuffixEquals("test.excluded", pom.getValue("build/testResources[1]/excludes[1]"));    assertEquals(1, ((List<?>) pom.getValue("build/extensions")).size());    assertEquals("org.apache.maven.its.ext", pom.getValue("build/extensions[1]/groupId"));    assertEquals("ext", pom.getValue("build/extensions[1]/artifactId"));    assertEquals("3.0", pom.getValue("build/extensions[1]/version"));    assertEquals(1, ((List<?>) pom.getValue("build/plugins")).size());    assertEquals("org.apache.maven.its.plugins", pom.getValue("build/plugins[1]/groupId"));    assertEquals("maven-it-plugin-build", pom.getValue("build/plugins[1]/artifactId"));    assertEquals("2.1-SNAPSHOT", pom.getValue("build/plugins[1]/version"));    assertEquals("test.properties", pom.getValue("build/plugins[1]/configuration/outputFile"));    assertEquals(1, ((List<?>) pom.getValue("build/plugins[1]/executions")).size());    assertEquals("test", pom.getValue("build/plugins[1]/executions[1]/id"));    assertEquals("validate", pom.getValue("build/plugins[1]/executions[1]/phase"));    assertEquals("pom.properties", pom.getValue("build/plugins[1]/executions[1]/configuration/outputFile"));    assertEquals(1, ((List<?>) pom.getValue("build/plugins[1]/executions[1]/goals")).size());    assertEquals("eval", pom.getValue("build/plugins[1]/executions[1]/goals[1]"));    assertEquals(1, ((List<?>) pom.getValue("build/plugins[1]/dependencies")).size());    assertEquals("org.apache.maven.its", pom.getValue("build/plugins[1]/dependencies[1]/groupId"));    assertEquals("build-plugin-dep", pom.getValue("build/plugins[1]/dependencies[1]/artifactId"));    assertEquals("0.3", pom.getValue("build/plugins[1]/dependencies[1]/version"));    assertEquals("zip", pom.getValue("build/plugins[1]/dependencies[1]/type"));    assertEquals(1, ((List<?>) pom.getValue("build/plugins[1]/dependencies[1]/exclusions")).size());    assertEquals("org.apache.maven.its", pom.getValue("build/plugins[1]/dependencies[1]/exclusions[1]/groupId"));    assertEquals("excluded-build-plugin-dep", pom.getValue("build/plugins[1]/dependencies[1]/exclusions[1]/artifactId"));    assertEquals(Boolean.TRUE, pom.getValue("reporting/excludeDefaults"));    assertPathSuffixEquals("docs", pom.getValue("reporting/outputDirectory"));    assertEquals(1, ((List<?>) pom.getValue("reporting/plugins")).size());    assertEquals("org.apache.maven.its.plugins", pom.getValue("reporting/plugins[1]/groupId"));    assertEquals("maven-it-plugin-reporting", pom.getValue("reporting/plugins[1]/artifactId"));    assertEquals("2.0-SNAPSHOT", pom.getValue("reporting/plugins[1]/version"));    assertEquals("test.html", pom.getValue("reporting/plugins[1]/configuration/outputFile"));    assertEquals(1, ((List<?>) pom.getValue("reporting/plugins[1]/reportSets")).size());    assertEquals("it", pom.getValue("reporting/plugins[1]/reportSets[1]/id"));    assertEquals("index.html", pom.getValue("reporting/plugins[1]/reportSets[1]/configuration/outputFile"));    assertEquals(1, ((List<?>) pom.getValue("reporting/plugins[1]/reportSets[1]/reports")).size());    assertEquals("run", pom.getValue("reporting/plugins[1]/reportSets[1]/reports[1]"));}
public void maven_f3758_0() throws Exception
{    PomTestWrapper pom = buildPom("profile-injection-order", "pom-a", "pom-b", "pom-e", "pom-c", "pom-d");    assertEquals("e", pom.getValue("properties[1]/pomProperty"));}
public void maven_f3759_0() throws Exception
{    PomTestWrapper pom = buildPom("properties-inheritance/sub");    assertEquals("parent-property", pom.getValue("properties/parentProperty"));    assertEquals("child-property", pom.getValue("properties/childProperty"));    assertEquals("child-override", pom.getValue("properties/overriddenProperty"));}
public void maven_f3760_0() throws Exception
{    PomTestWrapper pom = buildPom("inherited-properties-interpolation/no-profile/sub");    assertEquals("CHILD", pom.getValue("properties/overridden"));    assertEquals("CHILD", pom.getValue("properties/interpolated"));}
public void maven_f3761_0() throws Exception
{    PomTestWrapper pom = buildPom("inherited-properties-interpolation/active-profile/sub");    assertEquals(1, pom.getMavenProject().getModel().getProfiles().size());    buildPom("inherited-properties-interpolation/active-profile/sub", "it-parent", "it-child");    assertEquals("CHILD", pom.getValue("properties/overridden"));    assertEquals("CHILD", pom.getValue("properties/interpolated"));}
public void maven_f3762_0() throws Exception
{    PomTestWrapper pom = buildPom("profile-default-deactivation", "profile4");    assertEquals(1, pom.getMavenProject().getActiveProfiles().size());    assertEquals(1, ((List<?>) pom.getValue("build/plugins")).size());    assertEquals("2.1", pom.getValue("build/plugins[1]/version"));}
public void maven_f3763_0() throws Exception
{    PomTestWrapper pom = buildPom("boolean-interpolation");    assertTrue((Boolean) pom.getValue("repositories[1]/releases/enabled"));    assertTrue((Boolean) pom.getValue("build/resources[1]/filtering"));}
public void maven_f3764_0() throws Exception
{    PomTestWrapper pom = buildPom("build-extension-inheritance/sub");    assertEquals(3, ((List<?>) pom.getValue("build/extensions")).size());    assertEquals("b", pom.getValue("build/extensions[1]/artifactId"));    assertEquals("a", pom.getValue("build/extensions[2]/artifactId"));    assertEquals("0.2", pom.getValue("build/extensions[2]/version"));    assertEquals("c", pom.getValue("build/extensions[3]/artifactId"));}
public void maven_f3765_0() throws Exception
{    Properties props = new Properties();    props.put("java.version", "1.5.0_15");    PomTestWrapper pom = buildPom("jdk-activation", props);    assertEquals(3, pom.getMavenProject().getActiveProfiles().size());    assertEquals("PASSED", pom.getValue("properties/jdkProperty3"));    assertEquals("PASSED", pom.getValue("properties/jdkProperty2"));    assertEquals("PASSED", pom.getValue("properties/jdkProperty1"));}
public void maven_f3766_0() throws Exception
{    PomTestWrapper pom = buildPom("profile-plugin-mng-dependencies/sub", "maven-core-it");    assertEquals("a", pom.getValue("build/plugins[1]/dependencies[1]/artifactId"));}
public void maven_f3767_0() throws Exception
{    PomTestWrapper pom = this.buildPom("url-no-decoding");    assertEquals("http://maven.apache.org/spacy%20path", pom.getValue("url"));    assertEquals("http://svn.apache.org/viewvc/spacy%20path", pom.getValue("scm/url"));    assertEquals("scm:svn:svn+ssh://svn.apache.org/spacy%20path", pom.getValue("scm/connection"));    assertEquals("scm:svn:svn+ssh://svn.apache.org/spacy%20path", pom.getValue("scm/developerConnection"));    assertEquals("http://issues.apache.org/spacy%20path", pom.getValue("issueManagement/url"));    assertEquals("http://ci.apache.org/spacy%20path", pom.getValue("ciManagement/url"));    assertEquals("scm:svn:svn+ssh://dist.apache.org/spacy%20path", pom.getValue("distributionManagement/repository/url"));    assertEquals("scm:svn:svn+ssh://snap.apache.org/spacy%20path", pom.getValue("distributionManagement/snapshotRepository/url"));    assertEquals("scm:svn:svn+ssh://site.apache.org/spacy%20path", pom.getValue("distributionManagement/site/url"));}
public void maven_f3768_0() throws Exception
{    PomTestWrapper pom = this.buildPom("plugin-management-inheritance");    assertEquals("0.1-stub-SNAPSHOT", pom.getValue("build/pluginManagement/plugins[@artifactId='maven-compiler-plugin']/version"));}
public void maven_f3769_0() throws Exception
{    PomTestWrapper pom = this.buildPom("profile-plugins", "standard");    assertEquals(2, ((List<?>) pom.getValue("build/plugins")).size());    assertEquals("maven-assembly2-plugin", pom.getValue("build/plugins[2]/artifactId"));}
public void maven_f3770_0() throws Exception
{    PomTestWrapper pom = this.buildPom("plugin-inheritance-simple/sub");    assertEquals(2, ((List<?>) pom.getValue("build/plugins")).size());}
public void maven_f3771_0() throws Exception
{    PomTestWrapper pom = this.buildPom("plugin-management-duplicate/sub");    assertEquals(12, ((List<?>) pom.getValue("build/pluginManagement/plugins")).size());}
public void maven_f3772_0() throws Exception
{    PomTestWrapper pom = this.buildPom("distribution-management");    assertEquals("legacy", pom.getValue("distributionManagement/repository/layout"));}
public void maven_f3773_0() throws Exception
{    PomTestWrapper pom = buildPom("dependency-scope-inheritance/sub");    String scope = (String) pom.getValue("dependencies[1]/scope");    assertEquals("compile", scope);}
public void maven_f3774_0() throws Exception
{    buildPom("dependency-scope/sub");}
public void maven_f3775_0() throws Exception
{    buildPom("dependency-management-with-interpolation/sub");}
public void maven_f3776_0() throws Exception
{    Properties sysProps = new Properties();    sysProps.setProperty("system.property", "PASSED");    PomTestWrapper pom = buildPom("system-property-interpolation", sysProps);    assertEquals("PASSED", pom.getValue("name"));}
public void maven_f3777_0() throws Exception
{    PomTestWrapper pom = buildPom("plugin-exec-inheritance/wo-merge");    @SuppressWarnings("unchecked")    List<PluginExecution> executions = (List<PluginExecution>) pom.getValue("build/pluginsAsMap[@name='org.apache.maven.its.plugins:maven-it-plugin-log-file']/executions");    assertEquals(1, executions.size());    assertEquals("inherited-execution", executions.get(0).getId());}
public void maven_f3778_0() throws Exception
{    PomTestWrapper pom = buildPom("plugin-exec-inheritance/w-merge");    @SuppressWarnings("unchecked")    List<PluginExecution> executions = (List<PluginExecution>) pom.getValue("build/pluginsAsMap[@name='org.apache.maven.its.plugins:maven-it-plugin-log-file']/executions");    assertEquals(1, executions.size());    assertEquals("inherited-execution", executions.get(0).getId());}
public void maven_f3779_0() throws Exception
{    try {        buildPom("unique-repo-id/artifact-repo");        fail("Non-unique repository ids did not cause validation error");    } catch (ProjectBuildingException e) {        }}
public void maven_f3780_0() throws Exception
{    try {        buildPom("unique-repo-id/plugin-repo");        fail("Non-unique repository ids did not cause validation error");    } catch (ProjectBuildingException e) {        }}
public void maven_f3781_0() throws Exception
{    try {        buildPom("unique-repo-id/artifact-repo-in-profile");        fail("Non-unique repository ids did not cause validation error");    } catch (ProjectBuildingException e) {        }}
public void maven_f3782_0() throws Exception
{    try {        buildPom("unique-repo-id/plugin-repo-in-profile");        fail("Non-unique repository ids did not cause validation error");    } catch (ProjectBuildingException e) {        }}
public void maven_f3783_0() throws Exception
{    PomTestWrapper pom = buildPom("prerequisites-inheritance/child");    assertSame(null, pom.getValue("prerequisites"));}
public void maven_f3784_0() throws Exception
{    PomTestWrapper pom = buildPom("licenses-inheritance/child-2");    assertEquals(1, ((List<?>) pom.getValue("licenses")).size());    assertEquals("child-license", pom.getValue("licenses[1]/name"));    assertEquals("http://child.url/license", pom.getValue("licenses[1]/url"));}
public void maven_f3785_0() throws Exception
{    PomTestWrapper pom = buildPom("developers-inheritance/child-2");    assertEquals(1, ((List<?>) pom.getValue("developers")).size());    assertEquals("child-developer", pom.getValue("developers[1]/name"));}
public void maven_f3786_0() throws Exception
{    PomTestWrapper pom = buildPom("contributors-inheritance/child-2");    assertEquals(1, ((List<?>) pom.getValue("contributors")).size());    assertEquals("child-contributor", pom.getValue("contributors[1]/name"));}
public void maven_f3787_0() throws Exception
{    PomTestWrapper pom = buildPom("mailing-lists-inheritance/child-2");    assertEquals(1, ((List<?>) pom.getValue("mailingLists")).size());    assertEquals("child-mailing-list", pom.getValue("mailingLists[1]/name"));}
public void maven_f3788_0() throws Exception
{    PomTestWrapper pom = buildPom("plugin-inheritance-order/child");    assertEquals("maven-it-plugin-log-file", pom.getValue("build/plugins[1]/artifactId"));    assertEquals("maven-it-plugin-expression", pom.getValue("build/plugins[2]/artifactId"));    assertEquals("maven-it-plugin-configuration", pom.getValue("build/plugins[3]/artifactId"));    assertEquals("maven-it-plugin-log-file", pom.getValue("reporting/plugins[1]/artifactId"));    assertEquals("maven-it-plugin-expression", pom.getValue("reporting/plugins[2]/artifactId"));    assertEquals("maven-it-plugin-configuration", pom.getValue("reporting/plugins[3]/artifactId"));}
public void maven_f3789_0() throws Exception
{    Properties props = new Properties();    props.setProperty("testProperty", "PASSED");    PomTestWrapper pom = buildPom("interpolation-cli-wins", props);    assertEquals("PASSED", pom.getValue("properties/interpolatedProperty"));}
public void maven_f3790_0() throws Exception
{    try {        buildPom("parent-pom-packaging/sub");        fail("Wrong packaging of parent POM was not rejected");    } catch (ProjectBuildingException e) {        }}
public void maven_f3791_0() throws Exception
{    PomTestWrapper pom = buildPom("plugin-management-for-implicit-plugin/child");    assertEquals("passed.txt", pom.getValue("build/plugins[@artifactId='maven-resources-plugin']/configuration/pathname"));    assertEquals("passed.txt", pom.getValue("build/plugins[@artifactId='maven-it-plugin-log-file']/configuration/logFile"));}
public void maven_f3792_0() throws Exception
{    PomTestWrapper pom = buildPom("plugin-exec-order-and-default-exec");    @SuppressWarnings("unchecked")    List<PluginExecution> executions = (List<PluginExecution>) pom.getValue("build/plugins[@artifactId='maven-resources-plugin']/executions");    assertNotNull(executions);    assertEquals(4, executions.size());    assertEquals("default-resources", executions.get(0).getId());    assertEquals("default-testResources", executions.get(1).getId());    assertEquals("test-1", executions.get(2).getId());    assertEquals("test-2", executions.get(3).getId());}
public void maven_f3793_0() throws Exception
{    PomTestWrapper pom = buildPom("plugin-exec-order-with-lifecycle");    @SuppressWarnings("unchecked")    List<Plugin> plugins = (List<Plugin>) pom.getValue("build/plugins");    int resourcesPlugin = -1;    int customPlugin = -1;    for (int i = 0; i < plugins.size(); i++) {        Plugin plugin = plugins.get(i);        if ("maven-resources-plugin".equals(plugin.getArtifactId())) {            assertTrue(resourcesPlugin < 0);            resourcesPlugin = i;        } else if ("maven-it-plugin-log-file".equals(plugin.getArtifactId())) {            assertTrue(customPlugin < 0);            customPlugin = i;        }    }    assertTrue(plugins.toString(), customPlugin == resourcesPlugin - 1);}
public void maven_f3794_0() throws Exception
{    PomTestWrapper pom = buildPom("plugin-inheritance-merge-order/sub");    List<String> expected = new ArrayList<>();    expected.add("maven-it-plugin-error");    expected.add("maven-it-plugin-configuration");    expected.add("maven-it-plugin-dependency-resolution");    expected.add("maven-it-plugin-packaging");    expected.add("maven-it-plugin-log-file");    expected.add("maven-it-plugin-expression");    expected.add("maven-it-plugin-fork");    expected.add("maven-it-plugin-touch");    List<String> actual = new ArrayList<>();    @SuppressWarnings("unchecked")    List<Plugin> plugins = (List<Plugin>) pom.getValue("build/plugins");    for (Plugin plugin : plugins) {        actual.add(plugin.getArtifactId());    }    actual.retainAll(expected);    assertEquals(actual, expected);}
public void maven_f3795_0() throws Exception
{    PomTestWrapper pom = buildPom("plugin-injection-merge-order");    List<String> expected = new ArrayList<>();    expected.add("maven-it-plugin-error");    expected.add("maven-it-plugin-configuration");    expected.add("maven-it-plugin-dependency-resolution");    expected.add("maven-it-plugin-packaging");    expected.add("maven-it-plugin-log-file");    expected.add("maven-it-plugin-expression");    expected.add("maven-it-plugin-fork");    expected.add("maven-it-plugin-touch");    List<String> actual = new ArrayList<>();    @SuppressWarnings("unchecked")    List<Plugin> plugins = (List<Plugin>) pom.getValue("build/plugins");    for (Plugin plugin : plugins) {        actual.add(plugin.getArtifactId());    }    actual.retainAll(expected);    assertEquals(actual, expected);}
public void maven_f3796_0() throws Exception
{    try {        buildPom("artifact-id-inheritance/child");        fail("Missing artifactId did not cause validation error");    } catch (ProjectBuildingException e) {        }}
private void maven_f3797_0(String expected, Object actual)
{    String a = actual.toString();    a = a.substring(a.length() - expected.length()).replace('\\', '/');    assertEquals(expected, a);}
private void maven_f3798_0(Object value)
{    assertEquals(new File(value.toString()).getPath(), value.toString());}
private PomTestWrapper maven_f3799_0(String pomPath, String... profileIds) throws Exception
{    return buildPom(pomPath, null, profileIds);}
private PomTestWrapper maven_f3800_0(String pomPath, Properties executionProperties, String... profileIds) throws Exception
{    return buildPom(pomPath, false, executionProperties, profileIds);}
private PomTestWrapper maven_f3801_0(String pomPath, boolean lenientValidation, Properties executionProperties, String... profileIds) throws Exception
{    File pomFile = new File(testDirectory, pomPath);    if (pomFile.isDirectory()) {        pomFile = new File(pomFile, "pom.xml");    }    ProjectBuildingRequest config = new DefaultProjectBuildingRequest();    String localRepoUrl = System.getProperty("maven.repo.local", System.getProperty("user.home") + "/.m2/repository");    localRepoUrl = "file://" + localRepoUrl;    config.setLocalRepository(repositorySystem.createArtifactRepository("local", localRepoUrl, new DefaultRepositoryLayout(), null, null));    config.setActiveProfileIds(Arrays.asList(profileIds));    config.setSystemProperties(executionProperties);    config.setUserProperties(executionProperties);    config.setValidationLevel(lenientValidation ? ModelBuildingRequest.VALIDATION_LEVEL_MAVEN_2_0 : ModelBuildingRequest.VALIDATION_LEVEL_STRICT);    DefaultRepositorySystemSession repoSession = MavenRepositorySystemUtils.newSession();    LocalRepository localRepo = new LocalRepository(config.getLocalRepository().getBasedir());    repoSession.setLocalRepositoryManager(new SimpleLocalRepositoryManagerFactory().newInstance(repoSession, localRepo));    config.setRepositorySession(repoSession);    return new PomTestWrapper(pomFile, projectBuilder.build(pomFile, config).getProject());}
protected void maven_f3802_0(PomTestWrapper pom, Object expected, String expression)
{    assertEquals(expected, pom.getValue(expression));}
private static String maven_f3803_0(List<String> elements)
{    StringBuilder buffer = new StringBuilder(256);    for (String s : elements) {        buffer.append(s).append(File.separator);    }    return buffer.toString().substring(0, buffer.toString().length() - 1);}
protected String maven_f3804_0()
{    return "src/test/projects/project-builder";}
public void maven_f3805_0() throws Exception
{    File pom = getProject("it0063");    Properties eps = new Properties();    eps.setProperty("jre.home", new File(pom.getParentFile(), "jdk/jre").getPath());    MavenSession session = createMavenSession(pom, eps);    MavenProject project = session.getCurrentProject();            project.getCompileClasspathElements();}
public void maven_f3806_0() throws Exception
{    File pomFile = new File("src/test/resources/projects/modelsource/module01/pom.xml");    MavenSession mavenSession = createMavenSession(pomFile);    ProjectBuildingRequest configuration = new DefaultProjectBuildingRequest();    configuration.setRepositorySession(mavenSession.getRepositorySession());    ModelSource modelSource = new FileModelSource(pomFile);    ProjectBuildingResult result = lookup(org.apache.maven.project.ProjectBuilder.class).build(modelSource, configuration);    assertNotNull(result.getProject().getParentFile());}
public void maven_f3807_0() throws Exception
{    File pomFile = new File("src/test/resources/projects/versionless-managed-dependency.xml");    MavenSession mavenSession = createMavenSession(null);    ProjectBuildingRequest configuration = new DefaultProjectBuildingRequest();    configuration.setRepositorySession(mavenSession.getRepositorySession());    try {        lookup(org.apache.maven.project.ProjectBuilder.class).build(pomFile, configuration);        fail();    } catch (ProjectBuildingException e) {        }}
public void maven_f3808_0() throws Exception
{    File pomFile = new File("src/test/resources/projects/basic-resolveDependencies.xml");    MavenSession mavenSession = createMavenSession(null);    ProjectBuildingRequest configuration = new DefaultProjectBuildingRequest();    configuration.setRepositorySession(mavenSession.getRepositorySession());    configuration.setResolveDependencies(true);        ProjectBuildingResult result = lookup(org.apache.maven.project.ProjectBuilder.class).build(pomFile, configuration);    assertEquals(1, result.getProject().getArtifacts().size());        List<ProjectBuildingResult> results = lookup(org.apache.maven.project.ProjectBuilder.class).build(Collections.singletonList(pomFile), false, configuration);    assertEquals(1, results.size());    MavenProject mavenProject = results.get(0).getProject();    assertEquals(1, mavenProject.getArtifacts().size());}
public void maven_f3809_0() throws Exception
{    File pomFile = new File("src/test/resources/projects/basic-resolveDependencies.xml");    MavenSession mavenSession = createMavenSession(null);    ProjectBuildingRequest configuration = new DefaultProjectBuildingRequest();    configuration.setRepositorySession(mavenSession.getRepositorySession());    configuration.setResolveDependencies(false);        ProjectBuildingResult result = lookup(org.apache.maven.project.ProjectBuilder.class).build(pomFile, configuration);    assertEquals(0, result.getProject().getArtifacts().size());        List<ProjectBuildingResult> results = lookup(org.apache.maven.project.ProjectBuilder.class).build(Collections.singletonList(pomFile), false, configuration);    assertEquals(1, results.size());    MavenProject mavenProject = results.get(0).getProject();    assertEquals(0, mavenProject.getArtifacts().size());}
public void maven_f3810_0() throws Exception
{    String initialValue = System.setProperty(DefaultProjectBuilder.DISABLE_GLOBAL_MODEL_CACHE_SYSTEM_PROPERTY, Boolean.toString(true));            File tempDir = Files.createTempDir();    FileUtils.copyDirectoryStructure(new File("src/test/resources/projects/grandchild-check"), tempDir);    try {        MavenSession mavenSession = createMavenSession(null);        ProjectBuildingRequest configuration = new DefaultProjectBuildingRequest();        configuration.setRepositorySession(mavenSession.getRepositorySession());        org.apache.maven.project.ProjectBuilder projectBuilder = lookup(org.apache.maven.project.ProjectBuilder.class);        File child = new File(tempDir, "child/pom.xml");                projectBuilder.build(child, configuration);                File parent = new File(tempDir, "pom.xml");        String parentContent = FileUtils.fileRead(parent);        parentContent = parentContent.replaceAll("<packaging>pom</packaging>", "<packaging>pom</packaging><properties><addedProperty>addedValue</addedProperty></properties>");        FileUtils.fileWrite(parent, "UTF-8", parentContent);                ProjectBuildingResult result = projectBuilder.build(child, configuration);        assertTrue(result.getProject().getProperties().containsKey("addedProperty"));    } finally {        if (initialValue == null) {            System.clearProperty(DefaultProjectBuilder.DISABLE_GLOBAL_MODEL_CACHE_SYSTEM_PROPERTY);        } else {            System.setProperty(DefaultProjectBuilder.DISABLE_GLOBAL_MODEL_CACHE_SYSTEM_PROPERTY, initialValue);        }        FileUtils.deleteDirectory(tempDir);    }}
public void maven_f3811_0() throws Exception
{    File pomFile = new File("src/test/resources/projects/artifactMissingVersion.xml").getAbsoluteFile();    MavenSession mavenSession = createMavenSession(null);    ProjectBuildingRequest configuration = new DefaultProjectBuildingRequest();    configuration.setValidationLevel(ModelBuildingRequest.VALIDATION_LEVEL_MINIMAL);    configuration.setRepositorySession(mavenSession.getRepositorySession());    org.apache.maven.project.ProjectBuilder projectBuilder = lookup(org.apache.maven.project.ProjectBuilder.class);        try {        projectBuilder.build(pomFile, configuration);    } catch (ProjectBuildingException ex) {        assertEquals(1, ex.getResults().size());        MavenProject project = ex.getResults().get(0).getProject();        assertNotNull(project);        assertEquals("testArtifactMissingVersion", project.getArtifactId());        assertEquals(pomFile, project.getFile());    }        try {        projectBuilder.build(Collections.singletonList(pomFile), false, configuration);    } catch (ProjectBuildingException ex) {        assertEquals(1, ex.getResults().size());        MavenProject project = ex.getResults().get(0).getProject();        assertNotNull(project);        assertEquals("testArtifactMissingVersion", project.getArtifactId());        assertEquals(pomFile, project.getFile());    }}
public void maven_f3812_0() throws Exception
{    File pomFile = new File("src/test/resources/projects/badPom.xml").getAbsoluteFile();    MavenSession mavenSession = createMavenSession(null);    ProjectBuildingRequest configuration = new DefaultProjectBuildingRequest();    configuration.setValidationLevel(ModelBuildingRequest.VALIDATION_LEVEL_MINIMAL);    configuration.setRepositorySession(mavenSession.getRepositorySession());    org.apache.maven.project.ProjectBuilder projectBuilder = lookup(org.apache.maven.project.ProjectBuilder.class);        try {        projectBuilder.build(pomFile, configuration);    } catch (InvalidArtifactRTException iarte) {        assertTrue(iarte.getMessage().contains("The groupId cannot be empty."));    }        try {        projectBuilder.build(Collections.singletonList(pomFile), false, configuration);    } catch (ProjectBuildingException ex) {        assertEquals(1, ex.getResults().size());        MavenProject project = ex.getResults().get(0).getProject();        assertNotNull(project);        assertNotSame(0, ex.getResults().get(0).getProblems().size());    }}
public void maven_f3813_0() throws Exception
{    List<File> toRead = new ArrayList<>(2);    File parentPom = getProject("MNG-6723");    toRead.add(parentPom);    toRead.add(new File(parentPom.getParentFile(), "child/pom.xml"));    MavenSession mavenSession = createMavenSession(null);    ProjectBuildingRequest configuration = new DefaultProjectBuildingRequest();    configuration.setValidationLevel(ModelBuildingRequest.VALIDATION_LEVEL_MINIMAL);    configuration.setRepositorySession(mavenSession.getRepositorySession());    org.apache.maven.project.ProjectBuilder projectBuilder = lookup(org.apache.maven.project.ProjectBuilder.class);        boolean parentFileWasFoundOnChild = false;    for (File file : toRead) {        List<ProjectBuildingResult> results = projectBuilder.build(Collections.singletonList(file), false, configuration);        assertResultShowNoError(results);        MavenProject project = findChildProject(results);        if (project != null) {            assertEquals(parentPom, project.getParentFile());            parentFileWasFoundOnChild = true;        }    }    assertTrue(parentFileWasFoundOnChild);        List<ProjectBuildingResult> results = projectBuilder.build(toRead, false, configuration);    assertResultShowNoError(results);    assertEquals(parentPom, findChildProject(results).getParentFile());    Collections.reverse(toRead);    results = projectBuilder.build(toRead, false, configuration);    assertResultShowNoError(results);    assertEquals(parentPom, findChildProject(results).getParentFile());}
private MavenProject maven_f3814_0(List<ProjectBuildingResult> results)
{    for (ProjectBuildingResult result : results) {        if (result.getPomFile().getParentFile().getName().equals("child")) {            return result.getProject();        }    }    return null;}
private void maven_f3815_0(List<ProjectBuildingResult> results)
{    for (ProjectBuildingResult result : results) {        assertTrue(result.getProblems().isEmpty());        assertNotNull(result.getProject());    }}
public void maven_f3816_0() throws Exception
{    File file = new File(getProject("MNG-6716").getParentFile(), "project/pom.xml");    MavenSession mavenSession = createMavenSession(null);    ProjectBuildingRequest configuration = new DefaultProjectBuildingRequest();    configuration.setRepositorySession(mavenSession.getRepositorySession());    configuration.setResolveDependencies(true);    List<ProjectBuildingResult> result = projectBuilder.build(Collections.singletonList(file), true, configuration);    MavenProject project = result.get(0).getProject();        assertEquals(1, project.getTestCompileSourceRoots().size());    assertEquals(1, project.getCompileSourceRoots().size());    assertEquals(1, project.getMailingLists().size());    assertEquals(1, project.getResources().size());}
public void maven_f3817_0() throws Exception
{    final Parent parent = new Parent();    parent.setGroupId("org.apache");    parent.setArtifactId("apache");    parent.setVersion("0");    try {        this.newModelResolver().resolveModel(parent);        fail("Expected 'UnresolvableModelException' not thrown.");    } catch (final UnresolvableModelException e) {        assertNotNull(e.getMessage());        assertTrue(e.getMessage().startsWith("Could not find artifact org.apache:apache:pom:0 in central"));    }}
public void maven_f3818_0() throws Exception
{    final Parent parent = new Parent();    parent.setGroupId("org.apache");    parent.setArtifactId("apache");    parent.setVersion("[2.0,2.1)");    try {        this.newModelResolver().resolveModel(parent);        fail("Expected 'UnresolvableModelException' not thrown.");    } catch (final UnresolvableModelException e) {        assertEquals("No versions matched the requested parent version range '[2.0,2.1)'", e.getMessage());    }}
public void maven_f3819_0() throws Exception
{    final Parent parent = new Parent();    parent.setGroupId("org.apache");    parent.setArtifactId("apache");    parent.setVersion("[1,)");    try {        this.newModelResolver().resolveModel(parent);        fail("Expected 'UnresolvableModelException' not thrown.");    } catch (final UnresolvableModelException e) {        assertEquals("The requested parent version range '[1,)' does not specify an upper bound", e.getMessage());    }}
public void maven_f3820_0() throws Exception
{    final Parent parent = new Parent();    parent.setGroupId("org.apache");    parent.setArtifactId("apache");    parent.setVersion("1");    assertNotNull(this.newModelResolver().resolveModel(parent));    assertEquals("1", parent.getVersion());}
public void maven_f3821_0() throws Exception
{    final Parent parent = new Parent();    parent.setGroupId("org.apache");    parent.setArtifactId("apache");    parent.setVersion("(,2.0)");    assertNotNull(this.newModelResolver().resolveModel(parent));    assertEquals("1", parent.getVersion());}
public void maven_f3822_0() throws Exception
{    final Dependency dependency = new Dependency();    dependency.setGroupId("org.apache");    dependency.setArtifactId("apache");    dependency.setVersion("0");    try {        this.newModelResolver().resolveModel(dependency);        fail("Expected 'UnresolvableModelException' not thrown.");    } catch (final UnresolvableModelException e) {        assertNotNull(e.getMessage());        assertTrue(e.getMessage().startsWith("Could not find artifact org.apache:apache:pom:0 in central"));    }}
public void maven_f3823_0() throws Exception
{    final Dependency dependency = new Dependency();    dependency.setGroupId("org.apache");    dependency.setArtifactId("apache");    dependency.setVersion("[2.0,2.1)");    try {        this.newModelResolver().resolveModel(dependency);        fail("Expected 'UnresolvableModelException' not thrown.");    } catch (final UnresolvableModelException e) {        assertEquals("No versions matched the requested dependency version range '[2.0,2.1)'", e.getMessage());    }}
public void maven_f3824_0() throws Exception
{    final Dependency dependency = new Dependency();    dependency.setGroupId("org.apache");    dependency.setArtifactId("apache");    dependency.setVersion("[1,)");    try {        this.newModelResolver().resolveModel(dependency);        fail("Expected 'UnresolvableModelException' not thrown.");    } catch (final UnresolvableModelException e) {        assertEquals("The requested dependency version range '[1,)' does not specify an upper bound", e.getMessage());    }}
public void maven_f3825_0() throws Exception
{    final Dependency dependency = new Dependency();    dependency.setGroupId("org.apache");    dependency.setArtifactId("apache");    dependency.setVersion("1");    assertNotNull(this.newModelResolver().resolveModel(dependency));    assertEquals("1", dependency.getVersion());}
public void maven_f3826_0() throws Exception
{    final Dependency dependency = new Dependency();    dependency.setGroupId("org.apache");    dependency.setArtifactId("apache");    dependency.setVersion("(,2.0)");    assertNotNull(this.newModelResolver().resolveModel(dependency));    assertEquals("1", dependency.getVersion());}
private ModelResolver maven_f3827_0() throws Exception
{    final File localRepo = new File(this.getLocalRepository().getBasedir());    final DefaultRepositorySystemSession repoSession = MavenRepositorySystemUtils.newSession();    repoSession.setLocalRepositoryManager(new LegacyLocalRepositoryManager(localRepo));    return new ProjectModelResolver(repoSession, null, lookup(RepositorySystem.class), lookup(RemoteRepositoryManager.class), this.getRemoteRepositories(), ProjectBuildingRequest.RepositoryMerging.REQUEST_DOMINANT, null);}
private List<RemoteRepository> maven_f3828_0() throws InvalidRepositoryException
{    final File repoDir = new File(getBasedir(), "src/test/remote-repo").getAbsoluteFile();    final RemoteRepository remoteRepository = new RemoteRepository.Builder(org.apache.maven.repository.RepositorySystem.DEFAULT_REMOTE_REPO_ID, "default", repoDir.toURI().toASCIIString()).build();    return Collections.singletonList(remoteRepository);}
private Parent maven_f3829_0(MavenProject project)
{    return createParent(project.getGroupId(), project.getArtifactId(), project.getVersion());}
private Parent maven_f3830_0(String groupId, String artifactId, String version)
{    Parent plugin = new Parent();    plugin.setGroupId(groupId);    plugin.setArtifactId(artifactId);    plugin.setVersion(version);    return plugin;}
private Dependency maven_f3831_0(MavenProject project)
{    return createDependency(project.getGroupId(), project.getArtifactId(), project.getVersion());}
private Dependency maven_f3832_0(String groupId, String artifactId, String version)
{    Dependency dependency = new Dependency();    dependency.setGroupId(groupId);    dependency.setArtifactId(artifactId);    dependency.setVersion(version);    return dependency;}
private Plugin maven_f3833_0(MavenProject project)
{    return createPlugin(project.getGroupId(), project.getArtifactId(), project.getVersion());}
private Plugin maven_f3834_0(String groupId, String artifactId, String version)
{    Plugin plugin = new Plugin();    plugin.setGroupId(groupId);    plugin.setArtifactId(artifactId);    plugin.setVersion(version);    return plugin;}
private Extension maven_f3835_0(String groupId, String artifactId, String version)
{    Extension extension = new Extension();    extension.setGroupId(groupId);    extension.setArtifactId(artifactId);    extension.setVersion(version);    return extension;}
private static MavenProject maven_f3836_0(String groupId, String artifactId, String version)
{    Model model = new Model();    model.setGroupId(groupId);    model.setArtifactId(artifactId);    model.setVersion(version);    model.setBuild(new Build());    return new MavenProject(model);}
public void maven_f3837_0() throws CycleDetectedException, DuplicateProjectException
{    MavenProject project = createProject("group", "artifact", "1.0");    Build build = project.getModel().getBuild();    Plugin plugin = createPlugin("other.group", "other-artifact", "1.0");    Dependency dep = createDependency("group", "artifact", "1.0");    plugin.addDependency(dep);    build.addPlugin(plugin);    new ProjectSorter(Collections.singletonList(project));}
public void maven_f3838_0() throws CycleDetectedException, DuplicateProjectException
{    MavenProject project = createProject("group", "artifact", "1.0");    Build build = project.getModel().getBuild();    PluginManagement pMgmt = new PluginManagement();    Plugin plugin = createPlugin("other.group", "other-artifact", "1.0");    Dependency dep = createDependency("group", "artifact", "1.0");    plugin.addDependency(dep);    pMgmt.addPlugin(plugin);    build.setPluginManagement(pMgmt);    new ProjectSorter(Collections.singletonList(project));}
public void maven_f3839_0() throws CycleDetectedException, DuplicateProjectException
{    MavenProject project = createProject("group", "artifact", "1.0");    Build build = project.getModel().getBuild();    Extension extension = createExtension("other.group", "other-artifact", "1.0");    build.addExtension(extension);    new ProjectSorter(Collections.singletonList(project));}
public void maven_f3840_0() throws CycleDetectedException, DuplicateProjectException
{    List<MavenProject> projects = new ArrayList<>();    MavenProject project1 = createProject("groupId1", "artifactId", "1.0");    projects.add(project1);    MavenProject project2 = createProject("groupId2", "artifactId", "1.0");    projects.add(project2);    project1.getDependencies().add(createDependency(project2));    projects = new ProjectSorter(projects).getSortedProjects();    assertEquals(project2, projects.get(0));    assertEquals(project1, projects.get(1));}
public void maven_f3841_0() throws CycleDetectedException, DuplicateProjectException
{    List<MavenProject> projects = new ArrayList<>();    MavenProject project1 = createProject("groupId", "artifactId1", "1.0");    projects.add(project1);    MavenProject project2 = createProject("groupId", "artifactId2", "1.0");    projects.add(project2);    project1.getDependencies().add(createDependency(project2));    projects = new ProjectSorter(projects).getSortedProjects();    assertEquals(project2, projects.get(0));    assertEquals(project1, projects.get(1));}
public void maven_f3842_0() throws CycleDetectedException
{    List<MavenProject> projects = new ArrayList<>();    MavenProject project1 = createProject("groupId", "artifactId", "1.0");    projects.add(project1);    MavenProject project2 = createProject("groupId", "artifactId", "1.0");    projects.add(project2);    try {        projects = new ProjectSorter(projects).getSortedProjects();        fail("Duplicate projects should fail");    } catch (DuplicateProjectException e) {                assertTrue(true);    }}
public void maven_f3843_0() throws CycleDetectedException, DuplicateProjectException
{    List<MavenProject> projects = new ArrayList<>();    MavenProject project1 = createProject("groupId", "artifactId", "1.0");    projects.add(project1);    MavenProject project2 = createProject("groupId", "artifactId", "2.0");    projects.add(project2);    projects = new ProjectSorter(projects).getSortedProjects();    assertEquals(project1, projects.get(0));    assertEquals(project2, projects.get(1));}
public void maven_f3844_0() throws Exception
{    List<MavenProject> projects = new ArrayList<>();    MavenProject parentProject = createProject("groupId", "parent", "1.0");    projects.add(parentProject);    MavenProject declaringProject = createProject("groupId", "declarer", "1.0");    declaringProject.setParent(parentProject);    declaringProject.getModel().setParent(createParent(parentProject));    projects.add(declaringProject);    MavenProject pluginLevelDepProject = createProject("groupId", "plugin-level-dep", "1.0");    pluginLevelDepProject.setParent(parentProject);    pluginLevelDepProject.getModel().setParent(createParent(parentProject));    projects.add(pluginLevelDepProject);    MavenProject pluginProject = createProject("groupId", "plugin", "1.0");    pluginProject.setParent(parentProject);    pluginProject.getModel().setParent(createParent(parentProject));    projects.add(pluginProject);    Plugin plugin = createPlugin(pluginProject);    plugin.addDependency(createDependency(pluginLevelDepProject));    Build build = declaringProject.getModel().getBuild();    build.addPlugin(plugin);    projects = new ProjectSorter(projects).getSortedProjects();    assertEquals(parentProject, projects.get(0));        assertTrue(projects.contains(pluginProject));    assertTrue(projects.contains(pluginLevelDepProject));        assertEquals(declaringProject, projects.get(3));}
public void maven_f3845_0() throws Exception
{    List<MavenProject> projects = new ArrayList<>();    MavenProject parentProject = createProject("groupId", "parent-declarer", "1.0");    projects.add(parentProject);    MavenProject pluginProject = createProject("groupId", "plugin", "1.0");    pluginProject.setParent(parentProject);    pluginProject.getModel().setParent(createParent(parentProject));    projects.add(pluginProject);    MavenProject pluginLevelDepProject = createProject("groupId", "plugin-level-dep", "1.0");    pluginLevelDepProject.setParent(parentProject);    pluginLevelDepProject.getModel().setParent(createParent(parentProject));    projects.add(pluginLevelDepProject);    Plugin plugin = createPlugin(pluginProject);    plugin.addDependency(createDependency(pluginLevelDepProject));    Build build = parentProject.getModel().getBuild();    build.addPlugin(plugin);    projects = new ProjectSorter(projects).getSortedProjects();    System.out.println(projects);    assertEquals(parentProject, projects.get(0));        assertTrue(projects.contains(pluginProject));    assertTrue(projects.contains(pluginLevelDepProject));}
public void maven_f3846_0() throws Exception
{    List<MavenProject> projects = new ArrayList<>();    MavenProject pluginProjectA = createProject("group", "plugin-a", "2.0-SNAPSHOT");    projects.add(pluginProjectA);    pluginProjectA.getModel().getBuild().addPlugin(createPlugin("group", "plugin-b", "1.0"));    MavenProject pluginProjectB = createProject("group", "plugin-b", "2.0-SNAPSHOT");    projects.add(pluginProjectB);    pluginProjectB.getModel().getBuild().addPlugin(createPlugin("group", "plugin-a", "1.0"));    projects = new ProjectSorter(projects).getSortedProjects();    assertTrue(projects.contains(pluginProjectA));    assertTrue(projects.contains(pluginProjectB));}
public void maven_f3847_0() throws Exception
{    List<MavenProject> projects = new ArrayList<>();    MavenProject usingProject = createProject("group", "project", "1.0");    projects.add(usingProject);    usingProject.getModel().addDependency(createDependency("group", "dependency", "1.0"));    MavenProject pluginProject = createProject("group", "dependency", "1.0");    projects.add(pluginProject);    projects = new ProjectSorter(projects).getSortedProjects();    assertEquals(pluginProject, projects.get(0));    assertEquals(usingProject, projects.get(1));}
public void maven_f3848_0() throws Exception
{    List<MavenProject> projects = new ArrayList<>();    MavenProject usingProject = createProject("group", "project", "1.0");    projects.add(usingProject);    usingProject.getModel().addDependency(createDependency("group", "dependency", "[1.0,)"));    MavenProject pluginProject = createProject("group", "dependency", "1.0");    projects.add(pluginProject);    projects = new ProjectSorter(projects).getSortedProjects();    assertEquals(pluginProject, projects.get(0));    assertEquals(usingProject, projects.get(1));}
public ResolutionGroup maven_f3849_0(Artifact artifact, ArtifactRepository localRepository, List<ArtifactRepository> remoteRepositories) throws ArtifactMetadataRetrievalException
{    ResolutionGroup rg = super.retrieve(artifact, localRepository, remoteRepositories);    for (Artifact a : rg.getArtifacts()) {        a.setResolved(true);    }    return rg;}
protected void maven_f3850_0() throws Exception
{    super.setUp();    resolver = lookup(ProjectDependenciesResolver.class);}
protected void maven_f3851_0() throws Exception
{    resolver = null;    super.tearDown();}
protected String maven_f3852_0()
{    return "src/test/projects/project-dependencies-resolver";}
public void maven_f3853_0() throws Exception
{    MavenSession session = createMavenSession(null);    MavenProject project = session.getCurrentProject();    new ProjectBuilder(project).addDependency("com.mycompany", "system-dependency", "1.0", Artifact.SCOPE_SYSTEM, new File(getBasedir(), "pom.xml").getAbsolutePath());    Set<Artifact> artifactDependencies = resolver.resolve(project, Collections.singleton(Artifact.SCOPE_COMPILE), session);    assertEquals(1, artifactDependencies.size());}
public void maven_f3854_0() throws Exception
{    File pom = getProject("it0063");    Properties eps = new Properties();    eps.setProperty("jre.home", new File(pom.getParentFile(), "jdk/jre").getPath());    MavenSession session = createMavenSession(pom, eps);    MavenProject project = session.getCurrentProject();    project.setArtifacts(resolver.resolve(project, Collections.singleton(Artifact.SCOPE_COMPILE), session));    List<String> elements = project.getCompileClasspathElements();    assertEquals(2, elements.size());    @SuppressWarnings("deprecation")    List<Artifact> artifacts = project.getCompileArtifacts();    assertEquals(1, artifacts.size());    assertTrue(artifacts.get(0).getFile().getName().endsWith("tools.jar"));}
public String maven_f3855_0()
{    return "legacy";}
public String maven_f3856_0(Artifact artifact)
{    ArtifactHandler artifactHandler = artifact.getArtifactHandler();    StringBuilder path = new StringBuilder(128);    path.append(artifact.getGroupId()).append('/');    path.append(artifactHandler.getDirectory()).append('/');    path.append(artifact.getArtifactId()).append('-').append(artifact.getVersion());    if (artifact.hasClassifier()) {        path.append('-').append(artifact.getClassifier());    }    if (artifactHandler.getExtension() != null && artifactHandler.getExtension().length() > 0) {        path.append('.').append(artifactHandler.getExtension());    }    return path.toString();}
public String maven_f3857_0(ArtifactMetadata metadata, ArtifactRepository repository)
{    return pathOfRepositoryMetadata(metadata, metadata.getLocalFilename(repository));}
private String maven_f3858_0(ArtifactMetadata metadata, String filename)
{    StringBuilder path = new StringBuilder(128);    path.append(metadata.getGroupId()).append(PATH_SEPARATOR).append("poms").append(PATH_SEPARATOR);    path.append(filename);    return path.toString();}
public String maven_f3859_0(ArtifactMetadata metadata)
{    return pathOfRepositoryMetadata(metadata, metadata.getRemoteFilename());}
public String maven_f3860_0()
{    return null;}
public String maven_f3861_0()
{    return getPackaging() + "s";}
public String maven_f3862_0()
{    return extension;}
public String maven_f3863_0()
{    return "java";}
public String maven_f3864_0()
{    return type;}
public boolean maven_f3865_0()
{    return true;}
public boolean maven_f3866_0()
{    return false;}
public void maven_f3867_0()
{}
public void maven_f3868_0(Collection<? extends ArtifactDownload> artifactDownloads, Collection<? extends MetadataDownload> metadataDownloads)
{    if (artifactDownloads != null) {        for (ArtifactDownload download : artifactDownloads) {            File remoteFile = new File(basedir, path(download.getArtifact()));            try {                FileUtils.copyFile(remoteFile, download.getFile());            } catch (IOException e) {                if (!remoteFile.exists()) {                    download.setException(new ArtifactNotFoundException(download.getArtifact(), repository));                } else {                    download.setException(new ArtifactTransferException(download.getArtifact(), repository, e));                }            }        }    }    if (metadataDownloads != null) {        for (final MetadataDownload download : metadataDownloads) {            File remoteFile = new File(basedir, path(download.getMetadata()));            try {                FileUtils.copyFile(remoteFile, download.getFile());            } catch (IOException e) {                if (!remoteFile.exists()) {                    download.setException(new MetadataNotFoundException(download.getMetadata(), repository));                } else {                    download.setException(new MetadataTransferException(download.getMetadata(), repository, e));                }            }        }    }}
private String maven_f3869_0(Artifact artifact)
{    StringBuilder path = new StringBuilder(128);    path.append(artifact.getGroupId().replace('.', '/')).append('/');    path.append(artifact.getArtifactId()).append('/');    path.append(artifact.getBaseVersion()).append('/');    path.append(artifact.getArtifactId()).append('-').append(artifact.getVersion());    if (artifact.getClassifier().length() > 0) {        path.append('-').append(artifact.getClassifier());    }    path.append('.').append(artifact.getExtension());    return path.toString();}
private String maven_f3870_0(Metadata metadata)
{    StringBuilder path = new StringBuilder(128);    path.append(metadata.getGroupId().replace('.', '/')).append('/');    path.append(metadata.getArtifactId()).append('/');    path.append("maven-metadata.xml");    return path.toString();}
public void maven_f3871_0(Collection<? extends ArtifactUpload> artifactUploads, Collection<? extends MetadataUpload> metadataUploads)
{}
public RepositoryConnector maven_f3872_0(RepositorySystemSession session, RemoteRepository repository) throws NoRepositoryConnectorException
{    return new TestRepositoryConnector(repository);}
public float maven_f3873_0()
{    return 0;}
public ArtifactRepository maven_f3874_0(Repository repository) throws InvalidRepositoryException
{    return new MavenArtifactRepository(repository.getId(), repository.getUrl(), new DefaultRepositoryLayout(), new ArtifactRepositoryPolicy(), new ArtifactRepositoryPolicy());}
public Artifact maven_f3875_0(String groupId, String artifactId, String version, String packaging)
{    return createArtifact(groupId, artifactId, version, null, packaging);}
public Artifact maven_f3876_0(String groupId, String artifactId, String version, String scope, String type)
{    return new DefaultArtifact(groupId, artifactId, version, scope, type, null, new TestArtifactHandler(type));}
public ArtifactRepository maven_f3877_0(String id, String url, ArtifactRepositoryLayout repositoryLayout, ArtifactRepositoryPolicy snapshots, ArtifactRepositoryPolicy releases)
{    return new MavenArtifactRepository(id, url, repositoryLayout, snapshots, releases);}
public Artifact maven_f3878_0(String groupId, String artifactId, String version, String type, String classifier)
{    return new DefaultArtifact(groupId, artifactId, version, null, type, classifier, new TestArtifactHandler(type));}
public ArtifactRepository maven_f3879_0() throws InvalidRepositoryException
{    return createLocalRepository(new File(System.getProperty("basedir", ""), "target/local-repo").getAbsoluteFile());}
public ArtifactRepository maven_f3880_0() throws InvalidRepositoryException
{    return new MavenArtifactRepository(DEFAULT_REMOTE_REPO_ID, "file://" + new File(System.getProperty("basedir", ""), "src/test/remote-repo").toURI().getPath(), new DefaultRepositoryLayout(), new ArtifactRepositoryPolicy(), new ArtifactRepositoryPolicy());}
public Artifact maven_f3881_0(Dependency dependency)
{    Artifact artifact = new DefaultArtifact(dependency.getGroupId(), dependency.getArtifactId(), dependency.getVersion(), dependency.getScope(), dependency.getType(), dependency.getClassifier(), new TestArtifactHandler(dependency.getType()));    if (Artifact.SCOPE_SYSTEM.equals(dependency.getScope())) {        artifact.setFile(new File(dependency.getSystemPath()));        artifact.setResolved(true);    }    return artifact;}
public ArtifactRepository maven_f3882_0(File localRepository) throws InvalidRepositoryException
{    return new MavenArtifactRepository(DEFAULT_LOCAL_REPO_ID, "file://" + localRepository.toURI().getPath(), new DefaultRepositoryLayout(), new ArtifactRepositoryPolicy(), new ArtifactRepositoryPolicy());}
public Artifact maven_f3883_0(Plugin plugin)
{    VersionRange versionRange;    try {        String version = plugin.getVersion();        if (StringUtils.isEmpty(version)) {            version = "RELEASE";        }        versionRange = VersionRange.createFromVersionSpec(version);    } catch (InvalidVersionSpecificationException e) {        return null;    }    return artifactFactory.createPluginArtifact(plugin.getGroupId(), plugin.getArtifactId(), versionRange);}
public Artifact maven_f3884_0(String groupId, String artifactId, String version)
{    return createArtifact(groupId, artifactId, version, "pom");}
public List<ArtifactRepository> maven_f3885_0(List<ArtifactRepository> repositories)
{    return repositories;}
public Mirror maven_f3886_0(ArtifactRepository repository, List<Mirror> mirrors)
{    return null;}
public void maven_f3887_0(List<ArtifactRepository> repositories, List<Server> servers)
{}
public void maven_f3888_0(List<ArtifactRepository> repositories, List<Mirror> mirrors)
{}
public void maven_f3889_0(List<ArtifactRepository> repositories, List<Proxy> proxies)
{}
public void maven_f3890_0(ArtifactRepository repository, File source, String remotePath, ArtifactTransferListener transferListener) throws ArtifactTransferFailedException
{}
public ArtifactResolutionResult maven_f3891_0(ArtifactResolutionRequest request)
{    ArtifactResolutionResult result = new ArtifactResolutionResult();    if (request.isResolveRoot()) {        try {            resolve(request.getArtifact(), request);            result.addArtifact(request.getArtifact());        } catch (IOException e) {            result.addMissingArtifact(request.getArtifact());        }    }    if (request.isResolveTransitively()) {        Map<String, Artifact> artifacts = new LinkedHashMap<>();        if (request.getArtifactDependencies() != null) {            for (Artifact artifact : request.getArtifactDependencies()) {                artifacts.put(artifact.getDependencyConflictId(), artifact);            }        }        List<Dependency> dependencies = new ArrayList<>();        if (request.getArtifact() instanceof ArtifactWithDependencies) {            dependencies = ((ArtifactWithDependencies) request.getArtifact()).getDependencies();        } else {            Artifact pomArtifact = createProjectArtifact(request.getArtifact().getGroupId(), request.getArtifact().getArtifactId(), request.getArtifact().getVersion());            File pomFile = new File(request.getLocalRepository().getBasedir(), request.getLocalRepository().pathOf(pomArtifact));            try {                Model model = modelReader.read(pomFile, null);                dependencies = model.getDependencies();            } catch (IOException e) {                e.printStackTrace();            }        }        for (Dependency dependency : dependencies) {            Artifact artifact = createDependencyArtifact(dependency);            if (!artifacts.containsKey(artifact.getDependencyConflictId())) {                artifacts.put(artifact.getDependencyConflictId(), artifact);            }        }        for (Artifact artifact : artifacts.values()) {            try {                resolve(artifact, request);                result.addArtifact(artifact);            } catch (IOException e) {                result.addMissingArtifact(artifact);            }        }    }    return result;}
private void maven_f3892_0(Artifact artifact, ArtifactResolutionRequest request) throws IOException
{    if (Artifact.SCOPE_SYSTEM.equals(artifact.getScope())) {        return;    }    ArtifactRepository localRepo = request.getLocalRepository();    File localFile = new File(localRepo.getBasedir(), localRepo.pathOf(artifact));    artifact.setFile(localFile);    if (!localFile.exists()) {        if (request.getRemoteRepositories().isEmpty()) {            throw new IOException(localFile + " does not exist and no remote repositories are configured");        }        ArtifactRepository remoteRepo = request.getRemoteRepositories().get(0);        File remoteFile = new File(remoteRepo.getBasedir(), remoteRepo.pathOf(artifact));        FileUtils.copyFile(remoteFile, localFile);    }    artifact.setResolved(true);}
public void maven_f3893_0(ArtifactRepository repository, File destination, String remotePath, ArtifactTransferListener transferListener) throws ArtifactTransferFailedException, ArtifactDoesNotExistException
{}
public void maven_f3894_0(RepositorySystemSession session, List<ArtifactRepository> repositories)
{}
public void maven_f3895_0(RepositorySystemSession session, List<ArtifactRepository> repositories)
{}
public void maven_f3896_0(RepositorySystemSession session, List<ArtifactRepository> repositories)
{}
public void maven_f3897_0() throws Exception
{    RuntimeInformation rtInfo = lookup(RuntimeInformation.class);    String mavenVersion = rtInfo.getMavenVersion();    assertNotNull(mavenVersion);    assertTrue(mavenVersion.length() > 0);}
public void maven_f3898_0() throws Exception
{    RuntimeInformation rtInfo = lookup(RuntimeInformation.class);    assertTrue(rtInfo.isMavenVersion("2.0"));    assertFalse(rtInfo.isMavenVersion("9.9"));    assertTrue(rtInfo.isMavenVersion("[2.0.11,2.1.0),[3.0,)"));    assertFalse(rtInfo.isMavenVersion("[9.0,)"));    try {        rtInfo.isMavenVersion("[3.0,");        fail("Bad version range wasn't rejected");    } catch (IllegalArgumentException e) {        assertTrue(true);    }    try {        rtInfo.isMavenVersion("");        fail("Bad version range wasn't rejected");    } catch (IllegalArgumentException e) {        assertTrue(true);    }    try {        rtInfo.isMavenVersion(null);        fail("Bad version range wasn't rejected");    } catch (NullPointerException e) {        assertTrue(true);    }}
protected void maven_f3899_0(ContainerConfiguration containerConfiguration)
{    super.customizeContainerConfiguration(containerConfiguration);    containerConfiguration.setAutoWiring(true);    containerConfiguration.setClassPathScanning(PlexusConstants.SCANNING_INDEX);}
protected void maven_f3900_0() throws Exception
{    testDirectory = new File(getBasedir(), BASE_POM_DIR);    projectBuilder = (DefaultProjectBuilder) lookup(ProjectBuilder.class);    repositorySystem = lookup(RepositorySystem.class);}
protected void maven_f3901_0() throws Exception
{    projectBuilder = null;    super.tearDown();}
public void maven_f3902_0() throws Exception
{    PomTestWrapper pom = buildPom("settings-no-pom");    assertEquals("local-profile-prop-value", pom.getValue("properties/local-profile-prop"));}
public void maven_f3903_0() throws Exception
{    PomTestWrapper pom = buildPom("test-pom-and-settings-interpolation");    assertEquals("applied", pom.getValue("properties/settingsProfile"));    assertEquals("applied", pom.getValue("properties/pomProfile"));    assertEquals("settings", pom.getValue("properties/pomVsSettings"));    assertEquals("settings", pom.getValue("properties/pomVsSettingsInterpolated"));}
public void maven_f3904_0() throws Exception
{    PomTestWrapper pom = buildPom("repositories");    assertEquals("maven-core-it-0", pom.getValue("repositories[1]/id"));}
private PomTestWrapper maven_f3905_0(String pomPath) throws Exception
{    File pomFile = new File(testDirectory + File.separator + pomPath, "pom.xml");    File settingsFile = new File(testDirectory + File.separator + pomPath, "settings.xml");    Settings settings = readSettingsFile(settingsFile);    ProjectBuildingRequest config = new DefaultProjectBuildingRequest();    for (org.apache.maven.settings.Profile rawProfile : settings.getProfiles()) {        Profile profile = SettingsUtils.convertFromSettingsProfile(rawProfile);        config.addProfile(profile);    }    String localRepoUrl = System.getProperty("maven.repo.local", System.getProperty("user.home") + "/.m2/repository");    localRepoUrl = "file://" + localRepoUrl;    config.setLocalRepository(repositorySystem.createArtifactRepository("local", localRepoUrl, new DefaultRepositoryLayout(), null, null));    config.setActiveProfileIds(settings.getActiveProfiles());    DefaultRepositorySystemSession repoSession = MavenRepositorySystemUtils.newSession();    LocalRepository localRepo = new LocalRepository(config.getLocalRepository().getBasedir());    repoSession.setLocalRepositoryManager(new SimpleLocalRepositoryManagerFactory().newInstance(repoSession, localRepo));    config.setRepositorySession(repoSession);    return new PomTestWrapper(pomFile, projectBuilder.build(pomFile, config).getProject());}
private static Settings maven_f3906_0(File settingsFile) throws IOException, XmlPullParserException
{    Settings settings = null;    try (Reader reader = ReaderFactory.newXmlReader(settingsFile)) {        SettingsXpp3Reader modelReader = new SettingsXpp3Reader();        settings = modelReader.read(reader);    }    return settings;}
public void maven_f3907_0()
{    Settings dominant = new Settings();    dominant.addPluginGroup("org.apache.maven.plugins");    dominant.addPluginGroup("org.codehaus.modello");    Settings recessive = new Settings();    recessive.addPluginGroup("org.codehaus.plexus");    SettingsUtils.merge(dominant, recessive, Settings.GLOBAL_LEVEL);    List<String> pluginGroups = dominant.getPluginGroups();    assertNotNull(pluginGroups);    assertEquals(3, pluginGroups.size());    assertEquals("org.apache.maven.plugins", pluginGroups.get(0));    assertEquals("org.codehaus.modello", pluginGroups.get(1));    assertEquals("org.codehaus.plexus", pluginGroups.get(2));}
public void maven_f3908_0()
{    Random entropy = new Random();    Profile p = new Profile();    p.setId("id" + Long.toHexString(entropy.nextLong()));    Activation a = new Activation();    a.setActiveByDefault(entropy.nextBoolean());    a.setJdk("jdk" + Long.toHexString(entropy.nextLong()));    ActivationFile af = new ActivationFile();    af.setExists("exists" + Long.toHexString(entropy.nextLong()));    af.setMissing("missing" + Long.toHexString(entropy.nextLong()));    a.setFile(af);    ActivationProperty ap = new ActivationProperty();    ap.setName("name" + Long.toHexString(entropy.nextLong()));    ap.setValue("value" + Long.toHexString(entropy.nextLong()));    a.setProperty(ap);    ActivationOS ao = new ActivationOS();    ao.setArch("arch" + Long.toHexString(entropy.nextLong()));    ao.setFamily("family" + Long.toHexString(entropy.nextLong()));    ao.setName("name" + Long.toHexString(entropy.nextLong()));    ao.setVersion("version" + Long.toHexString(entropy.nextLong()));    a.setOs(ao);    p.setActivation(a);    Properties props = new Properties();    int count = entropy.nextInt(10);    for (int i = 0; i < count; i++) {        props.setProperty("name" + Long.toHexString(entropy.nextLong()), "value" + Long.toHexString(entropy.nextLong()));    }    p.setProperties(props);    count = entropy.nextInt(3);    List<Repository> repos = new ArrayList<>();    for (int i = 0; i < count; i++) {        Repository r = new Repository();        r.setId("id" + Long.toHexString(entropy.nextLong()));        r.setName("name" + Long.toHexString(entropy.nextLong()));        r.setUrl("url" + Long.toHexString(entropy.nextLong()));        repos.add(r);    }    p.setRepositories(repos);    count = entropy.nextInt(3);    repos = new ArrayList<>();    for (int i = 0; i < count; i++) {        Repository r = new Repository();        r.setId("id" + Long.toHexString(entropy.nextLong()));        r.setName("name" + Long.toHexString(entropy.nextLong()));        r.setUrl("url" + Long.toHexString(entropy.nextLong()));        repos.add(r);    }    p.setPluginRepositories(repos);    Profile clone = SettingsUtils.convertToSettingsProfile(SettingsUtils.convertFromSettingsProfile(p));    assertEquals(p.getId(), clone.getId());    assertEquals(p.getActivation().getJdk(), clone.getActivation().getJdk());    assertEquals(p.getActivation().getFile().getExists(), clone.getActivation().getFile().getExists());    assertEquals(p.getActivation().getFile().getMissing(), clone.getActivation().getFile().getMissing());    assertEquals(p.getActivation().getProperty().getName(), clone.getActivation().getProperty().getName());    assertEquals(p.getActivation().getProperty().getValue(), clone.getActivation().getProperty().getValue());    assertEquals(p.getActivation().getOs().getArch(), clone.getActivation().getOs().getArch());    assertEquals(p.getActivation().getOs().getFamily(), clone.getActivation().getOs().getFamily());    assertEquals(p.getActivation().getOs().getName(), clone.getActivation().getOs().getName());    assertEquals(p.getActivation().getOs().getVersion(), clone.getActivation().getOs().getVersion());    assertEquals(p.getProperties(), clone.getProperties());    assertEquals(p.getRepositories().size(), clone.getRepositories().size());        assertEquals(p.getPluginRepositories().size(), clone.getPluginRepositories().size());}
public void maven_f3909_0()
{    MockitoAnnotations.initMocks(this);    Map<String, String> envVarMap = new HashMap<>();    envVarMap.put("testKey", "testValue");    envVarMap.put("testSpecialCharactersKey", "<test&Value>");    OperatingSystemUtils.setEnvVarSource(new TestEnvVarSource(envVarMap));}
public void maven_f3910_0() throws Exception
{    ToolchainsBuildingRequest request = new DefaultToolchainsBuildingRequest();    ToolchainsBuildingResult result = toolchainBuilder.build(request);    assertNotNull(result.getEffectiveToolchains());    assertNotNull(result.getProblems());    assertEquals(0, result.getProblems().size());}
public void maven_f3911_0() throws Exception
{    ToolchainsBuildingRequest request = new DefaultToolchainsBuildingRequest();    request.setUserToolchainsSource(new StringSource(""));    PersistedToolchains userResult = new PersistedToolchains();    ToolchainModel toolchain = new ToolchainModel();    toolchain.setType("TYPE");    toolchain.addProvide("key", "user_value");    userResult.addToolchain(toolchain);    doReturn(userResult).when(toolchainsReader).read(any(InputStream.class), ArgumentMatchers.<String, Object>anyMap());    ToolchainsBuildingResult result = toolchainBuilder.build(request);    assertNotNull(result.getEffectiveToolchains());    assertEquals(1, result.getEffectiveToolchains().getToolchains().size());    assertEquals("TYPE", result.getEffectiveToolchains().getToolchains().get(0).getType());    assertEquals("user_value", result.getEffectiveToolchains().getToolchains().get(0).getProvides().getProperty("key"));    assertNotNull(result.getProblems());    assertEquals(0, result.getProblems().size());}
public void maven_f3912_0() throws Exception
{    ToolchainsBuildingRequest request = new DefaultToolchainsBuildingRequest();    request.setGlobalToolchainsSource(new StringSource(""));    PersistedToolchains globalResult = new PersistedToolchains();    ToolchainModel toolchain = new ToolchainModel();    toolchain.setType("TYPE");    toolchain.addProvide("key", "global_value");    globalResult.addToolchain(toolchain);    doReturn(globalResult).when(toolchainsReader).read(any(InputStream.class), ArgumentMatchers.<String, Object>anyMap());    ToolchainsBuildingResult result = toolchainBuilder.build(request);    assertNotNull(result.getEffectiveToolchains());    assertEquals(1, result.getEffectiveToolchains().getToolchains().size());    assertEquals("TYPE", result.getEffectiveToolchains().getToolchains().get(0).getType());    assertEquals("global_value", result.getEffectiveToolchains().getToolchains().get(0).getProvides().getProperty("key"));    assertNotNull(result.getProblems());    assertEquals(0, result.getProblems().size());}
public void maven_f3913_0() throws Exception
{    ToolchainsBuildingRequest request = new DefaultToolchainsBuildingRequest();    request.setGlobalToolchainsSource(new StringSource(""));    request.setUserToolchainsSource(new StringSource(""));    PersistedToolchains userResult = new PersistedToolchains();    ToolchainModel userToolchain = new ToolchainModel();    userToolchain.setType("TYPE");    userToolchain.addProvide("key", "user_value");    userResult.addToolchain(userToolchain);    PersistedToolchains globalResult = new PersistedToolchains();    ToolchainModel globalToolchain = new ToolchainModel();    globalToolchain.setType("TYPE");    globalToolchain.addProvide("key", "global_value");    globalResult.addToolchain(globalToolchain);    doReturn(globalResult).doReturn(userResult).when(toolchainsReader).read(any(InputStream.class), ArgumentMatchers.<String, Object>anyMap());    ToolchainsBuildingResult result = toolchainBuilder.build(request);    assertNotNull(result.getEffectiveToolchains());    assertEquals(2, result.getEffectiveToolchains().getToolchains().size());    assertEquals("TYPE", result.getEffectiveToolchains().getToolchains().get(0).getType());    assertEquals("user_value", result.getEffectiveToolchains().getToolchains().get(0).getProvides().getProperty("key"));    assertEquals("TYPE", result.getEffectiveToolchains().getToolchains().get(1).getType());    assertEquals("global_value", result.getEffectiveToolchains().getToolchains().get(1).getProvides().getProperty("key"));    assertNotNull(result.getProblems());    assertEquals(0, result.getProblems().size());}
public void maven_f3914_0() throws Exception
{    ToolchainsBuildingRequest request = new DefaultToolchainsBuildingRequest();    request.setGlobalToolchainsSource(new StringSource(""));    ToolchainsParseException parseException = new ToolchainsParseException("MESSAGE", 4, 2);    doThrow(parseException).when(toolchainsReader).read(any(InputStream.class), ArgumentMatchers.<String, Object>anyMap());    try {        toolchainBuilder.build(request);    } catch (ToolchainsBuildingException e) {        assertEquals("1 problem was encountered while building the effective toolchains" + LS + "[FATAL] Non-parseable toolchains (memory): MESSAGE @ line 4, column 2" + LS, e.getMessage());    }}
public void maven_f3915_0() throws Exception
{    ToolchainsBuildingRequest request = new DefaultToolchainsBuildingRequest();    request.setGlobalToolchainsSource(new StringSource("", "LOCATION"));    IOException ioException = new IOException("MESSAGE");    doThrow(ioException).when(toolchainsReader).read(any(InputStream.class), ArgumentMatchers.<String, Object>anyMap());    try {        toolchainBuilder.build(request);    } catch (ToolchainsBuildingException e) {        assertEquals("1 problem was encountered while building the effective toolchains" + LS + "[FATAL] Non-readable toolchains LOCATION: MESSAGE" + LS, e.getMessage());    }}
public void maven_f3916_0() throws Exception
{    ToolchainsBuildingRequest request = new DefaultToolchainsBuildingRequest();    request.setUserToolchainsSource(new StringSource(""));    PersistedToolchains persistedToolchains = new PersistedToolchains();    ToolchainModel toolchain = new ToolchainModel();    toolchain.setType("TYPE");    toolchain.addProvide("key", "${env.testKey}");    Xpp3Dom configurationChild = new Xpp3Dom("jdkHome");    configurationChild.setValue("${env.testKey}");    Xpp3Dom configuration = new Xpp3Dom("configuration");    configuration.addChild(configurationChild);    toolchain.setConfiguration(configuration);    persistedToolchains.addToolchain(toolchain);    doReturn(persistedToolchains).when(toolchainsReader).read(any(InputStream.class), ArgumentMatchers.<String, Object>anyMap());    ToolchainsBuildingResult result = toolchainBuilder.build(request);    String interpolatedValue = "testValue";    assertEquals(interpolatedValue, result.getEffectiveToolchains().getToolchains().get(0).getProvides().getProperty("key"));    Xpp3Dom toolchainConfiguration = (Xpp3Dom) result.getEffectiveToolchains().getToolchains().get(0).getConfiguration();    assertEquals(interpolatedValue, toolchainConfiguration.getChild("jdkHome").getValue());    assertNotNull(result.getProblems());    assertEquals(0, result.getProblems().size());}
public void maven_f3917_0() throws Exception
{    ToolchainsBuildingRequest request = new DefaultToolchainsBuildingRequest();    request.setUserToolchainsSource(new StringSource(""));    PersistedToolchains persistedToolchains = new PersistedToolchains();    ToolchainModel toolchain = new ToolchainModel();    toolchain.setType("TYPE");    toolchain.addProvide("key", "${env.testNonExistingKey}");    persistedToolchains.addToolchain(toolchain);    doReturn(persistedToolchains).when(toolchainsReader).read(any(InputStream.class), ArgumentMatchers.<String, Object>anyMap());    ToolchainsBuildingResult result = toolchainBuilder.build(request);    assertEquals("${env.testNonExistingKey}", result.getEffectiveToolchains().getToolchains().get(0).getProvides().getProperty("key"));    assertNotNull(result.getProblems());    assertEquals(0, result.getProblems().size());}
public void maven_f3918_0() throws Exception
{    ToolchainsBuildingRequest request = new DefaultToolchainsBuildingRequest();    request.setUserToolchainsSource(new StringSource(""));    PersistedToolchains persistedToolchains = new PersistedToolchains();    ToolchainModel toolchain = new ToolchainModel();    toolchain.setType("TYPE");    toolchain.addProvide("key", "${env.testSpecialCharactersKey}");    persistedToolchains.addToolchain(toolchain);    doReturn(persistedToolchains).when(toolchainsReader).read(any(InputStream.class), ArgumentMatchers.<String, Object>anyMap());    ToolchainsBuildingResult result = toolchainBuilder.build(request);    String interpolatedValue = "<test&Value>";    assertEquals(interpolatedValue, result.getEffectiveToolchains().getToolchains().get(0).getProvides().getProperty("key"));    assertNotNull(result.getProblems());    assertEquals(0, result.getProblems().size());}
public Map<String, String> maven_f3919_0()
{    return envVarMap;}
public void maven_f3920_0()
{    ToolchainsBuildingException e = new ToolchainsBuildingException(Collections.<Problem>emptyList());    assertEquals("0 problems were encountered while building the effective toolchains" + LS, e.getMessage());}
public void maven_f3921_0()
{    ProblemCollector problemCollector = ProblemCollectorFactory.newInstance(null);    problemCollector.add(Problem.Severity.ERROR, "MESSAGE", 3, 5, new Exception());    ToolchainsBuildingException e = new ToolchainsBuildingException(problemCollector.getProblems());    assertEquals("1 problem was encountered while building the effective toolchains" + LS + "[ERROR] MESSAGE @ line 3, column 5" + LS, e.getMessage());}
public void maven_f3922_0()
{    ProblemCollector problemCollector = ProblemCollectorFactory.newInstance(null);    problemCollector.add(Problem.Severity.ERROR, "MESSAGE", -1, -1, new Exception());    ToolchainsBuildingException e = new ToolchainsBuildingException(problemCollector.getProblems());    assertEquals("1 problem was encountered while building the effective toolchains" + LS + "[ERROR] MESSAGE" + LS, e.getMessage());}
public void maven_f3923_0()
{    ProblemCollector problemCollector = ProblemCollectorFactory.newInstance(null);    problemCollector.setSource("SOURCE");    problemCollector.add(Problem.Severity.ERROR, "MESSAGE", -1, -1, new Exception());    ToolchainsBuildingException e = new ToolchainsBuildingException(problemCollector.getProblems());    assertEquals("1 problem was encountered while building the effective toolchains" + LS + "[ERROR] MESSAGE @ SOURCE" + LS, e.getMessage());}
public void maven_f3924_0()
{    toolchainManager = new DefaultToolchainManagerPrivate();    MockitoAnnotations.initMocks(this);    toolchainManager.factories = new HashMap<>();    toolchainManager.factories.put("basic", toolchainFactory_basicType);    toolchainManager.factories.put("rare", toolchainFactory_rareType);}
public void maven_f3925_0() throws Exception
{        MavenSession session = mock(MavenSession.class);    MavenExecutionRequest req = new DefaultMavenExecutionRequest();    when(session.getRequest()).thenReturn(req);    ToolchainPrivate basicToolchain = mock(ToolchainPrivate.class);    when(toolchainFactory_basicType.createDefaultToolchain()).thenReturn(basicToolchain);    ToolchainPrivate rareToolchain = mock(ToolchainPrivate.class);    when(toolchainFactory_rareType.createDefaultToolchain()).thenReturn(rareToolchain);        ToolchainPrivate[] toolchains = toolchainManager.getToolchainsForType("basic", session);        verify(logger, never()).error(anyString());    assertEquals(1, toolchains.length);}
public void maven_f3926_0() throws Exception
{        MavenSession session = mock(MavenSession.class);    MavenExecutionRequest req = new DefaultMavenExecutionRequest();    when(session.getRequest()).thenReturn(req);    ToolchainPrivate basicToolchain = mock(ToolchainPrivate.class);    when(toolchainFactory_basicType.createDefaultToolchain()).thenReturn(basicToolchain);    ToolchainPrivate rareToolchain = mock(ToolchainPrivate.class);    when(toolchainFactory_rareType.createDefaultToolchain()).thenReturn(rareToolchain);        ToolchainPrivate[] toolchains = toolchainManager.getToolchainsForType("unknown", session);        verify(logger).error("Missing toolchain factory for type: unknown. Possibly caused by misconfigured project.");    assertEquals(0, toolchains.length);}
public void maven_f3927_0() throws Exception
{        MavenSession session = mock(MavenSession.class);    MavenExecutionRequest req = new DefaultMavenExecutionRequest();    when(session.getRequest()).thenReturn(req);    Map<String, List<ToolchainModel>> groupedToolchains = new HashMap<>();    req.setToolchains(groupedToolchains);    List<ToolchainModel> basicToolchains = new ArrayList<>();    ToolchainModel basicToolchainModel = new ToolchainModel();    basicToolchainModel.setType("basic");    basicToolchains.add(basicToolchainModel);    basicToolchains.add(basicToolchainModel);    groupedToolchains.put("basic", basicToolchains);    List<ToolchainModel> rareToolchains = new ArrayList<>();    ToolchainModel rareToolchainModel = new ToolchainModel();    rareToolchainModel.setType("rare");    rareToolchains.add(rareToolchainModel);    groupedToolchains.put("rare", rareToolchains);        ToolchainPrivate[] toolchains = toolchainManager.getToolchainsForType("basic", session);        verify(logger, never()).error(anyString());    assertEquals(2, toolchains.length);}
public void maven_f3928_0() throws Exception
{        MavenSession session = mock(MavenSession.class);    MavenExecutionRequest req = new DefaultMavenExecutionRequest();    when(session.getRequest()).thenReturn(req);        ToolchainPrivate[] basics = toolchainManager.getToolchainsForType("basic", session);        assertEquals(0, basics.length);}
public void maven_f3929_0() throws Exception
{    toolchainManager = new DefaultToolchainManager();    MockitoAnnotations.initMocks(this);    toolchainManager.factories = new HashMap<>();    toolchainManager.factories.put("basic", toolchainFactory_basicType);    toolchainManager.factories.put("rare", toolchainFactory_rareType);}
public void maven_f3930_0()
{    MavenSession session = mock(MavenSession.class);    MavenExecutionRequest executionRequest = new DefaultMavenExecutionRequest();    when(session.getRequest()).thenReturn(executionRequest);    List<Toolchain> toolchains = toolchainManager.getToolchains(session, "unknown", null);    assertEquals(0, toolchains.size());}
public void maven_f3931_0()
{    MavenSession session = mock(MavenSession.class);    MavenExecutionRequest executionRequest = new DefaultMavenExecutionRequest();    Map<String, List<ToolchainModel>> toolchainModels = new HashMap<>();    toolchainModels.put("unknown", Collections.singletonList(new ToolchainModel()));    executionRequest.setToolchains(toolchainModels);    when(session.getRequest()).thenReturn(executionRequest);    List<Toolchain> toolchains = toolchainManager.getToolchains(session, "unknown", null);    assertEquals(0, toolchains.size());    verify(logger).error("Missing toolchain factory for type: unknown. Possibly caused by misconfigured project.");}
public void maven_f3932_0()
{    MavenSession session = mock(MavenSession.class);    MavenExecutionRequest executionRequest = new DefaultMavenExecutionRequest();    Map<String, List<ToolchainModel>> toolchainModels = new HashMap<>();    toolchainModels.put("basic", Arrays.asList(new ToolchainModel(), new ToolchainModel()));    toolchainModels.put("rare", Collections.singletonList(new ToolchainModel()));    executionRequest.setToolchains(toolchainModels);    when(session.getRequest()).thenReturn(executionRequest);    List<Toolchain> toolchains = toolchainManager.getToolchains(session, "rare", null);    assertEquals(1, toolchains.size());}
public void maven_f3933_0()
{    MavenSession session = mock(MavenSession.class);    MavenExecutionRequest executionRequest = new DefaultMavenExecutionRequest();    Map<String, List<ToolchainModel>> toolchainModels = new HashMap<>();    toolchainModels.put("basic", Arrays.asList(new ToolchainModel(), new ToolchainModel()));    toolchainModels.put("rare", Collections.singletonList(new ToolchainModel()));    executionRequest.setToolchains(toolchainModels);    when(session.getRequest()).thenReturn(executionRequest);    List<Toolchain> toolchains = toolchainManager.getToolchains(session, "basic", null);    assertEquals(2, toolchains.size());}
public void maven_f3934_0() throws Exception
{    MavenSession session = mock(MavenSession.class);    MavenExecutionRequest executionRequest = new DefaultMavenExecutionRequest();    Map<String, List<ToolchainModel>> toolchainModels = new HashMap<>();    toolchainModels.put("basic", Arrays.asList(new ToolchainModel(), new ToolchainModel()));    toolchainModels.put("rare", Collections.singletonList(new ToolchainModel()));    executionRequest.setToolchains(toolchainModels);    when(session.getRequest()).thenReturn(executionRequest);    ToolchainPrivate basicPrivate = mock(ToolchainPrivate.class);    when(basicPrivate.matchesRequirements(ArgumentMatchers.<String, String>anyMap())).thenReturn(false).thenReturn(true);    when(toolchainFactory_basicType.createToolchain(isA(ToolchainModel.class))).thenReturn(basicPrivate);    List<Toolchain> toolchains = toolchainManager.getToolchains(session, "basic", Collections.singletonMap("key", "value"));    assertEquals(1, toolchains.size());}
public void maven_f3935_0() throws Exception
{    MockitoAnnotations.initMocks(this);}
private DefaultToolchain maven_f3936_0(ToolchainModel model)
{    return new DefaultToolchain(model, logger) {        @Override        public String findTool(String toolName) {            return null;        }    };}
public String maven_f3937_0(String toolName)
{    return null;}
private DefaultToolchain maven_f3938_0(ToolchainModel model, String type)
{    return new DefaultToolchain(model, type, logger) {        @Override        public String findTool(String toolName) {            return null;        }    };}
public String maven_f3939_0(String toolName)
{    return null;}
public void maven_f3940_0()
{    ToolchainModel model = new ToolchainModel();    DefaultToolchain toolchain = newDefaultToolchain(model);    assertEquals(model, toolchain.getModel());}
public void maven_f3941_0()
{    ToolchainModel model = new ToolchainModel();    DefaultToolchain toolchain = newDefaultToolchain(model, "TYPE");    assertEquals("TYPE", toolchain.getType());    model.setType("MODEL_TYPE");    toolchain = newDefaultToolchain(model);    assertEquals("MODEL_TYPE", toolchain.getType());}
public void maven_f3942_0()
{    ToolchainModel model = new ToolchainModel();    DefaultToolchain toolchain = newDefaultToolchain(model);    assertEquals(logger, toolchain.getLog());}
public void maven_f3943_0()
{    ToolchainModel model = new ToolchainModel();    model.setType("TYPE");    DefaultToolchain toolchain = newDefaultToolchain(model);    assertFalse(toolchain.matchesRequirements(Collections.singletonMap("name", "John Doe")));    verify(logger).debug("Toolchain type:TYPE{} is missing required property: name");}
public void maven_f3944_0()
{    ToolchainModel model = new ToolchainModel();    model.setType("TYPE");    DefaultToolchain toolchain = newDefaultToolchain(model);    toolchain.addProvideToken("name", RequirementMatcherFactory.createExactMatcher("Jane Doe"));    assertFalse(toolchain.matchesRequirements(Collections.singletonMap("name", "John Doe")));    verify(logger).debug("Toolchain type:TYPE{name = Jane Doe} doesn't match required property: name");}
public void maven_f3945_0() throws Exception
{    try (InputStream jdksIS = ToolchainModel.class.getResourceAsStream("toolchains-jdks.xml");        InputStream jdksExtraIS = ToolchainModel.class.getResourceAsStream("toolchains-jdks-extra.xml")) {        PersistedToolchains jdks = reader.read(jdksIS);        PersistedToolchains jdksExtra = reader.read(jdksExtraIS);        DefaultToolchain tc1 = new DefaultJavaToolChain(jdks.getToolchains().get(0), null);        DefaultToolchain tc2 = new DefaultJavaToolChain(jdksExtra.getToolchains().get(0), null);        assertTrue(tc1.equals(tc1));        assertFalse(tc1.equals(tc2));        assertFalse(tc2.equals(tc1));        assertTrue(tc2.equals(tc2));    }}
public void maven_f3946_0()
{    merger.merge(null, null, null);    PersistedToolchains pt = new PersistedToolchains();    merger.merge(pt, null, null);    merger.merge(null, pt, null);}
public void maven_f3947_0() throws Exception
{    try (InputStream isDominant = ToolchainModel.class.getResourceAsStream("toolchains-jdks.xml");        InputStream isRecessive = ToolchainModel.class.getResourceAsStream("toolchains-jdks.xml")) {        PersistedToolchains dominant = reader.read(isDominant);        PersistedToolchains recessive = reader.read(isRecessive);        assertEquals(2, dominant.getToolchains().size());        merger.merge(dominant, recessive, TrackableBase.USER_LEVEL);        assertEquals(2, dominant.getToolchains().size());    }}
public void maven_f3948_0() throws Exception
{    try (InputStream jdksIS = ToolchainModel.class.getResourceAsStream("toolchains-jdks.xml");        InputStream jdksExtraIS = ToolchainModel.class.getResourceAsStream("toolchains-jdks-extra.xml")) {        PersistedToolchains jdks = reader.read(jdksIS);        PersistedToolchains jdksExtra = reader.read(jdksExtraIS);        assertEquals(2, jdks.getToolchains().size());        merger.merge(jdks, jdksExtra, TrackableBase.USER_LEVEL);        assertEquals(4, jdks.getToolchains().size());        assertEquals(2, jdksExtra.getToolchains().size());    }    try (InputStream jdksIS = ToolchainModel.class.getResourceAsStream("toolchains-jdks.xml");        InputStream jdksExtraIS = ToolchainModel.class.getResourceAsStream("toolchains-jdks-extra.xml")) {        PersistedToolchains jdks = reader.read(jdksIS);        PersistedToolchains jdksExtra = reader.read(jdksExtraIS);        assertEquals(2, jdks.getToolchains().size());                merger.merge(jdksExtra, jdks, TrackableBase.USER_LEVEL);        assertEquals(4, jdksExtra.getToolchains().size());        assertEquals(2, jdks.getToolchains().size());    }}
public void maven_f3949_0() throws Exception
{    try (InputStream jdksIS = ToolchainModel.class.getResourceAsStream("toolchains-jdks.xml");        InputStream jdksExtendIS = ToolchainModel.class.getResourceAsStream("toolchains-jdks-extend.xml")) {        PersistedToolchains jdks = reader.read(jdksIS);        PersistedToolchains jdksExtend = reader.read(jdksExtendIS);        assertEquals(2, jdks.getToolchains().size());        merger.merge(jdks, jdksExtend, TrackableBase.USER_LEVEL);        assertEquals(2, jdks.getToolchains().size());        Xpp3Dom config0 = (Xpp3Dom) jdks.getToolchains().get(0).getConfiguration();        assertEquals("lib/tools.jar", config0.getChild("toolsJar").getValue());        assertEquals(2, config0.getChildCount());        Xpp3Dom config1 = (Xpp3Dom) jdks.getToolchains().get(1).getConfiguration();        assertEquals(2, config1.getChildCount());        assertEquals("lib/classes.jar", config1.getChild("toolsJar").getValue());        assertEquals(2, jdksExtend.getToolchains().size());    }    try (InputStream jdksIS = ToolchainModel.class.getResourceAsStream("toolchains-jdks.xml");        InputStream jdksExtendIS = ToolchainModel.class.getResourceAsStream("toolchains-jdks-extend.xml")) {        PersistedToolchains jdks = reader.read(jdksIS);        PersistedToolchains jdksExtend = reader.read(jdksExtendIS);        assertEquals(2, jdks.getToolchains().size());                merger.merge(jdksExtend, jdks, TrackableBase.USER_LEVEL);        assertEquals(2, jdksExtend.getToolchains().size());        Xpp3Dom config0 = (Xpp3Dom) jdksExtend.getToolchains().get(0).getConfiguration();        assertEquals("lib/tools.jar", config0.getChild("toolsJar").getValue());        assertEquals(2, config0.getChildCount());        Xpp3Dom config1 = (Xpp3Dom) jdksExtend.getToolchains().get(1).getConfiguration();        assertEquals(2, config1.getChildCount());        assertEquals("lib/classes.jar", config1.getChild("toolsJar").getValue());        assertEquals(2, jdks.getToolchains().size());    }}
public void maven_f3950_0()
{    RequirementMatcher matcher;    matcher = RequirementMatcherFactory.createExactMatcher("foo");    assertFalse(matcher.matches("bar"));    assertFalse(matcher.matches("foobar"));    assertFalse(matcher.matches("foob"));    assertTrue(matcher.matches("foo"));}
public void maven_f3951_0()
{    RequirementMatcher matcher;    matcher = RequirementMatcherFactory.createVersionMatcher("1.5.2");    assertFalse(matcher.matches("1.5"));    assertTrue(matcher.matches("1.5.2"));    assertFalse(matcher.matches("[1.4,1.5)"));    assertFalse(matcher.matches("[1.5,1.5.2)"));    assertFalse(matcher.matches("(1.5.2,1.6)"));    assertTrue(matcher.matches("(1.4,1.5.2]"));    assertTrue(matcher.matches("(1.5,)"));    assertEquals("1.5.2", matcher.toString());        matcher = RequirementMatcherFactory.createVersionMatcher("1.5");    assertEquals("1.5", matcher.toString());}
public static void maven_f3952_0(String[] args)
{    System.out.println("Hello World!");}
public static Test maven_f3953_0()
{    return new TestSuite(AppTest.class);}
public void maven_f3954_0()
{    assertTrue(true);}
public static void maven_f3955_0(String[] args)
{    System.out.println("Hello World!");}
public static Test maven_f3956_0()
{    return new TestSuite(AppTest.class);}
public void maven_f3957_0()
{    assertTrue(true);}
public static String[] maven_f3958_0(String[] args)
{    List<String> cleaned = new ArrayList<>();    StringBuilder currentArg = null;    for (String arg : args) {        boolean addedToBuffer = false;        if (arg.startsWith("\"")) {                        if (currentArg != null) {                cleaned.add(currentArg.toString());            }                        currentArg = new StringBuilder(arg.substring(1));            addedToBuffer = true;        }                if (addedToBuffer && arg.endsWith("\"")) {            String cleanArgPart = arg.substring(0, arg.length() - 1);                        if (currentArg != null) {                                if (addedToBuffer) {                    currentArg.setLength(currentArg.length() - 1);                } else                 {                                        currentArg.append(' ').append(cleanArgPart);                }                cleaned.add(currentArg.toString());            } else {                cleaned.add(cleanArgPart);            }            currentArg = null;            addedToBuffer = false;            continue;        }                if (!addedToBuffer) {            if (currentArg != null) {                currentArg.append(' ').append(arg);            } else {                cleaned.add(arg);            }        }    }    if (currentArg != null) {        cleaned.add(currentArg.toString());    }    int cleanedSz = cleaned.size();    String[] cleanArgs;    if (cleanedSz == 0) {        cleanArgs = args;    } else {        cleanArgs = cleaned.toArray(new String[0]);    }    return cleanArgs;}
public CommandLine maven_f3959_0(String[] args) throws ParseException
{        String[] cleanArgs = CleanArgument.cleanArgs(args);    CommandLineParser parser = new GnuParser();    return parser.parse(options, cleanArgs);}
public void maven_f3960_0(PrintStream stdout)
{    stdout.println();    PrintWriter pw = new PrintWriter(stdout);    HelpFormatter formatter = new HelpFormatter();    formatter.printHelp(pw, HelpFormatter.DEFAULT_WIDTH, "mvn [options] [<goal(s)>] [<phase(s)>]", "\nOptions:", options, HelpFormatter.DEFAULT_LEFT_PAD, HelpFormatter.DEFAULT_DESC_PAD, "\n", false);    pw.flush();}
public static String maven_f3961_0()
{    final String ls = System.getProperty("line.separator");    Properties properties = getBuildProperties();    StringBuilder version = new StringBuilder(256);    version.append(buffer().strong(createMavenVersionString(properties))).append(ls);    version.append(reduce(properties.getProperty("distributionShortName") + " home: " + System.getProperty("maven.home", "<unknown Maven " + "home>"))).append(ls);    version.append("Java version: ").append(System.getProperty("java.version", "<unknown Java version>")).append(", vendor: ").append(System.getProperty("java.vendor", "<unknown vendor>")).append(", runtime: ").append(System.getProperty("java.home", "<unknown runtime>")).append(ls);    version.append("Default locale: ").append(Locale.getDefault()).append(", platform encoding: ").append(System.getProperty("file.encoding", "<unknown encoding>")).append(ls);    version.append("OS name: \"").append(Os.OS_NAME).append("\", version: \"").append(Os.OS_VERSION).append("\", arch: \"").append(Os.OS_ARCH).append("\", family: \"").append(Os.OS_FAMILY).append('\"');    return version.toString();}
 static String maven_f3962_0(Properties buildProperties)
{    String timestamp = reduce(buildProperties.getProperty("timestamp"));    String version = reduce(buildProperties.getProperty(BUILD_VERSION_PROPERTY));    String rev = reduce(buildProperties.getProperty("buildNumber"));    String distributionName = reduce(buildProperties.getProperty("distributionName"));    String msg = distributionName + " ";    msg += (version != null ? version : "<version unknown>");    if (rev != null || timestamp != null) {        msg += " (";        msg += (rev != null ? rev : "");        if (StringUtils.isNotBlank(timestamp)) {            String ts = formatTimestamp(Long.valueOf(timestamp));            msg += (rev != null ? "; " : "") + ts;        }        msg += ")";    }    return msg;}
private static String maven_f3963_0(String s)
{    return (s != null ? (s.startsWith("${") && s.endsWith("}") ? null : s) : null);}
 static Properties maven_f3964_0()
{    Properties properties = new Properties();    try (InputStream resourceAsStream = MavenCli.class.getResourceAsStream("/org/apache/maven/messages/build.properties")) {        if (resourceAsStream != null) {            properties.load(resourceAsStream);        }    } catch (IOException e) {        System.err.println("Unable determine version from JAR file: " + e.getMessage());    }    return properties;}
public static voidf3965_1Logger logger, String message, Throwable e, boolean showStackTrace)
{    if (showStackTrace) {            } else {                if (e != null) {                        for (Throwable cause = e.getCause(); cause != null; cause = cause.getCause()) {                            }        }    }}
public static String maven_f3966_0(long timestamp)
{    SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ssXXX");    return sdf.format(new Date(timestamp));}
public static String maven_f3967_0(long duration)
{        long ms = duration % 1000;    long s = (duration / ONE_SECOND) % 60;    long m = (duration / ONE_MINUTE) % 60;    long h = (duration / ONE_HOUR) % 24;    long d = duration / ONE_DAY;        String format;    if (d > 0) {                format = "%d d %02d:%02d h";    } else if (h > 0) {                format = "%2$02d:%3$02d h";    } else if (m > 0) {                format = "%3$02d:%4$02d min";    } else {                format = "%4$d.%5$03d s";    }    return String.format(format, d, h, m, s, ms);}
public String[] maven_f3968_0()
{    return args;}
public CommandLine maven_f3969_0()
{    return commandLine;}
public ClassWorld maven_f3970_0()
{    return classWorld;}
public String maven_f3971_0()
{    return workingDirectory;}
public File maven_f3972_0()
{    return multiModuleProjectDirectory;}
public boolean maven_f3973_0()
{    return debug;}
public boolean maven_f3974_0()
{    return quiet;}
public boolean maven_f3975_0()
{    return showErrors;}
public Properties maven_f3976_0()
{    return userProperties;}
public Properties maven_f3977_0()
{    return systemProperties;}
public MavenExecutionRequest maven_f3978_0()
{    return request;}
public void maven_f3979_0(Properties properties)
{    this.userProperties.putAll(properties);}
public voidf3980_1CliRequest cliRequest) throws Exception
{    CommandLine commandLine = cliRequest.getCommandLine();    String workingDirectory = cliRequest.getWorkingDirectory();    MavenExecutionRequest request = cliRequest.getRequest();    File userSettingsFile;    if (commandLine.hasOption(CLIManager.ALTERNATE_USER_SETTINGS)) {        userSettingsFile = new File(commandLine.getOptionValue(CLIManager.ALTERNATE_USER_SETTINGS));        userSettingsFile = resolveFile(userSettingsFile, workingDirectory);        if (!userSettingsFile.isFile()) {            throw new FileNotFoundException("The specified user settings file does not exist: " + userSettingsFile);        }    } else {        userSettingsFile = DEFAULT_USER_SETTINGS_FILE;    }    File globalSettingsFile;    if (commandLine.hasOption(CLIManager.ALTERNATE_GLOBAL_SETTINGS)) {        globalSettingsFile = new File(commandLine.getOptionValue(CLIManager.ALTERNATE_GLOBAL_SETTINGS));        globalSettingsFile = resolveFile(globalSettingsFile, workingDirectory);        if (!globalSettingsFile.isFile()) {            throw new FileNotFoundException("The specified global settings file does not exist: " + globalSettingsFile);        }    } else {        globalSettingsFile = DEFAULT_GLOBAL_SETTINGS_FILE;    }    request.setGlobalSettingsFile(globalSettingsFile);    request.setUserSettingsFile(userSettingsFile);    SettingsBuildingRequest settingsRequest = new DefaultSettingsBuildingRequest();    settingsRequest.setGlobalSettingsFile(globalSettingsFile);    settingsRequest.setUserSettingsFile(userSettingsFile);    settingsRequest.setSystemProperties(cliRequest.getSystemProperties());    settingsRequest.setUserProperties(cliRequest.getUserProperties());    if (request.getEventSpyDispatcher() != null) {        request.getEventSpyDispatcher().onEvent(settingsRequest);    }            SettingsBuildingResult settingsResult = settingsBuilder.build(settingsRequest);    if (request.getEventSpyDispatcher() != null) {        request.getEventSpyDispatcher().onEvent(settingsResult);    }    populateFromSettings(request, settingsResult.getEffectiveSettings());    if (!settingsResult.getProblems().isEmpty() && logger.isWarnEnabled()) {                        for (SettingsProblem problem : settingsResult.getProblems()) {                    }            }}
private MavenExecutionRequest maven_f3981_0(MavenExecutionRequest request, Settings settings) throws MavenExecutionRequestPopulationException
{    if (settings == null) {        return request;    }    request.setOffline(settings.isOffline());    request.setInteractiveMode(settings.isInteractiveMode());    request.setPluginGroups(settings.getPluginGroups());    request.setLocalRepositoryPath(settings.getLocalRepository());    for (Server server : settings.getServers()) {        server = server.clone();        request.addServer(server);    }    for (Proxy proxy : settings.getProxies()) {        if (!proxy.isActive()) {            continue;        }        proxy = proxy.clone();        request.addProxy(proxy);    }    for (Mirror mirror : settings.getMirrors()) {        mirror = mirror.clone();        request.addMirror(mirror);    }    request.setActiveProfiles(settings.getActiveProfiles());    for (org.apache.maven.settings.Profile rawProfile : settings.getProfiles()) {        request.addProfile(SettingsUtils.convertFromSettingsProfile(rawProfile));        if (settings.getActiveProfiles().contains(rawProfile.getId())) {            List<Repository> remoteRepositories = rawProfile.getRepositories();            for (Repository remoteRepository : remoteRepositories) {                try {                    request.addRemoteRepository(MavenRepositorySystem.buildArtifactRepository(remoteRepository));                } catch (InvalidRepositoryException e) {                                }            }            List<Repository> pluginRepositories = rawProfile.getPluginRepositories();            for (Repository pluginRepository : pluginRepositories) {                try {                    request.addPluginArtifactRepository(MavenRepositorySystem.buildArtifactRepository(pluginRepository));                } catch (InvalidRepositoryException e) {                                }            }        }    }    return request;}
private Object maven_f3982_0(Source source, File defaultLocation)
{    if (source != null) {        return source.getLocation();    }    return defaultLocation;}
 static File maven_f3983_0(File file, String workingDirectory)
{    if (file == null) {        return null;    } else if (file.isAbsolute()) {        return file;    } else if (file.getPath().startsWith(File.separator)) {                return file.getAbsoluteFile();    } else {        return new File(workingDirectory, file.getPath()).getAbsoluteFile();    }}
public Map<String, Object> maven_f3984_0()
{    return data;}
private static String maven_f3985_0(char c, int count)
{    StringBuilder buffer = new StringBuilder(count);    for (int i = count; i > 0; i--) {        buffer.append(c);    }    return buffer.toString();}
private void maven_f3986_0(char c)
{    infoMain(chars(c, LINE_LENGTH));}
private voidf3987_1String msg)
{    }
public voidf3988_1ExecutionEvent event)
{    if (logger.isInfoEnabled()) {            }}
public voidf3989_1ExecutionEvent event)
{    if (logger.isInfoEnabled() && event.getSession().getProjects().size() > 1) {        infoLine('-');        infoMain("Reactor Build Order:");                final List<MavenProject> projects = event.getSession().getProjects();        for (MavenProject project : projects) {            int len = LINE_LENGTH - project.getName().length() - project.getPackaging().length() - 2;                    }        totalProjects = projects.size();    }}
public void maven_f3990_0(ExecutionEvent event)
{    if (logger.isInfoEnabled()) {        if (event.getSession().getProjects().size() > 1) {            logReactorSummary(event.getSession());        }        logResult(event.getSession());        logStats(event.getSession());        infoLine('-');    }}
private boolean maven_f3991_0(MavenSession session)
{    boolean result = true;    MavenProject topProject = session.getTopLevelProject();    List<MavenProject> sortedProjects = session.getProjectDependencyGraph().getSortedProjects();    for (MavenProject mavenProject : sortedProjects) {        if (!topProject.getVersion().equals(mavenProject.getVersion())) {            result = false;            break;        }    }    return result;}
private voidf3992_1MavenSession session)
{    boolean isSingleVersion = isSingleVersionedReactor(session);    infoLine('-');    StringBuilder summary = new StringBuilder("Reactor Summary");    if (isSingleVersion) {        summary.append(" for ");        summary.append(session.getTopLevelProject().getName());        summary.append(" ");        summary.append(session.getTopLevelProject().getVersion());    }    summary.append(":");    infoMain(summary.toString());        MavenExecutionResult result = session.getResult();    List<MavenProject> projects = session.getProjects();    for (MavenProject project : projects) {        StringBuilder buffer = new StringBuilder(128);        buffer.append(project.getName());        buffer.append(' ');        if (!isSingleVersion) {            buffer.append(project.getVersion());            buffer.append(' ');        }        if (buffer.length() <= MAX_PROJECT_NAME_LENGTH) {            while (buffer.length() < MAX_PROJECT_NAME_LENGTH) {                buffer.append('.');            }            buffer.append(' ');        }        BuildSummary buildSummary = result.getBuildSummary(project);        if (buildSummary == null) {            buffer.append(buffer().warning("SKIPPED"));        } else if (buildSummary instanceof BuildSuccess) {            buffer.append(buffer().success("SUCCESS"));            buffer.append(" [");            String buildTimeDuration = formatDuration(buildSummary.getTime());            int padSize = MAX_PADDED_BUILD_TIME_DURATION_LENGTH - buildTimeDuration.length();            if (padSize > 0) {                buffer.append(chars(' ', padSize));            }            buffer.append(buildTimeDuration);            buffer.append(']');        } else if (buildSummary instanceof BuildFailure) {            buffer.append(buffer().failure("FAILURE"));            buffer.append(" [");            String buildTimeDuration = formatDuration(buildSummary.getTime());            int padSize = MAX_PADDED_BUILD_TIME_DURATION_LENGTH - buildTimeDuration.length();            if (padSize > 0) {                buffer.append(chars(' ', padSize));            }            buffer.append(buildTimeDuration);            buffer.append(']');        }            }}
private voidf3993_1MavenSession session)
{    infoLine('-');    MessageBuilder buffer = buffer();    if (session.getResult().hasExceptions()) {        buffer.failure("BUILD FAILURE");    } else {        buffer.success("BUILD SUCCESS");    }    }
private voidf3994_1MavenSession session)
{    infoLine('-');    long finish = System.currentTimeMillis();    long time = finish - session.getRequest().getStartTime().getTime();    String wallClock = session.getRequest().getDegreeOfConcurrency() > 1 ? " (Wall Clock)" : "";        }
public voidf3995_1ExecutionEvent event)
{    if (logger.isInfoEnabled()) {                infoLine('-');        infoMain("Skipping " + event.getProject().getName());                infoLine('-');    }}
public voidf3996_1ExecutionEvent event)
{    if (logger.isInfoEnabled()) {        MavenProject project = event.getProject();                        String projectKey = project.getGroupId() + ':' + project.getArtifactId();        final String preHeader = "--< ";        final String postHeader = " >--";        final int headerLen = preHeader.length() + projectKey.length() + postHeader.length();        String prefix = chars('-', Math.max(0, (LINE_LENGTH - headerLen) / 2)) + preHeader;        String suffix = postHeader + chars('-', Math.max(0, LINE_LENGTH - headerLen - prefix.length() + preHeader.length()));                        String building = "Building " + event.getProject().getName() + " " + event.getProject().getVersion();        if (totalProjects <= 1) {            infoMain(building);        } else {                        int number;            synchronized (this) {                number = ++currentVisitedProjectCount;            }            String progress = " [" + number + '/' + totalProjects + ']';            int pad = LINE_LENGTH - building.length() - progress.length();            infoMain(building + ((pad > 0) ? chars(' ', pad) : "") + progress);        }                prefix = chars('-', Math.max(0, (LINE_LENGTH - project.getPackaging().length() - 4) / 2));        suffix = chars('-', Math.max(0, LINE_LENGTH - project.getPackaging().length() - 4 - prefix.length()));        infoMain(prefix + "[ " + project.getPackaging() + " ]" + suffix);    }}
public voidf3997_1ExecutionEvent event)
{    if (logger.isWarnEnabled()) {            }}
public voidf3998_1ExecutionEvent event)
{    if (logger.isInfoEnabled()) {                MessageBuilder buffer = buffer().strong("--- ");        append(buffer, event.getMojoExecution());        append(buffer, event.getProject());        buffer.strong(" ---");            }}
public voidf3999_1ExecutionEvent event)
{    if (logger.isInfoEnabled()) {                MessageBuilder buffer = buffer().strong(">>> ");        append(buffer, event.getMojoExecution());        buffer.strong(" > ");        appendForkInfo(buffer, event.getMojoExecution().getMojoDescriptor());        append(buffer, event.getProject());        buffer.strong(" >>>");            }}
public voidf4000_1ExecutionEvent event)
{    if (logger.isInfoEnabled()) {                MessageBuilder buffer = buffer().strong("<<< ");        append(buffer, event.getMojoExecution());        buffer.strong(" < ");        appendForkInfo(buffer, event.getMojoExecution().getMojoDescriptor());        append(buffer, event.getProject());        buffer.strong(" <<<");                    }}
private void maven_f4001_0(MessageBuilder buffer, MojoExecution me)
{    buffer.mojo(me.getArtifactId() + ':' + me.getVersion() + ':' + me.getGoal());    if (me.getExecutionId() != null) {        buffer.a(' ').strong('(' + me.getExecutionId() + ')');    }}
private void maven_f4002_0(MessageBuilder buffer, MojoDescriptor md)
{    StringBuilder buff = new StringBuilder();    if (StringUtils.isNotEmpty(md.getExecutePhase())) {                if (StringUtils.isNotEmpty(md.getExecuteLifecycle())) {            buff.append('[');            buff.append(md.getExecuteLifecycle());            buff.append(']');        }        buff.append(md.getExecutePhase());    } else {                buff.append(':');        buff.append(md.getExecuteGoal());    }    buffer.strong(buff.toString());}
private void maven_f4003_0(MessageBuilder buffer, MavenProject project)
{    buffer.a(" @ ").project(project.getArtifactId());}
public voidf4004_1ExecutionEvent event)
{    if (logger.isInfoEnabled() && event.getMojoExecution().getForkedExecutions().size() > 1) {                infoLine('>');        infoMain("Forking " + event.getProject().getName() + " " + event.getProject().getVersion());        infoLine('>');    }}
public List<CoreExtensionEntry> maven_f4005_0(MavenExecutionRequest request, Set<String> providedArtifacts, List<CoreExtension> extensions) throws Exception
{    RepositorySystemSession repoSession = repositorySystemSessionFactory.newRepositorySession(request);    List<RemoteRepository> repositories = RepositoryUtils.toRepos(request.getPluginArtifactRepositories());    return resolveCoreExtensions(repoSession, repositories, providedArtifacts, extensions);}
private List<CoreExtensionEntry> maven_f4006_0(RepositorySystemSession repoSession, List<RemoteRepository> repositories, Set<String> providedArtifacts, List<CoreExtension> configuration) throws Exception
{    List<CoreExtensionEntry> extensions = new ArrayList<>();    DependencyFilter dependencyFilter = new ExclusionsDependencyFilter(providedArtifacts);    for (CoreExtension extension : configuration) {        List<Artifact> artifacts = resolveExtension(extension, repoSession, repositories, dependencyFilter);        if (!artifacts.isEmpty()) {            extensions.add(createExtension(extension, artifacts));        }    }    return Collections.unmodifiableList(extensions);}
private CoreExtensionEntryf4007_1CoreExtension extension, List<Artifact> artifacts) throws Exception
{    String realmId = "coreExtension>" + extension.getGroupId() + ":" + extension.getArtifactId() + ":" + extension.getVersion();    ClassRealm realm = classWorld.newRealm(realmId, null);        realm.setParentRealm(parentRealm);    for (Artifact artifact : artifacts) {        File file = artifact.getFile();                realm.addURL(file.toURI().toURL());    }    return CoreExtensionEntry.discoverFrom(realm, Collections.singleton(artifacts.get(0).getFile()));}
private List<Artifact> maven_f4008_0(CoreExtension extension, RepositorySystemSession repoSession, List<RemoteRepository> repositories, DependencyFilter dependencyFilter) throws PluginResolutionException
{    Plugin plugin = new Plugin();    plugin.setGroupId(extension.getGroupId());    plugin.setArtifactId(extension.getArtifactId());    plugin.setVersion(extension.getVersion());    DependencyNode root = pluginDependenciesResolver.resolveCoreExtension(plugin, dependencyFilter, repositories, repoSession);    PreorderNodeListGenerator nlg = new PreorderNodeListGenerator();    root.accept(nlg);    List<Artifact> artifacts = nlg.getArtifacts(false);    return artifacts;}
public voidf4009_1Level level)
{    }
public voidf4010_1)
{    }
public void maven_f4011_0(Level level)
{    String value;    switch(level) {        case DEBUG:            value = "debug";            break;        case INFO:            value = "info";            break;        default:            value = "error";            break;    }    System.setProperty("maven.logging.root.level", value);}
public void maven_f4012_0()
{}
public void maven_f4013_0(Level level)
{    ch.qos.logback.classic.Level value;    switch(level) {        case DEBUG:            value = ch.qos.logback.classic.Level.DEBUG;            break;        case INFO:            value = ch.qos.logback.classic.Level.INFO;            break;        default:            value = ch.qos.logback.classic.Level.ERROR;            break;    }    ((ch.qos.logback.classic.Logger) LoggerFactory.getLogger(Logger.ROOT_LOGGER_NAME)).setLevel(value);}
public void maven_f4014_0()
{}
public void maven_f4015_0(Level level)
{    String value;    switch(level) {        case DEBUG:            value = "debug";            break;        case INFO:            value = "info";            break;        default:            value = "error";            break;    }    System.setProperty("org.slf4j.simpleLogger.defaultLogLevel", value);}
public void maven_f4016_0()
{        MavenSlf4jFriend.reset();    MavenSlf4jSimpleFriend.init();}
public voidf4017_1)
{            String ls = System.getProperty("line.separator");    for (Map.Entry<URL, Set<Object>> entry : supported.entrySet()) {        StringBuilder sb = new StringBuilder();        sb.append("(from ").append(entry.getKey().toExternalForm()).append(')');        for (Object binding : entry.getValue()) {            sb.append(ls).append("- ").append(binding);        }            }}
public static Slf4jConfiguration maven_f4018_0(ILoggerFactory loggerFactory)
{    Map<URL, Set<Object>> supported = new LinkedHashMap<>();    String slf4jBinding = loggerFactory.getClass().getCanonicalName();    try {        Enumeration<URL> resources = Slf4jConfigurationFactory.class.getClassLoader().getResources(RESOURCE);        while (resources.hasMoreElements()) {            URL resource = resources.nextElement();            Properties conf = PropertyUtils.loadProperties(resource.openStream());            String impl = conf.getProperty(slf4jBinding);            if (impl != null) {                return (Slf4jConfiguration) Class.forName(impl).newInstance();            }            supported.put(resource, conf.keySet());        }    } catch (IOException | ClassNotFoundException | IllegalAccessException | InstantiationException e) {        e.printStackTrace();    }    return new UnsupportedSlf4jBindingConfiguration(slf4jBinding, supported);}
public voidf4019_1String message)
{    }
public voidf4020_1String message, Throwable throwable)
{    }
public boolean maven_f4021_0()
{    return logger.isDebugEnabled();}
public voidf4022_1String message)
{    }
public voidf4023_1String message, Throwable throwable)
{    }
public boolean maven_f4024_0()
{    return logger.isInfoEnabled();}
public voidf4025_1String message)
{    }
public voidf4026_1String message, Throwable throwable)
{    }
public boolean maven_f4027_0()
{    return logger.isWarnEnabled();}
public voidf4028_1String message)
{    }
public voidf4029_1String message, Throwable throwable)
{    }
public boolean maven_f4030_0()
{    return logger.isErrorEnabled();}
public voidf4031_1String message)
{    }
public voidf4032_1String message, Throwable throwable)
{    }
public boolean maven_f4033_0()
{    return logger.isErrorEnabled();}
public int maven_f4034_0()
{    return 0;}
public void maven_f4035_0(int threshold)
{}
public Logger maven_f4036_0(String name)
{    return null;}
public String maven_f4037_0()
{    return logger.getName();}
public Logger maven_f4038_0(String role)
{    return new Slf4jLogger(loggerFactory.getLogger(role));}
public Logger maven_f4039_0(String role, String hint)
{    return (null == hint ? getLoggerForComponent(role) : new Slf4jLogger(loggerFactory.getLogger(role + '.' + hint)));}
public void maven_f4040_0(String role)
{}
public void maven_f4041_0(String role, String hint)
{}
public int maven_f4042_0()
{    return 0;}
public void maven_f4043_0(int threshold)
{}
public void maven_f4044_0(int threshold)
{}
public int maven_f4045_0()
{    return 0;}
public void maven_f4046_0(String msg)
{    out.print(ERROR);    out.println(msg);}
public void maven_f4047_0(String msg, Throwable t)
{    error(msg);    if (null != t) {        t.printStackTrace(out);    }}
public String maven_f4048_0()
{    return null;}
public boolean maven_f4049_0()
{    return false;}
public void maven_f4050_0(String msg)
{}
public void maven_f4051_0(String format, Object arg)
{}
public void maven_f4052_0(String format, Object arg1, Object arg2)
{}
public void maven_f4053_0(String format, Object... arguments)
{}
public void maven_f4054_0(String msg, Throwable t)
{}
public boolean maven_f4055_0(Marker marker)
{    return false;}
public void maven_f4056_0(Marker marker, String msg)
{}
public void maven_f4057_0(Marker marker, String format, Object arg)
{}
public void maven_f4058_0(Marker marker, String format, Object arg1, Object arg2)
{}
public void maven_f4059_0(Marker marker, String format, Object... argArray)
{}
public void maven_f4060_0(Marker marker, String msg, Throwable t)
{}
public boolean maven_f4061_0()
{    return false;}
public void maven_f4062_0(String msg)
{}
public void maven_f4063_0(String format, Object arg)
{}
public void maven_f4064_0(String format, Object arg1, Object arg2)
{}
public void maven_f4065_0(String format, Object... arguments)
{}
public void maven_f4066_0(String msg, Throwable t)
{}
public boolean maven_f4067_0(Marker marker)
{    return false;}
public void maven_f4068_0(Marker marker, String msg)
{}
public void maven_f4069_0(Marker marker, String format, Object arg)
{}
public void maven_f4070_0(Marker marker, String format, Object arg1, Object arg2)
{}
public void maven_f4071_0(Marker marker, String format, Object... arguments)
{}
public void maven_f4072_0(Marker marker, String msg, Throwable t)
{}
public boolean maven_f4073_0()
{    return false;}
public void maven_f4074_0(String msg)
{}
public void maven_f4075_0(String format, Object arg)
{}
public void maven_f4076_0(String format, Object arg1, Object arg2)
{}
public void maven_f4077_0(String format, Object... arguments)
{}
public void maven_f4078_0(String msg, Throwable t)
{}
public boolean maven_f4079_0(Marker marker)
{    return false;}
public void maven_f4080_0(Marker marker, String msg)
{}
public void maven_f4081_0(Marker marker, String format, Object arg)
{}
public void maven_f4082_0(Marker marker, String format, Object arg1, Object arg2)
{}
public void maven_f4083_0(Marker marker, String format, Object... arguments)
{}
public void maven_f4084_0(Marker marker, String msg, Throwable t)
{}
public boolean maven_f4085_0()
{    return false;}
public void maven_f4086_0(String msg)
{}
public void maven_f4087_0(String format, Object arg)
{}
public void maven_f4088_0(String format, Object... arguments)
{}
public void maven_f4089_0(String format, Object arg1, Object arg2)
{}
public void maven_f4090_0(String msg, Throwable t)
{}
public boolean maven_f4091_0(Marker marker)
{    return false;}
public void maven_f4092_0(Marker marker, String msg)
{}
public void maven_f4093_0(Marker marker, String format, Object arg)
{}
public void maven_f4094_0(Marker marker, String format, Object arg1, Object arg2)
{}
public void maven_f4095_0(Marker marker, String format, Object... arguments)
{}
public void maven_f4096_0(Marker marker, String msg, Throwable t)
{}
public boolean maven_f4097_0()
{    return false;}
public void maven_f4098_0(String format, Object arg)
{}
public void maven_f4099_0(String format, Object arg1, Object arg2)
{}
public void maven_f4100_0(String format, Object... arguments)
{}
public boolean maven_f4101_0(Marker marker)
{    return false;}
public void maven_f4102_0(Marker marker, String msg)
{}
public void maven_f4103_0(Marker marker, String format, Object arg)
{}
public void maven_f4104_0(Marker marker, String format, Object arg1, Object arg2)
{}
public void maven_f4105_0(Marker marker, String format, Object... arguments)
{}
public void maven_f4106_0(Marker marker, String msg, Throwable t)
{}
public static void maven_f4107_0(String[] args)
{    int result = main(args, null);    System.exit(result);}
public static int maven_f4108_0(String[] args, ClassWorld classWorld)
{    MavenCli cli = new MavenCli();    MessageUtils.systemInstall();    MessageUtils.registerShutdownHook();    int result = cli.doMain(new CliRequest(args, classWorld));    MessageUtils.systemUninstall();    return result;}
public static int maven_f4109_0(String[] args, ClassWorld classWorld)
{    MavenCli cli = new MavenCli();    return cli.doMain(new CliRequest(args, classWorld));}
public int maven_f4110_0(String[] args, String workingDirectory, PrintStream stdout, PrintStream stderr)
{    PrintStream oldout = System.out;    PrintStream olderr = System.err;    final Set<String> realms;    if (classWorld != null) {        realms = new HashSet<>();        for (ClassRealm realm : classWorld.getRealms()) {            realms.add(realm.getId());        }    } else {        realms = Collections.emptySet();    }    try {        if (stdout != null) {            System.setOut(stdout);        }        if (stderr != null) {            System.setErr(stderr);        }        CliRequest cliRequest = new CliRequest(args, classWorld);        cliRequest.workingDirectory = workingDirectory;        return doMain(cliRequest);    } finally {        if (classWorld != null) {            for (ClassRealm realm : new ArrayList<>(classWorld.getRealms())) {                String realmId = realm.getId();                if (!realms.contains(realmId)) {                    try {                        classWorld.disposeRealm(realmId);                    } catch (NoSuchRealmException ignored) {                                        }                }            }        }        System.setOut(oldout);        System.setErr(olderr);    }}
public int maven_f4111_0(CliRequest cliRequest)
{    PlexusContainer localContainer = null;    try {        initialize(cliRequest);        cli(cliRequest);        properties(cliRequest);        logging(cliRequest);        version(cliRequest);        localContainer = container(cliRequest);        commands(cliRequest);        configure(cliRequest);        toolchains(cliRequest);        populateRequest(cliRequest);        encryption(cliRequest);        repository(cliRequest);        return execute(cliRequest);    } catch (ExitException e) {        return e.exitCode;    } catch (UnrecognizedOptionException e) {                return 1;    } catch (BuildAbort e) {        CLIReportingUtils.showError(slf4jLogger, "ABORTED", e, cliRequest.showErrors);        return 2;    } catch (Exception e) {        CLIReportingUtils.showError(slf4jLogger, "Error executing Maven.", e, cliRequest.showErrors);        return 1;    } finally {        if (localContainer != null) {            localContainer.dispose();        }    }}
 void maven_f4112_0(CliRequest cliRequest) throws ExitException
{    if (cliRequest.workingDirectory == null) {        cliRequest.workingDirectory = System.getProperty("user.dir");    }    if (cliRequest.multiModuleProjectDirectory == null) {        String basedirProperty = System.getProperty(MULTIMODULE_PROJECT_DIRECTORY);        if (basedirProperty == null) {            System.err.format("-D%s system property is not set.", MULTIMODULE_PROJECT_DIRECTORY);            throw new ExitException(1);        }        File basedir = basedirProperty != null ? new File(basedirProperty) : new File("");        try {            cliRequest.multiModuleProjectDirectory = basedir.getCanonicalFile();        } catch (IOException e) {            cliRequest.multiModuleProjectDirectory = basedir.getAbsoluteFile();        }    }                    String mavenHome = System.getProperty("maven.home");    if (mavenHome != null) {        System.setProperty("maven.home", new File(mavenHome).getAbsolutePath());    }}
 void maven_f4113_0(CliRequest cliRequest) throws Exception
{                    slf4jLogger = new Slf4jStdoutLogger();    CLIManager cliManager = new CLIManager();    List<String> args = new ArrayList<>();    CommandLine mavenConfig = null;    try {        File configFile = new File(cliRequest.multiModuleProjectDirectory, MVN_MAVEN_CONFIG);        if (configFile.isFile()) {            for (String arg : new String(Files.readAllBytes(configFile.toPath())).split("\\s+")) {                if (!arg.isEmpty()) {                    args.add(arg);                }            }            mavenConfig = cliManager.parse(args.toArray(new String[0]));            List<?> unrecongized = mavenConfig.getArgList();            if (!unrecongized.isEmpty()) {                throw new ParseException("Unrecognized maven.config entries: " + unrecongized);            }        }    } catch (ParseException e) {        System.err.println("Unable to parse maven.config: " + e.getMessage());        cliManager.displayHelp(System.out);        throw e;    }    try {        if (mavenConfig == null) {            cliRequest.commandLine = cliManager.parse(cliRequest.args);        } else {            cliRequest.commandLine = cliMerge(cliManager.parse(cliRequest.args), mavenConfig);        }    } catch (ParseException e) {        System.err.println("Unable to parse command line options: " + e.getMessage());        cliManager.displayHelp(System.out);        throw e;    }    if (cliRequest.commandLine.hasOption(CLIManager.HELP)) {        cliManager.displayHelp(System.out);        throw new ExitException(0);    }    if (cliRequest.commandLine.hasOption(CLIManager.VERSION)) {        System.out.println(CLIReportingUtils.showVersion());        throw new ExitException(0);    }}
private CommandLine maven_f4114_0(CommandLine mavenArgs, CommandLine mavenConfig)
{    CommandLine.Builder commandLineBuilder = new CommandLine.Builder();        for (String arg : mavenArgs.getArgs()) {        commandLineBuilder.addArg(arg);    }    for (String arg : mavenConfig.getArgs()) {        commandLineBuilder.addArg(arg);    }        List<Option> setPropertyOptions = new ArrayList<>();    for (Option opt : mavenArgs.getOptions()) {        if (String.valueOf(CLIManager.SET_SYSTEM_PROPERTY).equals(opt.getOpt())) {            setPropertyOptions.add(opt);        } else {            commandLineBuilder.addOption(opt);        }    }    for (Option opt : mavenConfig.getOptions()) {        commandLineBuilder.addOption(opt);    }        for (Option opt : setPropertyOptions) {        commandLineBuilder.addOption(opt);    }    return commandLineBuilder.build();}
 void maven_f4115_0(CliRequest cliRequest)
{        cliRequest.debug = cliRequest.commandLine.hasOption(CLIManager.DEBUG);    cliRequest.quiet = !cliRequest.debug && cliRequest.commandLine.hasOption(CLIManager.QUIET);    cliRequest.showErrors = cliRequest.debug || cliRequest.commandLine.hasOption(CLIManager.ERRORS);    slf4jLoggerFactory = LoggerFactory.getILoggerFactory();    Slf4jConfiguration slf4jConfiguration = Slf4jConfigurationFactory.getConfiguration(slf4jLoggerFactory);    if (cliRequest.debug) {        cliRequest.request.setLoggingLevel(MavenExecutionRequest.LOGGING_LEVEL_DEBUG);        slf4jConfiguration.setRootLoggerLevel(Slf4jConfiguration.Level.DEBUG);    } else if (cliRequest.quiet) {        cliRequest.request.setLoggingLevel(MavenExecutionRequest.LOGGING_LEVEL_ERROR);        slf4jConfiguration.setRootLoggerLevel(Slf4jConfiguration.Level.ERROR);    }                String styleColor = cliRequest.getUserProperties().getProperty(STYLE_COLOR_PROPERTY, "auto");    if ("always".equals(styleColor)) {        MessageUtils.setColorEnabled(true);    } else if ("never".equals(styleColor)) {        MessageUtils.setColorEnabled(false);    } else if (!"auto".equals(styleColor)) {        throw new IllegalArgumentException("Invalid color configuration option [" + styleColor + "]. Supported values are (auto|always|never).");    } else if (cliRequest.commandLine.hasOption(CLIManager.BATCH_MODE) || cliRequest.commandLine.hasOption(CLIManager.LOG_FILE)) {        MessageUtils.setColorEnabled(false);    }        if (cliRequest.commandLine.hasOption(CLIManager.LOG_FILE)) {        File logFile = new File(cliRequest.commandLine.getOptionValue(CLIManager.LOG_FILE));        logFile = resolveFile(logFile, cliRequest.workingDirectory);                try {            PrintStream ps = new PrintStream(new FileOutputStream(logFile));            System.setOut(ps);            System.setErr(ps);        } catch (FileNotFoundException e) {                                }    }    slf4jConfiguration.activate();    plexusLoggerManager = new Slf4jLoggerManager();    slf4jLogger = slf4jLoggerFactory.getLogger(this.getClass().getName());}
private void maven_f4116_0(CliRequest cliRequest)
{    if (cliRequest.debug || cliRequest.commandLine.hasOption(CLIManager.SHOW_VERSION)) {        System.out.println(CLIReportingUtils.showVersion());    }}
 void maven_f4118_0(CliRequest cliRequest)
{    populateProperties(cliRequest.commandLine, cliRequest.systemProperties, cliRequest.userProperties);}
 PlexusContainer maven_f4119_0(CliRequest cliRequest) throws Exception
{    if (cliRequest.classWorld == null) {        cliRequest.classWorld = new ClassWorld("plexus.core", Thread.currentThread().getContextClassLoader());    }    ClassRealm coreRealm = cliRequest.classWorld.getClassRealm("plexus.core");    if (coreRealm == null) {        coreRealm = cliRequest.classWorld.getRealms().iterator().next();    }    List<File> extClassPath = parseExtClasspath(cliRequest);    CoreExtensionEntry coreEntry = CoreExtensionEntry.discoverFrom(coreRealm);    List<CoreExtensionEntry> extensions = loadCoreExtensions(cliRequest, coreRealm, coreEntry.getExportedArtifacts());    ClassRealm containerRealm = setupContainerRealm(cliRequest.classWorld, coreRealm, extClassPath, extensions);    ContainerConfiguration cc = new DefaultContainerConfiguration().setClassWorld(cliRequest.classWorld).setRealm(containerRealm).setClassPathScanning(PlexusConstants.SCANNING_INDEX).setAutoWiring(true).setJSR250Lifecycle(true).setName("maven");    Set<String> exportedArtifacts = new HashSet<>(coreEntry.getExportedArtifacts());    Set<String> exportedPackages = new HashSet<>(coreEntry.getExportedPackages());    for (CoreExtensionEntry extension : extensions) {        exportedArtifacts.addAll(extension.getExportedArtifacts());        exportedPackages.addAll(extension.getExportedPackages());    }    final CoreExports exports = new CoreExports(containerRealm, exportedArtifacts, exportedPackages);    DefaultPlexusContainer container = new DefaultPlexusContainer(cc, new AbstractModule() {        @Override        protected void configure() {            bind(ILoggerFactory.class).toInstance(slf4jLoggerFactory);            bind(CoreExports.class).toInstance(exports);        }    });        container.setLookupRealm(null);    Thread.currentThread().setContextClassLoader(container.getContainerRealm());    container.setLoggerManager(plexusLoggerManager);    for (CoreExtensionEntry extension : extensions) {        container.discoverComponents(extension.getClassRealm(), new SessionScopeModule(container), new MojoExecutionScopeModule(container));    }    customizeContainer(container);    container.getLoggerManager().setThresholds(cliRequest.request.getLoggingLevel());    eventSpyDispatcher = container.lookup(EventSpyDispatcher.class);    DefaultEventSpyContext eventSpyContext = new DefaultEventSpyContext();    Map<String, Object> data = eventSpyContext.getData();    data.put("plexus", container);    data.put("workingDirectory", cliRequest.workingDirectory);    data.put("systemProperties", cliRequest.systemProperties);    data.put("userProperties", cliRequest.userProperties);    data.put("versionProperties", CLIReportingUtils.getBuildProperties());    eventSpyDispatcher.init(eventSpyContext);        slf4jLogger = slf4jLoggerFactory.getLogger(this.getClass().getName());    maven = container.lookup(Maven.class);    executionRequestPopulator = container.lookup(MavenExecutionRequestPopulator.class);    modelProcessor = createModelProcessor(container);    configurationProcessors = container.lookupMap(ConfigurationProcessor.class);    toolchainsBuilder = container.lookup(ToolchainsBuilder.class);    dispatcher = (DefaultSecDispatcher) container.lookup(SecDispatcher.class, "maven");    return container;}
protected void maven_f4120_0()
{    bind(ILoggerFactory.class).toInstance(slf4jLoggerFactory);    bind(CoreExports.class).toInstance(exports);}
protected void maven_f4122_0()
{    bind(ILoggerFactory.class).toInstance(slf4jLoggerFactory);}
private List<CoreExtension> maven_f4123_0(File extensionsFile) throws IOException, XmlPullParserException
{    CoreExtensionsXpp3Reader parser = new CoreExtensionsXpp3Reader();    try (InputStream is = new BufferedInputStream(new FileInputStream(extensionsFile))) {        return parser.read(is).getExtensions();    }}
private static List<T> maven_f4125_0(List<T> list)
{    List<T> copy = new ArrayList<>(list);    Collections.reverse(copy);    return copy;}
private void maven_f4127_0(CliRequest cliRequest) throws Exception
{    if (cliRequest.commandLine.hasOption(CLIManager.ENCRYPT_MASTER_PASSWORD)) {        String passwd = cliRequest.commandLine.getOptionValue(CLIManager.ENCRYPT_MASTER_PASSWORD);        if (passwd == null) {            Console cons = System.console();            char[] password = (cons == null) ? null : cons.readPassword("Master password: ");            if (password != null) {                                passwd = String.copyValueOf(password);                                java.util.Arrays.fill(password, ' ');            }        }        DefaultPlexusCipher cipher = new DefaultPlexusCipher();        System.out.println(cipher.encryptAndDecorate(passwd, DefaultSecDispatcher.SYSTEM_PROPERTY_SEC_LOCATION));        throw new ExitException(0);    } else if (cliRequest.commandLine.hasOption(CLIManager.ENCRYPT_PASSWORD)) {        String passwd = cliRequest.commandLine.getOptionValue(CLIManager.ENCRYPT_PASSWORD);        if (passwd == null) {            Console cons = System.console();            char[] password = (cons == null) ? null : cons.readPassword("Password: ");            if (password != null) {                                passwd = String.copyValueOf(password);                                java.util.Arrays.fill(password, ' ');            }        }        String configurationFile = dispatcher.getConfigurationFile();        if (configurationFile.startsWith("~")) {            configurationFile = System.getProperty("user.home") + configurationFile.substring(1);        }        String file = System.getProperty(DefaultSecDispatcher.SYSTEM_PROPERTY_SEC_LOCATION, configurationFile);        String master = null;        SettingsSecurity sec = SecUtil.read(file, true);        if (sec != null) {            master = sec.getMaster();        }        if (master == null) {            throw new IllegalStateException("Master password is not set in the setting security file: " + file);        }        DefaultPlexusCipher cipher = new DefaultPlexusCipher();        String masterPasswd = cipher.decryptDecorated(master, DefaultSecDispatcher.SYSTEM_PROPERTY_SEC_LOCATION);        System.out.println(cipher.encryptAndDecorate(passwd, masterPasswd));        throw new ExitException(0);    }}
private void maven_f4128_0(CliRequest cliRequest) throws Exception
{    if (cliRequest.commandLine.hasOption(CLIManager.LEGACY_LOCAL_REPOSITORY) || Boolean.getBoolean("maven.legacyLocalRepo")) {        cliRequest.request.setUseLegacyLocalRepository(true);    }}
private String maven_f4130_0(List<MavenProject> mavenProjects, MavenProject failedProject)
{    for (MavenProject buildProject : mavenProjects) {        if (failedProject.getArtifactId().equals(buildProject.getArtifactId()) && !failedProject.equals(buildProject)) {            return failedProject.getGroupId() + ":" + failedProject.getArtifactId();        }    }    return ":" + failedProject.getArtifactId();}
private void maven_f4132_0(CliRequest cliRequest) throws Exception
{                            cliRequest.request.setEventSpyDispatcher(eventSpyDispatcher);                                int userSuppliedConfigurationProcessorCount = configurationProcessors.size() - 1;    if (userSuppliedConfigurationProcessorCount == 0) {                                        configurationProcessors.get(SettingsXmlConfigurationProcessor.HINT).process(cliRequest);    } else if (userSuppliedConfigurationProcessorCount == 1) {                for (Entry<String, ConfigurationProcessor> entry : configurationProcessors.entrySet()) {            String hint = entry.getKey();            if (!hint.equals(SettingsXmlConfigurationProcessor.HINT)) {                ConfigurationProcessor configurationProcessor = entry.getValue();                configurationProcessor.process(cliRequest);            }        }    } else if (userSuppliedConfigurationProcessorCount > 1) {                                StringBuilder sb = new StringBuilder(String.format("\nThere can only be one user supplied ConfigurationProcessor, there are %s:\n\n", userSuppliedConfigurationProcessorCount));        for (Entry<String, ConfigurationProcessor> entry : configurationProcessors.entrySet()) {            String hint = entry.getKey();            if (!hint.equals(SettingsXmlConfigurationProcessor.HINT)) {                ConfigurationProcessor configurationProcessor = entry.getValue();                sb.append(String.format("%s\n", configurationProcessor.getClass().getName()));            }        }        sb.append("\n");        throw new Exception(sb.toString());    }}
private Object maven_f4134_0(Source source, File defaultLocation)
{    if (source != null) {        return source.getLocation();    }    return defaultLocation;}
private MavenExecutionRequest maven_f4135_0(CliRequest cliRequest)
{    return populateRequest(cliRequest, cliRequest.request);}
 int maven_f4137_0(String threadConfiguration)
{    int procs = Runtime.getRuntime().availableProcessors();    return (int) (Float.valueOf(threadConfiguration.replace("C", "")) * procs);}
 static File maven_f4138_0(File file, String workingDirectory)
{    if (file == null) {        return null;    } else if (file.isAbsolute()) {        return file;    } else if (file.getPath().startsWith(File.separator)) {                return file.getAbsoluteFile();    } else {        return new File(workingDirectory, file.getPath()).getAbsoluteFile();    }}
 static void maven_f4139_0(CommandLine commandLine, Properties systemProperties, Properties userProperties)
{    EnvironmentUtils.addEnvVars(systemProperties);    if (commandLine.hasOption(CLIManager.SET_SYSTEM_PROPERTY)) {        String[] defStrs = commandLine.getOptionValues(CLIManager.SET_SYSTEM_PROPERTY);        if (defStrs != null) {            for (String defStr : defStrs) {                setCliProperty(defStr, userProperties);            }        }    }    SystemProperties.addSystemProperties(systemProperties);                    Properties buildProperties = CLIReportingUtils.getBuildProperties();    String mavenVersion = buildProperties.getProperty(CLIReportingUtils.BUILD_VERSION_PROPERTY);    systemProperties.setProperty("maven.version", mavenVersion);    String mavenBuildVersion = CLIReportingUtils.createMavenVersionString(buildProperties);    systemProperties.setProperty("maven.build.version", mavenBuildVersion);}
private static void maven_f4140_0(String property, Properties properties)
{    String name;    String value;    int i = property.indexOf('=');    if (i <= 0) {        name = property.trim();        value = "true";    } else {        name = property.substring(0, i).trim();        value = property.substring(i + 1);    }    properties.setProperty(name, value);                    System.setProperty(name, value);}
protected TransferListener maven_f4141_0(boolean printResourceNames)
{    return new ConsoleMavenTransferListener(System.out, printResourceNames);}
protected TransferListener maven_f4142_0()
{    return new Slf4jMavenTransferListener();}
protected void maven_f4143_0(PlexusContainer container)
{}
protected ModelProcessor maven_f4144_0(PlexusContainer container) throws ComponentLookupException
{    return container.lookup(ModelProcessor.class);}
public static ScaleUnit maven_f4145_0(long size)
{    Validate.isTrue(size >= 0L, "file size cannot be negative: %s", size);    if (size >= GIGABYTE.bytes()) {        return GIGABYTE;    } else if (size >= MEGABYTE.bytes()) {        return MEGABYTE;    } else if (size >= KILOBYTE.bytes()) {        return KILOBYTE;    } else {        return BYTE;    }}
public long maven_f4146_0()
{    return 1L;}
public String maven_f4147_0()
{    return "B";}
public long maven_f4148_0()
{    return 1000L;}
public String maven_f4149_0()
{    return "kB";}
public long maven_f4150_0()
{    return KILOBYTE.bytes() * KILOBYTE.bytes();}
public String maven_f4151_0()
{    return "MB";}
public long maven_f4152_0()
{    return MEGABYTE.bytes() * KILOBYTE.bytes();}
public String maven_f4153_0()
{    return "GB";}
public String maven_f4154_0(long size)
{    return format(size, null);}
public String maven_f4155_0(long size, ScaleUnit unit)
{    return format(size, unit, false);}
public String maven_f4156_0(long size, ScaleUnit unit, boolean omitSymbol)
{    Validate.isTrue(size >= 0L, "file size cannot be negative: %s", size);    if (unit == null) {        unit = ScaleUnit.getScaleUnit(size);    }    double scaledSize = (double) size / unit.bytes();    String scaledSymbol = " " + unit.symbol();    if (omitSymbol) {        scaledSymbol = "";    }    if (unit == ScaleUnit.BYTE) {        return largeFormat.format(size) + scaledSymbol;    }    if (scaledSize < 0.05 || scaledSize >= 10.0) {        return largeFormat.format(scaledSize) + scaledSymbol;    } else {        return smallFormat.format(scaledSize) + scaledSymbol;    }}
public String maven_f4157_0(long progressedSize, long size)
{    Validate.isTrue(progressedSize >= 0L, "progressed file size cannot be negative: %s", progressedSize);    Validate.isTrue(size >= 0L && progressedSize <= size || size < 0L, "progressed file size cannot be greater than size: %s > %s", progressedSize, size);    if (size >= 0L && progressedSize != size) {        ScaleUnit unit = ScaleUnit.getScaleUnit(size);        String formattedProgressedSize = format(progressedSize, unit, true);        String formattedSize = format(size, unit);        return formattedProgressedSize + "/" + formattedSize;    } else {        return format(progressedSize);    }}
public void maven_f4158_0(TransferEvent event)
{    String action = event.getRequestType() == TransferEvent.RequestType.PUT ? "Uploading" : "Downloading";    String direction = event.getRequestType() == TransferEvent.RequestType.PUT ? "to" : "from";    TransferResource resource = event.getResource();    StringBuilder message = new StringBuilder();    message.append(action).append(' ').append(direction).append(' ').append(resource.getRepositoryId());    message.append(": ");    message.append(resource.getRepositoryUrl()).append(resource.getResourceName());    out.println(message.toString());}
public void maven_f4159_0(TransferEvent event) throws TransferCancelledException
{    TransferResource resource = event.getResource();        out.println("[WARNING] " + event.getException().getMessage() + " from " + resource.getRepositoryId() + " for " + resource.getRepositoryUrl() + resource.getResourceName());}
public void maven_f4160_0(TransferEvent event)
{    String action = (event.getRequestType() == TransferEvent.RequestType.PUT ? "Uploaded" : "Downloaded");    String direction = event.getRequestType() == TransferEvent.RequestType.PUT ? "to" : "from";    TransferResource resource = event.getResource();    long contentLength = event.getTransferredBytes();    FileSizeFormat format = new FileSizeFormat(Locale.ENGLISH);    StringBuilder message = new StringBuilder();    message.append(action).append(' ').append(direction).append(' ').append(resource.getRepositoryId());    message.append(": ");    message.append(resource.getRepositoryUrl()).append(resource.getResourceName());    message.append(" (").append(format.format(contentLength));    long duration = System.currentTimeMillis() - resource.getTransferStartTime();    if (duration > 0L) {        double bytesPerSecond = contentLength / (duration / 1000.0);        message.append(" at ").append(format.format((long) bytesPerSecond)).append("/s");    }    message.append(')');    out.println(message.toString());}
public synchronized void maven_f4161_0(TransferEvent event)
{    overridePreviousTransfer(event);    super.transferInitiated(event);}
public synchronized void maven_f4162_0(TransferEvent event) throws TransferCancelledException
{    overridePreviousTransfer(event);    super.transferCorrupted(event);}
public synchronized void maven_f4163_0(TransferEvent event) throws TransferCancelledException
{    TransferResource resource = event.getResource();    transfers.put(resource, event.getTransferredBytes());    StringBuilder buffer = new StringBuilder(128);    buffer.append("Progress (").append(transfers.size()).append("): ");    synchronized (transfers) {        Iterator<Map.Entry<TransferResource, Long>> entries = transfers.entrySet().iterator();        while (entries.hasNext()) {            Map.Entry<TransferResource, Long> entry = entries.next();            long total = entry.getKey().getContentLength();            Long complete = entry.getValue();            buffer.append(getStatus(entry.getKey().getResourceName(), complete, total));            if (entries.hasNext()) {                buffer.append(" | ");            }        }    }    int pad = lastLength - buffer.length();    lastLength = buffer.length();    pad(buffer, pad);    buffer.append('\r');    out.print(buffer);    out.flush();}
private String maven_f4164_0(String resourceName, long complete, long total)
{    FileSizeFormat format = new FileSizeFormat(Locale.ENGLISH);    StringBuilder status = new StringBuilder();    if (printResourceNames) {        status.append(StringUtils.substringAfterLast(resourceName, "/"));        status.append(" (");    }    status.append(format.formatProgress(complete, total));    if (printResourceNames) {        status.append(")");    }    return status.toString();}
private void maven_f4165_0(StringBuilder buffer, int spaces)
{    String block = "                                        ";    while (spaces > 0) {        int n = Math.min(spaces, block.length());        buffer.append(block, 0, n);        spaces -= n;    }}
public synchronized void maven_f4166_0(TransferEvent event)
{    transfers.remove(event.getResource());    overridePreviousTransfer(event);    super.transferSucceeded(event);}
public synchronized void maven_f4167_0(TransferEvent event)
{    transfers.remove(event.getResource());    overridePreviousTransfer(event);    super.transferFailed(event);}
private void maven_f4168_0(TransferEvent event)
{    if (lastLength > 0) {        StringBuilder buffer = new StringBuilder(128);        pad(buffer, lastLength);        buffer.append('\r');        out.print(buffer);        out.flush();        lastLength = 0;    }}
public void maven_f4169_0(TransferEvent event)
{    String action = event.getRequestType() == TransferEvent.RequestType.PUT ? "Uploading" : "Downloading";    String direction = event.getRequestType() == TransferEvent.RequestType.PUT ? "to" : "from";    TransferResource resource = event.getResource();    StringBuilder message = new StringBuilder();    message.append(action).append(' ').append(direction).append(' ').append(resource.getRepositoryId());    message.append(": ");    message.append(resource.getRepositoryUrl()).append(resource.getResourceName());    out.info(message.toString());}
public void maven_f4170_0(TransferEvent event) throws TransferCancelledException
{    TransferResource resource = event.getResource();    out.warn("{} from {} for {}{}", event.getException().getMessage(), resource.getRepositoryId(), resource.getRepositoryUrl(), resource.getResourceName());}
public void maven_f4171_0(TransferEvent event)
{    String action = (event.getRequestType() == TransferEvent.RequestType.PUT ? "Uploaded" : "Downloaded");    String direction = event.getRequestType() == TransferEvent.RequestType.PUT ? "to" : "from";    TransferResource resource = event.getResource();    long contentLength = event.getTransferredBytes();    FileSizeFormat format = new FileSizeFormat(Locale.ENGLISH);    StringBuilder message = new StringBuilder();    message.append(action).append(' ').append(direction).append(' ').append(resource.getRepositoryId());    message.append(": ");    message.append(resource.getRepositoryUrl()).append(resource.getResourceName());    message.append(" (").append(format.format(contentLength));    long duration = System.currentTimeMillis() - resource.getTransferStartTime();    if (duration > 0L) {        double bytesPerSecond = contentLength / (duration / 1000.0);        message.append(" at ").append(format.format((long) bytesPerSecond)).append("/s");    }    message.append(')');    out.info(message.toString());}
public static void maven_f4172_0()
{    SimpleLogger.init();    ILoggerFactory loggerFactory = LoggerFactory.getILoggerFactory();    if (loggerFactory instanceof SimpleLoggerFactory) {        ((SimpleLoggerFactory) loggerFactory).reset();    }}
public static void maven_f4173_0()
{    LoggerFactory.reset();}
public static void maven_f4174_0(String[] args)
{    System.out.println("Hello World!");}
public static Test maven_f4175_0()
{    return new TestSuite(AppTest.class);}
public void maven_f4176_0()
{    assertTrue(true);}
public void maven_f4177_0() throws MojoExecutionException, MojoFailureException
{    throw new MojoFailureException(this, "This mojo will always fail.", "This mojo is programmed to fail at all times, to express certain error-reporting functions.");}
public Log maven_f4178_0()
{    return log;}
public void maven_f4179_0(Log log)
{    this.log = log;}
public void maven_f4180_0() throws MojoExecutionException, MojoFailureException
{}
public Log maven_f4181_0()
{    return log;}
public void maven_f4182_0(Log log)
{    this.log = log;}
public void maven_f4183_0() throws MojoExecutionException, MojoFailureException
{    throw new MojoExecutionException("This is meant to fail.");}
public Log maven_f4184_0()
{    return log;}
public void maven_f4185_0(Log log)
{    this.log = log;}
public void maven_f4186_0() throws MojoExecutionException, MojoFailureException
{    throw new MojoExecutionException("This is meant to fail.");}
public Log maven_f4187_0()
{    return log;}
public void maven_f4188_0(Log log)
{    this.log = log;}
public void maven_f4189_0() throws MojoExecutionException, MojoFailureException
{}
public Log maven_f4190_0()
{    return log;}
public void maven_f4191_0(Log log)
{    this.log = log;}
public void maven_f4192_0() throws MojoExecutionException, MojoFailureException
{    mavenProjectHelper.attachArtifact(project, "pom", "classifier", project.getFile());    mavenProjectHelper.attachArtifact(project, "pom", "classifier", project.getFile());}
public Log maven_f4193_0()
{    return log;}
public void maven_f4194_0(Log log)
{    this.log = log;}
public static void maven_f4195_0(String[] args)
{    System.out.println("Hello World!");}
public static Test maven_f4196_0()
{    return new TestSuite(AppTest.class);}
public void maven_f4197_0()
{    assertTrue(true);}
public void maven_f4198_0() throws MojoExecutionException, MojoFailureException
{}
public Log maven_f4199_0()
{    return log;}
public void maven_f4200_0(Log log)
{    this.log = log;}
public void maven_f4201_0() throws MojoExecutionException, MojoFailureException
{    throw new MojoExecutionException("This is meant to fail.");}
public Log maven_f4202_0()
{    return log;}
public void maven_f4203_0(Log log)
{    this.log = log;}
public static void maven_f4204_0(String[] args)
{    System.out.println("Hello World!");}
public void maven_f4205_0() throws MojoExecutionException, MojoFailureException
{    throw new MojoFailureException(this, "This mojo will always fail.", "This mojo is programmed to fail at all times, to express certain error-reporting functions.");}
public Log maven_f4206_0()
{    return log;}
public void maven_f4207_0(Log log)
{    this.log = log;}
public static void maven_f4208_0(String[] args)
{    System.out.println("Hello World!");}
public static Test maven_f4209_0()
{    return new TestSuite(AppTest.class);}
public void maven_f4210_0()
{    assertTrue(true);}
public void maven_f4211_0() throws MojoExecutionException, MojoFailureException
{}
public Log maven_f4212_0()
{    return log;}
public void maven_f4213_0(Log log)
{    this.log = log;}
public void maven_f4214_0() throws MojoExecutionException, MojoFailureException
{    throw new MojoExecutionException("This is meant to fail.");}
public Log maven_f4215_0()
{    return log;}
public void maven_f4216_0(Log log)
{    this.log = log;}
public void maven_f4217_0() throws MojoExecutionException, MojoFailureException
{    throw new MojoExecutionException("This is meant to fail.");}
public Log maven_f4218_0()
{    return log;}
public void maven_f4219_0(Log log)
{    this.log = log;}
public void maven_f4220_0() throws MojoExecutionException, MojoFailureException
{    throw new MojoExecutionException("THIS SHOULD NEVER BE CALLED.");}
public Log maven_f4221_0()
{    return log;}
public void maven_f4222_0(Log log)
{    this.log = log;}
public static void maven_f4223_0(String[] args)
{    System.out.println("Hello World!");}
public static void maven_f4224_0(String[] args)
{    System.out.println("Hello World!");}
public static Test maven_f4225_0()
{    return new TestSuite(AppTest.class);}
public void maven_f4226_0()
{    assertTrue(true);}
public static void maven_f4227_0(String[] args)
{    System.out.println("Hello World!");    StringUtils utils;}
public static Test maven_f4228_0()
{    return new TestSuite(AppTest.class);}
public void maven_f4229_0()
{    assertTrue(true);}
public void maven_f4230_0()
{    String[] args = { "\"-Dfoo=bar", "\"-Dfoo2=bar two\"" };    String[] cleanArgs = CleanArgument.cleanArgs(args);    assertEquals(args.length, cleanArgs.length);    assertEquals("-Dfoo=bar", cleanArgs[0]);    assertEquals("-Dfoo2=bar two", cleanArgs[1]);}
public void maven_f4231_0()
{    String information = "-Dinformation=\"The Information is important.\"";    String[] args = { information };    String[] cleanArgs = CleanArgument.cleanArgs(args);    assertEquals(args.length, cleanArgs.length);    assertEquals(information, cleanArgs[0]);}
public void maven_f4232_0()
{    String information = "-Dinformation='The Information is important.'";    String[] args = { information };    String[] cleanArgs = CleanArgument.cleanArgs(args);    assertEquals(args.length, cleanArgs.length);    assertEquals(information, cleanArgs[0]);}
public int maven_f4233_0(Option opt1, Option opt2)
{    return opt1.getOpt().compareToIgnoreCase(opt2.getOpt());}
public Collection<Option> maven_f4234_0()
{    List<Option> optList = new ArrayList<>(options.getOptions());    Collections.sort(optList, new OptionComparator());    return optList;}
public String maven_f4235_0()
{    StringBuilder sb = new StringBuilder(512);    boolean a = true;    sb.append("<table border='1' class='zebra-striped'><tr class='a'><th><b>Options</b></th><th><b>Description</b></th></tr>");    for (Option option : new CLIManagerExtension().getOptions()) {        a = !a;        sb.append("<tr class='").append(a ? 'a' : 'b').append("'><td><code>-<a name='");        sb.append(option.getOpt());        sb.append("'>");        sb.append(option.getOpt());        sb.append("</a>,--<a name='");        sb.append(option.getLongOpt());        sb.append("'>");        sb.append(option.getLongOpt());        sb.append("</a>");        if (option.hasArg()) {            if (option.hasArgName()) {                sb.append(" &lt;").append(option.getArgName()).append("&gt;");            } else {                sb.append(' ');            }        }        sb.append("</code></td><td>");        sb.append(option.getDescription());        sb.append("</td></tr>");        sb.append(LS);    }    sb.append("</table>");    return sb.toString();}
public void maven_f4236_0() throws IOException
{    File options = new File("target/test-classes/options.html");    FileUtils.fileWrite(options, "UTF-8", getOptionsAsHtml());}
public void maven_f4237_0()
{    cliManager = new CLIManager();}
public void maven_f4238_0() throws Exception
{    CommandLine cmdLine = cliManager.parse("-X -Dx=1 -D y=2 test".split(" "));    assertTrue(cmdLine.hasOption(CLIManager.DEBUG));    assertThat(cmdLine.getOptionValues(CLIManager.SET_SYSTEM_PROPERTY)[0], is("x=1"));    assertThat(cmdLine.getOptionValues(CLIManager.SET_SYSTEM_PROPERTY)[1], is("y=2"));}
public void maven_f4239_0()
{    assertEquals("0.001 s", CLIReportingUtils.formatDuration(1));    assertEquals("0.999 s", CLIReportingUtils.formatDuration(1000 - 1));    assertEquals("1.000 s", CLIReportingUtils.formatDuration(1000));    assertEquals("59.999 s", CLIReportingUtils.formatDuration(60 * 1000 - 1));    assertEquals("01:00 min", CLIReportingUtils.formatDuration(60 * 1000));    assertEquals("59:59 min", CLIReportingUtils.formatDuration(60 * 60 * 1000 - 1));    assertEquals("01:00 h", CLIReportingUtils.formatDuration(60 * 60 * 1000));    assertEquals("23:59 h", CLIReportingUtils.formatDuration(24 * 60 * 60 * 1000 - 1));    assertEquals("1 d 00:00 h", CLIReportingUtils.formatDuration(24 * 60 * 60 * 1000));}
public static void maven_f4240_0()
{    MessageUtils.setColorEnabled(false);}
public static void maven_f4241_0()
{    MessageUtils.setColorEnabled(true);}
public void maven_f4242_0()
{        Logger logger = mock(Logger.class);    when(logger.isInfoEnabled()).thenReturn(true);    executionEventLogger = new ExecutionEventLogger(logger);    ExecutionEvent event = mock(ExecutionEvent.class);    MavenProject project = mock(MavenProject.class);    when(project.getGroupId()).thenReturn("org.apache.maven");    when(project.getArtifactId()).thenReturn("maven-embedder");    when(project.getPackaging()).thenReturn("jar");    when(project.getName()).thenReturn("Apache Maven Embedder");    when(project.getVersion()).thenReturn("3.5.4-SNAPSHOT");    when(event.getProject()).thenReturn(project);        executionEventLogger.projectStarted(event);        InOrder inOrder = inOrder(logger);    inOrder.verify(logger).info("");    inOrder.verify(logger).info("------------------< org.apache.maven:maven-embedder >-------------------");    inOrder.verify(logger).info("Building Apache Maven Embedder 3.5.4-SNAPSHOT");    inOrder.verify(logger).info("--------------------------------[ jar ]---------------------------------");}
public void maven_f4243_0()
{        Logger logger = mock(Logger.class);    when(logger.isInfoEnabled()).thenReturn(true);    executionEventLogger = new ExecutionEventLogger(logger);    ExecutionEvent event = mock(ExecutionEvent.class);    MavenProject project = mock(MavenProject.class);    when(project.getGroupId()).thenReturn("org.apache.maven.plugins.overflow");    when(project.getArtifactId()).thenReturn("maven-project-info-reports-plugin");    when(project.getPackaging()).thenReturn("maven-plugin");    when(project.getName()).thenReturn("Apache Maven Project Info Reports Plugin");    when(project.getVersion()).thenReturn("3.0.0-SNAPSHOT");    when(event.getProject()).thenReturn(project);        executionEventLogger.projectStarted(event);        InOrder inOrder = inOrder(logger);    inOrder.verify(logger).info("");    inOrder.verify(logger).info("--< org.apache.maven.plugins.overflow:maven-project-info-reports-plugin >--");    inOrder.verify(logger).info("Building Apache Maven Project Info Reports Plugin 3.0.0-SNAPSHOT");    inOrder.verify(logger).info("----------------------------[ maven-plugin ]----------------------------");}
public void maven_f4244_0()
{    cli = new MavenCli();    origBasedir = System.getProperty(MavenCli.MULTIMODULE_PROJECT_DIRECTORY);}
public void maven_f4245_0() throws Exception
{    if (origBasedir != null) {        System.setProperty(MavenCli.MULTIMODULE_PROJECT_DIRECTORY, origBasedir);    } else {        System.getProperties().remove(MavenCli.MULTIMODULE_PROJECT_DIRECTORY);    }}
public void maven_f4246_0()
{    int cores = Runtime.getRuntime().availableProcessors();        assertEquals((int) (cores * 2.2), cli.calculateDegreeOfConcurrencyWithCoreMultiplier("C2.2"));        assertEquals((int) (cores * 2.2), cli.calculateDegreeOfConcurrencyWithCoreMultiplier("2.2C"));    try {        cli.calculateDegreeOfConcurrencyWithCoreMultiplier("CXXX");        fail("Should have failed with a NumberFormatException");    } catch (NumberFormatException e) {        }}
public void maven_f4247_0() throws Exception
{    System.setProperty(MavenCli.MULTIMODULE_PROJECT_DIRECTORY, new File("src/test/projects/config").getCanonicalPath());    CliRequest request = new CliRequest(new String[0], null);        cli.initialize(request);    cli.cli(request);    assertEquals("multithreaded", request.commandLine.getOptionValue(CLIManager.BUILDER));    assertEquals("8", request.commandLine.getOptionValue(CLIManager.THREADS));        request = new CliRequest(new String[] { "--builder", "foobar" }, null);    cli.cli(request);    assertEquals("foobar", request.commandLine.getOptionValue("builder"));}
public void maven_f4248_0() throws Exception
{    System.setProperty(MavenCli.MULTIMODULE_PROJECT_DIRECTORY, new File("src/test/projects/config-illegal").getCanonicalPath());    CliRequest request = new CliRequest(new String[0], null);    cli.initialize(request);    try {        cli.cli(request);        fail();    } catch (ParseException expected) {    }}
public void maven_f4249_0() throws Exception
{    System.setProperty(MavenCli.MULTIMODULE_PROJECT_DIRECTORY, new File("src/test/projects/mavenConfigProperties").getCanonicalPath());    CliRequest request = new CliRequest(new String[] { "-T", "5" }, null);    cli.initialize(request);        cli.cli(request);    assertEquals("5", request.commandLine.getOptionValue(CLIManager.THREADS));}
public void maven_f4250_0() throws Exception
{    System.setProperty(MavenCli.MULTIMODULE_PROJECT_DIRECTORY, new File("src/test/projects/mavenConfigProperties").getCanonicalPath());    CliRequest request = new CliRequest(new String[] { "-Drevision=8.1.0" }, null);    cli.initialize(request);        cli.cli(request);    cli.properties(request);    String revision = System.getProperty("revision");    assertEquals("8.1.0", revision);}
public void maven_f4251_0() throws Exception
{    System.setProperty(MavenCli.MULTIMODULE_PROJECT_DIRECTORY, new File("src/test/projects/mavenConfigProperties").getCanonicalPath());    CliRequest request = new CliRequest(new String[] { "-Drevision=8.1.0", "-Drevision=8.2.0" }, null);    cli.initialize(request);        cli.cli(request);    cli.properties(request);    String revision = System.getProperty("revision");    assertEquals("8.2.0", revision);}
public void maven_f4252_0() throws Exception
{    System.setProperty(MavenCli.MULTIMODULE_PROJECT_DIRECTORY, new File("src/test/projects/mavenConfigProperties").getCanonicalPath());    CliRequest request = new CliRequest(new String[] { "-Drevision=8.1.0", "--file=-Dpom.xml", "\"-Dfoo=bar ", "\"-Dfoo2=bar two\"", "-Drevision=8.2.0" }, null);    cli.initialize(request);        cli.cli(request);    cli.properties(request);    String revision = System.getProperty("revision");    assertEquals("8.2.0", revision);    assertEquals("bar ", request.getSystemProperties().getProperty("foo"));    assertEquals("bar two", request.getSystemProperties().getProperty("foo2"));    assertEquals("-Dpom.xml", request.getCommandLine().getOptionValue(CLIManager.ALTERNATE_POM_FILE));}
public void maven_f4253_0() throws Exception
{    assumeTrue("ANSI not supported", MessageUtils.isColorEnabled());    CliRequest request;    MessageUtils.setColorEnabled(true);    request = new CliRequest(new String[] { "-B" }, null);    cli.cli(request);    cli.properties(request);    cli.logging(request);    assertFalse(MessageUtils.isColorEnabled());    MessageUtils.setColorEnabled(true);    request = new CliRequest(new String[] { "-l", "target/temp/mvn.log" }, null);    cli.cli(request);    cli.properties(request);    cli.logging(request);    assertFalse(MessageUtils.isColorEnabled());    MessageUtils.setColorEnabled(false);    request = new CliRequest(new String[] { "-Dstyle.color=always" }, null);    cli.cli(request);    cli.properties(request);    cli.logging(request);    assertTrue(MessageUtils.isColorEnabled());    MessageUtils.setColorEnabled(true);    request = new CliRequest(new String[] { "-Dstyle.color=never" }, null);    cli.cli(request);    cli.properties(request);    cli.logging(request);    assertFalse(MessageUtils.isColorEnabled());    MessageUtils.setColorEnabled(false);    request = new CliRequest(new String[] { "-Dstyle.color=always", "-B", "-l", "target/temp/mvn.log" }, null);    cli.cli(request);    cli.properties(request);    cli.logging(request);    assertTrue(MessageUtils.isColorEnabled());    try {        MessageUtils.setColorEnabled(false);        request = new CliRequest(new String[] { "-Dstyle.color=maybe", "-B", "-l", "target/temp/mvn.log" }, null);        cli.cli(request);        cli.properties(request);        cli.logging(request);        fail("maybe is not a valid option");    } catch (IllegalArgumentException e) {        }}
public void maven_f4254_0() throws Exception
{    final EventSpyDispatcher eventSpyDispatcherMock = mock(EventSpyDispatcher.class);    MavenCli customizedMavenCli = new MavenCli() {        @Override        protected void customizeContainer(PlexusContainer container) {            super.customizeContainer(container);            container.addComponent(eventSpyDispatcherMock, "org.apache.maven.eventspy.internal.EventSpyDispatcher");            container.addComponent(mock(Maven.class), "org.apache.maven.Maven");        }    };    CliRequest cliRequest = new CliRequest(new String[] {}, null);    customizedMavenCli.cli(cliRequest);    customizedMavenCli.logging(cliRequest);    customizedMavenCli.container(cliRequest);    customizedMavenCli.toolchains(cliRequest);    InOrder orderdEventSpyDispatcherMock = inOrder(eventSpyDispatcherMock);    orderdEventSpyDispatcherMock.verify(eventSpyDispatcherMock, times(1)).onEvent(any(ToolchainsBuildingRequest.class));    orderdEventSpyDispatcherMock.verify(eventSpyDispatcherMock, times(1)).onEvent(any(ToolchainsBuildingResult.class));}
protected void maven_f4255_0(PlexusContainer container)
{    super.customizeContainer(container);    container.addComponent(eventSpyDispatcherMock, "org.apache.maven.eventspy.internal.EventSpyDispatcher");    container.addComponent(mock(Maven.class), "org.apache.maven.Maven");}
public void maven_f4256_0()
{    FileSizeFormat format = new FileSizeFormat(Locale.ENGLISH);    long negativeSize = -100L;    format.format(negativeSize);}
public void maven_f4257_0()
{    FileSizeFormat format = new FileSizeFormat(Locale.ENGLISH);    long _0_bytes = 0L;    assertEquals("0 B", format.format(_0_bytes));    long _5_bytes = 5L;    assertEquals("5 B", format.format(_5_bytes));    long _10_bytes = 10L;    assertEquals("10 B", format.format(_10_bytes));    long _15_bytes = 15L;    assertEquals("15 B", format.format(_15_bytes));    long _999_bytes = 999L;    assertEquals("999 B", format.format(_999_bytes));    long _1000_bytes = 1000L;    assertEquals("1.0 kB", format.format(_1000_bytes));    long _5500_bytes = 5500L;    assertEquals("5.5 kB", format.format(_5500_bytes));    long _10_kilobytes = 10L * 1000L;    assertEquals("10 kB", format.format(_10_kilobytes));    long _15_kilobytes = 15L * 1000L;    assertEquals("15 kB", format.format(_15_kilobytes));    long _999_kilobytes = 999L * 1000L;    assertEquals("999 kB", format.format(_999_kilobytes));    long _1000_kilobytes = 1000L * 1000L;    assertEquals("1.0 MB", format.format(_1000_kilobytes));    long _5500_kilobytes = 5500L * 1000L;    assertEquals("5.5 MB", format.format(_5500_kilobytes));    long _10_megabytes = 10L * 1000L * 1000L;    assertEquals("10 MB", format.format(_10_megabytes));    long _15_megabytes = 15L * 1000L * 1000L;    assertEquals("15 MB", format.format(_15_megabytes));    long _999_megabytes = 999L * 1000L * 1000L;    assertEquals("999 MB", format.format(_999_megabytes));    long _1000_megabytes = 1000L * 1000L * 1000L;    assertEquals("1.0 GB", format.format(_1000_megabytes));    long _5500_megabytes = 5500L * 1000L * 1000L;    assertEquals("5.5 GB", format.format(_5500_megabytes));    long _10_gigabytes = 10L * 1000L * 1000L * 1000L;    assertEquals("10 GB", format.format(_10_gigabytes));    long _15_gigabytes = 15L * 1000L * 1000L * 1000L;    assertEquals("15 GB", format.format(_15_gigabytes));    long _1000_gigabytes = 1000L * 1000L * 1000L * 1000L;    assertEquals("1000 GB", format.format(_1000_gigabytes));}
public void maven_f4258_0()
{    FileSizeFormat format = new FileSizeFormat(Locale.ENGLISH);    long _0_bytes = 0L;    assertEquals("0 B", format.format(_0_bytes));    assertEquals("0 B", format.format(_0_bytes, ScaleUnit.BYTE));    assertEquals("0 kB", format.format(_0_bytes, ScaleUnit.KILOBYTE));    assertEquals("0 MB", format.format(_0_bytes, ScaleUnit.MEGABYTE));    assertEquals("0 GB", format.format(_0_bytes, ScaleUnit.GIGABYTE));    long _5_bytes = 5L;    assertEquals("5 B", format.format(_5_bytes));    assertEquals("5 B", format.format(_5_bytes, ScaleUnit.BYTE));    assertEquals("0 kB", format.format(_5_bytes, ScaleUnit.KILOBYTE));    assertEquals("0 MB", format.format(_5_bytes, ScaleUnit.MEGABYTE));    assertEquals("0 GB", format.format(_5_bytes, ScaleUnit.GIGABYTE));    long _49_bytes = 49L;    assertEquals("49 B", format.format(_49_bytes));    assertEquals("49 B", format.format(_49_bytes, ScaleUnit.BYTE));    assertEquals("0 kB", format.format(_49_bytes, ScaleUnit.KILOBYTE));    assertEquals("0 MB", format.format(_49_bytes, ScaleUnit.MEGABYTE));    assertEquals("0 GB", format.format(_49_bytes, ScaleUnit.GIGABYTE));    long _50_bytes = 50L;    assertEquals("50 B", format.format(_50_bytes));    assertEquals("50 B", format.format(_50_bytes, ScaleUnit.BYTE));    if (SystemUtils.isJavaVersionAtLeast(JavaVersion.JAVA_1_8)) {        assertEquals("0.1 kB", format.format(_50_bytes, ScaleUnit.KILOBYTE));    }    assertEquals("0 MB", format.format(_50_bytes, ScaleUnit.MEGABYTE));    assertEquals("0 GB", format.format(_50_bytes, ScaleUnit.GIGABYTE));    long _999_bytes = 999L;    assertEquals("999 B", format.format(_999_bytes));    assertEquals("999 B", format.format(_999_bytes, ScaleUnit.BYTE));    assertEquals("1.0 kB", format.format(_999_bytes, ScaleUnit.KILOBYTE));    assertEquals("0 MB", format.format(_999_bytes, ScaleUnit.MEGABYTE));    assertEquals("0 GB", format.format(_999_bytes, ScaleUnit.GIGABYTE));    long _1000_bytes = 1000L;    assertEquals("1.0 kB", format.format(_1000_bytes));    assertEquals("1000 B", format.format(_1000_bytes, ScaleUnit.BYTE));    assertEquals("1.0 kB", format.format(_1000_bytes, ScaleUnit.KILOBYTE));    assertEquals("0 MB", format.format(_1000_bytes, ScaleUnit.MEGABYTE));    assertEquals("0 GB", format.format(_1000_bytes, ScaleUnit.GIGABYTE));    long _49_kilobytes = 49L * 1000L;    assertEquals("49 kB", format.format(_49_kilobytes));    assertEquals("49000 B", format.format(_49_kilobytes, ScaleUnit.BYTE));    assertEquals("49 kB", format.format(_49_kilobytes, ScaleUnit.KILOBYTE));    assertEquals("0 MB", format.format(_49_kilobytes, ScaleUnit.MEGABYTE));    assertEquals("0 GB", format.format(_49_kilobytes, ScaleUnit.GIGABYTE));    long _50_kilobytes = 50L * 1000L;    assertEquals("50 kB", format.format(_50_kilobytes));    assertEquals("50000 B", format.format(_50_kilobytes, ScaleUnit.BYTE));    assertEquals("50 kB", format.format(_50_kilobytes, ScaleUnit.KILOBYTE));    if (SystemUtils.isJavaVersionAtLeast(JavaVersion.JAVA_1_8)) {        assertEquals("0.1 MB", format.format(_50_kilobytes, ScaleUnit.MEGABYTE));    }    assertEquals("0 GB", format.format(_50_kilobytes, ScaleUnit.GIGABYTE));    long _999_kilobytes = 999L * 1000L;    assertEquals("999 kB", format.format(_999_kilobytes));    assertEquals("999000 B", format.format(_999_kilobytes, ScaleUnit.BYTE));    assertEquals("999 kB", format.format(_999_kilobytes, ScaleUnit.KILOBYTE));    assertEquals("1.0 MB", format.format(_999_kilobytes, ScaleUnit.MEGABYTE));    assertEquals("0 GB", format.format(_999_kilobytes, ScaleUnit.GIGABYTE));    long _1000_kilobytes = 1000L * 1000L;    assertEquals("1.0 MB", format.format(_1000_kilobytes));    assertEquals("1000000 B", format.format(_1000_kilobytes, ScaleUnit.BYTE));    assertEquals("1000 kB", format.format(_1000_kilobytes, ScaleUnit.KILOBYTE));    assertEquals("1.0 MB", format.format(_1000_kilobytes, ScaleUnit.MEGABYTE));    assertEquals("0 GB", format.format(_1000_kilobytes, ScaleUnit.GIGABYTE));    long _49_megabytes = 49L * 1000L * 1000L;    assertEquals("49 MB", format.format(_49_megabytes));    assertEquals("49000000 B", format.format(_49_megabytes, ScaleUnit.BYTE));    assertEquals("49000 kB", format.format(_49_megabytes, ScaleUnit.KILOBYTE));    assertEquals("49 MB", format.format(_49_megabytes, ScaleUnit.MEGABYTE));    assertEquals("0 GB", format.format(_49_megabytes, ScaleUnit.GIGABYTE));    long _50_megabytes = 50L * 1000L * 1000L;    assertEquals("50 MB", format.format(_50_megabytes));    assertEquals("50000000 B", format.format(_50_megabytes, ScaleUnit.BYTE));    assertEquals("50000 kB", format.format(_50_megabytes, ScaleUnit.KILOBYTE));    assertEquals("50 MB", format.format(_50_megabytes, ScaleUnit.MEGABYTE));    if (SystemUtils.isJavaVersionAtLeast(JavaVersion.JAVA_1_8)) {        assertEquals("0.1 GB", format.format(_50_megabytes, ScaleUnit.GIGABYTE));    }    long _999_megabytes = 999L * 1000L * 1000L;    assertEquals("999 MB", format.format(_999_megabytes));    assertEquals("999000000 B", format.format(_999_megabytes, ScaleUnit.BYTE));    assertEquals("999000 kB", format.format(_999_megabytes, ScaleUnit.KILOBYTE));    assertEquals("999 MB", format.format(_999_megabytes, ScaleUnit.MEGABYTE));    assertEquals("1.0 GB", format.format(_999_megabytes, ScaleUnit.GIGABYTE));    long _1000_megabytes = 1000L * 1000L * 1000L;    assertEquals("1.0 GB", format.format(_1000_megabytes));    assertEquals("1000000000 B", format.format(_1000_megabytes, ScaleUnit.BYTE));    assertEquals("1000000 kB", format.format(_1000_megabytes, ScaleUnit.KILOBYTE));    assertEquals("1000 MB", format.format(_1000_megabytes, ScaleUnit.MEGABYTE));    assertEquals("1.0 GB", format.format(_1000_megabytes, ScaleUnit.GIGABYTE));}
public void maven_f4259_0()
{    FileSizeFormat format = new FileSizeFormat(Locale.ENGLISH);    long negativeProgressedSize = -100L;    format.formatProgress(negativeProgressedSize, 10L);}
public void maven_f4260_0()
{    FileSizeFormat format = new FileSizeFormat(Locale.ENGLISH);    format.formatProgress(100L, 10L);}
public void maven_f4261_0()
{    FileSizeFormat format = new FileSizeFormat(Locale.ENGLISH);    long _0_bytes = 0L;    assertEquals("0 B", format.formatProgress(_0_bytes, -1L));    long _1000_bytes = 1000L;    assertEquals("1.0 kB", format.formatProgress(_1000_bytes, -1L));    long _1000_kilobytes = 1000L * 1000L;    assertEquals("1.0 MB", format.formatProgress(_1000_kilobytes, -1L));    long _1000_megabytes = 1000L * 1000L * 1000L;    assertEquals("1.0 GB", format.formatProgress(_1000_megabytes, -1L));}
public void maven_f4262_0()
{    FileSizeFormat format = new FileSizeFormat(Locale.ENGLISH);    long _0_bytes = 0L;    assertEquals("0 B", format.formatProgress(_0_bytes, _0_bytes));}
public void maven_f4263_0()
{    FileSizeFormat format = new FileSizeFormat(Locale.ENGLISH);    long _0_bytes = 0L;    long _400_bytes = 400L;    long _800_bytes = 2L * _400_bytes;    assertEquals("0/800 B", format.formatProgress(_0_bytes, _800_bytes));    assertEquals("400/800 B", format.formatProgress(_400_bytes, _800_bytes));    assertEquals("800 B", format.formatProgress(_800_bytes, _800_bytes));    long _4000_bytes = 4000L;    long _8000_bytes = 2L * _4000_bytes;    long _50_kilobytes = 50000L;    assertEquals("0/8.0 kB", format.formatProgress(_0_bytes, _8000_bytes));    assertEquals("0.4/8.0 kB", format.formatProgress(_400_bytes, _8000_bytes));    assertEquals("4.0/8.0 kB", format.formatProgress(_4000_bytes, _8000_bytes));    assertEquals("8.0 kB", format.formatProgress(_8000_bytes, _8000_bytes));    assertEquals("8.0/50 kB", format.formatProgress(_8000_bytes, _50_kilobytes));    assertEquals("16/50 kB", format.formatProgress(2L * _8000_bytes, _50_kilobytes));    assertEquals("50 kB", format.formatProgress(_50_kilobytes, _50_kilobytes));    long _500_kilobytes = 500000L;    long _1000_kilobytes = 2L * _500_kilobytes;    ;    long _5000_kilobytes = 5L * _1000_kilobytes;    long _15_megabytes = 3L * _5000_kilobytes;    assertEquals("0/5.0 MB", format.formatProgress(_0_bytes, _5000_kilobytes));    assertEquals("0.5/5.0 MB", format.formatProgress(_500_kilobytes, _5000_kilobytes));    assertEquals("1.0/5.0 MB", format.formatProgress(_1000_kilobytes, _5000_kilobytes));    assertEquals("5.0 MB", format.formatProgress(_5000_kilobytes, _5000_kilobytes));    assertEquals("5.0/15 MB", format.formatProgress(_5000_kilobytes, _15_megabytes));    assertEquals("15 MB", format.formatProgress(_15_megabytes, _15_megabytes));    long _500_megabytes = 500000000L;    long _1000_megabytes = 2L * _500_megabytes;    long _5000_megabytes = 5L * _1000_megabytes;    long _15_gigabytes = 3L * _5000_megabytes;    assertEquals("0/500 MB", format.formatProgress(_0_bytes, _500_megabytes));    assertEquals("1.0/5.0 GB", format.formatProgress(_1000_megabytes, _5000_megabytes));    assertEquals("5.0 GB", format.formatProgress(_5000_megabytes, _5000_megabytes));    assertEquals("5.0/15 GB", format.formatProgress(_5000_megabytes, _15_gigabytes));    assertEquals("15 GB", format.formatProgress(_15_gigabytes, _15_gigabytes));}
public static void maven_f4264_0(String[] args)
{    System.out.println("Hello World!");}
public static Test maven_f4265_0()
{    return new TestSuite(AppTest.class);}
public void maven_f4266_0()
{    assertTrue(true);}
public void maven_f4267_0(Model target, Model source, boolean sourceDominant, Map<?, ?> hints)
{    Objects.requireNonNull(target, "target cannot be null");    if (source == null) {        return;    }    Map<Object, Object> context = new HashMap<>();    if (hints != null) {        context.putAll(hints);    }    mergeModel(target, source, sourceDominant, context);}
protected void maven_f4268_0(Model target, Model source, boolean sourceDominant, Map<Object, Object> context)
{    mergeModelBase(target, source, sourceDominant, context);    mergeModel_ChildProjectUrlInheritAppendPath(target, source, sourceDominant, context);    mergeModel_ModelVersion(target, source, sourceDominant, context);    mergeModel_Parent(target, source, sourceDominant, context);    mergeModel_GroupId(target, source, sourceDominant, context);    mergeModel_ArtifactId(target, source, sourceDominant, context);    mergeModel_Version(target, source, sourceDominant, context);    mergeModel_Packaging(target, source, sourceDominant, context);    mergeModel_Name(target, source, sourceDominant, context);    mergeModel_Description(target, source, sourceDominant, context);    mergeModel_Url(target, source, sourceDominant, context);    mergeModel_InceptionYear(target, source, sourceDominant, context);    mergeModel_Organization(target, source, sourceDominant, context);    mergeModel_Licenses(target, source, sourceDominant, context);    mergeModel_MailingLists(target, source, sourceDominant, context);    mergeModel_Developers(target, source, sourceDominant, context);    mergeModel_Contributors(target, source, sourceDominant, context);    mergeModel_IssueManagement(target, source, sourceDominant, context);    mergeModel_Scm(target, source, sourceDominant, context);    mergeModel_CiManagement(target, source, sourceDominant, context);    mergeModel_Prerequisites(target, source, sourceDominant, context);    mergeModel_Build(target, source, sourceDominant, context);    mergeModel_Profiles(target, source, sourceDominant, context);}
protected void maven_f4269_0(Model target, Model source, boolean sourceDominant, Map<Object, Object> context)
{    String src = source.getModelVersion();    if (src != null) {        if (sourceDominant || target.getModelVersion() == null) {            target.setModelVersion(src);            target.setLocation("modelVersion", source.getLocation("modelVersion"));        }    }}
protected void maven_f4270_0(Model target, Model source, boolean sourceDominant, Map<Object, Object> context)
{    Parent src = source.getParent();    if (src != null) {        Parent tgt = target.getParent();        if (tgt == null) {            tgt = new Parent();            tgt.setRelativePath(null);            target.setParent(tgt);        }        mergeParent(tgt, src, sourceDominant, context);    }}
protected void maven_f4271_0(Model target, Model source, boolean sourceDominant, Map<Object, Object> context)
{    String src = source.getGroupId();    if (src != null) {        if (sourceDominant || target.getGroupId() == null) {            target.setGroupId(src);            target.setLocation("groupId", source.getLocation("groupId"));        }    }}
protected void maven_f4272_0(Model target, Model source, boolean sourceDominant, Map<Object, Object> context)
{    String src = source.getArtifactId();    if (src != null) {        if (sourceDominant || target.getArtifactId() == null) {            target.setArtifactId(src);            target.setLocation("artifactId", source.getLocation("artifactId"));        }    }}
protected void maven_f4273_0(Model target, Model source, boolean sourceDominant, Map<Object, Object> context)
{    String src = source.getChildProjectUrlInheritAppendPath();    if (src != null) {        if (sourceDominant || target.getChildProjectUrlInheritAppendPath() == null) {            target.setChildProjectUrlInheritAppendPath(src);            target.setLocation("child.project.url.inherit.append.path", source.getLocation("child.project.url.inherit.append.path"));        }    }}
protected void maven_f4274_0(Model target, Model source, boolean sourceDominant, Map<Object, Object> context)
{    String src = source.getVersion();    if (src != null) {        if (sourceDominant || target.getVersion() == null) {            target.setVersion(src);            target.setLocation("version", source.getLocation("version"));        }    }}
protected void maven_f4275_0(Model target, Model source, boolean sourceDominant, Map<Object, Object> context)
{    String src = source.getPackaging();    if (src != null) {        if (sourceDominant || target.getPackaging() == null) {            target.setPackaging(src);            target.setLocation("packaging", source.getLocation("packaging"));        }    }}
protected void maven_f4276_0(Model target, Model source, boolean sourceDominant, Map<Object, Object> context)
{    String src = source.getName();    if (src != null) {        if (sourceDominant || target.getName() == null) {            target.setName(src);            target.setLocation("name", source.getLocation("name"));        }    }}
protected void maven_f4277_0(Model target, Model source, boolean sourceDominant, Map<Object, Object> context)
{    String src = source.getDescription();    if (src != null) {        if (sourceDominant || target.getDescription() == null) {            target.setDescription(src);            target.setLocation("description", source.getLocation("description"));        }    }}
protected void maven_f4278_0(Model target, Model source, boolean sourceDominant, Map<Object, Object> context)
{    String src = source.getUrl();    if (src != null) {        if (sourceDominant || target.getUrl() == null) {            target.setUrl(src);            target.setLocation("url", source.getLocation("url"));        }    }}
protected void maven_f4279_0(Model target, Model source, boolean sourceDominant, Map<Object, Object> context)
{    String src = source.getInceptionYear();    if (src != null) {        if (sourceDominant || target.getInceptionYear() == null) {            target.setInceptionYear(src);            target.setLocation("inceptionYear", source.getLocation("inceptionYear"));        }    }}
protected void maven_f4280_0(Model target, Model source, boolean sourceDominant, Map<Object, Object> context)
{    Organization src = source.getOrganization();    if (src != null) {        Organization tgt = target.getOrganization();        if (tgt == null) {            tgt = new Organization();            target.setOrganization(tgt);        }        mergeOrganization(tgt, src, sourceDominant, context);    }}
protected void maven_f4281_0(Model target, Model source, boolean sourceDominant, Map<Object, Object> context)
{    target.setLicenses(merge(target.getLicenses(), source.getLicenses(), sourceDominant, new LicenseKeyComputer()));}
protected void maven_f4282_0(Model target, Model source, boolean sourceDominant, Map<Object, Object> context)
{    target.setMailingLists(merge(target.getMailingLists(), source.getMailingLists(), sourceDominant, new MailingListKeyComputer()));}
protected void maven_f4283_0(Model target, Model source, boolean sourceDominant, Map<Object, Object> context)
{    target.setDevelopers(merge(target.getDevelopers(), source.getDevelopers(), sourceDominant, new DeveloperKeyComputer()));}
protected void maven_f4284_0(Model target, Model source, boolean sourceDominant, Map<Object, Object> context)
{    target.setContributors(merge(target.getContributors(), source.getContributors(), sourceDominant, new ContributorKeyComputer()));}
protected void maven_f4285_0(Model target, Model source, boolean sourceDominant, Map<Object, Object> context)
{    IssueManagement src = source.getIssueManagement();    if (src != null) {        IssueManagement tgt = target.getIssueManagement();        if (tgt == null) {            tgt = new IssueManagement();            target.setIssueManagement(tgt);        }        mergeIssueManagement(tgt, src, sourceDominant, context);    }}
protected void maven_f4286_0(Model target, Model source, boolean sourceDominant, Map<Object, Object> context)
{    Scm src = source.getScm();    if (src != null) {        Scm tgt = target.getScm();        if (tgt == null) {            tgt = new Scm();            tgt.setTag(null);            target.setScm(tgt);        }        mergeScm(tgt, src, sourceDominant, context);    }}
protected void maven_f4287_0(Model target, Model source, boolean sourceDominant, Map<Object, Object> context)
{    CiManagement src = source.getCiManagement();    if (src != null) {        CiManagement tgt = target.getCiManagement();        if (tgt == null) {            tgt = new CiManagement();            target.setCiManagement(tgt);        }        mergeCiManagement(tgt, src, sourceDominant, context);    }}
protected void maven_f4288_0(Model target, Model source, boolean sourceDominant, Map<Object, Object> context)
{    Prerequisites src = source.getPrerequisites();    if (src != null) {        Prerequisites tgt = target.getPrerequisites();        if (tgt == null) {            tgt = new Prerequisites();            tgt.setMaven(null);            target.setPrerequisites(tgt);        }        mergePrerequisites(tgt, src, sourceDominant, context);    }}
protected void maven_f4289_0(Model target, Model source, boolean sourceDominant, Map<Object, Object> context)
{    Build src = source.getBuild();    if (src != null) {        Build tgt = target.getBuild();        if (tgt == null) {            tgt = new Build();            target.setBuild(tgt);        }        mergeBuild(tgt, src, sourceDominant, context);    }}
protected void maven_f4290_0(Model target, Model source, boolean sourceDominant, Map<Object, Object> context)
{    target.setProfiles(merge(target.getProfiles(), source.getProfiles(), sourceDominant, new ProfileKeyComputer()));}
protected void maven_f4291_0(ModelBase target, ModelBase source, boolean sourceDominant, Map<Object, Object> context)
{    mergeModelBase_DistributionManagement(target, source, sourceDominant, context);    mergeModelBase_Modules(target, source, sourceDominant, context);    mergeModelBase_Repositories(target, source, sourceDominant, context);    mergeModelBase_PluginRepositories(target, source, sourceDominant, context);    mergeModelBase_Dependencies(target, source, sourceDominant, context);    mergeModelBase_Reporting(target, source, sourceDominant, context);    mergeModelBase_DependencyManagement(target, source, sourceDominant, context);    mergeModelBase_Properties(target, source, sourceDominant, context);}
protected void maven_f4292_0(ModelBase target, ModelBase source, boolean sourceDominant, Map<Object, Object> context)
{    List<String> src = source.getModules();    if (!src.isEmpty()) {        List<String> tgt = target.getModules();        List<String> merged = new ArrayList<>(tgt.size() + src.size());        merged.addAll(tgt);        merged.addAll(src);        target.setModules(merged);    }}
protected void maven_f4293_0(ModelBase target, ModelBase source, boolean sourceDominant, Map<Object, Object> context)
{    target.setDependencies(merge(target.getDependencies(), source.getDependencies(), sourceDominant, new DependencyKeyComputer()));}
protected void maven_f4294_0(ModelBase target, ModelBase source, boolean sourceDominant, Map<Object, Object> context)
{    target.setRepositories(merge(target.getRepositories(), source.getRepositories(), sourceDominant, new RepositoryKeyComputer()));}
protected void maven_f4295_0(ModelBase target, ModelBase source, boolean sourceDominant, Map<Object, Object> context)
{    target.setPluginRepositories(merge(target.getPluginRepositories(), source.getPluginRepositories(), sourceDominant, new RepositoryKeyComputer()));}
protected void maven_f4296_0(ModelBase target, ModelBase source, boolean sourceDominant, Map<Object, Object> context)
{    DistributionManagement src = source.getDistributionManagement();    if (src != null) {        DistributionManagement tgt = target.getDistributionManagement();        if (tgt == null) {            tgt = new DistributionManagement();            target.setDistributionManagement(tgt);        }        mergeDistributionManagement(tgt, src, sourceDominant, context);    }}
protected void maven_f4297_0(ModelBase target, ModelBase source, boolean sourceDominant, Map<Object, Object> context)
{    Reporting src = source.getReporting();    if (src != null) {        Reporting tgt = target.getReporting();        if (tgt == null) {            tgt = new Reporting();            target.setReporting(tgt);        }        mergeReporting(tgt, src, sourceDominant, context);    }}
protected void maven_f4298_0(ModelBase target, ModelBase source, boolean sourceDominant, Map<Object, Object> context)
{    DependencyManagement src = source.getDependencyManagement();    if (src != null) {        DependencyManagement tgt = target.getDependencyManagement();        if (tgt == null) {            tgt = new DependencyManagement();            target.setDependencyManagement(tgt);        }        mergeDependencyManagement(tgt, src, sourceDominant, context);    }}
protected void maven_f4299_0(ModelBase target, ModelBase source, boolean sourceDominant, Map<Object, Object> context)
{    Properties merged = new Properties();    if (sourceDominant) {        merged.putAll(target.getProperties());        merged.putAll(source.getProperties());    } else {        merged.putAll(source.getProperties());        merged.putAll(target.getProperties());    }    target.setProperties(merged);    target.setLocation("properties", InputLocation.merge(target.getLocation("properties"), source.getLocation("properties"), sourceDominant));}
protected void maven_f4300_0(DistributionManagement target, DistributionManagement source, boolean sourceDominant, Map<Object, Object> context)
{    mergeDistributionManagement_Repository(target, source, sourceDominant, context);    mergeDistributionManagement_SnapshotRepository(target, source, sourceDominant, context);    mergeDistributionManagement_Site(target, source, sourceDominant, context);    mergeDistributionManagement_Status(target, source, sourceDominant, context);    mergeDistributionManagement_DownloadUrl(target, source, sourceDominant, context);}
protected void maven_f4301_0(DistributionManagement target, DistributionManagement source, boolean sourceDominant, Map<Object, Object> context)
{    DeploymentRepository src = source.getRepository();    if (src != null) {        DeploymentRepository tgt = target.getRepository();        if (tgt == null) {            tgt = new DeploymentRepository();            target.setRepository(tgt);        }        mergeDeploymentRepository(tgt, src, sourceDominant, context);    }}
protected void maven_f4302_0(DistributionManagement target, DistributionManagement source, boolean sourceDominant, Map<Object, Object> context)
{    DeploymentRepository src = source.getSnapshotRepository();    if (src != null) {        DeploymentRepository tgt = target.getSnapshotRepository();        if (tgt == null) {            tgt = new DeploymentRepository();            target.setSnapshotRepository(tgt);        }        mergeDeploymentRepository(tgt, src, sourceDominant, context);    }}
protected void maven_f4303_0(DistributionManagement target, DistributionManagement source, boolean sourceDominant, Map<Object, Object> context)
{    Site src = source.getSite();    if (src != null) {        Site tgt = target.getSite();        if (tgt == null) {            tgt = new Site();            target.setSite(tgt);        }        mergeSite(tgt, src, sourceDominant, context);    }}
protected void maven_f4304_0(DistributionManagement target, DistributionManagement source, boolean sourceDominant, Map<Object, Object> context)
{    String src = source.getStatus();    if (src != null) {        if (sourceDominant || target.getStatus() == null) {            target.setStatus(src);            target.setLocation("status", source.getLocation("status"));        }    }}
protected void maven_f4305_0(DistributionManagement target, DistributionManagement source, boolean sourceDominant, Map<Object, Object> context)
{    String src = source.getDownloadUrl();    if (src != null) {        if (sourceDominant || target.getDownloadUrl() == null) {            target.setDownloadUrl(src);            target.setLocation("downloadUrl", source.getLocation("downloadUrl"));        }    }}
protected void maven_f4306_0(Relocation target, Relocation source, boolean sourceDominant, Map<Object, Object> context)
{    mergeRelocation_GroupId(target, source, sourceDominant, context);    mergeRelocation_ArtifactId(target, source, sourceDominant, context);    mergeRelocation_Version(target, source, sourceDominant, context);    mergeRelocation_Message(target, source, sourceDominant, context);}
protected void maven_f4307_0(Relocation target, Relocation source, boolean sourceDominant, Map<Object, Object> context)
{    String src = source.getGroupId();    if (src != null) {        if (sourceDominant || target.getGroupId() == null) {            target.setGroupId(src);            target.setLocation("groupId", source.getLocation("groupId"));        }    }}
protected void maven_f4308_0(Relocation target, Relocation source, boolean sourceDominant, Map<Object, Object> context)
{    String src = source.getArtifactId();    if (src != null) {        if (sourceDominant || target.getArtifactId() == null) {            target.setArtifactId(src);            target.setLocation("artifactId", source.getLocation("artifactId"));        }    }}
protected void maven_f4309_0(Relocation target, Relocation source, boolean sourceDominant, Map<Object, Object> context)
{    String src = source.getVersion();    if (src != null) {        if (sourceDominant || target.getVersion() == null) {            target.setVersion(src);            target.setLocation("version", source.getLocation("version"));        }    }}
protected void maven_f4310_0(Relocation target, Relocation source, boolean sourceDominant, Map<Object, Object> context)
{    String src = source.getMessage();    if (src != null) {        if (sourceDominant || target.getMessage() == null) {            target.setMessage(src);            target.setLocation("message", source.getLocation("message"));        }    }}
protected void maven_f4311_0(DeploymentRepository target, DeploymentRepository source, boolean sourceDominant, Map<Object, Object> context)
{    mergeRepository(target, source, sourceDominant, context);    mergeDeploymentRepository_UniqueVersion(target, source, sourceDominant, context);}
protected void maven_f4312_0(DeploymentRepository target, DeploymentRepository source, boolean sourceDominant, Map<Object, Object> context)
{    if (sourceDominant) {        target.setUniqueVersion(source.isUniqueVersion());        target.setLocation("uniqueVersion", source.getLocation("uniqueVersion"));    }}
protected void maven_f4313_0(Site target, Site source, boolean sourceDominant, Map<Object, Object> context)
{    mergeSite_ChildSiteUrlInheritAppendPath(target, source, sourceDominant, context);    mergeSite_Id(target, source, sourceDominant, context);    mergeSite_Name(target, source, sourceDominant, context);    mergeSite_Url(target, source, sourceDominant, context);}
protected void maven_f4314_0(Site target, Site source, boolean sourceDominant, Map<Object, Object> context)
{    String src = source.getChildSiteUrlInheritAppendPath();    if (src != null) {        if (sourceDominant || target.getChildSiteUrlInheritAppendPath() == null) {            target.setChildSiteUrlInheritAppendPath(src);            target.setLocation("child.site.url.inherit.append.path", source.getLocation("child.site.url.inherit.append.path"));        }    }}
protected void maven_f4315_0(Site target, Site source, boolean sourceDominant, Map<Object, Object> context)
{    String src = source.getId();    if (src != null) {        if (sourceDominant || target.getId() == null) {            target.setId(src);            target.setLocation("id", source.getLocation("id"));        }    }}
protected void maven_f4316_0(Site target, Site source, boolean sourceDominant, Map<Object, Object> context)
{    String src = source.getName();    if (src != null) {        if (sourceDominant || target.getName() == null) {            target.setName(src);            target.setLocation("name", source.getLocation("name"));        }    }}
protected void maven_f4317_0(Site target, Site source, boolean sourceDominant, Map<Object, Object> context)
{    String src = source.getUrl();    if (src != null) {        if (sourceDominant || target.getUrl() == null) {            target.setUrl(src);            target.setLocation("url", source.getLocation("url"));        }    }}
protected void maven_f4318_0(Repository target, Repository source, boolean sourceDominant, Map<Object, Object> context)
{    mergeRepositoryBase(target, source, sourceDominant, context);    mergeRepository_Releases(target, source, sourceDominant, context);    mergeRepository_Snapshots(target, source, sourceDominant, context);}
protected void maven_f4319_0(Repository target, Repository source, boolean sourceDominant, Map<Object, Object> context)
{    RepositoryPolicy src = source.getReleases();    if (src != null) {        RepositoryPolicy tgt = target.getReleases();        if (tgt == null) {            tgt = new RepositoryPolicy();            target.setReleases(tgt);        }        mergeRepositoryPolicy(tgt, src, sourceDominant, context);    }}
protected void maven_f4320_0(Repository target, Repository source, boolean sourceDominant, Map<Object, Object> context)
{    RepositoryPolicy src = source.getSnapshots();    if (src != null) {        RepositoryPolicy tgt = target.getSnapshots();        if (tgt == null) {            tgt = new RepositoryPolicy();            target.setSnapshots(tgt);        }        mergeRepositoryPolicy(tgt, src, sourceDominant, context);    }}
protected void maven_f4321_0(RepositoryBase target, RepositoryBase source, boolean sourceDominant, Map<Object, Object> context)
{    mergeRepositoryBase_Id(target, source, sourceDominant, context);    mergeRepositoryBase_Name(target, source, sourceDominant, context);    mergeRepositoryBase_Url(target, source, sourceDominant, context);    mergeRepositoryBase_Layout(target, source, sourceDominant, context);}
protected void maven_f4322_0(RepositoryBase target, RepositoryBase source, boolean sourceDominant, Map<Object, Object> context)
{    String src = source.getId();    if (src != null) {        if (sourceDominant || target.getId() == null) {            target.setId(src);            target.setLocation("id", source.getLocation("id"));        }    }}
protected void maven_f4323_0(RepositoryBase target, RepositoryBase source, boolean sourceDominant, Map<Object, Object> context)
{    String src = source.getUrl();    if (src != null) {        if (sourceDominant || target.getUrl() == null) {            target.setUrl(src);            target.setLocation("url", source.getLocation("url"));        }    }}
protected void maven_f4324_0(RepositoryBase target, RepositoryBase source, boolean sourceDominant, Map<Object, Object> context)
{    String src = source.getName();    if (src != null) {        if (sourceDominant || target.getName() == null) {            target.setName(src);            target.setLocation("name", source.getLocation("name"));        }    }}
protected void maven_f4325_0(RepositoryBase target, RepositoryBase source, boolean sourceDominant, Map<Object, Object> context)
{    String src = source.getLayout();    if (src != null) {        if (sourceDominant || target.getLayout() == null) {            target.setLayout(src);            target.setLocation("layout", source.getLocation("layout"));        }    }}
protected void maven_f4326_0(RepositoryPolicy target, RepositoryPolicy source, boolean sourceDominant, Map<Object, Object> context)
{    mergeRepositoryPolicy_Enabled(target, source, sourceDominant, context);    mergeRepositoryPolicy_UpdatePolicy(target, source, sourceDominant, context);    mergeRepositoryPolicy_ChecksumPolicy(target, source, sourceDominant, context);}
protected void maven_f4327_0(RepositoryPolicy target, RepositoryPolicy source, boolean sourceDominant, Map<Object, Object> context)
{    String src = source.getEnabled();    if (src != null) {        if (sourceDominant || target.getEnabled() == null) {            target.setEnabled(src);            target.setLocation("enabled", source.getLocation("enabled"));        }    }}
protected void maven_f4328_0(RepositoryPolicy target, RepositoryPolicy source, boolean sourceDominant, Map<Object, Object> context)
{    String src = source.getUpdatePolicy();    if (src != null) {        if (sourceDominant || target.getUpdatePolicy() == null) {            target.setUpdatePolicy(src);            target.setLocation("updatePolicy", source.getLocation("updatePolicy"));        }    }}
protected void maven_f4329_0(RepositoryPolicy target, RepositoryPolicy source, boolean sourceDominant, Map<Object, Object> context)
{    String src = source.getChecksumPolicy();    if (src != null) {        if (sourceDominant || target.getChecksumPolicy() == null) {            target.setChecksumPolicy(src);            target.setLocation("checksumPolicy", source.getLocation("checksumPolicy"));        }    }}
protected void maven_f4330_0(Dependency target, Dependency source, boolean sourceDominant, Map<Object, Object> context)
{    mergeDependency_GroupId(target, source, sourceDominant, context);    mergeDependency_ArtifactId(target, source, sourceDominant, context);    mergeDependency_Version(target, source, sourceDominant, context);    mergeDependency_Type(target, source, sourceDominant, context);    mergeDependency_Classifier(target, source, sourceDominant, context);    mergeDependency_Scope(target, source, sourceDominant, context);    mergeDependency_SystemPath(target, source, sourceDominant, context);    mergeDependency_Optional(target, source, sourceDominant, context);    mergeDependency_Exclusions(target, source, sourceDominant, context);}
protected void maven_f4331_0(Dependency target, Dependency source, boolean sourceDominant, Map<Object, Object> context)
{    String src = source.getGroupId();    if (src != null) {        if (sourceDominant || target.getGroupId() == null) {            target.setGroupId(src);            target.setLocation("groupId", source.getLocation("groupId"));        }    }}
protected void maven_f4332_0(Dependency target, Dependency source, boolean sourceDominant, Map<Object, Object> context)
{    String src = source.getArtifactId();    if (src != null) {        if (sourceDominant || target.getArtifactId() == null) {            target.setArtifactId(src);            target.setLocation("artifactId", source.getLocation("artifactId"));        }    }}
protected void maven_f4333_0(Dependency target, Dependency source, boolean sourceDominant, Map<Object, Object> context)
{    String src = source.getVersion();    if (src != null) {        if (sourceDominant || target.getVersion() == null) {            target.setVersion(src);            target.setLocation("version", source.getLocation("version"));        }    }}
protected void maven_f4334_0(Dependency target, Dependency source, boolean sourceDominant, Map<Object, Object> context)
{    String src = source.getType();    if (src != null) {        if (sourceDominant || target.getType() == null) {            target.setType(src);            target.setLocation("type", source.getLocation("type"));        }    }}
protected void maven_f4335_0(Dependency target, Dependency source, boolean sourceDominant, Map<Object, Object> context)
{    String src = source.getClassifier();    if (src != null) {        if (sourceDominant || target.getClassifier() == null) {            target.setClassifier(src);            target.setLocation("classifier", source.getLocation("classifier"));        }    }}
protected void maven_f4336_0(Dependency target, Dependency source, boolean sourceDominant, Map<Object, Object> context)
{    String src = source.getScope();    if (src != null) {        if (sourceDominant || target.getScope() == null) {            target.setScope(src);            target.setLocation("scope", source.getLocation("scope"));        }    }}
protected void maven_f4337_0(Dependency target, Dependency source, boolean sourceDominant, Map<Object, Object> context)
{    String src = source.getSystemPath();    if (src != null) {        if (sourceDominant || target.getSystemPath() == null) {            target.setSystemPath(src);            target.setLocation("systemPath", source.getLocation("systemPath"));        }    }}
protected void maven_f4338_0(Dependency target, Dependency source, boolean sourceDominant, Map<Object, Object> context)
{    String src = source.getOptional();    if (src != null) {        if (sourceDominant || target.getOptional() == null) {            target.setOptional(src);            target.setLocation("optional", source.getLocation("optional"));        }    }}
protected void maven_f4339_0(Dependency target, Dependency source, boolean sourceDominant, Map<Object, Object> context)
{    target.setExclusions(merge(target.getExclusions(), source.getExclusions(), sourceDominant, new ExclusionKeyComputer()));}
protected void maven_f4340_0(Exclusion target, Exclusion source, boolean sourceDominant, Map<Object, Object> context)
{    mergeExclusion_GroupId(target, source, sourceDominant, context);    mergeExclusion_ArtifactId(target, source, sourceDominant, context);}
protected void maven_f4341_0(Exclusion target, Exclusion source, boolean sourceDominant, Map<Object, Object> context)
{    String src = source.getGroupId();    if (src != null) {        if (sourceDominant || target.getGroupId() == null) {            target.setGroupId(src);            target.setLocation("groupId", source.getLocation("groupId"));        }    }}
protected void maven_f4342_0(Exclusion target, Exclusion source, boolean sourceDominant, Map<Object, Object> context)
{    String src = source.getArtifactId();    if (src != null) {        if (sourceDominant || target.getArtifactId() == null) {            target.setArtifactId(src);            target.setLocation("artifactId", source.getLocation("artifactId"));        }    }}
protected void maven_f4343_0(Reporting target, Reporting source, boolean sourceDominant, Map<Object, Object> context)
{    mergeReporting_OutputDirectory(target, source, sourceDominant, context);    mergeReporting_ExcludeDefaults(target, source, sourceDominant, context);    mergeReporting_Plugins(target, source, sourceDominant, context);}
protected void maven_f4344_0(Reporting target, Reporting source, boolean sourceDominant, Map<Object, Object> context)
{    String src = source.getOutputDirectory();    if (src != null) {        if (sourceDominant || target.getOutputDirectory() == null) {            target.setOutputDirectory(src);            target.setLocation("outputDirectory", source.getLocation("outputDirectory"));        }    }}
protected void maven_f4345_0(Reporting target, Reporting source, boolean sourceDominant, Map<Object, Object> context)
{    String src = source.getExcludeDefaults();    if (src != null) {        if (sourceDominant || target.getExcludeDefaults() == null) {            target.setExcludeDefaults(src);            target.setLocation("excludeDefaults", source.getLocation("excludeDefaults"));        }    }}
protected void maven_f4346_0(Reporting target, Reporting source, boolean sourceDominant, Map<Object, Object> context)
{    target.setPlugins(merge(target.getPlugins(), source.getPlugins(), sourceDominant, new ReportPluginKeyComputer()));}
protected void maven_f4347_0(ReportPlugin target, ReportPlugin source, boolean sourceDominant, Map<Object, Object> context)
{    mergeConfigurationContainer(target, source, sourceDominant, context);    mergeReportPlugin_GroupId(target, source, sourceDominant, context);    mergeReportPlugin_ArtifactId(target, source, sourceDominant, context);    mergeReportPlugin_Version(target, source, sourceDominant, context);    mergeReportPlugin_ReportSets(target, source, sourceDominant, context);}
protected void maven_f4348_0(ReportPlugin target, ReportPlugin source, boolean sourceDominant, Map<Object, Object> context)
{    String src = source.getGroupId();    if (src != null) {        if (sourceDominant || target.getGroupId() == null) {            target.setGroupId(src);            target.setLocation("groupId", source.getLocation("groupId"));        }    }}
protected void maven_f4349_0(ReportPlugin target, ReportPlugin source, boolean sourceDominant, Map<Object, Object> context)
{    String src = source.getArtifactId();    if (src != null) {        if (sourceDominant || target.getArtifactId() == null) {            target.setArtifactId(src);            target.setLocation("artifactId", source.getLocation("artifactId"));        }    }}
protected void maven_f4350_0(ReportPlugin target, ReportPlugin source, boolean sourceDominant, Map<Object, Object> context)
{    String src = source.getVersion();    if (src != null) {        if (sourceDominant || target.getVersion() == null) {            target.setVersion(src);            target.setLocation("version", source.getLocation("version"));        }    }}
protected void maven_f4351_0(ReportPlugin target, ReportPlugin source, boolean sourceDominant, Map<Object, Object> context)
{    target.setReportSets(merge(target.getReportSets(), source.getReportSets(), sourceDominant, new ReportSetKeyComputer()));}
protected void maven_f4352_0(ReportSet target, ReportSet source, boolean sourceDominant, Map<Object, Object> context)
{    mergeConfigurationContainer(target, source, sourceDominant, context);    mergeReportSet_Id(target, source, sourceDominant, context);    mergeReportSet_Reports(target, source, sourceDominant, context);}
protected void maven_f4353_0(ReportSet target, ReportSet source, boolean sourceDominant, Map<Object, Object> context)
{    String src = source.getId();    if (src != null) {        if (sourceDominant || target.getId() == null) {            target.setId(src);            target.setLocation("id", source.getLocation("id"));        }    }}
protected void maven_f4354_0(ReportSet target, ReportSet source, boolean sourceDominant, Map<Object, Object> context)
{    List<String> src = source.getReports();    if (!src.isEmpty()) {        List<String> tgt = target.getReports();        List<String> merged = new ArrayList<>(tgt.size() + src.size());        merged.addAll(tgt);        merged.addAll(src);        target.setReports(merged);        InputLocation sourceLocation = source.getLocation("reports");        if (sourceLocation != null) {            InputLocation targetLocation = target.getLocation("reports");            if (targetLocation == null) {                target.setLocation("reports", sourceLocation);            } else {                for (int i = 0; i < src.size(); i++) {                    targetLocation.setLocation(Integer.valueOf(tgt.size() + i), sourceLocation.getLocation(Integer.valueOf(i)));                }            }        }    }}
protected void maven_f4355_0(DependencyManagement target, DependencyManagement source, boolean sourceDominant, Map<Object, Object> context)
{    mergeDependencyManagement_Dependencies(target, source, sourceDominant, context);}
protected void maven_f4356_0(DependencyManagement target, DependencyManagement source, boolean sourceDominant, Map<Object, Object> context)
{    target.setDependencies(merge(target.getDependencies(), source.getDependencies(), sourceDominant, new DependencyKeyComputer()));}
protected void maven_f4357_0(Parent target, Parent source, boolean sourceDominant, Map<Object, Object> context)
{    mergeParent_GroupId(target, source, sourceDominant, context);    mergeParent_ArtifactId(target, source, sourceDominant, context);    mergeParent_Version(target, source, sourceDominant, context);    mergeParent_RelativePath(target, source, sourceDominant, context);}
protected void maven_f4358_0(Parent target, Parent source, boolean sourceDominant, Map<Object, Object> context)
{    String src = source.getGroupId();    if (src != null) {        if (sourceDominant || target.getGroupId() == null) {            target.setGroupId(src);            target.setLocation("groupId", source.getLocation("groupId"));        }    }}
protected void maven_f4359_0(Parent target, Parent source, boolean sourceDominant, Map<Object, Object> context)
{    String src = source.getArtifactId();    if (src != null) {        if (sourceDominant || target.getArtifactId() == null) {            target.setArtifactId(src);            target.setLocation("artifactId", source.getLocation("artifactId"));        }    }}
protected void maven_f4360_0(Parent target, Parent source, boolean sourceDominant, Map<Object, Object> context)
{    String src = source.getVersion();    if (src != null) {        if (sourceDominant || target.getVersion() == null) {            target.setVersion(src);            target.setLocation("version", source.getLocation("version"));        }    }}
protected void maven_f4361_0(Parent target, Parent source, boolean sourceDominant, Map<Object, Object> context)
{    String src = source.getRelativePath();    if (src != null) {        if (sourceDominant || target.getRelativePath() == null) {            target.setRelativePath(src);            target.setLocation("relativePath", source.getLocation("relativePath"));        }    }}
protected void maven_f4362_0(Organization target, Organization source, boolean sourceDominant, Map<Object, Object> context)
{    mergeOrganization_Name(target, source, sourceDominant, context);    mergeOrganization_Url(target, source, sourceDominant, context);}
protected void maven_f4363_0(Organization target, Organization source, boolean sourceDominant, Map<Object, Object> context)
{    String src = source.getName();    if (src != null) {        if (sourceDominant || target.getName() == null) {            target.setName(src);            target.setLocation("name", source.getLocation("name"));        }    }}
protected void maven_f4364_0(Organization target, Organization source, boolean sourceDominant, Map<Object, Object> context)
{    String src = source.getUrl();    if (src != null) {        if (sourceDominant || target.getUrl() == null) {            target.setUrl(src);            target.setLocation("url", source.getLocation("url"));        }    }}
protected void maven_f4365_0(License target, License source, boolean sourceDominant, Map<Object, Object> context)
{    mergeLicense_Name(target, source, sourceDominant, context);    mergeLicense_Url(target, source, sourceDominant, context);    mergeLicense_Distribution(target, source, sourceDominant, context);    mergeLicense_Comments(target, source, sourceDominant, context);}
protected void maven_f4366_0(License target, License source, boolean sourceDominant, Map<Object, Object> context)
{    String src = source.getName();    if (src != null) {        if (sourceDominant || target.getName() == null) {            target.setName(src);            target.setLocation("name", source.getLocation("name"));        }    }}
protected void maven_f4367_0(License target, License source, boolean sourceDominant, Map<Object, Object> context)
{    String src = source.getUrl();    if (src != null) {        if (sourceDominant || target.getUrl() == null) {            target.setUrl(src);            target.setLocation("url", source.getLocation("url"));        }    }}
protected void maven_f4368_0(License target, License source, boolean sourceDominant, Map<Object, Object> context)
{    String src = source.getDistribution();    if (src != null) {        if (sourceDominant || target.getDistribution() == null) {            target.setDistribution(src);            target.setLocation("distribution", source.getLocation("distribution"));        }    }}
protected void maven_f4369_0(License target, License source, boolean sourceDominant, Map<Object, Object> context)
{    String src = source.getComments();    if (src != null) {        if (sourceDominant || target.getComments() == null) {            target.setComments(src);            target.setLocation("comments", source.getLocation("comments"));        }    }}
protected void maven_f4370_0(MailingList target, MailingList source, boolean sourceDominant, Map<Object, Object> context)
{    mergeMailingList_Name(target, source, sourceDominant, context);    mergeMailingList_Subscribe(target, source, sourceDominant, context);    mergeMailingList_Unsubscribe(target, source, sourceDominant, context);    mergeMailingList_Post(target, source, sourceDominant, context);    mergeMailingList_OtherArchives(target, source, sourceDominant, context);}
protected void maven_f4371_0(MailingList target, MailingList source, boolean sourceDominant, Map<Object, Object> context)
{    String src = source.getName();    if (src != null) {        if (sourceDominant || target.getName() == null) {            target.setName(src);            target.setLocation("name", source.getLocation("name"));        }    }}
protected void maven_f4372_0(MailingList target, MailingList source, boolean sourceDominant, Map<Object, Object> context)
{    String src = source.getSubscribe();    if (src != null) {        if (sourceDominant || target.getSubscribe() == null) {            target.setSubscribe(src);            target.setLocation("subscribe", source.getLocation("subscribe"));        }    }}
protected void maven_f4373_0(MailingList target, MailingList source, boolean sourceDominant, Map<Object, Object> context)
{    String src = source.getUnsubscribe();    if (src != null) {        if (sourceDominant || target.getUnsubscribe() == null) {            target.setUnsubscribe(src);            target.setLocation("unsubscribe", source.getLocation("unsubscribe"));        }    }}
protected void maven_f4374_0(MailingList target, MailingList source, boolean sourceDominant, Map<Object, Object> context)
{    String src = source.getPost();    if (src != null) {        if (sourceDominant || target.getPost() == null) {            target.setPost(src);            target.setLocation("post", source.getLocation("post"));        }    }}
protected void maven_f4375_0(MailingList target, MailingList source, boolean sourceDominant, Map<Object, Object> context)
{    String src = source.getArchive();    if (src != null) {        if (sourceDominant || target.getArchive() == null) {            target.setArchive(src);            target.setLocation("archive", source.getLocation("archive"));        }    }}
protected void maven_f4376_0(MailingList target, MailingList source, boolean sourceDominant, Map<Object, Object> context)
{    List<String> src = source.getOtherArchives();    if (!src.isEmpty()) {        List<String> tgt = target.getOtherArchives();        List<String> merged = new ArrayList<>(tgt.size() + src.size());        merged.addAll(tgt);        merged.addAll(src);        target.setOtherArchives(merged);    }}
protected void maven_f4377_0(Developer target, Developer source, boolean sourceDominant, Map<Object, Object> context)
{    mergeContributor(target, source, sourceDominant, context);    mergeDeveloper_Id(target, source, sourceDominant, context);}
protected void maven_f4378_0(Developer target, Developer source, boolean sourceDominant, Map<Object, Object> context)
{    String src = source.getId();    if (src != null) {        if (sourceDominant || target.getId() == null) {            target.setId(src);            target.setLocation("id", source.getLocation("id"));        }    }}
protected void maven_f4379_0(Contributor target, Contributor source, boolean sourceDominant, Map<Object, Object> context)
{    mergeContributor_Name(target, source, sourceDominant, context);    mergeContributor_Email(target, source, sourceDominant, context);    mergeContributor_Url(target, source, sourceDominant, context);    mergeContributor_Organization(target, source, sourceDominant, context);    mergeContributor_OrganizationUrl(target, source, sourceDominant, context);    mergeContributor_Timezone(target, source, sourceDominant, context);    mergeContributor_Roles(target, source, sourceDominant, context);    mergeContributor_Properties(target, source, sourceDominant, context);}
protected void maven_f4380_0(Contributor target, Contributor source, boolean sourceDominant, Map<Object, Object> context)
{    String src = source.getName();    if (src != null) {        if (sourceDominant || target.getName() == null) {            target.setName(src);            target.setLocation("name", source.getLocation("name"));        }    }}
protected void maven_f4381_0(Contributor target, Contributor source, boolean sourceDominant, Map<Object, Object> context)
{    String src = source.getEmail();    if (src != null) {        if (sourceDominant || target.getEmail() == null) {            target.setEmail(src);            target.setLocation("email", source.getLocation("email"));        }    }}
protected void maven_f4382_0(Contributor target, Contributor source, boolean sourceDominant, Map<Object, Object> context)
{    String src = source.getUrl();    if (src != null) {        if (sourceDominant || target.getUrl() == null) {            target.setUrl(src);            target.setLocation("url", source.getLocation("url"));        }    }}
protected void maven_f4383_0(Contributor target, Contributor source, boolean sourceDominant, Map<Object, Object> context)
{    String src = source.getOrganization();    if (src != null) {        if (sourceDominant || target.getOrganization() == null) {            target.setOrganization(src);            target.setLocation("organization", source.getLocation("organization"));        }    }}
protected void maven_f4384_0(Contributor target, Contributor source, boolean sourceDominant, Map<Object, Object> context)
{    String src = source.getOrganizationUrl();    if (src != null) {        if (sourceDominant || target.getOrganizationUrl() == null) {            target.setOrganizationUrl(src);            target.setLocation("organizationUrl", source.getLocation("organizationUrl"));        }    }}
protected void maven_f4385_0(Contributor target, Contributor source, boolean sourceDominant, Map<Object, Object> context)
{    String src = source.getTimezone();    if (src != null) {        if (sourceDominant || target.getTimezone() == null) {            target.setTimezone(src);            target.setLocation("timezone", source.getLocation("timezone"));        }    }}
protected void maven_f4386_0(Contributor target, Contributor source, boolean sourceDominant, Map<Object, Object> context)
{    List<String> src = source.getRoles();    if (!src.isEmpty()) {        List<String> tgt = target.getRoles();        List<String> merged = new ArrayList<>(tgt.size() + src.size());        merged.addAll(tgt);        merged.addAll(src);        target.setRoles(merged);    }}
protected void maven_f4387_0(Contributor target, Contributor source, boolean sourceDominant, Map<Object, Object> context)
{    Properties merged = new Properties();    if (sourceDominant) {        merged.putAll(target.getProperties());        merged.putAll(source.getProperties());    } else {        merged.putAll(source.getProperties());        merged.putAll(target.getProperties());    }    target.setProperties(merged);    target.setLocation("properties", InputLocation.merge(target.getLocation("properties"), source.getLocation("properties"), sourceDominant));}
protected void maven_f4388_0(IssueManagement target, IssueManagement source, boolean sourceDominant, Map<Object, Object> context)
{    mergeIssueManagement_Url(target, source, sourceDominant, context);    mergeIssueManagement_System(target, source, sourceDominant, context);}
protected void maven_f4389_0(IssueManagement target, IssueManagement source, boolean sourceDominant, Map<Object, Object> context)
{    String src = source.getSystem();    if (src != null) {        if (sourceDominant || target.getSystem() == null) {            target.setSystem(src);            target.setLocation("system", source.getLocation("system"));        }    }}
protected void maven_f4390_0(IssueManagement target, IssueManagement source, boolean sourceDominant, Map<Object, Object> context)
{    String src = source.getUrl();    if (src != null) {        if (sourceDominant || target.getUrl() == null) {            target.setUrl(src);            target.setLocation("url", source.getLocation("url"));        }    }}
protected void maven_f4391_0(Scm target, Scm source, boolean sourceDominant, Map<Object, Object> context)
{    mergeScm_ChildScmConnectionInheritAppendPath(target, source, sourceDominant, context);    mergeScm_ChildScmDeveloperConnectionInheritAppendPath(target, source, sourceDominant, context);    mergeScm_ChildScmUrlInheritAppendPath(target, source, sourceDominant, context);    mergeScm_Url(target, source, sourceDominant, context);    mergeScm_Connection(target, source, sourceDominant, context);    mergeScm_DeveloperConnection(target, source, sourceDominant, context);    mergeScm_Tag(target, source, sourceDominant, context);}
protected void maven_f4392_0(Scm target, Scm source, boolean sourceDominant, Map<Object, Object> context)
{    String src = source.getChildScmConnectionInheritAppendPath();    if (src != null) {        if (sourceDominant || target.getChildScmConnectionInheritAppendPath() == null) {            target.setChildScmConnectionInheritAppendPath(src);            target.setLocation("child.scm.connection.inherit.append.path", source.getLocation("child.scm.connection.inherit.append.path"));        }    }}
protected void maven_f4393_0(Scm target, Scm source, boolean sourceDominant, Map<Object, Object> context)
{    String src = source.getChildScmDeveloperConnectionInheritAppendPath();    if (src != null) {        if (sourceDominant || target.getChildScmDeveloperConnectionInheritAppendPath() == null) {            target.setChildScmDeveloperConnectionInheritAppendPath(src);            target.setLocation("child.scm.developerConnection.inherit.append.path", source.getLocation("child.scm.developerConnection.inherit.append.path"));        }    }}
protected void maven_f4394_0(Scm target, Scm source, boolean sourceDominant, Map<Object, Object> context)
{    String src = source.getChildScmUrlInheritAppendPath();    if (src != null) {        if (sourceDominant || target.getChildScmUrlInheritAppendPath() == null) {            target.setChildScmUrlInheritAppendPath(src);            target.setLocation("child.scm.url.inherit.append.path", source.getLocation("child.scm.url.inherit.append.path"));        }    }}
protected void maven_f4395_0(Scm target, Scm source, boolean sourceDominant, Map<Object, Object> context)
{    String src = source.getUrl();    if (src != null) {        if (sourceDominant || target.getUrl() == null) {            target.setUrl(src);            target.setLocation("url", source.getLocation("url"));        }    }}
protected void maven_f4396_0(Scm target, Scm source, boolean sourceDominant, Map<Object, Object> context)
{    String src = source.getConnection();    if (src != null) {        if (sourceDominant || target.getConnection() == null) {            target.setConnection(src);            target.setLocation("connection", source.getLocation("connection"));        }    }}
protected void maven_f4397_0(Scm target, Scm source, boolean sourceDominant, Map<Object, Object> context)
{    String src = source.getDeveloperConnection();    if (src != null) {        if (sourceDominant || target.getDeveloperConnection() == null) {            target.setDeveloperConnection(src);            target.setLocation("developerConnection", source.getLocation("developerConnection"));        }    }}
protected void maven_f4398_0(Scm target, Scm source, boolean sourceDominant, Map<Object, Object> context)
{    String src = source.getTag();    if (src != null) {        if (sourceDominant || target.getTag() == null) {            target.setTag(src);            target.setLocation("tag", source.getLocation("tag"));        }    }}
protected void maven_f4399_0(CiManagement target, CiManagement source, boolean sourceDominant, Map<Object, Object> context)
{    mergeCiManagement_System(target, source, sourceDominant, context);    mergeCiManagement_Url(target, source, sourceDominant, context);    mergeCiManagement_Notifiers(target, source, sourceDominant, context);}
protected void maven_f4400_0(CiManagement target, CiManagement source, boolean sourceDominant, Map<Object, Object> context)
{    String src = source.getSystem();    if (src != null) {        if (sourceDominant || target.getSystem() == null) {            target.setSystem(src);            target.setLocation("system", source.getLocation("system"));        }    }}
protected void maven_f4401_0(CiManagement target, CiManagement source, boolean sourceDominant, Map<Object, Object> context)
{    String src = source.getUrl();    if (src != null) {        if (sourceDominant || target.getUrl() == null) {            target.setUrl(src);            target.setLocation("url", source.getLocation("url"));        }    }}
protected void maven_f4402_0(CiManagement target, CiManagement source, boolean sourceDominant, Map<Object, Object> context)
{    target.setNotifiers(merge(target.getNotifiers(), source.getNotifiers(), sourceDominant, new NotifierKeyComputer()));}
protected void maven_f4403_0(Notifier target, Notifier source, boolean sourceDominant, Map<Object, Object> context)
{    mergeNotifier_Type(target, source, sourceDominant, context);    mergeNotifier_Address(target, source, sourceDominant, context);    mergeNotifier_Configuration(target, source, sourceDominant, context);    mergeNotifier_SendOnError(target, source, sourceDominant, context);    mergeNotifier_SendOnFailure(target, source, sourceDominant, context);    mergeNotifier_SendOnSuccess(target, source, sourceDominant, context);    mergeNotifier_SendOnWarning(target, source, sourceDominant, context);}
protected void maven_f4404_0(Notifier target, Notifier source, boolean sourceDominant, Map<Object, Object> context)
{    String src = source.getType();    if (src != null) {        if (sourceDominant || target.getType() == null) {            target.setType(src);        }    }}
protected void maven_f4405_0(Notifier target, Notifier source, boolean sourceDominant, Map<Object, Object> context)
{    String src = source.getAddress();    if (src != null) {        if (sourceDominant || target.getAddress() == null) {            target.setAddress(src);        }    }}
protected void maven_f4406_0(Notifier target, Notifier source, boolean sourceDominant, Map<Object, Object> context)
{    Properties merged = new Properties();    if (sourceDominant) {        merged.putAll(target.getConfiguration());        merged.putAll(source.getConfiguration());    } else {        merged.putAll(source.getConfiguration());        merged.putAll(target.getConfiguration());    }    target.setConfiguration(merged);}
protected void maven_f4407_0(Notifier target, Notifier source, boolean sourceDominant, Map<Object, Object> context)
{    if (sourceDominant) {        target.setSendOnError(source.isSendOnError());    }}
protected void maven_f4408_0(Notifier target, Notifier source, boolean sourceDominant, Map<Object, Object> context)
{    if (sourceDominant) {        target.setSendOnFailure(source.isSendOnFailure());    }}
protected void maven_f4409_0(Notifier target, Notifier source, boolean sourceDominant, Map<Object, Object> context)
{    if (sourceDominant) {        target.setSendOnSuccess(source.isSendOnSuccess());    }}
protected void maven_f4410_0(Notifier target, Notifier source, boolean sourceDominant, Map<Object, Object> context)
{    if (sourceDominant) {        target.setSendOnWarning(source.isSendOnWarning());    }}
protected void maven_f4411_0(Prerequisites target, Prerequisites source, boolean sourceDominant, Map<Object, Object> context)
{    mergePrerequisites_Maven(target, source, sourceDominant, context);}
protected void maven_f4412_0(Prerequisites target, Prerequisites source, boolean sourceDominant, Map<Object, Object> context)
{    String src = source.getMaven();    if (src != null) {        if (sourceDominant || target.getMaven() == null) {            target.setMaven(src);            target.setLocation("maven", source.getLocation("maven"));        }    }}
protected void maven_f4413_0(Build target, Build source, boolean sourceDominant, Map<Object, Object> context)
{    mergeBuildBase(target, source, sourceDominant, context);    mergeBuild_SourceDirectory(target, source, sourceDominant, context);    mergeBuild_ScriptSourceDirectory(target, source, sourceDominant, context);    mergeBuild_TestSourceDirectory(target, source, sourceDominant, context);    mergeBuild_OutputDirectory(target, source, sourceDominant, context);    mergeBuild_TestOutputDirectory(target, source, sourceDominant, context);    mergeBuild_Extensions(target, source, sourceDominant, context);}
protected void maven_f4414_0(Build target, Build source, boolean sourceDominant, Map<Object, Object> context)
{    String src = source.getSourceDirectory();    if (src != null) {        if (sourceDominant || target.getSourceDirectory() == null) {            target.setSourceDirectory(src);            target.setLocation("sourceDirectory", source.getLocation("sourceDirectory"));        }    }}
protected void maven_f4415_0(Build target, Build source, boolean sourceDominant, Map<Object, Object> context)
{    String src = source.getScriptSourceDirectory();    if (src != null) {        if (sourceDominant || target.getScriptSourceDirectory() == null) {            target.setScriptSourceDirectory(src);            target.setLocation("scriptSourceDirectory", source.getLocation("scriptSourceDirectory"));        }    }}
protected void maven_f4416_0(Build target, Build source, boolean sourceDominant, Map<Object, Object> context)
{    String src = source.getTestSourceDirectory();    if (src != null) {        if (sourceDominant || target.getTestSourceDirectory() == null) {            target.setTestSourceDirectory(src);            target.setLocation("testSourceDirectory", source.getLocation("testSourceDirectory"));        }    }}
protected void maven_f4417_0(Build target, Build source, boolean sourceDominant, Map<Object, Object> context)
{    String src = source.getOutputDirectory();    if (src != null) {        if (sourceDominant || target.getOutputDirectory() == null) {            target.setOutputDirectory(src);            target.setLocation("outputDirectory", source.getLocation("outputDirectory"));        }    }}
protected void maven_f4418_0(Build target, Build source, boolean sourceDominant, Map<Object, Object> context)
{    String src = source.getTestOutputDirectory();    if (src != null) {        if (sourceDominant || target.getTestOutputDirectory() == null) {            target.setTestOutputDirectory(src);            target.setLocation("testOutputDirectory", source.getLocation("testOutputDirectory"));        }    }}
protected void maven_f4419_0(Build target, Build source, boolean sourceDominant, Map<Object, Object> context)
{    target.setExtensions(merge(target.getExtensions(), source.getExtensions(), sourceDominant, new ExtensionKeyComputer()));}
protected void maven_f4420_0(Extension target, Extension source, boolean sourceDominant, Map<Object, Object> context)
{    mergeExtension_GroupId(target, source, sourceDominant, context);    mergeExtension_ArtifactId(target, source, sourceDominant, context);    mergeExtension_Version(target, source, sourceDominant, context);}
protected void maven_f4421_0(Extension target, Extension source, boolean sourceDominant, Map<Object, Object> context)
{    String src = source.getGroupId();    if (src != null) {        if (sourceDominant || target.getGroupId() == null) {            target.setGroupId(src);            target.setLocation("groupId", source.getLocation("groupId"));        }    }}
protected void maven_f4422_0(Extension target, Extension source, boolean sourceDominant, Map<Object, Object> context)
{    String src = source.getArtifactId();    if (src != null) {        if (sourceDominant || target.getArtifactId() == null) {            target.setArtifactId(src);            target.setLocation("artifactId", source.getLocation("artifactId"));        }    }}
protected void maven_f4423_0(Extension target, Extension source, boolean sourceDominant, Map<Object, Object> context)
{    String src = source.getVersion();    if (src != null) {        if (sourceDominant || target.getVersion() == null) {            target.setVersion(src);            target.setLocation("version", source.getLocation("version"));        }    }}
protected void maven_f4424_0(BuildBase target, BuildBase source, boolean sourceDominant, Map<Object, Object> context)
{    mergePluginConfiguration(target, source, sourceDominant, context);    mergeBuildBase_DefaultGoal(target, source, sourceDominant, context);    mergeBuildBase_FinalName(target, source, sourceDominant, context);    mergeBuildBase_Directory(target, source, sourceDominant, context);    mergeBuildBase_Resources(target, source, sourceDominant, context);    mergeBuildBase_TestResources(target, source, sourceDominant, context);    mergeBuildBase_Filters(target, source, sourceDominant, context);}
protected void maven_f4425_0(BuildBase target, BuildBase source, boolean sourceDominant, Map<Object, Object> context)
{    String src = source.getDefaultGoal();    if (src != null) {        if (sourceDominant || target.getDefaultGoal() == null) {            target.setDefaultGoal(src);            target.setLocation("defaultGoal", source.getLocation("defaultGoal"));        }    }}
protected void maven_f4426_0(BuildBase target, BuildBase source, boolean sourceDominant, Map<Object, Object> context)
{    String src = source.getDirectory();    if (src != null) {        if (sourceDominant || target.getDirectory() == null) {            target.setDirectory(src);            target.setLocation("directory", source.getLocation("directory"));        }    }}
protected void maven_f4427_0(BuildBase target, BuildBase source, boolean sourceDominant, Map<Object, Object> context)
{    String src = source.getFinalName();    if (src != null) {        if (sourceDominant || target.getFinalName() == null) {            target.setFinalName(src);            target.setLocation("finalName", source.getLocation("finalName"));        }    }}
protected void maven_f4428_0(BuildBase target, BuildBase source, boolean sourceDominant, Map<Object, Object> context)
{    List<String> src = source.getFilters();    if (!src.isEmpty()) {        List<String> tgt = target.getFilters();        List<String> merged = new ArrayList<>(tgt.size() + src.size());        merged.addAll(tgt);        merged.addAll(src);        target.setFilters(merged);    }}
protected void maven_f4429_0(BuildBase target, BuildBase source, boolean sourceDominant, Map<Object, Object> context)
{    target.setResources(merge(target.getResources(), source.getResources(), sourceDominant, new ResourceKeyComputer()));}
protected void maven_f4430_0(BuildBase target, BuildBase source, boolean sourceDominant, Map<Object, Object> context)
{    target.setTestResources(merge(target.getTestResources(), source.getTestResources(), sourceDominant, new ResourceKeyComputer()));}
protected void maven_f4431_0(PluginConfiguration target, PluginConfiguration source, boolean sourceDominant, Map<Object, Object> context)
{    mergePluginContainer(target, source, sourceDominant, context);    mergePluginConfiguration_PluginManagement(target, source, sourceDominant, context);}
protected void maven_f4432_0(PluginConfiguration target, PluginConfiguration source, boolean sourceDominant, Map<Object, Object> context)
{    PluginManagement src = source.getPluginManagement();    if (src != null) {        PluginManagement tgt = target.getPluginManagement();        if (tgt == null) {            tgt = new PluginManagement();            target.setPluginManagement(tgt);        }        mergePluginManagement(tgt, src, sourceDominant, context);    }}
protected void maven_f4433_0(PluginContainer target, PluginContainer source, boolean sourceDominant, Map<Object, Object> context)
{    mergePluginContainer_Plugins(target, source, sourceDominant, context);}
protected void maven_f4434_0(PluginContainer target, PluginContainer source, boolean sourceDominant, Map<Object, Object> context)
{    target.setPlugins(merge(target.getPlugins(), source.getPlugins(), sourceDominant, new PluginKeyComputer()));}
protected void maven_f4435_0(PluginManagement target, PluginManagement source, boolean sourceDominant, Map<Object, Object> context)
{    mergePluginContainer(target, source, sourceDominant, context);}
protected void maven_f4436_0(Plugin target, Plugin source, boolean sourceDominant, Map<Object, Object> context)
{    mergeConfigurationContainer(target, source, sourceDominant, context);    mergePlugin_GroupId(target, source, sourceDominant, context);    mergePlugin_ArtifactId(target, source, sourceDominant, context);    mergePlugin_Version(target, source, sourceDominant, context);    mergePlugin_Extensions(target, source, sourceDominant, context);    mergePlugin_Dependencies(target, source, sourceDominant, context);    mergePlugin_Executions(target, source, sourceDominant, context);}
protected void maven_f4437_0(Plugin target, Plugin source, boolean sourceDominant, Map<Object, Object> context)
{    String src = source.getGroupId();    if (src != null) {        if (sourceDominant || target.getGroupId() == null) {            target.setGroupId(src);            target.setLocation("groupId", source.getLocation("groupId"));        }    }}
protected void maven_f4438_0(Plugin target, Plugin source, boolean sourceDominant, Map<Object, Object> context)
{    String src = source.getArtifactId();    if (src != null) {        if (sourceDominant || target.getArtifactId() == null) {            target.setArtifactId(src);            target.setLocation("artifactId", source.getLocation("artifactId"));        }    }}
protected void maven_f4439_0(Plugin target, Plugin source, boolean sourceDominant, Map<Object, Object> context)
{    String src = source.getVersion();    if (src != null) {        if (sourceDominant || target.getVersion() == null) {            target.setVersion(src);            target.setLocation("version", source.getLocation("version"));        }    }}
protected void maven_f4440_0(Plugin target, Plugin source, boolean sourceDominant, Map<Object, Object> context)
{    String src = source.getExtensions();    if (src != null) {        if (sourceDominant || target.getExtensions() == null) {            target.setExtensions(src);            target.setLocation("extensions", source.getLocation("extensions"));        }    }}
protected void maven_f4441_0(Plugin target, Plugin source, boolean sourceDominant, Map<Object, Object> context)
{    target.setDependencies(merge(target.getDependencies(), source.getDependencies(), sourceDominant, new DependencyKeyComputer()));}
protected void maven_f4442_0(Plugin target, Plugin source, boolean sourceDominant, Map<Object, Object> context)
{    target.setExecutions(merge(target.getExecutions(), source.getExecutions(), sourceDominant, new ExecutionKeyComputer()));}
protected void maven_f4443_0(ConfigurationContainer target, ConfigurationContainer source, boolean sourceDominant, Map<Object, Object> context)
{    mergeConfigurationContainer_Inherited(target, source, sourceDominant, context);    mergeConfigurationContainer_Configuration(target, source, sourceDominant, context);}
protected void maven_f4444_0(ConfigurationContainer target, ConfigurationContainer source, boolean sourceDominant, Map<Object, Object> context)
{    String src = source.getInherited();    if (src != null) {        if (sourceDominant || target.getInherited() == null) {            target.setInherited(src);            target.setLocation("inherited", source.getLocation("inherited"));        }    }}
protected void maven_f4445_0(ConfigurationContainer target, ConfigurationContainer source, boolean sourceDominant, Map<Object, Object> context)
{    Xpp3Dom src = (Xpp3Dom) source.getConfiguration();    if (src != null) {        Xpp3Dom tgt = (Xpp3Dom) target.getConfiguration();        if (sourceDominant || tgt == null) {            tgt = Xpp3Dom.mergeXpp3Dom(new Xpp3Dom(src), tgt);        } else {            tgt = Xpp3Dom.mergeXpp3Dom(tgt, src);        }        target.setConfiguration(tgt);    }}
protected void maven_f4446_0(PluginExecution target, PluginExecution source, boolean sourceDominant, Map<Object, Object> context)
{    mergeConfigurationContainer(target, source, sourceDominant, context);    mergePluginExecution_Id(target, source, sourceDominant, context);    mergePluginExecution_Phase(target, source, sourceDominant, context);    mergePluginExecution_Goals(target, source, sourceDominant, context);}
protected void maven_f4447_0(PluginExecution target, PluginExecution source, boolean sourceDominant, Map<Object, Object> context)
{    String src = source.getId();    if (src != null) {        if (sourceDominant || target.getId() == null) {            target.setId(src);            target.setLocation("id", source.getLocation("id"));        }    }}
protected void maven_f4448_0(PluginExecution target, PluginExecution source, boolean sourceDominant, Map<Object, Object> context)
{    String src = source.getPhase();    if (src != null) {        if (sourceDominant || target.getPhase() == null) {            target.setPhase(src);            target.setLocation("phase", source.getLocation("phase"));        }    }}
protected void maven_f4449_0(PluginExecution target, PluginExecution source, boolean sourceDominant, Map<Object, Object> context)
{    List<String> src = source.getGoals();    if (!src.isEmpty()) {        List<String> tgt = target.getGoals();        List<String> merged = new ArrayList<>(tgt.size() + src.size());        merged.addAll(tgt);        merged.addAll(src);        target.setGoals(merged);    }}
protected void maven_f4450_0(Resource target, Resource source, boolean sourceDominant, Map<Object, Object> context)
{    mergeFileSet(target, source, sourceDominant, context);    mergeResource_TargetPath(target, source, sourceDominant, context);    mergeResource_Filtering(target, source, sourceDominant, context);    mergeResource_MergeId(target, source, sourceDominant, context);}
protected void maven_f4451_0(Resource target, Resource source, boolean sourceDominant, Map<Object, Object> context)
{    String src = source.getTargetPath();    if (src != null) {        if (sourceDominant || target.getTargetPath() == null) {            target.setTargetPath(src);            target.setLocation("targetPath", source.getLocation("targetPath"));        }    }}
protected void maven_f4452_0(Resource target, Resource source, boolean sourceDominant, Map<Object, Object> context)
{    String src = source.getFiltering();    if (src != null) {        if (sourceDominant || target.getFiltering() == null) {            target.setFiltering(src);            target.setLocation("filtering", source.getLocation("filtering"));        }    }}
protected void maven_f4453_0(Resource target, Resource source, boolean sourceDominant, Map<Object, Object> context)
{    String src = source.getMergeId();    if (src != null) {        if (sourceDominant || target.getMergeId() == null) {            target.setMergeId(src);        }    }}
protected void maven_f4454_0(FileSet target, FileSet source, boolean sourceDominant, Map<Object, Object> context)
{    mergePatternSet(target, source, sourceDominant, context);    mergeFileSet_Directory(target, source, sourceDominant, context);}
protected void maven_f4455_0(FileSet target, FileSet source, boolean sourceDominant, Map<Object, Object> context)
{    String src = source.getDirectory();    if (src != null) {        if (sourceDominant || target.getDirectory() == null) {            target.setDirectory(src);            target.setLocation("directory", source.getLocation("directory"));        }    }}
protected void maven_f4456_0(PatternSet target, PatternSet source, boolean sourceDominant, Map<Object, Object> context)
{    mergePatternSet_Includes(target, source, sourceDominant, context);    mergePatternSet_Excludes(target, source, sourceDominant, context);}
protected void maven_f4457_0(PatternSet target, PatternSet source, boolean sourceDominant, Map<Object, Object> context)
{    List<String> src = source.getIncludes();    if (!src.isEmpty()) {        List<String> tgt = target.getIncludes();        List<String> merged = new ArrayList<>(tgt.size() + src.size());        merged.addAll(tgt);        merged.addAll(src);        target.setIncludes(merged);    }}
protected void maven_f4458_0(PatternSet target, PatternSet source, boolean sourceDominant, Map<Object, Object> context)
{    List<String> src = source.getExcludes();    if (!src.isEmpty()) {        List<String> tgt = target.getExcludes();        List<String> merged = new ArrayList<>(tgt.size() + src.size());        merged.addAll(tgt);        merged.addAll(src);        target.setExcludes(merged);    }}
protected void maven_f4459_0(Profile target, Profile source, boolean sourceDominant, Map<Object, Object> context)
{    mergeModelBase(target, source, sourceDominant, context);}
protected void maven_f4460_0(Activation target, Activation source, boolean sourceDominant, Map<Object, Object> context)
{}
protected Object maven_f4461_0(Dependency dependency)
{    return dependency;}
protected Object maven_f4462_0(Plugin plugin)
{    return plugin;}
protected Object maven_f4463_0(PluginExecution pluginExecution)
{    return pluginExecution;}
protected Object maven_f4464_0(ReportPlugin reportPlugin)
{    return reportPlugin;}
protected Object maven_f4465_0(ReportSet reportSet)
{    return reportSet;}
protected Object maven_f4466_0(License license)
{    return license;}
protected Object maven_f4467_0(MailingList mailingList)
{    return mailingList;}
protected Object maven_f4468_0(Developer developer)
{    return developer;}
protected Object maven_f4469_0(Contributor contributor)
{    return contributor;}
protected Object maven_f4470_0(Profile profile)
{    return profile;}
protected Object maven_f4471_0(Repository repository)
{    return getRepositoryBaseKey(repository);}
protected Object maven_f4472_0(RepositoryBase repositoryBase)
{    return repositoryBase;}
protected Object maven_f4473_0(Notifier notifier)
{    return notifier;}
protected Object maven_f4474_0(Resource resource)
{    return resource;}
protected Object maven_f4475_0(Extension extension)
{    return extension;}
protected Object maven_f4476_0(Exclusion exclusion)
{    return exclusion;}
public Object maven_f4477_0(Dependency dependency)
{    return getDependencyKey(dependency);}
public Object maven_f4478_0(License license)
{    return getLicenseKey(license);}
public Object maven_f4479_0(MailingList mailingList)
{    return getMailingListKey(mailingList);}
public Object maven_f4480_0(Developer developer)
{    return getDeveloperKey(developer);}
public Object maven_f4481_0(Contributor contributor)
{    return getContributorKey(contributor);}
public Object maven_f4482_0(Profile profile)
{    return getProfileKey(profile);}
public Object maven_f4483_0(Repository repository)
{    return getRepositoryKey(repository);}
public Object maven_f4484_0(ReportPlugin plugin)
{    return getReportPluginKey(plugin);}
public Object maven_f4485_0(Plugin plugin)
{    return getPluginKey(plugin);}
public Object maven_f4486_0(ReportSet reportSet)
{    return getReportSetKey(reportSet);}
public Object maven_f4487_0(Notifier notifier)
{    return getNotifierKey(notifier);}
public Object maven_f4488_0(Extension extension)
{    return getExtensionKey(extension);}
public Object maven_f4489_0(Resource resource)
{    return getResourceKey(resource);}
public Object maven_f4490_0(PluginExecution pluginExecution)
{    return getPluginExecutionKey(pluginExecution);}
public Object maven_f4491_0(Exclusion exclusion)
{    return getExclusionKey(exclusion);}
public T maven_f4492_0(T u, T v)
{    return sourceDominant ? v : u;}
private static List<T> maven_f4493_0(List<T> tgt, List<T> src, boolean sourceDominant, KeyComputer<T> computer)
{    return merge(tgt, src, computer, new SourceDominant<T>(sourceDominant));}
private static List<T> maven_f4494_0(List<T> tgt, List<T> src, KeyComputer<T> computer, Remapping<T> remapping)
{    if (src.isEmpty()) {        return tgt;    }    MergingList<T> list;    if (tgt instanceof MergingList) {        list = (MergingList<T>) tgt;    } else {        list = new MergingList<>(computer, src.size() + tgt.size());        list.mergeAll(tgt, new SourceDominant<T>(true));    }    list.mergeAll(src, remapping);    return list;}
public Iterator<V> maven_f4495_0()
{    if (map != null) {        return map.values().iterator();    } else {        return list.iterator();    }}
 void maven_f4496_0(Collection<V> vs, Remapping<V> remapping)
{    if (map == null) {        map = new LinkedHashMap<>(list.size() + vs.size());        for (V v : list) {            map.put(keyComputer.key(v), v);        }        list = null;    }    if (vs instanceof MergingList && ((MergingList) vs).map != null) {        for (Map.Entry<Object, V> e : ((MergingList<V>) vs).map.entrySet()) {            Object key = e.getKey();            V oldValue = map.get(key);                        V newValue = (oldValue == null) ? e.getValue() : remapping.merge(oldValue, e.getValue());            if (newValue == null) {                remove(key);            } else if (newValue != oldValue) {                map.put(key, newValue);            }        }    } else {        for (V v : vs) {            Object key = keyComputer.key(v);                        V oldValue = map.get(key);            V newValue = (oldValue == null) ? v : remapping.merge(oldValue, v);            if (newValue == null) {                remove(key);            } else {                map.put(key, newValue);            }        }    }}
public boolean maven_f4497_0(Object o)
{    if (map != null) {        return map.containsValue(o);    } else {        return list.contains(o);    }}
private List<V> maven_f4498_0()
{    if (list == null) {        list = new ArrayList<>(map.values());        map = null;    }    return list;}
public void maven_f4499_0(int index, V element)
{    asList().add(index, element);}
public V maven_f4500_0(int index)
{    return asList().remove(index);}
public V maven_f4501_0(int index)
{    return asList().get(index);}
public int maven_f4502_0()
{    if (map != null) {        return map.size();    } else {        return list.size();    }}
public void maven_f4503_0()
{    new ActivationFile().hashCode();}
public void maven_f4504_0()
{    assertFalse(new ActivationFile().equals(null));    new ActivationFile().equals(new ActivationFile());}
public void maven_f4505_0()
{    ActivationFile thing = new ActivationFile();    assertTrue(thing.equals(thing));}
public void maven_f4506_0()
{    assertNotNull(new ActivationFile().toString());}
public void maven_f4507_0()
{    new ActivationOS().hashCode();}
public void maven_f4508_0()
{    assertFalse(new ActivationOS().equals(null));    new ActivationOS().equals(new ActivationOS());}
public void maven_f4509_0()
{    ActivationOS thing = new ActivationOS();    assertTrue(thing.equals(thing));}
public void maven_f4510_0()
{    assertNotNull(new ActivationOS().toString());}
public void maven_f4511_0()
{    new ActivationProperty().hashCode();}
public void maven_f4512_0()
{    assertFalse(new ActivationProperty().equals(null));    new ActivationProperty().equals(new ActivationProperty());}
public void maven_f4513_0()
{    ActivationProperty thing = new ActivationProperty();    assertTrue(thing.equals(thing));}
public void maven_f4514_0()
{    assertNotNull(new ActivationProperty().toString());}
public void maven_f4515_0()
{    new Activation().hashCode();}
public void maven_f4516_0()
{    assertFalse(new Activation().equals(null));    new Activation().equals(new Activation());}
public void maven_f4517_0()
{    Activation thing = new Activation();    assertTrue(thing.equals(thing));}
public void maven_f4518_0()
{    assertNotNull(new Activation().toString());}
public void maven_f4519_0()
{    new Build().hashCode();}
public void maven_f4520_0()
{    assertFalse(new Build().equals(null));    new Build().equals(new Build());}
public void maven_f4521_0()
{    Build thing = new Build();    assertTrue(thing.equals(thing));}
public void maven_f4522_0()
{    assertNotNull(new Build().toString());}
public void maven_f4523_0()
{    new CiManagement().hashCode();}
public void maven_f4524_0()
{    assertFalse(new CiManagement().equals(null));    new CiManagement().equals(new CiManagement());}
public void maven_f4525_0()
{    CiManagement thing = new CiManagement();    assertTrue(thing.equals(thing));}
public void maven_f4526_0()
{    assertNotNull(new CiManagement().toString());}
public void maven_f4527_0()
{    new Contributor().hashCode();}
public void maven_f4528_0()
{    assertFalse(new Contributor().equals(null));    new Contributor().equals(new Contributor());}
public void maven_f4529_0()
{    Contributor thing = new Contributor();    assertTrue(thing.equals(thing));}
public void maven_f4530_0()
{    assertNotNull(new Contributor().toString());}
public void maven_f4531_0()
{    new DependencyManagement().hashCode();}
public void maven_f4532_0()
{    assertFalse(new DependencyManagement().equals(null));    new DependencyManagement().equals(new DependencyManagement());}
public void maven_f4533_0()
{    DependencyManagement thing = new DependencyManagement();    assertTrue(thing.equals(thing));}
public void maven_f4534_0()
{    assertNotNull(new DependencyManagement().toString());}
public void maven_f4535_0()
{    new Dependency().hashCode();}
public void maven_f4536_0()
{    assertFalse(new Dependency().equals(null));    new Dependency().equals(new Dependency());}
public void maven_f4537_0()
{    Dependency thing = new Dependency();    assertTrue(thing.equals(thing));}
public void maven_f4538_0()
{    assertNotNull(new Dependency().toString());}
public void maven_f4539_0()
{    new DeploymentRepository().hashCode();}
public void maven_f4540_0()
{    assertFalse(new DeploymentRepository().equals(null));    new DeploymentRepository().equals(new DeploymentRepository());}
public void maven_f4541_0()
{    DeploymentRepository thing = new DeploymentRepository();    assertTrue(thing.equals(thing));}
public void maven_f4542_0()
{    assertNotNull(new DeploymentRepository().toString());}
public void maven_f4543_0()
{    new Developer().hashCode();}
public void maven_f4544_0()
{    assertFalse(new Developer().equals(null));    new Developer().equals(new Developer());}
public void maven_f4545_0()
{    Developer thing = new Developer();    assertTrue(thing.equals(thing));}
public void maven_f4546_0()
{    assertNotNull(new Developer().toString());}
public void maven_f4547_0()
{    new DistributionManagement().hashCode();}
public void maven_f4548_0()
{    assertFalse(new DistributionManagement().equals(null));    new DistributionManagement().equals(new DistributionManagement());}
public void maven_f4549_0()
{    DistributionManagement thing = new DistributionManagement();    assertTrue(thing.equals(thing));}
public void maven_f4550_0()
{    assertNotNull(new DistributionManagement().toString());}
public void maven_f4551_0()
{    new Exclusion().hashCode();}
public void maven_f4552_0()
{    assertFalse(new Exclusion().equals(null));    new Exclusion().equals(new Exclusion());}
public void maven_f4553_0()
{    Exclusion thing = new Exclusion();    assertTrue(thing.equals(thing));}
public void maven_f4554_0()
{    assertNotNull(new Exclusion().toString());}
public void maven_f4555_0()
{    new Extension().hashCode();}
public void maven_f4556_0()
{    assertFalse(new Extension().equals(null));    new Extension().equals(new Extension());}
public void maven_f4557_0()
{    Extension thing = new Extension();    assertTrue(thing.equals(thing));}
public void maven_f4558_0()
{    assertNotNull(new Extension().toString());}
public void maven_f4559_0()
{    new IssueManagement().hashCode();}
public void maven_f4560_0()
{    assertFalse(new IssueManagement().equals(null));    new IssueManagement().equals(new IssueManagement());}
public void maven_f4561_0()
{    IssueManagement thing = new IssueManagement();    assertTrue(thing.equals(thing));}
public void maven_f4562_0()
{    assertNotNull(new IssueManagement().toString());}
public void maven_f4563_0()
{    new License().hashCode();}
public void maven_f4564_0()
{    assertFalse(new License().equals(null));    new License().equals(new License());}
public void maven_f4565_0()
{    License thing = new License();    assertTrue(thing.equals(thing));}
public void maven_f4566_0()
{    assertNotNull(new License().toString());}
public void maven_f4567_0()
{    new MailingList().hashCode();}
public void maven_f4568_0()
{    assertFalse(new MailingList().equals(null));    new MailingList().equals(new MailingList());}
public void maven_f4569_0()
{    MailingList thing = new MailingList();    assertTrue(thing.equals(thing));}
public void maven_f4570_0()
{    assertNotNull(new MailingList().toString());}
public void maven_f4571_0()
{    new Model().hashCode();}
public void maven_f4572_0()
{    assertFalse(new Model().equals(null));    new Model().equals(new Model());}
public void maven_f4573_0()
{    Model thing = new Model();    assertTrue(thing.equals(thing));}
public void maven_f4574_0()
{    assertNotNull(new Model().toString());}
public void maven_f4575_0()
{    new Notifier().hashCode();}
public void maven_f4576_0()
{    assertFalse(new Notifier().equals(null));    new Notifier().equals(new Notifier());}
public void maven_f4577_0()
{    Notifier thing = new Notifier();    assertTrue(thing.equals(thing));}
public void maven_f4578_0()
{    assertNotNull(new Notifier().toString());}
public void maven_f4579_0()
{    new Organization().hashCode();}
public void maven_f4580_0()
{    assertFalse(new Organization().equals(null));    new Organization().equals(new Organization());}
public void maven_f4581_0()
{    Organization thing = new Organization();    assertTrue(thing.equals(thing));}
public void maven_f4582_0()
{    assertNotNull(new Organization().toString());}
public void maven_f4583_0()
{    new Parent().hashCode();}
public void maven_f4584_0()
{    assertFalse(new Parent().equals(null));    new Parent().equals(new Parent());}
public void maven_f4585_0()
{    Parent thing = new Parent();    assertTrue(thing.equals(thing));}
public void maven_f4586_0()
{    assertNotNull(new Parent().toString());}
public void maven_f4587_0()
{    new PluginConfiguration().hashCode();}
public void maven_f4588_0()
{    assertFalse(new PluginConfiguration().equals(null));    new PluginConfiguration().equals(new PluginConfiguration());}
public void maven_f4589_0()
{    PluginConfiguration thing = new PluginConfiguration();    assertTrue(thing.equals(thing));}
public void maven_f4590_0()
{    assertNotNull(new PluginConfiguration().toString());}
public void maven_f4591_0()
{    new PluginContainer().hashCode();}
public void maven_f4592_0()
{    assertFalse(new PluginContainer().equals(null));    new PluginContainer().equals(new PluginContainer());}
public void maven_f4593_0()
{    PluginContainer thing = new PluginContainer();    assertTrue(thing.equals(thing));}
public void maven_f4594_0()
{    assertNotNull(new PluginContainer().toString());}
public void maven_f4595_0()
{    new PluginExecution().hashCode();}
public void maven_f4596_0()
{    assertFalse(new PluginExecution().equals(null));    new PluginExecution().equals(new PluginExecution());}
public void maven_f4597_0()
{    PluginExecution thing = new PluginExecution();    assertTrue(thing.equals(thing));}
public void maven_f4598_0()
{    assertNotNull(new PluginExecution().toString());}
public void maven_f4599_0()
{    new PluginManagement().hashCode();}
public void maven_f4600_0()
{    assertFalse(new PluginManagement().equals(null));    new PluginManagement().equals(new PluginManagement());}
public void maven_f4601_0()
{    PluginManagement thing = new PluginManagement();    assertTrue(thing.equals(thing));}
public void maven_f4602_0()
{    assertNotNull(new PluginManagement().toString());}
public void maven_f4603_0()
{    new Plugin().hashCode();}
public void maven_f4604_0()
{    assertFalse(new Plugin().equals(null));    new Plugin().equals(new Plugin());}
public void maven_f4605_0()
{    Plugin thing = new Plugin();    assertTrue(thing.equals(thing));}
public void maven_f4606_0()
{    assertNotNull(new Plugin().toString());}
public void maven_f4607_0()
{    new Prerequisites().hashCode();}
public void maven_f4608_0()
{    assertFalse(new Prerequisites().equals(null));    new Prerequisites().equals(new Prerequisites());}
public void maven_f4609_0()
{    Prerequisites thing = new Prerequisites();    assertTrue(thing.equals(thing));}
public void maven_f4610_0()
{    assertNotNull(new Prerequisites().toString());}
public void maven_f4611_0()
{    new Profile().hashCode();}
public void maven_f4612_0()
{    assertFalse(new Profile().equals(null));    new Profile().equals(new Profile());}
public void maven_f4613_0()
{    Profile thing = new Profile();    assertTrue(thing.equals(thing));}
public void maven_f4614_0()
{    assertNotNull(new Profile().toString());}
public void maven_f4615_0()
{    new Relocation().hashCode();}
public void maven_f4616_0()
{    assertFalse(new Relocation().equals(null));    new Relocation().equals(new Relocation());}
public void maven_f4617_0()
{    Relocation thing = new Relocation();    assertTrue(thing.equals(thing));}
public void maven_f4618_0()
{    assertNotNull(new Relocation().toString());}
public void maven_f4619_0()
{    new Reporting().hashCode();}
public void maven_f4620_0()
{    assertFalse(new Reporting().equals(null));    new Reporting().equals(new Reporting());}
public void maven_f4621_0()
{    Reporting thing = new Reporting();    assertTrue(thing.equals(thing));}
public void maven_f4622_0()
{    assertNotNull(new Reporting().toString());}
public void maven_f4623_0()
{    new ReportPlugin().hashCode();}
public void maven_f4624_0()
{    assertFalse(new ReportPlugin().equals(null));    new ReportPlugin().equals(new ReportPlugin());}
public void maven_f4625_0()
{    ReportPlugin thing = new ReportPlugin();    assertTrue(thing.equals(thing));}
public void maven_f4626_0()
{    assertNotNull(new ReportPlugin().toString());}
public void maven_f4627_0()
{    new ReportSet().hashCode();}
public void maven_f4628_0()
{    assertFalse(new ReportSet().equals(null));    new ReportSet().equals(new ReportSet());}
public void maven_f4629_0()
{    ReportSet thing = new ReportSet();    assertTrue(thing.equals(thing));}
public void maven_f4630_0()
{    assertNotNull(new ReportSet().toString());}
public void maven_f4631_0()
{    new RepositoryPolicy().hashCode();}
public void maven_f4632_0()
{    assertFalse(new RepositoryPolicy().equals(null));    new RepositoryPolicy().equals(new RepositoryPolicy());}
public void maven_f4633_0()
{    RepositoryPolicy thing = new RepositoryPolicy();    assertTrue(thing.equals(thing));}
public void maven_f4634_0()
{    assertNotNull(new RepositoryPolicy().toString());}
public void maven_f4635_0()
{    new Repository().hashCode();}
public void maven_f4636_0()
{    assertFalse(new Repository().equals(null));    new Repository().equals(new Repository());}
public void maven_f4637_0()
{    Repository thing = new Repository();    assertTrue(thing.equals(thing));}
public void maven_f4638_0()
{    assertNotNull(new Repository().toString());}
public void maven_f4639_0()
{    new Resource().hashCode();}
public void maven_f4640_0()
{    assertFalse(new Resource().equals(null));    new Resource().equals(new Resource());}
public void maven_f4641_0()
{    Resource thing = new Resource();    assertTrue(thing.equals(thing));}
public void maven_f4642_0()
{    assertNotNull(new Resource().toString());}
public void maven_f4643_0()
{    new Scm().hashCode();}
public void maven_f4644_0()
{    assertFalse(new Scm().equals(null));    new Scm().equals(new Scm());}
public void maven_f4645_0()
{    Scm thing = new Scm();    assertTrue(thing.equals(thing));}
public void maven_f4646_0()
{    assertNotNull(new Scm().toString());}
public void maven_f4647_0()
{    new Site().hashCode();}
public void maven_f4648_0()
{    assertFalse(new Site().equals(null));    new Site().equals(new Site());}
public void maven_f4649_0()
{    Site thing = new Site();    assertTrue(thing.equals(thing));}
public void maven_f4650_0()
{    assertNotNull(new Site().toString());}
public void maven_f4651_0(ModelBuildingEvent event)
{}
public DefaultModelBuilder maven_f4652_0(ModelProcessor modelProcessor)
{    this.modelProcessor = modelProcessor;    return this;}
public DefaultModelBuilder maven_f4653_0(ModelValidator modelValidator)
{    this.modelValidator = modelValidator;    return this;}
public DefaultModelBuilder maven_f4654_0(ModelNormalizer modelNormalizer)
{    this.modelNormalizer = modelNormalizer;    return this;}
public DefaultModelBuilder maven_f4655_0(ModelInterpolator modelInterpolator)
{    this.modelInterpolator = modelInterpolator;    return this;}
public DefaultModelBuilder maven_f4656_0(ModelPathTranslator modelPathTranslator)
{    this.modelPathTranslator = modelPathTranslator;    return this;}
public DefaultModelBuilder maven_f4657_0(ModelUrlNormalizer modelUrlNormalizer)
{    this.modelUrlNormalizer = modelUrlNormalizer;    return this;}
public DefaultModelBuilder maven_f4658_0(SuperPomProvider superPomProvider)
{    this.superPomProvider = superPomProvider;    return this;}
public DefaultModelBuilder maven_f4659_0(ProfileSelector profileSelector)
{    this.profileSelector = profileSelector;    return this;}
public DefaultModelBuilder maven_f4660_0(ProfileInjector profileInjector)
{    this.profileInjector = profileInjector;    return this;}
public DefaultModelBuilder maven_f4661_0(InheritanceAssembler inheritanceAssembler)
{    this.inheritanceAssembler = inheritanceAssembler;    return this;}
public DefaultModelBuilder maven_f4662_0(DependencyManagementImporter depMgmtImporter)
{    this.dependencyManagementImporter = depMgmtImporter;    return this;}
public DefaultModelBuilder maven_f4663_0(DependencyManagementInjector depMgmtInjector)
{    this.dependencyManagementInjector = depMgmtInjector;    return this;}
public DefaultModelBuilder maven_f4664_0(LifecycleBindingsInjector lifecycleBindingsInjector)
{    this.lifecycleBindingsInjector = lifecycleBindingsInjector;    return this;}
public DefaultModelBuilder maven_f4665_0(PluginConfigurationExpander pluginConfigurationExpander)
{    this.pluginConfigurationExpander = pluginConfigurationExpander;    return this;}
public DefaultModelBuilder maven_f4666_0(PluginManagementInjector pluginManagementInjector)
{    this.pluginManagementInjector = pluginManagementInjector;    return this;}
public DefaultModelBuilder maven_f4667_0(ReportConfigurationExpander reportConfigurationExpander)
{    this.reportConfigurationExpander = reportConfigurationExpander;    return this;}
public DefaultModelBuilder maven_f4668_0(ReportingConverter reportingConverter)
{    this.reportingConverter = reportingConverter;    return this;}
public ModelBuildingResult maven_f4669_0(ModelBuildingRequest request) throws ModelBuildingException
{        DefaultModelBuildingResult result = new DefaultModelBuildingResult();    DefaultModelProblemCollector problems = new DefaultModelProblemCollector(result);        DefaultProfileActivationContext profileActivationContext = getProfileActivationContext(request);    problems.setSource("(external profiles)");    List<Profile> activeExternalProfiles = profileSelector.getActiveProfiles(request.getProfiles(), profileActivationContext, problems);    result.setActiveExternalProfiles(activeExternalProfiles);    if (!activeExternalProfiles.isEmpty()) {        Properties profileProps = new Properties();        for (Profile profile : activeExternalProfiles) {            profileProps.putAll(profile.getProperties());        }        profileProps.putAll(profileActivationContext.getUserProperties());        profileActivationContext.setUserProperties(profileProps);    }        Model inputModel = request.getRawModel();    if (inputModel == null) {        inputModel = readModel(request.getModelSource(), request.getPomFile(), request, problems);    }    problems.setRootModel(inputModel);    ModelData resultData = new ModelData(request.getModelSource(), inputModel);    ModelData superData = new ModelData(null, getSuperModel());    Collection<String> parentIds = new LinkedHashSet<>();    List<ModelData> lineage = new ArrayList<>();    for (ModelData currentData = resultData; currentData != null; ) {        lineage.add(currentData);        Model rawModel = currentData.getModel();        currentData.setRawModel(rawModel);        Model tmpModel = rawModel.clone();        currentData.setModel(tmpModel);        problems.setSource(tmpModel);                modelNormalizer.mergeDuplicates(tmpModel, request, problems);        profileActivationContext.setProjectProperties(tmpModel.getProperties());        List<Profile> activePomProfiles = profileSelector.getActiveProfiles(rawModel.getProfiles(), profileActivationContext, problems);        currentData.setActiveProfiles(activePomProfiles);        Map<String, Activation> interpolatedActivations = getProfileActivations(rawModel, false);        injectProfileActivations(tmpModel, interpolatedActivations);                for (Profile activeProfile : activePomProfiles) {            profileInjector.injectProfile(tmpModel, activeProfile, request, problems);        }        if (currentData == resultData) {            for (Profile activeProfile : activeExternalProfiles) {                profileInjector.injectProfile(tmpModel, activeProfile, request, problems);            }        }        if (currentData == superData) {            break;        }        configureResolver(request.getModelResolver(), tmpModel, problems);        ModelData parentData = readParent(tmpModel, currentData.getSource(), request, problems);        if (parentData == null) {            currentData = superData;        } else if (currentData == resultData) {                        currentData.setGroupId(currentData.getRawModel().getGroupId() == null ? parentData.getGroupId() : currentData.getRawModel().getGroupId());            currentData.setVersion(currentData.getRawModel().getVersion() == null ? parentData.getVersion() : currentData.getRawModel().getVersion());            currentData.setArtifactId(currentData.getRawModel().getArtifactId());            parentIds.add(currentData.getId());                        currentData.setGroupId(null);            currentData.setArtifactId(null);            currentData.setVersion(null);            currentData = parentData;        } else if (!parentIds.add(parentData.getId())) {            String message = "The parents form a cycle: ";            for (String modelId : parentIds) {                message += modelId + " -> ";            }            message += parentData.getId();            problems.add(new ModelProblemCollectorRequest(ModelProblem.Severity.FATAL, ModelProblem.Version.BASE).setMessage(message));            throw problems.newModelBuildingException();        } else {            currentData = parentData;        }    }    problems.setSource(inputModel);    checkPluginVersions(lineage, request, problems);        assembleInheritance(lineage, request, problems);    Model resultModel = resultData.getModel();    problems.setSource(resultModel);    problems.setRootModel(resultModel);        resultModel = interpolateModel(resultModel, request, problems);    resultData.setModel(resultModel);    if (resultModel.getParent() != null) {        final ModelData parentData = lineage.get(1);        if (parentData.getVersion() == null || parentData.getVersion().contains("${")) {            final Model interpolatedParent = interpolateModel(parentData.getModel(), request, problems);                        parentData.setVersion(interpolatedParent.getVersion());        }    }        modelUrlNormalizer.normalize(resultModel, request);        configureResolver(request.getModelResolver(), resultModel, problems, true);    resultData.setGroupId(resultModel.getGroupId());    resultData.setArtifactId(resultModel.getArtifactId());    resultData.setVersion(resultModel.getVersion());    result.setEffectiveModel(resultModel);    for (ModelData currentData : lineage) {        String modelId = (currentData != superData) ? currentData.getId() : "";        result.addModelId(modelId);        result.setActivePomProfiles(modelId, currentData.getActiveProfiles());        result.setRawModel(modelId, currentData.getRawModel());    }    if (!request.isTwoPhaseBuilding()) {        build(request, result);    }    return result;}
public ModelBuildingResult maven_f4670_0(ModelBuildingRequest request, ModelBuildingResult result) throws ModelBuildingException
{    return build(request, result, new LinkedHashSet<String>());}
private ModelBuildingResult maven_f4671_0(ModelBuildingRequest request, ModelBuildingResult result, Collection<String> imports) throws ModelBuildingException
{        Model resultModel = result.getEffectiveModel();    DefaultModelProblemCollector problems = new DefaultModelProblemCollector(result);    problems.setSource(resultModel);    problems.setRootModel(resultModel);        modelPathTranslator.alignToBaseDirectory(resultModel, resultModel.getProjectDirectory(), request);        pluginManagementInjector.injectManagement(resultModel, request, problems);    fireEvent(resultModel, request, problems, ModelBuildingEventCatapult.BUILD_EXTENSIONS_ASSEMBLED);    if (request.isProcessPlugins()) {        if (lifecycleBindingsInjector == null) {            throw new IllegalStateException("lifecycle bindings injector is missing");        }                lifecycleBindingsInjector.injectLifecycleBindings(resultModel, request, problems);    }        importDependencyManagement(resultModel, request, problems, imports);        dependencyManagementInjector.injectManagement(resultModel, request, problems);    modelNormalizer.injectDefaultValues(resultModel, request, problems);    if (request.isProcessPlugins()) {                reportConfigurationExpander.expandPluginConfiguration(resultModel, request, problems);                reportingConverter.convertReporting(resultModel, request, problems);                pluginConfigurationExpander.expandPluginConfiguration(resultModel, request, problems);    }        modelValidator.validateEffectiveModel(resultModel, request, problems);    if (hasModelErrors(problems)) {        throw problems.newModelBuildingException();    }    return result;}
public Result<? extends Model> maven_f4672_0(File pomFile, int validationLevel, boolean locationTracking)
{    final ModelBuildingRequest request = new DefaultModelBuildingRequest().setValidationLevel(validationLevel).setLocationTracking(locationTracking);    final DefaultModelProblemCollector collector = new DefaultModelProblemCollector(new DefaultModelBuildingResult());    try {        return newResult(readModel(null, pomFile, request, collector), collector.getProblems());    } catch (ModelBuildingException e) {        return error(collector.getProblems());    }}
private Model maven_f4673_0(ModelSource modelSource, File pomFile, ModelBuildingRequest request, DefaultModelProblemCollector problems) throws ModelBuildingException
{    Model model;    if (modelSource == null) {        if (pomFile != null) {            modelSource = new FileModelSource(pomFile);        } else {            throw new NullPointerException("neither pomFile nor modelSource can be null");        }    }    problems.setSource(modelSource.getLocation());    try {        boolean strict = request.getValidationLevel() >= ModelBuildingRequest.VALIDATION_LEVEL_MAVEN_2_0;        InputSource source = request.isLocationTracking() ? new InputSource() : null;        Map<String, Object> options = new HashMap<>();        options.put(ModelProcessor.IS_STRICT, strict);        options.put(ModelProcessor.INPUT_SOURCE, source);        options.put(ModelProcessor.SOURCE, modelSource);        try {            model = modelProcessor.read(modelSource.getInputStream(), options);        } catch (ModelParseException e) {            if (!strict) {                throw e;            }            options.put(ModelProcessor.IS_STRICT, Boolean.FALSE);            try {                model = modelProcessor.read(modelSource.getInputStream(), options);            } catch (ModelParseException ne) {                                throw e;            }            if (pomFile != null) {                problems.add(new ModelProblemCollectorRequest(Severity.ERROR, Version.V20).setMessage("Malformed POM " + modelSource.getLocation() + ": " + e.getMessage()).setException(e));            } else {                problems.add(new ModelProblemCollectorRequest(Severity.WARNING, Version.V20).setMessage("Malformed POM " + modelSource.getLocation() + ": " + e.getMessage()).setException(e));            }        }        if (source != null) {            source.setModelId(ModelProblemUtils.toId(model));            source.setLocation(modelSource.getLocation());        }    } catch (ModelParseException e) {        problems.add(new ModelProblemCollectorRequest(Severity.FATAL, Version.BASE).setMessage("Non-parseable POM " + modelSource.getLocation() + ": " + e.getMessage()).setException(e));        throw problems.newModelBuildingException();    } catch (IOException e) {        String msg = e.getMessage();        if (msg == null || msg.length() <= 0) {                        if (e.getClass().getName().endsWith("MalformedInputException")) {                msg = "Some input bytes do not match the file encoding.";            } else {                msg = e.getClass().getSimpleName();            }        }        problems.add(new ModelProblemCollectorRequest(Severity.FATAL, Version.BASE).setMessage("Non-readable POM " + modelSource.getLocation() + ": " + msg).setException(e));        throw problems.newModelBuildingException();    }    model.setPomFile(pomFile);    problems.setSource(model);    modelValidator.validateRawModel(model, request, problems);    if (hasFatalErrors(problems)) {        throw problems.newModelBuildingException();    }    return model;}
private DefaultProfileActivationContext maven_f4674_0(ModelBuildingRequest request)
{    DefaultProfileActivationContext context = new DefaultProfileActivationContext();    context.setActiveProfileIds(request.getActiveProfileIds());    context.setInactiveProfileIds(request.getInactiveProfileIds());    context.setSystemProperties(request.getSystemProperties());    context.setUserProperties(request.getUserProperties());    context.setProjectDirectory((request.getPomFile() != null) ? request.getPomFile().getParentFile() : null);    return context;}
private void maven_f4675_0(ModelResolver modelResolver, Model model, DefaultModelProblemCollector problems)
{    configureResolver(modelResolver, model, problems, false);}
private void maven_f4676_0(ModelResolver modelResolver, Model model, DefaultModelProblemCollector problems, boolean replaceRepositories)
{    if (modelResolver == null) {        return;    }    problems.setSource(model);    List<Repository> repositories = model.getRepositories();    for (Repository repository : repositories) {        try {            modelResolver.addRepository(repository, replaceRepositories);        } catch (InvalidRepositoryException e) {            problems.add(new ModelProblemCollectorRequest(Severity.ERROR, Version.BASE).setMessage("Invalid repository " + repository.getId() + ": " + e.getMessage()).setLocation(repository.getLocation("")).setException(e));        }    }}
private void maven_f4677_0(List<ModelData> lineage, ModelBuildingRequest request, ModelProblemCollector problems)
{    if (request.getValidationLevel() < ModelBuildingRequest.VALIDATION_LEVEL_MAVEN_2_0) {        return;    }    Map<String, Plugin> plugins = new HashMap<>();    Map<String, String> versions = new HashMap<>();    Map<String, String> managedVersions = new HashMap<>();    for (int i = lineage.size() - 1; i >= 0; i--) {        Model model = lineage.get(i).getModel();        Build build = model.getBuild();        if (build != null) {            for (Plugin plugin : build.getPlugins()) {                String key = plugin.getKey();                if (versions.get(key) == null) {                    versions.put(key, plugin.getVersion());                    plugins.put(key, plugin);                }            }            PluginManagement mgmt = build.getPluginManagement();            if (mgmt != null) {                for (Plugin plugin : mgmt.getPlugins()) {                    String key = plugin.getKey();                    if (managedVersions.get(key) == null) {                        managedVersions.put(key, plugin.getVersion());                    }                }            }        }    }    for (String key : versions.keySet()) {        if (versions.get(key) == null && managedVersions.get(key) == null) {            InputLocation location = plugins.get(key).getLocation("");            problems.add(new ModelProblemCollectorRequest(Severity.WARNING, Version.V20).setMessage("'build.plugins.plugin.version' for " + key + " is missing.").setLocation(location));        }    }}
private void maven_f4678_0(List<ModelData> lineage, ModelBuildingRequest request, ModelProblemCollector problems)
{    for (int i = lineage.size() - 2; i >= 0; i--) {        Model parent = lineage.get(i + 1).getModel();        Model child = lineage.get(i).getModel();        inheritanceAssembler.assembleModelInheritance(child, parent, request, problems);    }}
private Map<String, Activation> maven_f4679_0(Model model, boolean clone)
{    Map<String, Activation> activations = new HashMap<>();    for (Profile profile : model.getProfiles()) {        Activation activation = profile.getActivation();        if (activation == null) {            continue;        }        if (clone) {            activation = activation.clone();        }        activations.put(profile.getId(), activation);    }    return activations;}
private void maven_f4680_0(Model model, Map<String, Activation> activations)
{    for (Profile profile : model.getProfiles()) {        Activation activation = profile.getActivation();        if (activation == null) {            continue;        }                profile.setActivation(activations.get(profile.getId()));    }}
private Model maven_f4681_0(Model model, ModelBuildingRequest request, ModelProblemCollector problems)
{        Map<String, Activation> originalActivations = getProfileActivations(model, true);    Model interpolatedModel = modelInterpolator.interpolateModel(model, model.getProjectDirectory(), request, problems);    if (interpolatedModel.getParent() != null) {        StringSearchInterpolator ssi = new StringSearchInterpolator();        ssi.addValueSource(new MapBasedValueSource(request.getUserProperties()));        ssi.addValueSource(new MapBasedValueSource(model.getProperties()));        ssi.addValueSource(new MapBasedValueSource(request.getSystemProperties()));        try {            String interpolated = ssi.interpolate(interpolatedModel.getParent().getVersion());            interpolatedModel.getParent().setVersion(interpolated);        } catch (Exception e) {            ModelProblemCollectorRequest mpcr = new ModelProblemCollectorRequest(Severity.ERROR, Version.BASE).setMessage("Failed to interpolate field: " + interpolatedModel.getParent().getVersion() + " on class: ").setException(e);            problems.add(mpcr);        }    }    interpolatedModel.setPomFile(model.getPomFile());        injectProfileActivations(model, originalActivations);    return interpolatedModel;}
private ModelData maven_f4682_0(Model childModel, ModelSource childSource, ModelBuildingRequest request, DefaultModelProblemCollector problems) throws ModelBuildingException
{    ModelData parentData;    Parent parent = childModel.getParent();    if (parent != null) {        String groupId = parent.getGroupId();        String artifactId = parent.getArtifactId();        String version = parent.getVersion();        parentData = getCache(request.getModelCache(), groupId, artifactId, version, ModelCacheTag.RAW);        if (parentData == null) {            parentData = readParentLocally(childModel, childSource, request, problems);            if (parentData == null) {                parentData = readParentExternally(childModel, request, problems);            }            putCache(request.getModelCache(), groupId, artifactId, version, ModelCacheTag.RAW, parentData);        } else {            /*                 * NOTE: This is a sanity check of the cache hit. If the cached parent POM was locally resolved, the                 * child's <relativePath> should point at that parent, too. If it doesn't, we ignore the cache and                 * resolve externally, to mimic the behavior if the cache didn't exist in the first place. Otherwise,                 * the cache would obscure a bad POM.                 */            File pomFile = parentData.getModel().getPomFile();            if (pomFile != null) {                FileModelSource pomSource = new FileModelSource(pomFile);                ModelSource expectedParentSource = getParentPomFile(childModel, childSource);                if (expectedParentSource == null || (expectedParentSource instanceof ModelSource2 && !pomSource.equals(expectedParentSource))) {                    parentData = readParentExternally(childModel, request, problems);                }            }        }        Model parentModel = parentData.getModel();        if (!"pom".equals(parentModel.getPackaging())) {            problems.add(new ModelProblemCollectorRequest(Severity.ERROR, Version.BASE).setMessage("Invalid packaging for parent POM " + ModelProblemUtils.toSourceHint(parentModel) + ", must be \"pom\" but is \"" + parentModel.getPackaging() + "\"").setLocation(parentModel.getLocation("packaging")));        }    } else {        parentData = null;    }    return parentData;}
private ModelData maven_f4683_0(Model childModel, ModelSource childSource, ModelBuildingRequest request, DefaultModelProblemCollector problems) throws ModelBuildingException
{    final Parent parent = childModel.getParent();    final ModelSource candidateSource;    final Model candidateModel;    final WorkspaceModelResolver resolver = request.getWorkspaceModelResolver();    if (resolver == null) {        candidateSource = getParentPomFile(childModel, childSource);        if (candidateSource == null) {            return null;        }        File pomFile = null;        if (candidateSource instanceof FileModelSource) {            pomFile = ((FileModelSource) candidateSource).getPomFile();        }        candidateModel = readModel(candidateSource, pomFile, request, problems);    } else {        try {            candidateModel = resolver.resolveRawModel(parent.getGroupId(), parent.getArtifactId(), parent.getVersion());        } catch (UnresolvableModelException e) {            problems.add(            new ModelProblemCollectorRequest(Severity.FATAL, Version.BASE).setMessage(e.getMessage().toString()).setLocation(parent.getLocation("")).setException(e));            throw problems.newModelBuildingException();        }        if (candidateModel == null) {            return null;        }        candidateSource = new FileModelSource(candidateModel.getPomFile());    }                        String groupId = candidateModel.getGroupId();    if (groupId == null && candidateModel.getParent() != null) {        groupId = candidateModel.getParent().getGroupId();    }    String artifactId = candidateModel.getArtifactId();    String version = candidateModel.getVersion();    if (version == null && candidateModel.getParent() != null) {        version = candidateModel.getParent().getVersion();    }    if (groupId == null || !groupId.equals(parent.getGroupId()) || artifactId == null || !artifactId.equals(parent.getArtifactId())) {        StringBuilder buffer = new StringBuilder(256);        buffer.append("'parent.relativePath'");        if (childModel != problems.getRootModel()) {            buffer.append(" of POM ").append(ModelProblemUtils.toSourceHint(childModel));        }        buffer.append(" points at ").append(groupId).append(':').append(artifactId);        buffer.append(" instead of ").append(parent.getGroupId()).append(':');        buffer.append(parent.getArtifactId()).append(", please verify your project structure");        problems.setSource(childModel);        problems.add(new ModelProblemCollectorRequest(Severity.WARNING, Version.BASE).setMessage(buffer.toString()).setLocation(parent.getLocation("")));        return null;    }    if (version != null && parent.getVersion() != null && !version.equals(parent.getVersion())) {        try {            VersionRange parentRange = VersionRange.createFromVersionSpec(parent.getVersion());            if (!parentRange.hasRestrictions()) {                                return null;            }            if (!parentRange.containsVersion(new DefaultArtifactVersion(version))) {                                return null;            }                        if (childModel.getVersion() == null) {                                problems.add(new ModelProblemCollectorRequest(Severity.FATAL, Version.V31).setMessage("Version must be a constant").setLocation(childModel.getLocation("")));            } else {                if (childModel.getVersion().contains("${")) {                                        problems.add(new ModelProblemCollectorRequest(Severity.FATAL, Version.V31).setMessage("Version must be a constant").setLocation(childModel.getLocation("version")));                }            }                } catch (InvalidVersionSpecificationException e) {                        return null;        }    }                    /*         * if ( version == null || !version.equals( parent.getVersion() ) ) { return null; }         */    ModelData parentData = new ModelData(candidateSource, candidateModel, groupId, artifactId, version);    return parentData;}
private ModelSource maven_f4684_0(Model childModel, ModelSource source)
{    if (!(source instanceof ModelSource2)) {        return null;    }    String parentPath = childModel.getParent().getRelativePath();    if (parentPath == null || parentPath.length() <= 0) {        return null;    }    return ((ModelSource2) source).getRelatedSource(parentPath);}
private ModelData maven_f4685_0(Model childModel, ModelBuildingRequest request, DefaultModelProblemCollector problems) throws ModelBuildingException
{    problems.setSource(childModel);    Parent parent = childModel.getParent().clone();    String groupId = parent.getGroupId();    String artifactId = parent.getArtifactId();    String version = parent.getVersion();    ModelResolver modelResolver = request.getModelResolver();    Objects.requireNonNull(modelResolver, String.format("request.modelResolver cannot be null (parent POM %s and POM %s)", ModelProblemUtils.toId(groupId, artifactId, version), ModelProblemUtils.toSourceHint(childModel)));    ModelSource modelSource;    try {        modelSource = modelResolver.resolveModel(parent);    } catch (UnresolvableModelException e) {                StringBuilder buffer = new StringBuilder(256);        buffer.append("Non-resolvable parent POM");        if (!containsCoordinates(e.getMessage(), groupId, artifactId, version)) {            buffer.append(' ').append(ModelProblemUtils.toId(groupId, artifactId, version));        }        if (childModel != problems.getRootModel()) {            buffer.append(" for ").append(ModelProblemUtils.toId(childModel));        }        buffer.append(": ").append(e.getMessage());        if (childModel.getProjectDirectory() != null) {            if (parent.getRelativePath() == null || parent.getRelativePath().length() <= 0) {                buffer.append(" and 'parent.relativePath' points at no local POM");            } else {                buffer.append(" and 'parent.relativePath' points at wrong local POM");            }        }        problems.add(new ModelProblemCollectorRequest(Severity.FATAL, Version.BASE).setMessage(buffer.toString()).setLocation(parent.getLocation("")).setException(e));        throw problems.newModelBuildingException();    }    ModelBuildingRequest lenientRequest = request;    if (request.getValidationLevel() > ModelBuildingRequest.VALIDATION_LEVEL_MAVEN_2_0) {        lenientRequest = new FilterModelBuildingRequest(request) {            @Override            public int getValidationLevel() {                return ModelBuildingRequest.VALIDATION_LEVEL_MAVEN_2_0;            }        };    }    Model parentModel = readModel(modelSource, null, lenientRequest, problems);    if (!parent.getVersion().equals(version)) {        if (childModel.getVersion() == null) {                        problems.add(new ModelProblemCollectorRequest(Severity.FATAL, Version.V31).setMessage("Version must be a constant").setLocation(childModel.getLocation("")));        } else {            if (childModel.getVersion().contains("${")) {                                problems.add(new ModelProblemCollectorRequest(Severity.FATAL, Version.V31).setMessage("Version must be a constant").setLocation(childModel.getLocation("version")));            }        }        }    ModelData parentData = new ModelData(modelSource, parentModel, parent.getGroupId(), parent.getArtifactId(), parent.getVersion());    return parentData;}
public int maven_f4686_0()
{    return ModelBuildingRequest.VALIDATION_LEVEL_MAVEN_2_0;}
private Model maven_f4687_0()
{    return superPomProvider.getSuperModel("4.0.0").clone();}
private void maven_f4688_0(Model model, ModelBuildingRequest request, DefaultModelProblemCollector problems, Collection<String> importIds)
{    DependencyManagement depMgmt = model.getDependencyManagement();    if (depMgmt == null) {        return;    }    String importing = model.getGroupId() + ':' + model.getArtifactId() + ':' + model.getVersion();    importIds.add(importing);    final WorkspaceModelResolver workspaceResolver = request.getWorkspaceModelResolver();    final ModelResolver modelResolver = request.getModelResolver();    ModelBuildingRequest importRequest = null;    List<DependencyManagement> importMgmts = null;    for (Iterator<Dependency> it = depMgmt.getDependencies().iterator(); it.hasNext(); ) {        Dependency dependency = it.next();        if (!"pom".equals(dependency.getType()) || !"import".equals(dependency.getScope())) {            continue;        }        it.remove();        String groupId = dependency.getGroupId();        String artifactId = dependency.getArtifactId();        String version = dependency.getVersion();        if (groupId == null || groupId.length() <= 0) {            problems.add(new ModelProblemCollectorRequest(Severity.ERROR, Version.BASE).setMessage("'dependencyManagement.dependencies.dependency.groupId' for " + dependency.getManagementKey() + " is missing.").setLocation(dependency.getLocation("")));            continue;        }        if (artifactId == null || artifactId.length() <= 0) {            problems.add(new ModelProblemCollectorRequest(Severity.ERROR, Version.BASE).setMessage("'dependencyManagement.dependencies.dependency.artifactId' for " + dependency.getManagementKey() + " is missing.").setLocation(dependency.getLocation("")));            continue;        }        if (version == null || version.length() <= 0) {            problems.add(new ModelProblemCollectorRequest(Severity.ERROR, Version.BASE).setMessage("'dependencyManagement.dependencies.dependency.version' for " + dependency.getManagementKey() + " is missing.").setLocation(dependency.getLocation("")));            continue;        }        String imported = groupId + ':' + artifactId + ':' + version;        if (importIds.contains(imported)) {            String message = "The dependencies of type=pom and with scope=import form a cycle: ";            for (String modelId : importIds) {                message += modelId + " -> ";            }            message += imported;            problems.add(new ModelProblemCollectorRequest(Severity.ERROR, Version.BASE).setMessage(message));            continue;        }        DependencyManagement importMgmt = getCache(request.getModelCache(), groupId, artifactId, version, ModelCacheTag.IMPORT);        if (importMgmt == null) {            if (workspaceResolver == null && modelResolver == null) {                throw new NullPointerException(String.format("request.workspaceModelResolver and request.modelResolver cannot be null" + " (parent POM %s and POM %s)", ModelProblemUtils.toId(groupId, artifactId, version), ModelProblemUtils.toSourceHint(model)));            }            Model importModel = null;            if (workspaceResolver != null) {                try {                    importModel = workspaceResolver.resolveEffectiveModel(groupId, artifactId, version);                } catch (UnresolvableModelException e) {                    problems.add(new ModelProblemCollectorRequest(Severity.FATAL, Version.BASE).setMessage(e.getMessage().toString()).setException(e));                    continue;                }            }                        if (importModel == null) {                final ModelSource importSource;                try {                    importSource = modelResolver.resolveModel(groupId, artifactId, version);                } catch (UnresolvableModelException e) {                    StringBuilder buffer = new StringBuilder(256);                    buffer.append("Non-resolvable import POM");                    if (!containsCoordinates(e.getMessage(), groupId, artifactId, version)) {                        buffer.append(' ').append(ModelProblemUtils.toId(groupId, artifactId, version));                    }                    buffer.append(": ").append(e.getMessage());                    problems.add(new ModelProblemCollectorRequest(Severity.ERROR, Version.BASE).setMessage(buffer.toString()).setLocation(dependency.getLocation("")).setException(e));                    continue;                }                if (importRequest == null) {                    importRequest = new DefaultModelBuildingRequest();                    importRequest.setValidationLevel(ModelBuildingRequest.VALIDATION_LEVEL_MINIMAL);                    importRequest.setModelCache(request.getModelCache());                    importRequest.setSystemProperties(request.getSystemProperties());                    importRequest.setUserProperties(request.getUserProperties());                    importRequest.setLocationTracking(request.isLocationTracking());                }                importRequest.setModelSource(importSource);                importRequest.setModelResolver(modelResolver.newCopy());                final ModelBuildingResult importResult;                try {                    importResult = build(importRequest);                } catch (ModelBuildingException e) {                    problems.addAll(e.getProblems());                    continue;                }                problems.addAll(importResult.getProblems());                importModel = importResult.getEffectiveModel();            }            importMgmt = importModel.getDependencyManagement();            if (importMgmt == null) {                importMgmt = new DependencyManagement();            }            putCache(request.getModelCache(), groupId, artifactId, version, ModelCacheTag.IMPORT, importMgmt);        }        if (importMgmts == null) {            importMgmts = new ArrayList<>();        }        importMgmts.add(importMgmt);    }    importIds.remove(importing);    dependencyManagementImporter.importManagement(model, importMgmts, request, problems);}
private void maven_f4689_0(ModelCache modelCache, String groupId, String artifactId, String version, ModelCacheTag<T> tag, T data)
{    if (modelCache != null) {        modelCache.put(groupId, artifactId, version, tag.getName(), tag.intoCache(data));    }}
private T maven_f4690_0(ModelCache modelCache, String groupId, String artifactId, String version, ModelCacheTag<T> tag)
{    if (modelCache != null) {        Object data = modelCache.get(groupId, artifactId, version, tag.getName());        if (data != null) {            return tag.fromCache(tag.getType().cast(data));        }    }    return null;}
private void maven_f4691_0(Model model, ModelBuildingRequest request, ModelProblemCollector problems, ModelBuildingEventCatapult catapult) throws ModelBuildingException
{    ModelBuildingListener listener = request.getModelBuildingListener();    if (listener != null) {        ModelBuildingEvent event = new DefaultModelBuildingEvent(model, request, problems);        catapult.fire(listener, event);    }}
private boolean maven_f4692_0(String message, String groupId, String artifactId, String version)
{    return message != null && (groupId == null || message.contains(groupId)) && (artifactId == null || message.contains(artifactId)) && (version == null || message.contains(version));}
protected boolean maven_f4693_0(ModelProblemCollectorExt problems)
{    if (problems instanceof DefaultModelProblemCollector) {        return ((DefaultModelProblemCollector) problems).hasErrors();    } else {                throw new IllegalStateException();    }}
protected boolean maven_f4694_0(ModelProblemCollectorExt problems)
{    if (problems instanceof DefaultModelProblemCollector) {        return ((DefaultModelProblemCollector) problems).hasFatalErrors();    } else {                throw new IllegalStateException();    }}
protected ModelProcessor maven_f4695_0()
{    DefaultModelProcessor processor = new DefaultModelProcessor();    processor.setModelLocator(newModelLocator());    processor.setModelReader(newModelReader());    return processor;}
protected ModelLocator maven_f4696_0()
{    return new DefaultModelLocator();}
protected ModelReader maven_f4697_0()
{    return new DefaultModelReader();}
protected ProfileSelector maven_f4698_0()
{    DefaultProfileSelector profileSelector = new DefaultProfileSelector();    for (ProfileActivator activator : newProfileActivators()) {        profileSelector.addProfileActivator(activator);    }    return profileSelector;}
protected ProfileActivator[] maven_f4699_0()
{    return new ProfileActivator[] { new JdkVersionProfileActivator(), new OperatingSystemProfileActivator(), new PropertyProfileActivator(), new FileProfileActivator().setPathTranslator(newPathTranslator()) };}
protected UrlNormalizer maven_f4700_0()
{    return new DefaultUrlNormalizer();}
protected PathTranslator maven_f4701_0()
{    return new DefaultPathTranslator();}
protected ModelInterpolator maven_f4702_0()
{    UrlNormalizer normalizer = newUrlNormalizer();    PathTranslator pathTranslator = newPathTranslator();    return new StringVisitorModelInterpolator().setPathTranslator(pathTranslator).setUrlNormalizer(normalizer);}
protected ModelValidator maven_f4703_0()
{    return new DefaultModelValidator();}
protected ModelNormalizer maven_f4704_0()
{    return new DefaultModelNormalizer();}
protected ModelPathTranslator maven_f4705_0()
{    return new DefaultModelPathTranslator().setPathTranslator(newPathTranslator());}
protected ModelUrlNormalizer maven_f4706_0()
{    return new DefaultModelUrlNormalizer().setUrlNormalizer(newUrlNormalizer());}
protected InheritanceAssembler maven_f4707_0()
{    return new DefaultInheritanceAssembler();}
protected ProfileInjector maven_f4708_0()
{    return new DefaultProfileInjector();}
protected SuperPomProvider maven_f4709_0()
{    return new DefaultSuperPomProvider().setModelProcessor(newModelProcessor());}
protected DependencyManagementImporter maven_f4710_0()
{    return new DefaultDependencyManagementImporter();}
protected DependencyManagementInjector maven_f4711_0()
{    return new DefaultDependencyManagementInjector();}
protected LifecycleBindingsInjector maven_f4712_0()
{    return new StubLifecycleBindingsInjector();}
protected PluginManagementInjector maven_f4713_0()
{    return new DefaultPluginManagementInjector();}
protected PluginConfigurationExpander maven_f4714_0()
{    return new DefaultPluginConfigurationExpander();}
protected ReportConfigurationExpander maven_f4715_0()
{    return new DefaultReportConfigurationExpander();}
protected ReportingConverter maven_f4716_0()
{    return new DefaultReportingConverter();}
public DefaultModelBuilder maven_f4717_0()
{    DefaultModelBuilder modelBuilder = new DefaultModelBuilder();    modelBuilder.setModelProcessor(newModelProcessor());    modelBuilder.setModelValidator(newModelValidator());    modelBuilder.setModelNormalizer(newModelNormalizer());    modelBuilder.setModelPathTranslator(newModelPathTranslator());    modelBuilder.setModelUrlNormalizer(newModelUrlNormalizer());    modelBuilder.setModelInterpolator(newModelInterpolator());    modelBuilder.setInheritanceAssembler(newInheritanceAssembler());    modelBuilder.setProfileInjector(newProfileInjector());    modelBuilder.setProfileSelector(newProfileSelector());    modelBuilder.setSuperPomProvider(newSuperPomProvider());    modelBuilder.setDependencyManagementImporter(newDependencyManagementImporter());    modelBuilder.setDependencyManagementInjector(newDependencyManagementInjector());    modelBuilder.setLifecycleBindingsInjector(newLifecycleBindingsInjector());    modelBuilder.setPluginManagementInjector(newPluginManagementInjector());    modelBuilder.setPluginConfigurationExpander(newPluginConfigurationExpander());    modelBuilder.setReportConfigurationExpander(newReportConfigurationExpander());    modelBuilder.setReportingConverter(newReportingConverter());    return modelBuilder;}
public void maven_f4718_0(Model model, ModelBuildingRequest request, ModelProblemCollector problems)
{}
public Model maven_f4719_0()
{    return model;}
public ModelBuildingRequest maven_f4720_0()
{    return request;}
public ModelProblemCollector maven_f4721_0()
{    return problems;}
public File maven_f4722_0()
{    return pomFile;}
public DefaultModelBuildingRequest maven_f4723_0(File pomFile)
{    this.pomFile = (pomFile != null) ? pomFile.getAbsoluteFile() : null;    return this;}
public synchronized ModelSource maven_f4724_0()
{    if (modelSource == null && pomFile != null) {        modelSource = new FileModelSource(pomFile);    }    return modelSource;}
public DefaultModelBuildingRequest maven_f4725_0(ModelSource modelSource)
{    this.modelSource = modelSource;    return this;}
public int maven_f4726_0()
{    return validationLevel;}
public DefaultModelBuildingRequest maven_f4727_0(int validationLevel)
{    this.validationLevel = validationLevel;    return this;}
public boolean maven_f4728_0()
{    return processPlugins;}
public DefaultModelBuildingRequest maven_f4729_0(boolean processPlugins)
{    this.processPlugins = processPlugins;    return this;}
public boolean maven_f4730_0()
{    return twoPhaseBuilding;}
public DefaultModelBuildingRequest maven_f4731_0(boolean twoPhaseBuilding)
{    this.twoPhaseBuilding = twoPhaseBuilding;    return this;}
public boolean maven_f4732_0()
{    return locationTracking;}
public DefaultModelBuildingRequest maven_f4733_0(boolean locationTracking)
{    this.locationTracking = locationTracking;    return this;}
public List<Profile> maven_f4734_0()
{    if (profiles == null) {        profiles = new ArrayList<>();    }    return profiles;}
public DefaultModelBuildingRequest maven_f4735_0(List<Profile> profiles)
{    if (profiles != null) {        this.profiles = new ArrayList<>(profiles);    } else {        this.profiles = null;    }    return this;}
public List<String> maven_f4736_0()
{    if (activeProfileIds == null) {        activeProfileIds = new ArrayList<>();    }    return activeProfileIds;}
public DefaultModelBuildingRequest maven_f4737_0(List<String> activeProfileIds)
{    if (activeProfileIds != null) {        this.activeProfileIds = new ArrayList<>(activeProfileIds);    } else {        this.activeProfileIds = null;    }    return this;}
public List<String> maven_f4738_0()
{    if (inactiveProfileIds == null) {        inactiveProfileIds = new ArrayList<>();    }    return inactiveProfileIds;}
public DefaultModelBuildingRequest maven_f4739_0(List<String> inactiveProfileIds)
{    if (inactiveProfileIds != null) {        this.inactiveProfileIds = new ArrayList<>(inactiveProfileIds);    } else {        this.inactiveProfileIds = null;    }    return this;}
public Properties maven_f4740_0()
{    if (systemProperties == null) {        systemProperties = new Properties();    }    return systemProperties;}
public DefaultModelBuildingRequest maven_f4741_0(Properties systemProperties)
{    if (systemProperties != null) {        this.systemProperties = new Properties();        synchronized (systemProperties) {                        this.systemProperties.putAll(systemProperties);        }    } else {        this.systemProperties = null;    }    return this;}
public Properties maven_f4742_0()
{    if (userProperties == null) {        userProperties = new Properties();    }    return userProperties;}
public DefaultModelBuildingRequest maven_f4743_0(Properties userProperties)
{    if (userProperties != null) {        this.userProperties = new Properties();        this.userProperties.putAll(userProperties);    } else {        this.userProperties = null;    }    return this;}
public Date maven_f4744_0()
{    return buildStartTime;}
public ModelBuildingRequest maven_f4745_0(Date buildStartTime)
{    this.buildStartTime = buildStartTime;    return this;}
public ModelResolver maven_f4746_0()
{    return this.modelResolver;}
public DefaultModelBuildingRequest maven_f4747_0(ModelResolver modelResolver)
{    this.modelResolver = modelResolver;    return this;}
public ModelBuildingListener maven_f4748_0()
{    return modelBuildingListener;}
public ModelBuildingRequest maven_f4749_0(ModelBuildingListener modelBuildingListener)
{    this.modelBuildingListener = modelBuildingListener;    return this;}
public ModelCache maven_f4750_0()
{    return this.modelCache;}
public DefaultModelBuildingRequest maven_f4751_0(ModelCache modelCache)
{    this.modelCache = modelCache;    return this;}
public Model maven_f4752_0()
{    return rawModel;}
public ModelBuildingRequest maven_f4753_0(Model rawModel)
{    this.rawModel = rawModel;    return this;}
public WorkspaceModelResolver maven_f4754_0()
{    return workspaceResolver;}
public ModelBuildingRequest maven_f4755_0(WorkspaceModelResolver workspaceResolver)
{    this.workspaceResolver = workspaceResolver;    return this;}
public Model maven_f4756_0()
{    return effectiveModel;}
public DefaultModelBuildingResult maven_f4757_0(Model model)
{    this.effectiveModel = model;    return this;}
public List<String> maven_f4758_0()
{    return modelIds;}
public DefaultModelBuildingResult maven_f4759_0(String modelId)
{        Objects.requireNonNull(modelId, "modelId cannot null");    modelIds.add(modelId);    return this;}
public Model maven_f4760_0()
{    return rawModels.get(modelIds.get(0));}
public Model maven_f4761_0(String modelId)
{    return rawModels.get(modelId);}
public DefaultModelBuildingResult maven_f4762_0(String modelId, Model rawModel)
{        Objects.requireNonNull(modelId, "modelId cannot null");    rawModels.put(modelId, rawModel);    return this;}
public List<Profile> maven_f4763_0(String modelId)
{    return activePomProfiles.get(modelId);}
public DefaultModelBuildingResult maven_f4764_0(String modelId, List<Profile> activeProfiles)
{        Objects.requireNonNull(modelId, "modelId cannot null");    if (activeProfiles != null) {        this.activePomProfiles.put(modelId, new ArrayList<>(activeProfiles));    } else {        this.activePomProfiles.remove(modelId);    }    return this;}
public List<Profile> maven_f4765_0()
{    return activeExternalProfiles;}
public DefaultModelBuildingResult maven_f4766_0(List<Profile> activeProfiles)
{    if (activeProfiles != null) {        this.activeExternalProfiles = new ArrayList<>(activeProfiles);    } else {        this.activeExternalProfiles.clear();    }    return this;}
public List<ModelProblem> maven_f4767_0()
{    return problems;}
public DefaultModelBuildingResult maven_f4768_0(List<ModelProblem> problems)
{    if (problems != null) {        this.problems = new ArrayList<>(problems);    } else {        this.problems.clear();    }    return this;}
public String maven_f4769_0()
{    return source;}
public int maven_f4770_0()
{    return lineNumber;}
public int maven_f4771_0()
{    return columnNumber;}
public String maven_f4772_0()
{    return modelId;}
public Exception maven_f4773_0()
{    return exception;}
public String maven_f4774_0()
{    String msg;    if (message != null && message.length() > 0) {        msg = message;    } else {        msg = exception.getMessage();        if (msg == null) {            msg = "";        }    }    return msg;}
public Severity maven_f4775_0()
{    return severity;}
public Version maven_f4776_0()
{    return version;}
public String maven_f4777_0()
{    StringBuilder buffer = new StringBuilder(128);    buffer.append('[').append(getSeverity()).append("] ");    buffer.append(getMessage());    buffer.append(" @ ").append(ModelProblemUtils.formatLocation(this, null));    return buffer.toString();}
public boolean maven_f4778_0()
{    return severities.contains(ModelProblem.Severity.FATAL);}
public boolean maven_f4779_0()
{    return severities.contains(ModelProblem.Severity.ERROR) || severities.contains(ModelProblem.Severity.FATAL);}
public List<ModelProblem> maven_f4780_0()
{    return problems;}
public void maven_f4781_0(String source)
{    this.source = source;    this.sourceModel = null;}
public void maven_f4782_0(Model source)
{    this.sourceModel = source;    this.source = null;    if (rootModel == null) {        rootModel = source;    }}
private String maven_f4783_0()
{    if (source == null && sourceModel != null) {        source = ModelProblemUtils.toPath(sourceModel);    }    return source;}
private String maven_f4784_0()
{    return ModelProblemUtils.toId(sourceModel);}
public void maven_f4785_0(Model rootModel)
{    this.rootModel = rootModel;}
public Model maven_f4786_0()
{    return rootModel;}
public String maven_f4787_0()
{    return ModelProblemUtils.toId(rootModel);}
public void maven_f4788_0(ModelProblem problem)
{    problems.add(problem);    severities.add(problem.getSeverity());}
public void maven_f4789_0(List<ModelProblem> problems)
{    this.problems.addAll(problems);    for (ModelProblem problem : problems) {        severities.add(problem.getSeverity());    }}
public void maven_f4790_0(ModelProblemCollectorRequest req)
{    int line = -1;    int column = -1;    String source = null;    String modelId = null;    if (req.getLocation() != null) {        line = req.getLocation().getLineNumber();        column = req.getLocation().getColumnNumber();        if (req.getLocation().getSource() != null) {            modelId = req.getLocation().getSource().getModelId();            source = req.getLocation().getSource().getLocation();        }    }    if (modelId == null) {        modelId = getModelId();        source = getSource();    }    if (line <= 0 && column <= 0 && req.getException() instanceof ModelParseException) {        ModelParseException e = (ModelParseException) req.getException();        line = e.getLineNumber();        column = e.getColumnNumber();    }    ModelProblem problem = new DefaultModelProblem(req.getMessage(), req.getSeverity(), req.getVersion(), source, line, column, modelId, req.getException());    add(problem);}
public ModelBuildingException maven_f4791_0()
{    ModelBuildingResult result = this.result;    if (result.getModelIds().isEmpty()) {        DefaultModelBuildingResult tmp = new DefaultModelBuildingResult();        tmp.setEffectiveModel(result.getEffectiveModel());        tmp.setProblems(getProblems());        tmp.setActiveExternalProfiles(result.getActiveExternalProfiles());        String id = getRootModelId();        tmp.addModelId(id);        tmp.setRawModel(id, getRootModel());        result = tmp;    }    return new ModelBuildingException(result);}
public DefaultModelProcessor maven_f4792_0(ModelLocator locator)
{    this.locator = locator;    return this;}
public DefaultModelProcessor maven_f4793_0(ModelReader reader)
{    this.reader = reader;    return this;}
public File maven_f4794_0(File projectDirectory)
{    return locator.locatePom(projectDirectory);}
public Model maven_f4795_0(File input, Map<String, ?> options) throws IOException
{    return reader.read(input, options);}
public Model maven_f4796_0(Reader input, Map<String, ?> options) throws IOException
{    return reader.read(input, options);}
public Model maven_f4797_0(InputStream input, Map<String, ?> options) throws IOException
{    return reader.read(input, options);}
public File maven_f4798_0()
{    return getFile();}
public ModelSource2 maven_f4799_0(String relPath)
{    relPath = relPath.replace('\\', File.separatorChar).replace('/', File.separatorChar);    File relatedPom = new File(getFile().getParentFile(), relPath);    if (relatedPom.isDirectory()) {                relatedPom = new File(relatedPom, "pom.xml");    }    if (relatedPom.isFile() && relatedPom.canRead()) {        return new FileModelSource(new File(relatedPom.toURI().normalize()));    }    return null;}
public URI maven_f4800_0()
{    return getFile().toURI();}
public boolean maven_f4801_0(Object obj)
{    if (this == obj) {        return true;    }    if (!(obj instanceof FileModelSource)) {        return false;    }    FileModelSource other = (FileModelSource) obj;    return getFile().equals(other.getFile());}
public int maven_f4802_0()
{    return getFile().hashCode();}
public File maven_f4803_0()
{    return request.getPomFile();}
public FilterModelBuildingRequest maven_f4804_0(File pomFile)
{    request.setPomFile(pomFile);    return this;}
public ModelSource maven_f4805_0()
{    return request.getModelSource();}
public FilterModelBuildingRequest maven_f4806_0(ModelSource modelSource)
{    request.setModelSource(modelSource);    return this;}
public int maven_f4807_0()
{    return request.getValidationLevel();}
public FilterModelBuildingRequest maven_f4808_0(int validationLevel)
{    request.setValidationLevel(validationLevel);    return this;}
public boolean maven_f4809_0()
{    return request.isProcessPlugins();}
public FilterModelBuildingRequest maven_f4810_0(boolean processPlugins)
{    request.setProcessPlugins(processPlugins);    return this;}
public boolean maven_f4811_0()
{    return request.isTwoPhaseBuilding();}
public FilterModelBuildingRequest maven_f4812_0(boolean twoPhaseBuilding)
{    request.setTwoPhaseBuilding(twoPhaseBuilding);    return this;}
public boolean maven_f4813_0()
{    return request.isLocationTracking();}
public FilterModelBuildingRequest maven_f4814_0(boolean locationTracking)
{    request.setLocationTracking(locationTracking);    return this;}
public List<Profile> maven_f4815_0()
{    return request.getProfiles();}
public FilterModelBuildingRequest maven_f4816_0(List<Profile> profiles)
{    request.setProfiles(profiles);    return this;}
public List<String> maven_f4817_0()
{    return request.getActiveProfileIds();}
public FilterModelBuildingRequest maven_f4818_0(List<String> activeProfileIds)
{    request.setActiveProfileIds(activeProfileIds);    return this;}
public List<String> maven_f4819_0()
{    return request.getInactiveProfileIds();}
public FilterModelBuildingRequest maven_f4820_0(List<String> inactiveProfileIds)
{    request.setInactiveProfileIds(inactiveProfileIds);    return this;}
public Properties maven_f4821_0()
{    return request.getSystemProperties();}
public FilterModelBuildingRequest maven_f4822_0(Properties systemProperties)
{    request.setSystemProperties(systemProperties);    return this;}
public Properties maven_f4823_0()
{    return request.getUserProperties();}
public FilterModelBuildingRequest maven_f4824_0(Properties userProperties)
{    request.setUserProperties(userProperties);    return this;}
public Date maven_f4825_0()
{    return request.getBuildStartTime();}
public ModelBuildingRequest maven_f4826_0(Date buildStartTime)
{    request.setBuildStartTime(buildStartTime);    return this;}
public ModelResolver maven_f4827_0()
{    return request.getModelResolver();}
public FilterModelBuildingRequest maven_f4828_0(ModelResolver modelResolver)
{    request.setModelResolver(modelResolver);    return this;}
public ModelBuildingListener maven_f4829_0()
{    return request.getModelBuildingListener();}
public ModelBuildingRequest maven_f4830_0(ModelBuildingListener modelBuildingListener)
{    request.setModelBuildingListener(modelBuildingListener);    return this;}
public ModelCache maven_f4831_0()
{    return request.getModelCache();}
public FilterModelBuildingRequest maven_f4832_0(ModelCache modelCache)
{    request.setModelCache(modelCache);    return this;}
public Model maven_f4833_0()
{    return request.getRawModel();}
public ModelBuildingRequest maven_f4834_0(Model rawModel)
{    request.setRawModel(rawModel);    return this;}
public WorkspaceModelResolver maven_f4835_0()
{    return request.getWorkspaceModelResolver();}
public ModelBuildingRequest maven_f4836_0(WorkspaceModelResolver workspaceResolver)
{    request.setWorkspaceModelResolver(workspaceResolver);    return this;}
public void maven_f4837_0(ModelBuildingListener listener, ModelBuildingEvent event)
{    listener.buildExtensionsAssembled(event);}
public ModelBuildingResult maven_f4838_0()
{    return result;}
public Model maven_f4839_0()
{    if (result == null) {        return null;    }    if (result.getEffectiveModel() != null) {        return result.getEffectiveModel();    }    return result.getRawModel();}
public String maven_f4840_0()
{    if (result == null || result.getModelIds().isEmpty()) {        return "";    }    return result.getModelIds().get(0);}
public List<ModelProblem> maven_f4841_0()
{    if (result == null) {        return Collections.emptyList();    }    return Collections.unmodifiableList(result.getProblems());}
private static String maven_f4842_0(ModelBuildingResult result)
{    if (result != null && !result.getModelIds().isEmpty()) {        return toMessage(result.getModelIds().get(0), result.getProblems());    }    return null;}
private static String maven_f4843_0(String modelId, List<ModelProblem> problems)
{    StringWriter buffer = new StringWriter(1024);    PrintWriter writer = new PrintWriter(buffer);    writer.print(problems.size());    writer.print((problems.size() == 1) ? " problem was " : " problems were ");    writer.print("encountered while building the effective model");    if (modelId != null && modelId.length() > 0) {        writer.print(" for ");        writer.print(modelId);    }    writer.println();    for (ModelProblem problem : problems) {        writer.print("[");        writer.print(problem.getSeverity());        writer.print("] ");        writer.print(problem.getMessage());        writer.print(" @ ");        writer.println(ModelProblemUtils.formatLocation(problem, modelId));    }    return buffer.toString();}
public String maven_f4844_0()
{    return "raw";}
public Class<ModelData> maven_f4845_0()
{    return ModelData.class;}
public ModelData maven_f4846_0(ModelData data)
{    Model model = (data.getModel() != null) ? data.getModel().clone() : null;    return new ModelData(data.getSource(), model, data.getGroupId(), data.getArtifactId(), data.getVersion());}
public ModelData maven_f4847_0(ModelData data)
{    return intoCache(data);}
public String maven_f4848_0()
{    return "import";}
public Class<DependencyManagement> maven_f4849_0()
{    return DependencyManagement.class;}
public DependencyManagement maven_f4850_0(DependencyManagement data)
{    return (data != null) ? data.clone() : null;}
public DependencyManagement maven_f4851_0(DependencyManagement data)
{    return intoCache(data);}
public ModelSource maven_f4852_0()
{    return source;}
public Model maven_f4853_0()
{    return model;}
public void maven_f4854_0(Model model)
{    this.model = model;}
public Model maven_f4855_0()
{    return rawModel;}
public void maven_f4856_0(Model rawModel)
{    this.rawModel = rawModel;}
public List<Profile> maven_f4857_0()
{    return activeProfiles;}
public void maven_f4858_0(List<Profile> activeProfiles)
{    this.activeProfiles = activeProfiles;}
public String maven_f4859_0()
{    return (groupId != null) ? groupId : "";}
public void maven_f4860_0(String groupId)
{    this.groupId = groupId;}
public String maven_f4861_0()
{    return (artifactId != null) ? artifactId : "";}
public void maven_f4862_0(String artifactId)
{    this.artifactId = artifactId;}
public String maven_f4863_0()
{    return (version != null) ? version : "";}
public void maven_f4864_0(String version)
{    this.version = version;}
public String maven_f4865_0()
{    StringBuilder buffer = new StringBuilder(128);    buffer.append(getGroupId()).append(':').append(getArtifactId()).append(':').append(getVersion());    return buffer.toString();}
public String maven_f4866_0()
{    return String.valueOf(model);}
public Severity maven_f4867_0()
{    return severity;}
public Version maven_f4868_0()
{    return version;}
public Exception maven_f4869_0()
{    return exception;}
public ModelProblemCollectorRequest maven_f4870_0(Exception exception)
{    this.exception = exception;    return this;}
public String maven_f4871_0()
{    return message;}
public ModelProblemCollectorRequest maven_f4872_0(String message)
{    this.message = message;    return this;}
public InputLocation maven_f4873_0()
{    return location;}
public ModelProblemCollectorRequest maven_f4874_0(InputLocation location)
{    this.location = location;    return this;}
 static String maven_f4875_0(Model model)
{    if (model == null) {        return "";    }    StringBuilder buffer = new StringBuilder(128);    buffer.append(toId(model));    File pomFile = model.getPomFile();    if (pomFile != null) {        buffer.append(" (").append(pomFile).append(')');    }    return buffer.toString();}
 static String maven_f4876_0(Model model)
{    String path = "";    if (model != null) {        File pomFile = model.getPomFile();        if (pomFile != null) {            path = pomFile.getAbsolutePath();        }    }    return path;}
 static String maven_f4877_0(Model model)
{    if (model == null) {        return "";    }    String groupId = model.getGroupId();    if (groupId == null && model.getParent() != null) {        groupId = model.getParent().getGroupId();    }    String artifactId = model.getArtifactId();    String version = model.getVersion();    if (version == null && model.getParent() != null) {        version = model.getParent().getVersion();    }    if (version == null) {        version = "[unknown-version]";    }    return toId(groupId, artifactId, version);}
 static String maven_f4878_0(String groupId, String artifactId, String version)
{    StringBuilder buffer = new StringBuilder(128);    buffer.append((groupId != null && groupId.length() > 0) ? groupId : "[unknown-group-id]");    buffer.append(':');    buffer.append((artifactId != null && artifactId.length() > 0) ? artifactId : "[unknown-artifact-id]");    buffer.append(':');    buffer.append((version != null && version.length() > 0) ? version : "[unknown-version]");    return buffer.toString();}
public static String maven_f4879_0(ModelProblem problem, String projectId)
{    StringBuilder buffer = new StringBuilder(256);    if (!problem.getModelId().equals(projectId)) {        buffer.append(problem.getModelId());        if (problem.getSource().length() > 0) {            if (buffer.length() > 0) {                buffer.append(", ");            }            buffer.append(problem.getSource());        }    }    if (problem.getLineNumber() > 0) {        if (buffer.length() > 0) {            buffer.append(", ");        }        buffer.append("line ").append(problem.getLineNumber());    }    if (problem.getColumnNumber() > 0) {        if (buffer.length() > 0) {            buffer.append(", ");        }        buffer.append("column ").append(problem.getColumnNumber());    }    return buffer.toString();}
public static Result<T> maven_f4880_0(T model)
{    return success(model, Collections.<ModelProblem>emptyList());}
public static Result<T> maven_f4881_0(T model, Iterable<? extends ModelProblem> problems)
{    assert !hasErrors(problems);    return new Result<>(false, model, problems);}
public static Result<T> maven_f4882_0(T model, Result<?>... results)
{    final List<ModelProblem> problemsList = new ArrayList<>();    for (Result<?> result1 : results) {        for (ModelProblem modelProblem : result1.getProblems()) {            problemsList.add(modelProblem);        }    }    return success(model, problemsList);}
public static Result<T> maven_f4883_0(Iterable<? extends ModelProblem> problems)
{    return error(null, problems);}
public static Result<T> maven_f4884_0(T model)
{    return error(model, Collections.<ModelProblem>emptyList());}
public static Result<T> maven_f4885_0(Result<?> result)
{    return error(result.getProblems());}
public static Result<T> maven_f4886_0(Result<?>... results)
{    final List<ModelProblem> problemsList = new ArrayList<>();    for (Result<?> result1 : results) {        for (ModelProblem modelProblem : result1.getProblems()) {            problemsList.add(modelProblem);        }    }    return error(problemsList);}
public static Result<T> maven_f4887_0(T model, Iterable<? extends ModelProblem> problems)
{    return new Result<>(true, model, problems);}
public static Result<T> maven_f4888_0(T model, Iterable<? extends ModelProblem> problems)
{    return new Result<>(hasErrors(problems), model, problems);}
public static Result<T> maven_f4889_0(Result<T> result, ModelProblem problem)
{    return addProblems(result, singleton(problem));}
public static Result<T> maven_f4890_0(Result<T> result, Iterable<? extends ModelProblem> problems)
{    Collection<ModelProblem> list = new ArrayList<>();    for (ModelProblem item : problems) {        list.add(item);    }    for (ModelProblem item : result.getProblems()) {        list.add(item);    }    return new Result<>(result.hasErrors() || hasErrors(problems), result.get(), list);}
public static Result<T> maven_f4891_0(Result<T> result, Result<?>... results)
{    final List<ModelProblem> problemsList = new ArrayList<>();    for (Result<?> result1 : results) {        for (ModelProblem modelProblem : result1.getProblems()) {            problemsList.add(modelProblem);        }    }    return addProblems(result, problemsList);}
public static Result<Iterable<T>> maven_f4892_0(Iterable<? extends Result<? extends T>> results)
{    boolean hasErrors = false;    List<T> modelsList = new ArrayList<>();    List<ModelProblem> problemsList = new ArrayList<>();    for (Result<? extends T> result : results) {        modelsList.add(result.get());        for (ModelProblem modelProblem : result.getProblems()) {            problemsList.add(modelProblem);        }        if (result.hasErrors()) {            hasErrors = true;        }    }    return new Result<>(hasErrors, (Iterable<T>) modelsList, problemsList);}
private static boolean maven_f4893_0(Iterable<? extends ModelProblem> problems)
{    for (ModelProblem input : problems) {        if (input.getSeverity().equals(ERROR) || input.getSeverity().equals(FATAL)) {            return true;        }    }    return false;}
public Iterable<? extends ModelProblem> maven_f4894_0()
{    return problems;}
public T maven_f4895_0()
{    return value;}
public boolean maven_f4896_0()
{    return errors;}
public void maven_f4897_0(Model target, List<? extends DependencyManagement> sources, ModelBuildingRequest request, ModelProblemCollector problems)
{    if (sources != null && !sources.isEmpty()) {        Map<String, Dependency> dependencies = new LinkedHashMap<>();        DependencyManagement depMgmt = target.getDependencyManagement();        if (depMgmt != null) {            for (Dependency dependency : depMgmt.getDependencies()) {                dependencies.put(dependency.getManagementKey(), dependency);            }        } else {            depMgmt = new DependencyManagement();            target.setDependencyManagement(depMgmt);        }        for (DependencyManagement source : sources) {            for (Dependency dependency : source.getDependencies()) {                String key = dependency.getManagementKey();                if (!dependencies.containsKey(key)) {                    dependencies.put(key, dependency);                }            }        }        depMgmt.setDependencies(new ArrayList<>(dependencies.values()));    }}
public void maven_f4898_0(Model child, Model parent, ModelBuildingRequest request, ModelProblemCollector problems)
{    Map<Object, Object> hints = new HashMap<>();    String childPath = child.getProperties().getProperty(CHILD_DIRECTORY_PROPERTY, child.getArtifactId());    hints.put(CHILD_DIRECTORY, childPath);    hints.put(MavenModelMerger.CHILD_PATH_ADJUSTMENT, getChildPathAdjustment(child, parent, childPath));    merger.merge(child, parent, false, hints);}
private String maven_f4899_0(Model child, Model parent, String childDirectory)
{    String adjustment = "";    if (parent != null) {        String childName = child.getArtifactId();        /*             * This logic (using filesystem, against wanted independence from the user environment) exists only for the             * sake of backward-compat with 2.x (MNG-5000). In general, it is wrong to             * base URL inheritance on the module directory names as this information is unavailable for POMs in the             * repository. In other words, modules where artifactId != moduleDirName will see different effective URLs             * depending on how the model was constructed (from filesystem or from repository).             */        if (child.getProjectDirectory() != null) {            childName = child.getProjectDirectory().getName();        }        for (String module : parent.getModules()) {            module = module.replace('\\', '/');            if (module.regionMatches(true, module.length() - 4, ".xml", 0, 4)) {                module = module.substring(0, module.lastIndexOf('/') + 1);            }            String moduleName = module;            if (moduleName.endsWith("/")) {                moduleName = moduleName.substring(0, moduleName.length() - 1);            }            int lastSlash = moduleName.lastIndexOf('/');            moduleName = moduleName.substring(lastSlash + 1);            if ((moduleName.equals(childName) || (moduleName.equals(childDirectory))) && lastSlash >= 0) {                adjustment = module.substring(0, lastSlash);                break;            }        }    }    return adjustment;}
protected String maven_f4900_0(String parentUrl, boolean appendPath, Map<Object, Object> context)
{    Object childDirectory = context.get(CHILD_DIRECTORY);    Object childPathAdjustment = context.get(CHILD_PATH_ADJUSTMENT);    if (StringUtils.isBlank(parentUrl) || childDirectory == null || childPathAdjustment == null || !appendPath) {        return parentUrl;    }        return appendPath(parentUrl, childDirectory.toString(), childPathAdjustment.toString());}
private String maven_f4901_0(String parentUrl, String childPath, String pathAdjustment)
{    StringBuilder url = new StringBuilder(parentUrl.length() + pathAdjustment.length() + childPath.length() + ((pathAdjustment.length() == 0) ? 1 : 2));    url.append(parentUrl);    concatPath(url, pathAdjustment);    concatPath(url, childPath);    return url.toString();}
private void maven_f4902_0(StringBuilder url, String path)
{    if (path.length() > 0) {        boolean initialUrlEndsWithSlash = url.charAt(url.length() - 1) == '/';        boolean pathStartsWithSlash = path.charAt(0) == '/';        if (pathStartsWithSlash) {            if (initialUrlEndsWithSlash) {                                url.setLength(url.length() - 1);            }        } else if (!initialUrlEndsWithSlash) {                        url.append('/');        }        url.append(path);                if (initialUrlEndsWithSlash && !path.endsWith("/")) {            url.append('/');        }    }}
protected void maven_f4903_0(ModelBase target, ModelBase source, boolean sourceDominant, Map<Object, Object> context)
{    Properties merged = new Properties();    if (sourceDominant) {        merged.putAll(target.getProperties());        putAll(merged, source.getProperties(), CHILD_DIRECTORY_PROPERTY);    } else {        putAll(merged, source.getProperties(), CHILD_DIRECTORY_PROPERTY);        merged.putAll(target.getProperties());    }    target.setProperties(merged);    target.setLocation("properties", InputLocation.merge(target.getLocation("properties"), source.getLocation("properties"), sourceDominant));}
private void maven_f4904_0(Map<Object, Object> s, Map<Object, Object> t, Object excludeKey)
{    for (Map.Entry<Object, Object> e : t.entrySet()) {        if (!e.getKey().equals(excludeKey)) {            s.put(e.getKey(), e.getValue());        }    }}
protected void maven_f4905_0(PluginContainer target, PluginContainer source, boolean sourceDominant, Map<Object, Object> context)
{    List<Plugin> src = source.getPlugins();    if (!src.isEmpty()) {        List<Plugin> tgt = target.getPlugins();        Map<Object, Plugin> master = new LinkedHashMap<>(src.size() * 2);        for (Plugin element : src) {            if (element.isInherited() || !element.getExecutions().isEmpty()) {                                Plugin plugin = new Plugin();                plugin.setLocation("", element.getLocation(""));                plugin.setGroupId(null);                mergePlugin(plugin, element, sourceDominant, context);                Object key = getPluginKey(element);                master.put(key, plugin);            }        }        Map<Object, List<Plugin>> predecessors = new LinkedHashMap<>();        List<Plugin> pending = new ArrayList<>();        for (Plugin element : tgt) {            Object key = getPluginKey(element);            Plugin existing = master.get(key);            if (existing != null) {                mergePlugin(element, existing, sourceDominant, context);                master.put(key, element);                if (!pending.isEmpty()) {                    predecessors.put(key, pending);                    pending = new ArrayList<>();                }            } else {                pending.add(element);            }        }        List<Plugin> result = new ArrayList<>(src.size() + tgt.size());        for (Map.Entry<Object, Plugin> entry : master.entrySet()) {            List<Plugin> pre = predecessors.get(entry.getKey());            if (pre != null) {                result.addAll(pre);            }            result.add(entry.getValue());        }        result.addAll(pending);        target.setPlugins(result);    }}
protected void maven_f4906_0(Plugin target, Plugin source, boolean sourceDominant, Map<Object, Object> context)
{    if (source.isInherited()) {        mergeConfigurationContainer(target, source, sourceDominant, context);    }    mergePlugin_GroupId(target, source, sourceDominant, context);    mergePlugin_ArtifactId(target, source, sourceDominant, context);    mergePlugin_Version(target, source, sourceDominant, context);    mergePlugin_Extensions(target, source, sourceDominant, context);    mergePlugin_Dependencies(target, source, sourceDominant, context);    mergePlugin_Executions(target, source, sourceDominant, context);}
protected void maven_f4907_0(Reporting target, Reporting source, boolean sourceDominant, Map<Object, Object> context)
{    List<ReportPlugin> src = source.getPlugins();    if (!src.isEmpty()) {        List<ReportPlugin> tgt = target.getPlugins();        Map<Object, ReportPlugin> merged = new LinkedHashMap<>((src.size() + tgt.size()) * 2);        for (ReportPlugin element : src) {            Object key = getReportPluginKey(element);            if (element.isInherited()) {                                ReportPlugin plugin = new ReportPlugin();                plugin.setLocation("", element.getLocation(""));                plugin.setGroupId(null);                mergeReportPlugin(plugin, element, sourceDominant, context);                merged.put(key, plugin);            }        }        for (ReportPlugin element : tgt) {            Object key = getReportPluginKey(element);            ReportPlugin existing = merged.get(key);            if (existing != null) {                mergeReportPlugin(element, existing, sourceDominant, context);            }            merged.put(key, element);        }        target.setPlugins(new ArrayList<>(merged.values()));    }}
public AbstractStringBasedModelInterpolator maven_f4908_0(PathTranslator pathTranslator)
{    this.pathTranslator = pathTranslator;    return this;}
public AbstractStringBasedModelInterpolator maven_f4909_0(UrlNormalizer urlNormalizer)
{    this.urlNormalizer = urlNormalizer;    return this;}
protected List<ValueSource> maven_f4910_0(final Model model, final File projectDir, final ModelBuildingRequest config, final ModelProblemCollector problems)
{    Properties modelProperties = model.getProperties();    ValueSource modelValueSource1 = new PrefixedObjectValueSource(PROJECT_PREFIXES, model, false);    if (config.getValidationLevel() >= ModelBuildingRequest.VALIDATION_LEVEL_MAVEN_2_0) {        modelValueSource1 = new ProblemDetectingValueSource(modelValueSource1, "pom.", "project.", problems);    }    ValueSource modelValueSource2 = new ObjectBasedValueSource(model);    if (config.getValidationLevel() >= ModelBuildingRequest.VALIDATION_LEVEL_MAVEN_2_0) {        modelValueSource2 = new ProblemDetectingValueSource(modelValueSource2, "", "project.", problems);    }        List<ValueSource> valueSources = new ArrayList<>(9);    if (projectDir != null) {        ValueSource basedirValueSource = new PrefixedValueSourceWrapper(new AbstractValueSource(false) {            @Override            public Object getValue(String expression) {                if ("basedir".equals(expression)) {                    return projectDir.getAbsolutePath();                }                return null;            }        }, PROJECT_PREFIXES, true);        valueSources.add(basedirValueSource);        ValueSource baseUriValueSource = new PrefixedValueSourceWrapper(new AbstractValueSource(false) {            @Override            public Object getValue(String expression) {                if ("baseUri".equals(expression)) {                    return projectDir.getAbsoluteFile().toPath().toUri().toASCIIString();                }                return null;            }        }, PROJECT_PREFIXES, false);        valueSources.add(baseUriValueSource);        valueSources.add(new BuildTimestampValueSource(config.getBuildStartTime(), modelProperties));    }    valueSources.add(modelValueSource1);    valueSources.add(new MapBasedValueSource(config.getUserProperties()));        if (config.getSystemProperties().containsKey(REVISION_PROPERTY)) {        modelProperties.put(REVISION_PROPERTY, config.getSystemProperties().get(REVISION_PROPERTY));    }    if (config.getSystemProperties().containsKey(CHANGELIST_PROPERTY)) {        modelProperties.put(CHANGELIST_PROPERTY, config.getSystemProperties().get(CHANGELIST_PROPERTY));    }    if (config.getSystemProperties().containsKey(SHA1_PROPERTY)) {        modelProperties.put(SHA1_PROPERTY, config.getSystemProperties().get(SHA1_PROPERTY));    }    valueSources.add(new MapBasedValueSource(modelProperties));    valueSources.add(new MapBasedValueSource(config.getSystemProperties()));    valueSources.add(new AbstractValueSource(false) {        @Override        public Object getValue(String expression) {            return config.getSystemProperties().getProperty("env." + expression);        }    });    valueSources.add(modelValueSource2);    return valueSources;}
public Object maven_f4911_0(String expression)
{    if ("basedir".equals(expression)) {        return projectDir.getAbsolutePath();    }    return null;}
public Object maven_f4912_0(String expression)
{    if ("baseUri".equals(expression)) {        return projectDir.getAbsoluteFile().toPath().toUri().toASCIIString();    }    return null;}
public Object maven_f4913_0(String expression)
{    return config.getSystemProperties().getProperty("env." + expression);}
protected List<? extends InterpolationPostProcessor> maven_f4914_0(final Model model, final File projectDir, final ModelBuildingRequest config)
{    List<InterpolationPostProcessor> processors = new ArrayList<>(2);    if (projectDir != null) {        processors.add(new PathTranslatingPostProcessor(PROJECT_PREFIXES, TRANSLATED_PATH_EXPRESSIONS, projectDir, pathTranslator));    }    processors.add(new UrlNormalizingPostProcessor(urlNormalizer));    return processors;}
protected RecursionInterceptor maven_f4915_0()
{    return new PrefixAwareRecursionInterceptor(PROJECT_PREFIXES);}
public Object maven_f4916_0(String expression)
{    if ("build.timestamp".equals(expression) || "maven.build.timestamp".equals(expression)) {        return mavenBuildTimestamp.formattedTimestamp();    }    return null;}
public String maven_f4917_0()
{    return formattedTimestamp;}
public Object maven_f4918_0(String expression, Object value)
{    if (value != null) {        expression = ValueSourceUtils.trimPrefix(expression, expressionPrefixes, true);        if (unprefixedPathKeys.contains(expression)) {            return pathTranslator.alignToBaseDirectory(String.valueOf(value), projectDir);        }    }    return null;}
public Object maven_f4919_0(String expression)
{    Object value = valueSource.getValue(expression);    if (value != null && expression.startsWith(bannedPrefix)) {        String msg = "The expression ${" + expression + "} is deprecated.";        if (newPrefix != null && newPrefix.length() > 0) {            msg += " Please use ${" + newPrefix + expression.substring(bannedPrefix.length()) + "} instead.";        }        problems.add(new ModelProblemCollectorRequest(Severity.WARNING, Version.V20).setMessage(msg));    }    return value;}
public List maven_f4920_0()
{    return valueSource.getFeedback();}
public void maven_f4921_0()
{    valueSource.clearFeedback();}
public Model maven_f4922_0(Model model, File projectDir, ModelBuildingRequest config, ModelProblemCollector problems)
{    interpolateObject(model, model, projectDir, config, problems);    return model;}
 void maven_f4923_0(Object obj, Model model, File projectDir, ModelBuildingRequest config, ModelProblemCollector problems)
{    List<? extends ValueSource> valueSources = createValueSources(model, projectDir, config, problems);    List<? extends InterpolationPostProcessor> postProcessors = createPostProcessors(model, projectDir, config);    InnerInterpolator innerInterpolator = createInterpolator(valueSources, postProcessors, problems);    PrivilegedAction<Object> action = new InterpolateObjectAction(obj, innerInterpolator, problems);    AccessController.doPrivileged(action);}
private InnerInterpolator maven_f4924_0(List<? extends ValueSource> valueSources, List<? extends InterpolationPostProcessor> postProcessors, final ModelProblemCollector problems)
{    final Map<String, String> cache = new HashMap<>();    final StringSearchInterpolator interpolator = new StringSearchInterpolator();    interpolator.setCacheAnswers(true);    for (ValueSource vs : valueSources) {        interpolator.addValueSource(vs);    }    for (InterpolationPostProcessor postProcessor : postProcessors) {        interpolator.addPostProcessor(postProcessor);    }    final RecursionInterceptor recursionInterceptor = createRecursionInterceptor();    return new InnerInterpolator() {        @Override        public String interpolate(String value) {            if (value != null && value.contains("${")) {                String c = cache.get(value);                if (c == null) {                    try {                        c = interpolator.interpolate(value, recursionInterceptor);                    } catch (InterpolationException e) {                        problems.add(new ModelProblemCollectorRequest(Severity.ERROR, Version.BASE).setMessage(e.getMessage()).setException(e));                    }                    cache.put(value, c);                }                return c;            }            return value;        }    };}
public String maven_f4925_0(String value)
{    if (value != null && value.contains("${")) {        String c = cache.get(value);        if (c == null) {            try {                c = interpolator.interpolate(value, recursionInterceptor);            } catch (InterpolationException e) {                problems.add(new ModelProblemCollectorRequest(Severity.ERROR, Version.BASE).setMessage(e.getMessage()).setException(e));            }            cache.put(value, c);        }        return c;    }    return value;}
public Object maven_f4926_0()
{    while (!interpolationTargets.isEmpty()) {        Object obj = interpolationTargets.removeFirst();        traverseObjectWithParents(obj.getClass(), obj);    }    return null;}
private String maven_f4927_0(String value)
{    return interpolator.interpolate(value);}
private void maven_f4928_0(Class<?> cls, Object target)
{    if (cls == null) {        return;    }    CacheItem cacheEntry = getCacheEntry(cls);    if (cacheEntry.isArray()) {        evaluateArray(target, this);    } else if (cacheEntry.isQualifiedForInterpolation) {        cacheEntry.interpolate(target, this);        traverseObjectWithParents(cls.getSuperclass(), target);    }}
private CacheItem maven_f4929_0(Class<?> cls)
{    CacheItem cacheItem = CACHED_ENTRIES.get(cls);    if (cacheItem == null) {        cacheItem = new CacheItem(cls);        CACHED_ENTRIES.put(cls, cacheItem);    }    return cacheItem;}
private static void maven_f4930_0(Object target, InterpolateObjectAction ctx)
{    int len = Array.getLength(target);    for (int i = 0; i < len; i++) {        Object value = Array.get(target, i);        if (value != null) {            if (String.class == value.getClass()) {                String interpolated = ctx.interpolate((String) value);                if (!interpolated.equals(value)) {                    Array.set(target, i, interpolated);                }            } else {                ctx.interpolationTargets.add(value);            }        }    }}
private boolean maven_f4931_0(Class<?> cls)
{    Package pkg = cls.getPackage();    if (pkg == null) {        return true;    }    String pkgName = pkg.getName();    return !pkgName.startsWith("java.") && !pkgName.startsWith("javax.");}
private boolean maven_f4932_0(Field field, Class<?> fieldType)
{    if (Map.class.equals(fieldType) && "locations".equals(field.getName())) {        return false;    }    if (InputLocation.class.equals(fieldType)) {        return false;    }        if (fieldType.isPrimitive()) {        return false;    }    return !"parent".equals(field.getName());}
 void maven_f4933_0(Object target, InterpolateObjectAction interpolateObjectAction)
{    for (CacheField field : fields) {        field.interpolate(target, interpolateObjectAction);    }}
 boolean maven_f4934_0()
{    return isArray;}
 void maven_f4935_0(Object target, InterpolateObjectAction interpolateObjectAction)
{    try {        doInterpolate(target, interpolateObjectAction);    } catch (IllegalArgumentException e) {        interpolateObjectAction.problems.add(new ModelProblemCollectorRequest(Severity.ERROR, Version.BASE).setMessage("Failed to interpolate field3: " + field + " on class: " + field.getType().getName()).setException(        e));    } catch (IllegalAccessException e) {        interpolateObjectAction.problems.add(new ModelProblemCollectorRequest(Severity.ERROR, Version.BASE).setMessage("Failed to interpolate field4: " + field + " on class: " + field.getType().getName()).setException(e));    }}
 void maven_f4936_0(Object target, InterpolateObjectAction ctx) throws IllegalAccessException
{    String value = (String) field.get(target);    if (value == null) {        return;    }    String interpolated = ctx.interpolate(value);    if (!interpolated.equals(value)) {        field.set(target, interpolated);    }}
 void maven_f4937_0(Object target, InterpolateObjectAction ctx) throws IllegalAccessException
{    @SuppressWarnings("unchecked")    List<Object> c = (List<Object>) field.get(target);    if (c == null) {        return;    }    for (int i = 0, size = c.size(); i < size; i++) {        Object value = c.get(i);        if (value != null) {            if (String.class == value.getClass()) {                String interpolated = ctx.interpolate((String) value);                if (!interpolated.equals(value)) {                    try {                        c.set(i, interpolated);                    } catch (UnsupportedOperationException e) {                        return;                    }                }            } else {                if (value.getClass().isArray()) {                    evaluateArray(value, ctx);                } else {                    ctx.interpolationTargets.add(value);                }            }        }    }}
 void maven_f4938_0(Object target, InterpolateObjectAction ctx) throws IllegalAccessException
{    @SuppressWarnings("unchecked")    Map<Object, Object> m = (Map<Object, Object>) field.get(target);    if (m == null || m.isEmpty()) {        return;    }    for (Map.Entry<Object, Object> entry : m.entrySet()) {        Object value = entry.getValue();        if (value == null) {            continue;        }        if (String.class == value.getClass()) {            String interpolated = ctx.interpolate((String) value);            if (!interpolated.equals(value)) {                try {                    entry.setValue(interpolated);                } catch (UnsupportedOperationException ignore) {                                }            }        } else if (value.getClass().isArray()) {            evaluateArray(value, ctx);        } else {            ctx.interpolationTargets.add(value);        }    }}
 void maven_f4939_0(Object target, InterpolateObjectAction ctx) throws IllegalAccessException
{    Object value = field.get(target);    if (value != null) {        if (isArray) {            evaluateArray(value, ctx);        } else {            ctx.interpolationTargets.add(value);        }    }}
public Model maven_f4940_0(Model model, File projectDir, ModelBuildingRequest config, ModelProblemCollector problems)
{    List<? extends ValueSource> valueSources = createValueSources(model, projectDir, config, problems);    List<? extends InterpolationPostProcessor> postProcessors = createPostProcessors(model, projectDir, config);    InnerInterpolator innerInterpolator = createInterpolator(valueSources, postProcessors, problems);    new ModelVisitor(innerInterpolator).visit(model);    return model;}
private InnerInterpolator maven_f4941_0(List<? extends ValueSource> valueSources, List<? extends InterpolationPostProcessor> postProcessors, final ModelProblemCollector problems)
{    final Map<String, String> cache = new HashMap<>();    final StringSearchInterpolator interpolator = new StringSearchInterpolator();    interpolator.setCacheAnswers(true);    for (ValueSource vs : valueSources) {        interpolator.addValueSource(vs);    }    for (InterpolationPostProcessor postProcessor : postProcessors) {        interpolator.addPostProcessor(postProcessor);    }    final RecursionInterceptor recursionInterceptor = createRecursionInterceptor();    return new InnerInterpolator() {        @Override        public String interpolate(String value) {            if (value != null && value.contains("${")) {                String c = cache.get(value);                if (c == null) {                    try {                        c = interpolator.interpolate(value, recursionInterceptor);                    } catch (InterpolationException e) {                        problems.add(new ModelProblemCollectorRequest(Severity.ERROR, Version.BASE).setMessage(e.getMessage()).setException(e));                    }                    cache.put(value, c);                }                return c;            }            return value;        }    };}
public String maven_f4942_0(String value)
{    if (value != null && value.contains("${")) {        String c = cache.get(value);        if (c == null) {            try {                c = interpolator.interpolate(value, recursionInterceptor);            } catch (InterpolationException e) {                problems.add(new ModelProblemCollectorRequest(Severity.ERROR, Version.BASE).setMessage(e.getMessage()).setException(e));            }            cache.put(value, c);        }        return c;    }    return value;}
 void maven_f4943_0(Model model)
{    if (model != null) {        visit((ModelBase) model);                String orgModelVersion = model.getModelVersion();        String intModelVersion = interpolate(orgModelVersion);        if (orgModelVersion != intModelVersion) {            model.setModelVersion(intModelVersion);        }        visit(model.getParent());                String orgGroupId = model.getGroupId();        String intGroupId = interpolate(orgGroupId);        if (orgGroupId != intGroupId) {            model.setGroupId(intGroupId);        }                String orgArtifactId = model.getArtifactId();        String intArtifactId = interpolate(orgArtifactId);        if (orgArtifactId != intArtifactId) {            model.setArtifactId(intArtifactId);        }                String orgVersion = model.getVersion();        String intVersion = interpolate(orgVersion);        if (orgVersion != intVersion) {            model.setVersion(intVersion);        }                String orgPackaging = model.getPackaging();        String intPackaging = interpolate(orgPackaging);        if (orgPackaging != intPackaging) {            model.setPackaging(intPackaging);        }                String orgName = model.getName();        String intName = interpolate(orgName);        if (orgName != intName) {            model.setName(intName);        }                String orgDescription = model.getDescription();        String intDescription = interpolate(orgDescription);        if (orgDescription != intDescription) {            model.setDescription(intDescription);        }                String orgUrl = model.getUrl();        String intUrl = interpolate(orgUrl);        if (orgUrl != intUrl) {            model.setUrl(intUrl);        }                String orgChildProjectUrlInheritAppendPath = model.getChildProjectUrlInheritAppendPath();        String intChildProjectUrlInheritAppendPath = interpolate(orgChildProjectUrlInheritAppendPath);        if (orgChildProjectUrlInheritAppendPath != intChildProjectUrlInheritAppendPath) {            model.setChildProjectUrlInheritAppendPath(intChildProjectUrlInheritAppendPath);        }                String orgInceptionYear = model.getInceptionYear();        String intInceptionYear = interpolate(orgInceptionYear);        if (orgInceptionYear != intInceptionYear) {            model.setInceptionYear(intInceptionYear);        }        visit(model.getOrganization());        for (License license : model.getLicenses()) {            visit(license);        }        for (Developer developer : model.getDevelopers()) {            visit(developer);        }        for (Contributor contributor : model.getContributors()) {            visit(contributor);        }        for (MailingList mailingList : model.getMailingLists()) {            visit(mailingList);        }        visit(model.getPrerequisites());        visit(model.getScm());        visit(model.getIssueManagement());        visit(model.getCiManagement());        visit(model.getBuild());        for (Profile profile : model.getProfiles()) {            visit(profile);        }    }}
private void maven_f4944_0(Parent parent)
{    if (parent != null) {        String org, val;                org = parent.getGroupId();        val = interpolate(org);        if (org != val) {            parent.setGroupId(val);        }                org = parent.getArtifactId();        val = interpolate(org);        if (org != val) {            parent.setArtifactId(val);        }                org = parent.getVersion();        val = interpolate(org);        if (org != val) {            parent.setVersion(val);        }                org = parent.getRelativePath();        val = interpolate(org);        if (org != val) {            parent.setRelativePath(val);        }    }}
private void maven_f4945_0(Organization organization)
{    if (organization != null) {        String org, val;                org = organization.getName();        val = interpolate(org);        if (org != val) {            organization.setName(val);        }                org = organization.getUrl();        val = interpolate(org);        if (org != val) {            organization.setUrl(val);        }    }}
private void maven_f4946_0(License license)
{    if (license != null) {        String org, val;                org = license.getName();        val = interpolate(org);        if (org != val) {            license.setName(val);        }                org = license.getUrl();        val = interpolate(org);        if (org != val) {            license.setUrl(val);        }                org = license.getDistribution();        val = interpolate(org);        if (org != val) {            license.setDistribution(val);        }                org = license.getComments();        val = interpolate(org);        if (org != val) {            license.setComments(val);        }    }}
private void maven_f4947_0(Developer developer)
{    if (developer != null) {        String org, val;                visit((Contributor) developer);                org = developer.getId();        val = interpolate(org);        if (org != val) {            developer.setId(val);        }    }}
private void maven_f4948_0(Contributor contributor)
{    if (contributor != null) {        String org, val;                org = contributor.getName();        val = interpolate(org);        if (org != val) {            contributor.setName(val);        }                org = contributor.getEmail();        val = interpolate(org);        if (org != val) {            contributor.setEmail(val);        }                org = contributor.getUrl();        val = interpolate(org);        if (org != val) {            contributor.setUrl(val);        }                org = contributor.getOrganization();        val = interpolate(org);        if (org != val) {            contributor.setOrganization(val);        }                org = contributor.getOrganizationUrl();        val = interpolate(org);        if (org != val) {            contributor.setOrganizationUrl(val);        }                visit(contributor.getRoles());    }}
private void maven_f4949_0(MailingList mailingList)
{    if (mailingList != null) {        String org, val;                org = mailingList.getName();        val = interpolate(org);        if (org != val) {            mailingList.setName(val);        }                org = mailingList.getSubscribe();        val = interpolate(org);        if (org != val) {            mailingList.setSubscribe(val);        }                org = mailingList.getUnsubscribe();        val = interpolate(org);        if (org != val) {            mailingList.setUnsubscribe(val);        }                org = mailingList.getPost();        val = interpolate(org);        if (org != val) {            mailingList.setPost(val);        }                org = mailingList.getArchive();        val = interpolate(org);        if (org != val) {            mailingList.setArchive(val);        }    }}
private void maven_f4950_0(Prerequisites prerequisites)
{    if (prerequisites != null) {        String org, val;                org = prerequisites.getMaven();        val = interpolate(org);        if (org != val) {            prerequisites.setMaven(val);        }    }}
private void maven_f4951_0(Scm scm)
{    if (scm != null) {        String org, val;                org = scm.getConnection();        val = interpolate(org);        if (org != val) {            scm.setConnection(val);        }                org = scm.getDeveloperConnection();        val = interpolate(org);        if (org != val) {            scm.setDeveloperConnection(val);        }                org = scm.getTag();        val = interpolate(org);        if (org != val) {            scm.setTag(val);        }                org = scm.getUrl();        val = interpolate(org);        if (org != val) {            scm.setUrl(val);        }                org = scm.getChildScmConnectionInheritAppendPath();        val = interpolate(org);        if (org != val) {            scm.setChildScmConnectionInheritAppendPath(val);        }                org = scm.getChildScmDeveloperConnectionInheritAppendPath();        val = interpolate(org);        if (org != val) {            scm.setChildScmDeveloperConnectionInheritAppendPath(val);        }                org = scm.getChildScmUrlInheritAppendPath();        val = interpolate(org);        if (org != val) {            scm.setChildScmUrlInheritAppendPath(val);        }    }}
private void maven_f4952_0(IssueManagement issueManagement)
{    if (issueManagement != null) {        String org, val;                org = issueManagement.getSystem();        val = interpolate(org);        if (org != val) {            issueManagement.setSystem(val);        }                org = issueManagement.getUrl();        val = interpolate(org);        if (org != val) {            issueManagement.setUrl(val);        }    }}
private void maven_f4953_0(CiManagement ciManagement)
{    if (ciManagement != null) {        String org, val;                org = ciManagement.getSystem();        val = interpolate(org);        if (org != val) {            ciManagement.setSystem(val);        }                org = ciManagement.getUrl();        val = interpolate(org);        if (org != val) {            ciManagement.setUrl(val);        }                for (Notifier notifier : ciManagement.getNotifiers()) {            visit(notifier);        }    }}
private void maven_f4954_0(Notifier notifier)
{    if (notifier != null) {        String org, val;                org = notifier.getType();        val = interpolate(org);        if (org != val) {            notifier.setType(val);        }                visit(notifier.getConfiguration());    }}
private void maven_f4955_0(BuildBase build)
{    if (build != null) {        String org, val;                for (Plugin plugin : build.getPlugins()) {            visit(plugin);        }                visit(build.getPluginManagement());                org = build.getDefaultGoal();        val = interpolate(org);        if (org != val) {            build.setDefaultGoal(val);        }                for (Resource resource : build.getResources()) {            visit(resource);        }                for (Resource resource : build.getTestResources()) {            visit(resource);        }                org = build.getDirectory();        val = interpolate(org);        if (org != val) {            build.setDirectory(val);        }                org = build.getFinalName();        val = interpolate(org);        if (org != val) {            build.setFinalName(val);        }                visit(build.getFilters());    }}
private void maven_f4956_0(PluginManagement pluginManagement)
{    if (pluginManagement != null) {        for (Plugin plugin : pluginManagement.getPlugins()) {            visit(plugin);        }    }}
private void maven_f4957_0(Build build)
{    if (build != null) {        String org, val;                visit((BuildBase) build);                org = build.getSourceDirectory();        val = interpolate(org);        if (org != val) {            build.setSourceDirectory(val);        }                org = build.getScriptSourceDirectory();        val = interpolate(org);        if (org != val) {            build.setScriptSourceDirectory(val);        }                org = build.getTestSourceDirectory();        val = interpolate(org);        if (org != val) {            build.setTestSourceDirectory(val);        }                org = build.getOutputDirectory();        val = interpolate(org);        if (org != val) {            build.setOutputDirectory(val);        }                org = build.getTestOutputDirectory();        val = interpolate(org);        if (org != val) {            build.setTestOutputDirectory(val);        }                for (Extension extension : build.getExtensions()) {            visit(extension);        }    }}
private void maven_f4958_0(Resource resource)
{    if (resource != null) {        String org, val;                visit(resource.getIncludes());                visit(resource.getExcludes());                org = resource.getDirectory();        val = interpolate(org);        if (org != val) {            resource.setDirectory(val);        }                org = resource.getTargetPath();        val = interpolate(org);        if (org != val) {            resource.setTargetPath(val);        }                org = resource.getFiltering();        val = interpolate(org);        if (org != val) {            resource.setFiltering(val);        }    }}
private void maven_f4959_0(Plugin plugin)
{    if (plugin != null) {        String org, val;                org = plugin.getInherited();        val = interpolate(org);        if (org != val) {            plugin.setInherited(val);        }                visit((Xpp3Dom) plugin.getConfiguration());                org = plugin.getGroupId();        val = interpolate(org);        if (org != val) {            plugin.setGroupId(val);        }                org = plugin.getArtifactId();        val = interpolate(org);        if (org != val) {            plugin.setArtifactId(val);        }                org = plugin.getVersion();        val = interpolate(org);        if (org != val) {            plugin.setVersion(val);        }                org = plugin.getExtensions();        val = interpolate(org);        if (org != val) {            plugin.setExtensions(val);        }                for (PluginExecution execution : plugin.getExecutions()) {            visit(execution);        }                for (Dependency dependency : plugin.getDependencies()) {            visit(dependency);        }    }}
private void maven_f4960_0(PluginExecution execution)
{    if (execution != null) {        String org, val;                org = execution.getInherited();        val = interpolate(org);        if (org != val) {            execution.setInherited(val);        }                visit((Xpp3Dom) execution.getConfiguration());                org = execution.getId();        val = interpolate(org);        if (org != val) {            execution.setId(val);        }                org = execution.getPhase();        val = interpolate(org);        if (org != val) {            execution.setPhase(val);        }                visit(execution.getGoals());    }}
private void maven_f4961_0(Xpp3Dom dom)
{    if (dom != null) {        String org, val;                org = dom.getValue();        val = interpolate(org);        if (org != val) {            dom.setValue(val);        }                for (String attr : dom.getAttributeNames()) {            org = dom.getAttribute(attr);            val = interpolate(org);            if (org != val) {                dom.setAttribute(attr, val);            }        }                for (int i = 0, l = dom.getChildCount(); i < l; i++) {            visit(dom.getChild(i));        }    }}
private void maven_f4962_0(Extension extension)
{    if (extension != null) {        String org, val;                org = extension.getGroupId();        val = interpolate(org);        if (org != val) {            extension.setGroupId(val);        }                org = extension.getArtifactId();        val = interpolate(org);        if (org != val) {            extension.setArtifactId(val);        }                org = extension.getVersion();        val = interpolate(org);        if (org != val) {            extension.setVersion(val);        }    }}
private void maven_f4963_0(Profile profile)
{    if (profile != null) {        String org, val;                visit((ModelBase) profile);                org = profile.getId();        val = interpolate(org);        if (org != val) {            profile.setId(val);        }                visit(profile.getActivation());                visit(profile.getBuild());    }}
private void maven_f4964_0(Activation activation)
{    if (activation != null) {        String org, val;                org = activation.getJdk();        val = interpolate(org);        if (org != val) {            activation.setJdk(val);        }                visit(activation.getOs());                visit(activation.getProperty());                visit(activation.getFile());    }}
private void maven_f4965_0(ActivationOS activationOS)
{    if (activationOS != null) {        String org, val;                org = activationOS.getName();        val = interpolate(org);        if (org != val) {            activationOS.setName(val);        }                org = activationOS.getFamily();        val = interpolate(org);        if (org != val) {            activationOS.setFamily(val);        }                org = activationOS.getArch();        val = interpolate(org);        if (org != val) {            activationOS.setArch(val);        }                org = activationOS.getVersion();        val = interpolate(org);        if (org != val) {            activationOS.setVersion(val);        }    }}
private void maven_f4966_0(ActivationProperty activationProperty)
{    if (activationProperty != null) {        String org, val;                org = activationProperty.getName();        val = interpolate(org);        if (org != val) {            activationProperty.setName(val);        }                org = activationProperty.getValue();        val = interpolate(org);        if (org != val) {            activationProperty.setValue(val);        }    }}
private void maven_f4967_0(ActivationFile activationFile)
{    if (activationFile != null) {        String org, val;                org = activationFile.getMissing();        val = interpolate(org);        if (org != val) {            activationFile.setMissing(val);        }                org = activationFile.getExists();        val = interpolate(org);        if (org != val) {            activationFile.setExists(val);        }    }}
private void maven_f4968_0(ModelBase modelBase)
{    if (modelBase != null) {        visit(modelBase.getModules());        visit(modelBase.getDistributionManagement());        visit(modelBase.getProperties());        visit(modelBase.getDependencyManagement());        for (Dependency dependency : modelBase.getDependencies()) {            visit(dependency);        }        for (Repository repository : modelBase.getRepositories()) {            visit(repository);        }        for (Repository repository : modelBase.getPluginRepositories()) {            visit(repository);        }        visit(modelBase.getReporting());    }}
private void maven_f4969_0(DistributionManagement distributionManagement)
{    if (distributionManagement != null) {        String org, val;                visit(distributionManagement.getRepository());                visit(distributionManagement.getSnapshotRepository());                visit(distributionManagement.getSite());                org = distributionManagement.getDownloadUrl();        val = interpolate(org);        if (org != val) {            distributionManagement.setDownloadUrl(val);        }                visit(distributionManagement.getRelocation());    }}
private void maven_f4970_0(Site site)
{    if (site != null) {        String org, val;                org = site.getId();        val = interpolate(org);        if (org != val) {            site.setId(val);        }                org = site.getName();        val = interpolate(org);        if (org != val) {            site.setName(val);        }                org = site.getUrl();        val = interpolate(org);        if (org != val) {            site.setUrl(val);        }                org = site.getChildSiteUrlInheritAppendPath();        val = interpolate(org);        if (org != val) {            site.setChildSiteUrlInheritAppendPath(val);        }    }}
private void maven_f4971_0(Relocation relocation)
{    if (relocation != null) {        String org, val;                org = relocation.getGroupId();        val = interpolate(org);        if (org != val) {            relocation.setGroupId(val);        }                org = relocation.getArtifactId();        val = interpolate(org);        if (org != val) {            relocation.setArtifactId(val);        }                org = relocation.getVersion();        val = interpolate(org);        if (org != val) {            relocation.setVersion(val);        }                org = relocation.getMessage();        val = interpolate(org);        if (org != val) {            relocation.setMessage(val);        }    }}
private void maven_f4972_0(DependencyManagement dependencyManagement)
{    if (dependencyManagement != null) {                for (Dependency dependency : dependencyManagement.getDependencies()) {            visit(dependency);        }    }}
private void maven_f4973_0(Repository repository)
{    if (repository != null) {        visit((RepositoryBase) repository);        visit(repository.getReleases());        visit(repository.getSnapshots());    }}
private void maven_f4974_0(RepositoryBase repositoryBase)
{    if (repositoryBase != null) {                String orgId = repositoryBase.getId();        String intId = interpolate(orgId);        if (orgId != intId) {            repositoryBase.setId(intId);        }                String orgName = repositoryBase.getName();        String intName = interpolate(orgName);        if (orgName != intName) {            repositoryBase.setName(intName);        }                String orgUrl = repositoryBase.getUrl();        String intUrl = interpolate(orgUrl);        if (orgUrl != intUrl) {            repositoryBase.setUrl(intUrl);        }                String orgLayout = repositoryBase.getLayout();        String intLayout = interpolate(orgLayout);        if (orgLayout != intLayout) {            repositoryBase.setLayout(intLayout);        }    }}
private void maven_f4975_0(RepositoryPolicy repositoryPolicy)
{    if (repositoryPolicy != null) {                String orgEnabled = repositoryPolicy.getEnabled();        String intEnabled = interpolate(orgEnabled);        if (orgEnabled != intEnabled) {            repositoryPolicy.setEnabled(intEnabled);        }                String orgUpdatePolicy = repositoryPolicy.getUpdatePolicy();        String intUpdatePolicy = interpolate(orgUpdatePolicy);        if (orgUpdatePolicy != intUpdatePolicy) {            repositoryPolicy.setUpdatePolicy(intUpdatePolicy);        }                String orgChecksumPolicy = repositoryPolicy.getChecksumPolicy();        String intChecksumPolicy = interpolate(orgChecksumPolicy);        if (orgChecksumPolicy != intChecksumPolicy) {            repositoryPolicy.setChecksumPolicy(intChecksumPolicy);        }    }}
private void maven_f4976_0(Dependency dependency)
{    if (dependency != null) {        String org, val;                org = dependency.getGroupId();        val = interpolate(org);        if (org != val) {            dependency.setGroupId(val);            dependency.clearManagementKey();        }                org = dependency.getArtifactId();        val = interpolate(org);        if (org != val) {            dependency.setArtifactId(val);            dependency.clearManagementKey();        }                org = dependency.getVersion();        val = interpolate(org);        if (org != val) {            dependency.setVersion(val);        }                org = dependency.getType();        val = interpolate(org);        if (org != val) {            dependency.setType(val);            dependency.clearManagementKey();        }                org = dependency.getClassifier();        val = interpolate(org);        if (org != val) {            dependency.setClassifier(val);            dependency.clearManagementKey();        }                org = dependency.getScope();        val = interpolate(org);        if (org != val) {            dependency.setScope(val);        }                org = dependency.getSystemPath();        val = interpolate(org);        if (org != val) {            dependency.setSystemPath(val);        }                for (Exclusion exclusion : dependency.getExclusions()) {            visit(exclusion);        }                org = dependency.getOptional();        val = interpolate(org);        if (org != val) {            dependency.setOptional(val);        }    }}
private void maven_f4977_0(Exclusion exclusion)
{    if (exclusion != null) {        String org, val;                org = exclusion.getGroupId();        val = interpolate(org);        if (org != val) {            exclusion.setGroupId(val);        }                org = exclusion.getArtifactId();        val = interpolate(org);        if (org != val) {            exclusion.setArtifactId(val);        }    }}
private void maven_f4978_0(Reporting reporting)
{    if (reporting != null) {        String org, val;                org = reporting.getExcludeDefaults();        val = interpolate(org);        if (org != val) {            reporting.setExcludeDefaults(val);        }                org = reporting.getOutputDirectory();        val = interpolate(org);        if (org != val) {            reporting.setOutputDirectory(val);        }                for (ReportPlugin plugin : reporting.getPlugins()) {            visit(plugin);        }    }}
private void maven_f4979_0(ReportPlugin plugin)
{    if (plugin != null) {        String org, val;                org = plugin.getInherited();        val = interpolate(org);        if (org != val) {            plugin.setInherited(val);        }                visit((Xpp3Dom) plugin.getConfiguration());                org = plugin.getGroupId();        val = interpolate(org);        if (org != val) {            plugin.setGroupId(val);        }                org = plugin.getArtifactId();        val = interpolate(org);        if (org != val) {            plugin.setArtifactId(val);        }                org = plugin.getVersion();        val = interpolate(org);        if (org != val) {            plugin.setVersion(val);        }                for (ReportSet reportSet : plugin.getReportSets()) {            visit(reportSet);        }    }}
private void maven_f4980_0(ReportSet reportSet)
{    if (reportSet != null) {        String org, val;                org = reportSet.getInherited();        val = interpolate(org);        if (org != val) {            reportSet.setInherited(val);        }                visit((Xpp3Dom) reportSet.getConfiguration());                org = reportSet.getId();        val = interpolate(org);        if (org != val) {            reportSet.setId(val);        }                visit(reportSet.getReports());    }}
private void maven_f4981_0(Properties properties)
{    if (properties != null) {        for (Map.Entry<Object, Object> entry : properties.entrySet()) {            Object v = entry.getValue();            if (v instanceof String) {                String value = (String) v;                String inter = interpolate(value);                if (value != inter) {                    entry.setValue(inter);                }            }        }    }}
private void maven_f4982_0(List<String> list)
{    if (list != null) {        ListIterator<String> it = list.listIterator();        while (it.hasNext()) {            String value = it.next();            String inter = interpolate(value);            if (value != inter) {                it.set(inter);            }        }    }}
private String maven_f4983_0(String value)
{    return interpolator.interpolate(value);}
public Object maven_f4984_0(String expression, Object value)
{    if (value != null && URL_EXPRESSIONS.contains(expression)) {        return normalizer.normalize(value.toString());    }    return null;}
public Model maven_f4985_0(File input, Map<String, ?> options) throws IOException
{    Objects.requireNonNull(input, "input cannot be null");    Model model = read(new FileInputStream(input), options);    model.setPomFile(input);    return model;}
public Model maven_f4986_0(Reader input, Map<String, ?> options) throws IOException
{    Objects.requireNonNull(input, "input cannot be null");    try (final Reader in = input) {        return read(in, isStrict(options), getSource(options));    }}
public Model maven_f4987_0(InputStream input, Map<String, ?> options) throws IOException
{    Objects.requireNonNull(input, "input cannot be null");    try (final XmlStreamReader in = ReaderFactory.newXmlReader(input)) {        return read(in, isStrict(options), getSource(options));    }}
private boolean maven_f4988_0(Map<String, ?> options)
{    Object value = (options != null) ? options.get(IS_STRICT) : null;    return value == null || Boolean.parseBoolean(value.toString());}
private InputSource maven_f4989_0(Map<String, ?> options)
{    Object value = (options != null) ? options.get(INPUT_SOURCE) : null;    return (InputSource) value;}
private Model maven_f4990_0(Reader reader, boolean strict, InputSource source) throws IOException
{    try {        if (source != null) {            return new MavenXpp3ReaderEx().read(reader, strict, source);        } else {            return new MavenXpp3Reader().read(reader, strict);        }    } catch (XmlPullParserException e) {        throw new ModelParseException(e.getMessage(), e.getLineNumber(), e.getColumnNumber(), e);    }}
public void maven_f4991_0(File output, Map<String, Object> options, Model model) throws IOException
{    Objects.requireNonNull(output, "output cannot be null");    Objects.requireNonNull(model, "model cannot be null");    output.getParentFile().mkdirs();    write(WriterFactory.newXmlWriter(output), options, model);}
public void maven_f4992_0(Writer output, Map<String, Object> options, Model model) throws IOException
{    Objects.requireNonNull(output, "output cannot be null");    Objects.requireNonNull(model, "model cannot be null");    try (final Writer out = output) {        new MavenXpp3Writer().write(out, model);    }}
public void maven_f4993_0(OutputStream output, Map<String, Object> options, Model model) throws IOException
{    Objects.requireNonNull(output, "output cannot be null");    Objects.requireNonNull(model, "model cannot be null");    String encoding = model.getModelEncoding();        if (encoding == null || encoding.length() <= 0) {        encoding = "UTF-8";    }    try (final Writer out = new OutputStreamWriter(output, encoding)) {        write(out, options, model);    }}
public int maven_f4994_0()
{    return lineNumber;}
public int maven_f4995_0()
{    return columnNumber;}
public File maven_f4996_0(File projectDirectory)
{    return new File(projectDirectory, "pom.xml");}
public void maven_f4997_0(Model model, ModelBuildingRequest request, ModelProblemCollector problems)
{    merger.mergeManagedDependencies(model);}
public void maven_f4998_0(Model model)
{    DependencyManagement dependencyManagement = model.getDependencyManagement();    if (dependencyManagement != null) {        Map<Object, Dependency> dependencies = new HashMap<>();        Map<Object, Object> context = Collections.emptyMap();        for (Dependency dependency : model.getDependencies()) {            Object key = getDependencyKey(dependency);            dependencies.put(key, dependency);        }        for (Dependency managedDependency : dependencyManagement.getDependencies()) {            Object key = getDependencyKey(managedDependency);            Dependency dependency = dependencies.get(key);            if (dependency != null) {                mergeDependency(dependency, managedDependency, false, context);            }        }    }}
protected void maven_f4999_0(Dependency target, Dependency source, boolean sourceDominant, Map<Object, Object> context)
{}
protected void maven_f5000_0(Dependency target, Dependency source, boolean sourceDominant, Map<Object, Object> context)
{    List<Exclusion> tgt = target.getExclusions();    if (tgt.isEmpty()) {        List<Exclusion> src = source.getExclusions();        for (Exclusion element : src) {            Exclusion clone = element.clone();            target.addExclusion(clone);        }    }}
public void maven_f5001_0(Model model, ModelBuildingRequest request, ModelProblemCollector problems)
{    merger.mergeManagedBuildPlugins(model);}
public void maven_f5002_0(Model model)
{    Build build = model.getBuild();    if (build != null) {        PluginManagement pluginManagement = build.getPluginManagement();        if (pluginManagement != null) {            mergePluginContainerPlugins(build, pluginManagement);        }    }}
private void maven_f5003_0(PluginContainer target, PluginContainer source)
{    List<Plugin> src = source.getPlugins();    if (!src.isEmpty()) {        List<Plugin> tgt = target.getPlugins();        Map<Object, Plugin> managedPlugins = new LinkedHashMap<>(src.size() * 2);        Map<Object, Object> context = Collections.emptyMap();        for (Plugin element : src) {            Object key = getPluginKey(element);            managedPlugins.put(key, element);        }        for (Plugin element : tgt) {            Object key = getPluginKey(element);            Plugin managedPlugin = managedPlugins.get(key);            if (managedPlugin != null) {                mergePlugin(element, managedPlugin, false, context);            }        }    }}
protected void maven_f5004_0(Plugin target, Plugin source, boolean sourceDominant, Map<Object, Object> context)
{    List<PluginExecution> src = source.getExecutions();    if (!src.isEmpty()) {        List<PluginExecution> tgt = target.getExecutions();        Map<Object, PluginExecution> merged = new LinkedHashMap<>((src.size() + tgt.size()) * 2);        for (PluginExecution element : src) {            Object key = getPluginExecutionKey(element);            merged.put(key, element.clone());        }        for (PluginExecution element : tgt) {            Object key = getPluginExecutionKey(element);            PluginExecution existing = merged.get(key);            if (existing != null) {                mergePluginExecution(element, existing, sourceDominant, context);            }            merged.put(key, element);        }        target.setExecutions(new ArrayList<>(merged.values()));    }}
protected void maven_f5005_0(Model target, Model source, boolean sourceDominant, Map<Object, Object> context)
{    context.put(ARTIFACT_ID, target.getArtifactId());    super.mergeModel(target, source, sourceDominant, context);}
protected void maven_f5006_0(Model target, Model source, boolean sourceDominant, Map<Object, Object> context)
{    String src = source.getName();    if (src != null) {        if (sourceDominant) {            target.setName(src);            target.setLocation("name", source.getLocation("name"));        }    }}
protected void maven_f5007_0(Model target, Model source, boolean sourceDominant, Map<Object, Object> context)
{    String src = source.getUrl();    if (src != null) {        if (sourceDominant) {            target.setUrl(src);            target.setLocation("url", source.getLocation("url"));        } else if (target.getUrl() == null) {            target.setUrl(extrapolateChildUrl(src, source.isChildProjectUrlInheritAppendPath(), context));            target.setLocation("url", source.getLocation("url"));        }    }}
protected void maven_f5008_0(Model target, Model source, boolean sourceDominant, Map<Object, Object> context)
{    Organization src = source.getOrganization();    if (src != null) {        Organization tgt = target.getOrganization();        if (tgt == null) {            tgt = new Organization();            tgt.setLocation("", src.getLocation(""));            target.setOrganization(tgt);            mergeOrganization(tgt, src, sourceDominant, context);        }    }}
protected void maven_f5009_0(Model target, Model source, boolean sourceDominant, Map<Object, Object> context)
{    IssueManagement src = source.getIssueManagement();    if (src != null) {        IssueManagement tgt = target.getIssueManagement();        if (tgt == null) {            tgt = new IssueManagement();            tgt.setLocation("", src.getLocation(""));            target.setIssueManagement(tgt);            mergeIssueManagement(tgt, src, sourceDominant, context);        }    }}
protected void maven_f5010_0(Model target, Model source, boolean sourceDominant, Map<Object, Object> context)
{    CiManagement src = source.getCiManagement();    if (src != null) {        CiManagement tgt = target.getCiManagement();        if (tgt == null) {            tgt = new CiManagement();            tgt.setLocation("", src.getLocation(""));            target.setCiManagement(tgt);            mergeCiManagement(tgt, src, sourceDominant, context);        }    }}
protected void maven_f5011_0(Model target, Model source, boolean sourceDominant, Map<Object, Object> context)
{}
protected void maven_f5012_0(Model target, Model source, boolean sourceDominant, Map<Object, Object> context)
{}
protected void maven_f5013_0(Model target, Model source, boolean sourceDominant, Map<Object, Object> context)
{}
protected void maven_f5014_0(Model target, Model source, boolean sourceDominant, Map<Object, Object> context)
{}
protected void maven_f5015_0(Model target, Model source, boolean sourceDominant, Map<Object, Object> context)
{    if (target.getLicenses().isEmpty()) {        target.setLicenses(new ArrayList<>(source.getLicenses()));    }}
protected void maven_f5016_0(Model target, Model source, boolean sourceDominant, Map<Object, Object> context)
{    if (target.getDevelopers().isEmpty()) {        target.setDevelopers(new ArrayList<>(source.getDevelopers()));    }}
protected void maven_f5017_0(Model target, Model source, boolean sourceDominant, Map<Object, Object> context)
{    if (target.getContributors().isEmpty()) {        target.setContributors(new ArrayList<>(source.getContributors()));    }}
protected void maven_f5018_0(Model target, Model source, boolean sourceDominant, Map<Object, Object> context)
{    if (target.getMailingLists().isEmpty()) {        target.setMailingLists(new ArrayList<>(source.getMailingLists()));    }}
protected void maven_f5019_0(ModelBase target, ModelBase source, boolean sourceDominant, Map<Object, Object> context)
{    List<String> src = source.getModules();    if (!src.isEmpty() && sourceDominant) {        List<Integer> indices = new ArrayList<>();        List<String> tgt = target.getModules();        Set<String> excludes = new LinkedHashSet<>(tgt);        List<String> merged = new ArrayList<>(tgt.size() + src.size());        merged.addAll(tgt);        for (int i = 0, n = tgt.size(); i < n; i++) {            indices.add(i);        }        for (int i = 0, n = src.size(); i < n; i++) {            String s = src.get(i);            if (!excludes.contains(s)) {                merged.add(s);                indices.add(~i);            }        }        target.setModules(merged);        target.setLocation("modules", InputLocation.merge(target.getLocation("modules"), source.getLocation("modules"), indices));    }}
protected void maven_f5020_0(ModelBase target, ModelBase source, boolean sourceDominant, Map<Object, Object> context)
{    List<Repository> src = source.getRepositories();    if (!src.isEmpty()) {        List<Repository> tgt = target.getRepositories();        Map<Object, Repository> merged = new LinkedHashMap<>((src.size() + tgt.size()) * 2);        List<Repository> dominant, recessive;        if (sourceDominant) {            dominant = src;            recessive = tgt;        } else {            dominant = tgt;            recessive = src;        }        for (Repository element : dominant) {            Object key = getRepositoryKey(element);            merged.put(key, element);        }        for (Repository element : recessive) {            Object key = getRepositoryKey(element);            if (!merged.containsKey(key)) {                merged.put(key, element);            }        }        target.setRepositories(new ArrayList<>(merged.values()));    }}
protected void maven_f5021_0(ModelBase target, ModelBase source, boolean sourceDominant, Map<Object, Object> context)
{    List<Repository> src = source.getPluginRepositories();    if (!src.isEmpty()) {        List<Repository> tgt = target.getPluginRepositories();        Map<Object, Repository> merged = new LinkedHashMap<>((src.size() + tgt.size()) * 2);        List<Repository> dominant, recessive;        if (sourceDominant) {            dominant = src;            recessive = tgt;        } else {            dominant = tgt;            recessive = src;        }        for (Repository element : dominant) {            Object key = getRepositoryKey(element);            merged.put(key, element);        }        for (Repository element : recessive) {            Object key = getRepositoryKey(element);            if (!merged.containsKey(key)) {                merged.put(key, element);            }        }        target.setPluginRepositories(new ArrayList<>(merged.values()));    }}
protected void maven_f5022_0(BuildBase target, BuildBase source, boolean sourceDominant, Map<Object, Object> context)
{    List<String> src = source.getFilters();    if (!src.isEmpty()) {        List<String> tgt = target.getFilters();        Set<String> excludes = new LinkedHashSet<>(tgt);        List<String> merged = new ArrayList<>(tgt.size() + src.size());        merged.addAll(tgt);        for (String s : src) {            if (!excludes.contains(s)) {                merged.add(s);            }        }        target.setFilters(merged);    }}
protected void maven_f5023_0(BuildBase target, BuildBase source, boolean sourceDominant, Map<Object, Object> context)
{    if (sourceDominant || target.getResources().isEmpty()) {        super.mergeBuildBase_Resources(target, source, sourceDominant, context);    }}
protected void maven_f5024_0(BuildBase target, BuildBase source, boolean sourceDominant, Map<Object, Object> context)
{    if (sourceDominant || target.getTestResources().isEmpty()) {        super.mergeBuildBase_TestResources(target, source, sourceDominant, context);    }}
protected void maven_f5025_0(DistributionManagement target, DistributionManagement source, boolean sourceDominant, Map<Object, Object> context)
{    DeploymentRepository src = source.getRepository();    if (src != null) {        DeploymentRepository tgt = target.getRepository();        if (sourceDominant || tgt == null) {            tgt = new DeploymentRepository();            tgt.setLocation("", src.getLocation(""));            target.setRepository(tgt);            mergeDeploymentRepository(tgt, src, sourceDominant, context);        }    }}
protected void maven_f5026_0(DistributionManagement target, DistributionManagement source, boolean sourceDominant, Map<Object, Object> context)
{    DeploymentRepository src = source.getSnapshotRepository();    if (src != null) {        DeploymentRepository tgt = target.getSnapshotRepository();        if (sourceDominant || tgt == null) {            tgt = new DeploymentRepository();            tgt.setLocation("", src.getLocation(""));            target.setSnapshotRepository(tgt);            mergeDeploymentRepository(tgt, src, sourceDominant, context);        }    }}
protected void maven_f5027_0(DistributionManagement target, DistributionManagement source, boolean sourceDominant, Map<Object, Object> context)
{    Site src = source.getSite();    if (src != null) {        Site tgt = target.getSite();        if (sourceDominant || tgt == null || isSiteEmpty(tgt)) {            if (tgt == null) {                tgt = new Site();            }            tgt.setLocation("", src.getLocation(""));            target.setSite(tgt);            mergeSite(tgt, src, sourceDominant, context);        }        mergeSite_ChildSiteUrlInheritAppendPath(tgt, src, sourceDominant, context);    }}
protected void maven_f5028_0(Site target, Site source, boolean sourceDominant, Map<Object, Object> context)
{    mergeSite_Id(target, source, sourceDominant, context);    mergeSite_Name(target, source, sourceDominant, context);    mergeSite_Url(target, source, sourceDominant, context);}
protected boolean maven_f5029_0(Site site)
{    return StringUtils.isEmpty(site.getId()) && StringUtils.isEmpty(site.getName()) && StringUtils.isEmpty(site.getUrl());}
protected void maven_f5030_0(Site target, Site source, boolean sourceDominant, Map<Object, Object> context)
{    String src = source.getUrl();    if (src != null) {        if (sourceDominant) {            target.setUrl(src);            target.setLocation("url", source.getLocation("url"));        } else if (target.getUrl() == null) {            target.setUrl(extrapolateChildUrl(src, source.isChildSiteUrlInheritAppendPath(), context));            target.setLocation("url", source.getLocation("url"));        }    }}
protected void maven_f5031_0(Scm target, Scm source, boolean sourceDominant, Map<Object, Object> context)
{    String src = source.getUrl();    if (src != null) {        if (sourceDominant) {            target.setUrl(src);            target.setLocation("url", source.getLocation("url"));        } else if (target.getUrl() == null) {            target.setUrl(extrapolateChildUrl(src, source.isChildScmUrlInheritAppendPath(), context));            target.setLocation("url", source.getLocation("url"));        }    }}
protected void maven_f5032_0(Scm target, Scm source, boolean sourceDominant, Map<Object, Object> context)
{    String src = source.getConnection();    if (src != null) {        if (sourceDominant) {            target.setConnection(src);            target.setLocation("connection", source.getLocation("connection"));        } else if (target.getConnection() == null) {            target.setConnection(extrapolateChildUrl(src, source.isChildScmConnectionInheritAppendPath(), context));            target.setLocation("connection", source.getLocation("connection"));        }    }}
protected void maven_f5033_0(Scm target, Scm source, boolean sourceDominant, Map<Object, Object> context)
{    String src = source.getDeveloperConnection();    if (src != null) {        if (sourceDominant) {            target.setDeveloperConnection(src);            target.setLocation("developerConnection", source.getLocation("developerConnection"));        } else if (target.getDeveloperConnection() == null) {            String e = extrapolateChildUrl(src, source.isChildScmDeveloperConnectionInheritAppendPath(), context);            target.setDeveloperConnection(e);            target.setLocation("developerConnection", source.getLocation("developerConnection"));        }    }}
protected void maven_f5034_0(Plugin target, Plugin source, boolean sourceDominant, Map<Object, Object> context)
{    List<PluginExecution> src = source.getExecutions();    if (!src.isEmpty()) {        List<PluginExecution> tgt = target.getExecutions();        Map<Object, PluginExecution> merged = new LinkedHashMap<>((src.size() + tgt.size()) * 2);        for (PluginExecution element : src) {            if (sourceDominant || (element.getInherited() != null ? element.isInherited() : source.isInherited())) {                Object key = getPluginExecutionKey(element);                merged.put(key, element);            }        }        for (PluginExecution element : tgt) {            Object key = getPluginExecutionKey(element);            PluginExecution existing = merged.get(key);            if (existing != null) {                mergePluginExecution(element, existing, sourceDominant, context);            }            merged.put(key, element);        }        target.setExecutions(new ArrayList<>(merged.values()));    }}
protected void maven_f5035_0(PluginExecution target, PluginExecution source, boolean sourceDominant, Map<Object, Object> context)
{    List<String> src = source.getGoals();    if (!src.isEmpty()) {        List<String> tgt = target.getGoals();        Set<String> excludes = new LinkedHashSet<>(tgt);        List<String> merged = new ArrayList<>(tgt.size() + src.size());        merged.addAll(tgt);        for (String s : src) {            if (!excludes.contains(s)) {                merged.add(s);            }        }        target.setGoals(merged);    }}
protected void maven_f5036_0(ReportPlugin target, ReportPlugin source, boolean sourceDominant, Map<Object, Object> context)
{    List<ReportSet> src = source.getReportSets();    if (!src.isEmpty()) {        List<ReportSet> tgt = target.getReportSets();        Map<Object, ReportSet> merged = new LinkedHashMap<>((src.size() + tgt.size()) * 2);        for (ReportSet rset : src) {            if (sourceDominant || (rset.getInherited() != null ? rset.isInherited() : source.isInherited())) {                Object key = getReportSetKey(rset);                merged.put(key, rset);            }        }        for (ReportSet element : tgt) {            Object key = getReportSetKey(element);            ReportSet existing = merged.get(key);            if (existing != null) {                mergeReportSet(element, existing, sourceDominant, context);            }            merged.put(key, element);        }        target.setReportSets(new ArrayList<>(merged.values()));    }}
protected Object maven_f5037_0(Dependency dependency)
{    return dependency.getManagementKey();}
protected Object maven_f5038_0(Plugin plugin)
{    return plugin.getKey();}
protected Object maven_f5039_0(PluginExecution pluginExecution)
{    return pluginExecution.getId();}
protected Object maven_f5040_0(ReportPlugin reportPlugin)
{    return reportPlugin.getKey();}
protected Object maven_f5041_0(ReportSet reportSet)
{    return reportSet.getId();}
protected Object maven_f5042_0(RepositoryBase repositoryBase)
{    return repositoryBase.getId();}
protected Object maven_f5043_0(Extension extension)
{    return extension.getGroupId() + ':' + extension.getArtifactId();}
protected Object maven_f5044_0(Exclusion exclusion)
{    return exclusion.getGroupId() + ':' + exclusion.getArtifactId();}
protected String maven_f5045_0(String parentUrl, boolean appendPath, Map<Object, Object> context)
{    return parentUrl;}
public void maven_f5046_0(Model model, ModelBuildingRequest request, ModelProblemCollector problems)
{    Build build = model.getBuild();    if (build != null) {        List<Plugin> plugins = build.getPlugins();        Map<Object, Plugin> normalized = new LinkedHashMap<>(plugins.size() * 2);        for (Plugin plugin : plugins) {            Object key = plugin.getKey();            Plugin first = normalized.get(key);            if (first != null) {                merger.mergePlugin(plugin, first);            }            normalized.put(key, plugin);        }        if (plugins.size() != normalized.size()) {            build.setPlugins(new ArrayList<>(normalized.values()));        }    }    /*         * NOTE: This is primarily to keep backward-compat with Maven 2.x which did not validate that dependencies are         * unique within a single POM. Upon multiple declarations, 2.x just kept the last one but retained the order of         * the first occurrence. So when we're in lenient/compat mode, we have to deal with such broken POMs and mimic         * the way 2.x works. When we're in strict mode, the removal of duplicates just saves other merging steps from         * aftereffects and bogus error messages.         */    List<Dependency> dependencies = model.getDependencies();    Map<String, Dependency> normalized = new LinkedHashMap<>(dependencies.size() * 2);    for (Dependency dependency : dependencies) {        normalized.put(dependency.getManagementKey(), dependency);    }    if (dependencies.size() != normalized.size()) {        model.setDependencies(new ArrayList<>(normalized.values()));    }}
public void maven_f5047_0(Plugin target, Plugin source)
{    super.mergePlugin(target, source, false, Collections.emptyMap());}
public void maven_f5048_0(Model model, ModelBuildingRequest request, ModelProblemCollector problems)
{    injectDependencyDefaults(model.getDependencies());    Build build = model.getBuild();    if (build != null) {        for (Plugin plugin : build.getPlugins()) {            injectDependencyDefaults(plugin.getDependencies());        }    }}
private void maven_f5049_0(List<Dependency> dependencies)
{    for (Dependency dependency : dependencies) {        if (StringUtils.isEmpty(dependency.getScope())) {                        dependency.setScope("compile");        }    }}
public DefaultModelPathTranslator maven_f5050_0(PathTranslator pathTranslator)
{    this.pathTranslator = pathTranslator;    return this;}
public void maven_f5051_0(Model model, File basedir, ModelBuildingRequest request)
{    if (model == null || basedir == null) {        return;    }    Build build = model.getBuild();    if (build != null) {        build.setDirectory(alignToBaseDirectory(build.getDirectory(), basedir));        build.setSourceDirectory(alignToBaseDirectory(build.getSourceDirectory(), basedir));        build.setTestSourceDirectory(alignToBaseDirectory(build.getTestSourceDirectory(), basedir));        build.setScriptSourceDirectory(alignToBaseDirectory(build.getScriptSourceDirectory(), basedir));        for (Resource resource : build.getResources()) {            resource.setDirectory(alignToBaseDirectory(resource.getDirectory(), basedir));        }        for (Resource resource : build.getTestResources()) {            resource.setDirectory(alignToBaseDirectory(resource.getDirectory(), basedir));        }        if (build.getFilters() != null) {            List<String> filters = new ArrayList<>(build.getFilters().size());            for (String filter : build.getFilters()) {                filters.add(alignToBaseDirectory(filter, basedir));            }            build.setFilters(filters);        }        build.setOutputDirectory(alignToBaseDirectory(build.getOutputDirectory(), basedir));        build.setTestOutputDirectory(alignToBaseDirectory(build.getTestOutputDirectory(), basedir));    }    Reporting reporting = model.getReporting();    if (reporting != null) {        reporting.setOutputDirectory(alignToBaseDirectory(reporting.getOutputDirectory(), basedir));    }}
private String maven_f5052_0(String path, File basedir)
{    return pathTranslator.alignToBaseDirectory(path, basedir);}
public DefaultModelUrlNormalizer maven_f5053_0(UrlNormalizer urlNormalizer)
{    this.urlNormalizer = urlNormalizer;    return this;}
public void maven_f5054_0(Model model, ModelBuildingRequest request)
{    if (model == null) {        return;    }    model.setUrl(normalize(model.getUrl()));    Scm scm = model.getScm();    if (scm != null) {        scm.setUrl(normalize(scm.getUrl()));        scm.setConnection(normalize(scm.getConnection()));        scm.setDeveloperConnection(normalize(scm.getDeveloperConnection()));    }    DistributionManagement dist = model.getDistributionManagement();    if (dist != null) {        Site site = dist.getSite();        if (site != null) {            site.setUrl(normalize(site.getUrl()));        }    }}
private String maven_f5055_0(String url)
{    return urlNormalizer.normalize(url);}
public String maven_f5056_0(String path, File basedir)
{    String result = path;    if (path != null && basedir != null) {        path = path.replace('\\', File.separatorChar).replace('/', File.separatorChar);        File file = new File(path);        if (file.isAbsolute()) {                        result = file.getPath();        } else if (file.getPath().startsWith(File.separator)) {                        result = file.getAbsolutePath();        } else {                        result = new File(new File(basedir, path).toURI().normalize()).getAbsolutePath();        }    }    return result;}
public String maven_f5057_0(String url)
{    String result = url;    if (result != null) {        while (true) {            int idx = result.indexOf("/../");            if (idx < 0) {                break;            } else if (idx == 0) {                result = result.substring(3);                continue;            }            int parent = idx - 1;            while (parent >= 0 && result.charAt(parent) == '/') {                parent--;            }            parent = result.lastIndexOf('/', parent);            if (parent < 0) {                result = result.substring(idx + 4);            } else {                result = result.substring(0, parent) + result.substring(idx + 3);            }        }    }    return result;}
public void maven_f5058_0(Model model, ModelBuildingRequest request, ModelProblemCollector problems)
{    Build build = model.getBuild();    if (build != null) {        expand(build.getPlugins());        PluginManagement pluginManagement = build.getPluginManagement();        if (pluginManagement != null) {            expand(pluginManagement.getPlugins());        }    }}
private void maven_f5059_0(List<Plugin> plugins)
{    for (Plugin plugin : plugins) {        Xpp3Dom pluginConfiguration = (Xpp3Dom) plugin.getConfiguration();        if (pluginConfiguration != null) {            for (PluginExecution execution : plugin.getExecutions()) {                Xpp3Dom executionConfiguration = (Xpp3Dom) execution.getConfiguration();                executionConfiguration = Xpp3Dom.mergeXpp3Dom(executionConfiguration, new Xpp3Dom(pluginConfiguration));                execution.setConfiguration(executionConfiguration);            }        }    }}
public void maven_f5060_0(Model model, ModelBuildingRequest request, ModelProblemCollector problems)
{    Reporting reporting = model.getReporting();    if (reporting != null) {        for (ReportPlugin reportPlugin : reporting.getPlugins()) {            Xpp3Dom parentDom = (Xpp3Dom) reportPlugin.getConfiguration();            if (parentDom != null) {                for (ReportSet execution : reportPlugin.getReportSets()) {                    Xpp3Dom childDom = (Xpp3Dom) execution.getConfiguration();                    childDom = Xpp3Dom.mergeXpp3Dom(childDom, new Xpp3Dom(parentDom));                    execution.setConfiguration(childDom);                }            }        }    }}
public void maven_f5061_0(Model model, ModelBuildingRequest request, ModelProblemCollector problems)
{    Reporting reporting = model.getReporting();    if (reporting == null) {        return;    }    Build build = model.getBuild();    if (build == null) {        build = new Build();        model.setBuild(build);        model.setLocation("build", location);    }    Plugin sitePlugin = findSitePlugin(build);    if (sitePlugin == null) {        sitePlugin = new Plugin();        sitePlugin.setArtifactId("maven-site-plugin");        sitePlugin.setLocation("artifactId", location);        PluginManagement pluginManagement = build.getPluginManagement();        if (pluginManagement == null) {            pluginManagement = new PluginManagement();            build.setPluginManagement(pluginManagement);        }        pluginManagement.addPlugin(sitePlugin);    }    Xpp3Dom configuration = (Xpp3Dom) sitePlugin.getConfiguration();    if (configuration == null) {        configuration = new Xpp3Dom("configuration", location);        sitePlugin.setConfiguration(configuration);    }    Xpp3Dom reportPlugins = configuration.getChild("reportPlugins");    if (reportPlugins != null) {                        problems.add(new ModelProblemCollectorRequest(Severity.WARNING, Version.BASE).setMessage("Reporting configuration should be done in <reporting> section, " + "not in maven-site-plugin <configuration> as reportPlugins parameter.").setLocation(sitePlugin.getLocation("configuration")));        return;    }    if (configuration.getChild("outputDirectory") == null) {        addDom(configuration, "outputDirectory", reporting.getOutputDirectory(), reporting.getLocation("outputDirectory"));    }    reportPlugins = new Xpp3Dom("reportPlugins", location);    configuration.addChild(reportPlugins);    boolean hasMavenProjectInfoReportsPlugin = false;    for (ReportPlugin plugin : reporting.getPlugins()) {        Xpp3Dom reportPlugin = convert(plugin);        reportPlugins.addChild(reportPlugin);        if (!reporting.isExcludeDefaults() && !hasMavenProjectInfoReportsPlugin && "org.apache.maven.plugins".equals(plugin.getGroupId()) && "maven-project-info-reports-plugin".equals(plugin.getArtifactId())) {            hasMavenProjectInfoReportsPlugin = true;        }    }    if (!reporting.isExcludeDefaults() && !hasMavenProjectInfoReportsPlugin) {        Xpp3Dom dom = new Xpp3Dom("reportPlugin", location);        addDom(dom, "groupId", "org.apache.maven.plugins");        addDom(dom, "artifactId", "maven-project-info-reports-plugin");        reportPlugins.addChild(dom);    }}
private Plugin maven_f5062_0(Build build)
{    for (Plugin plugin : build.getPlugins()) {        if (isSitePlugin(plugin)) {            return plugin;        }    }    PluginManagement pluginManagement = build.getPluginManagement();    if (pluginManagement != null) {        for (Plugin plugin : pluginManagement.getPlugins()) {            if (isSitePlugin(plugin)) {                return plugin;            }        }    }    return null;}
private boolean maven_f5063_0(Plugin plugin)
{    return "maven-site-plugin".equals(plugin.getArtifactId()) && "org.apache.maven.plugins".equals(plugin.getGroupId());}
private Xpp3Dom maven_f5064_0(ReportPlugin plugin)
{    Xpp3Dom dom = new Xpp3Dom("reportPlugin", plugin.getLocation(""));    addDom(dom, "groupId", plugin.getGroupId(), plugin.getLocation("groupId"));    addDom(dom, "artifactId", plugin.getArtifactId(), plugin.getLocation("artifactId"));    addDom(dom, "version", plugin.getVersion(), plugin.getLocation("version"));    Xpp3Dom configuration = (Xpp3Dom) plugin.getConfiguration();    if (configuration != null) {        configuration = new Xpp3Dom(configuration);        dom.addChild(configuration);    }    if (!plugin.getReportSets().isEmpty()) {        Xpp3Dom reportSets = new Xpp3Dom("reportSets", plugin.getLocation("reportSets"));        for (ReportSet reportSet : plugin.getReportSets()) {            Xpp3Dom rs = convert(reportSet);            reportSets.addChild(rs);        }        dom.addChild(reportSets);    }    return dom;}
private Xpp3Dom maven_f5065_0(ReportSet reportSet)
{    Xpp3Dom dom = new Xpp3Dom("reportSet", reportSet.getLocation(""));    InputLocation idLocation = reportSet.getLocation("id");    addDom(dom, "id", reportSet.getId(), idLocation == null ? location : idLocation);    Xpp3Dom configuration = (Xpp3Dom) reportSet.getConfiguration();    if (configuration != null) {        configuration = new Xpp3Dom(configuration);        dom.addChild(configuration);    }    if (!reportSet.getReports().isEmpty()) {        InputLocation location = reportSet.getLocation("reports");        Xpp3Dom reports = new Xpp3Dom("reports", location);        int n = 0;        for (String report : reportSet.getReports()) {            addDom(reports, "report", report, (location == null) ? null : location.getLocation(n++));        }        dom.addChild(reports);    }    return dom;}
private void maven_f5066_0(Xpp3Dom parent, String childName, String childValue)
{    addDom(parent, childName, childValue, location);}
private void maven_f5067_0(Xpp3Dom parent, String childName, String childValue, InputLocation location)
{    if (StringUtils.isNotEmpty(childValue)) {        parent.addChild(newDom(childName, childValue, location));    }}
private Xpp3Dom maven_f5068_0(String name, String value, InputLocation location)
{    Xpp3Dom dom = new Xpp3Dom(name, location);    dom.setValue(value);    return dom;}
public FileProfileActivator maven_f5069_0(PathTranslator pathTranslator)
{    this.pathTranslator = pathTranslator;    return this;}
public boolean maven_f5070_0(Profile profile, ProfileActivationContext context, ModelProblemCollector problems)
{    Activation activation = profile.getActivation();    if (activation == null) {        return false;    }    ActivationFile file = activation.getFile();    if (file == null) {        return false;    }    String path;    boolean missing;    if (StringUtils.isNotEmpty(file.getExists())) {        path = file.getExists();        missing = false;    } else if (StringUtils.isNotEmpty(file.getMissing())) {        path = file.getMissing();        missing = true;    } else {        return false;    }    RegexBasedInterpolator interpolator = new RegexBasedInterpolator();    final File basedir = context.getProjectDirectory();    if (basedir != null) {        interpolator.addValueSource(new AbstractValueSource(false) {            @Override            public Object getValue(String expression) {                /*                     * NOTE: We intentionally only support ${basedir} and not ${project.basedir} as the latter form                     * would suggest that other project.* expressions can be used which is however beyond the design.                     */                if ("basedir".equals(expression)) {                    return basedir.getAbsolutePath();                }                return null;            }        });    } else if (path.contains("${basedir}")) {        return false;    }    interpolator.addValueSource(new MapBasedValueSource(context.getProjectProperties()));    interpolator.addValueSource(new MapBasedValueSource(context.getUserProperties()));    interpolator.addValueSource(new MapBasedValueSource(context.getSystemProperties()));    try {        path = interpolator.interpolate(path, "");    } catch (Exception e) {        problems.add(new ModelProblemCollectorRequest(Severity.ERROR, Version.BASE).setMessage("Failed to interpolate file location " + path + " for profile " + profile.getId() + ": " + e.getMessage()).setLocation(file.getLocation(missing ? "missing" : "exists")).setException(e));        return false;    }    path = pathTranslator.alignToBaseDirectory(path, basedir);        if (missing) {        file.setMissing(path);    } else {        file.setExists(path);    }    File f = new File(path);    if (!f.isAbsolute()) {        return false;    }    boolean fileExists = f.exists();    return missing ? !fileExists : fileExists;}
public Object maven_f5071_0(String expression)
{    /*                     * NOTE: We intentionally only support ${basedir} and not ${project.basedir} as the latter form                     * would suggest that other project.* expressions can be used which is however beyond the design.                     */    if ("basedir".equals(expression)) {        return basedir.getAbsolutePath();    }    return null;}
public boolean maven_f5072_0(Profile profile, ProfileActivationContext context, ModelProblemCollector problems)
{    Activation activation = profile.getActivation();    if (activation == null) {        return false;    }    ActivationFile file = activation.getFile();    if (file == null) {        return false;    }    return true;}
public boolean maven_f5073_0(Profile profile, ProfileActivationContext context, ModelProblemCollector problems)
{    Activation activation = profile.getActivation();    if (activation == null) {        return false;    }    String jdk = activation.getJdk();    if (jdk == null) {        return false;    }    String version = context.getSystemProperties().get("java.version");    if (version == null || version.length() <= 0) {        problems.add(new ModelProblemCollectorRequest(Severity.ERROR, Version.BASE).setMessage("Failed to determine Java version for profile " + profile.getId()).setLocation(activation.getLocation("jdk")));        return false;    }    if (jdk.startsWith("!")) {        return !version.startsWith(jdk.substring(1));    } else if (isRange(jdk)) {        return isInRange(version, getRange(jdk));    } else {        return version.startsWith(jdk);    }}
public boolean maven_f5074_0(Profile profile, ProfileActivationContext context, ModelProblemCollector problems)
{    Activation activation = profile.getActivation();    if (activation == null) {        return false;    }    String jdk = activation.getJdk();    if (jdk == null) {        return false;    }    return true;}
private static boolean maven_f5075_0(String value, List<RangeValue> range)
{    int leftRelation = getRelationOrder(value, range.get(0), true);    if (leftRelation == 0) {        return true;    }    if (leftRelation < 0) {        return false;    }    return getRelationOrder(value, range.get(1), false) <= 0;}
private static int maven_f5076_0(String value, RangeValue rangeValue, boolean isLeft)
{    if (rangeValue.value.length() <= 0) {        return isLeft ? 1 : -1;    }    value = value.replaceAll("[^0-9\\.\\-\\_]", "");    List<String> valueTokens = new ArrayList<>(Arrays.asList(value.split("[\\.\\-\\_]")));    List<String> rangeValueTokens = new ArrayList<>(Arrays.asList(rangeValue.value.split("\\.")));    addZeroTokens(valueTokens, 3);    addZeroTokens(rangeValueTokens, 3);    for (int i = 0; i < 3; i++) {        int x = Integer.parseInt(valueTokens.get(i));        int y = Integer.parseInt(rangeValueTokens.get(i));        if (x < y) {            return -1;        } else if (x > y) {            return 1;        }    }    if (!rangeValue.closed) {        return isLeft ? -1 : 1;    }    return 0;}
private static void maven_f5077_0(List<String> tokens, int max)
{    while (tokens.size() < max) {        tokens.add("0");    }}
private static boolean maven_f5078_0(String value)
{    return value.startsWith("[") || value.startsWith("(");}
private static List<RangeValue> maven_f5079_0(String range)
{    List<RangeValue> ranges = new ArrayList<>();    for (String token : range.split(",")) {        if (token.startsWith("[")) {            ranges.add(new RangeValue(token.replace("[", ""), true));        } else if (token.startsWith("(")) {            ranges.add(new RangeValue(token.replace("(", ""), false));        } else if (token.endsWith("]")) {            ranges.add(new RangeValue(token.replace("]", ""), true));        } else if (token.endsWith(")")) {            ranges.add(new RangeValue(token.replace(")", ""), false));        } else if (token.length() <= 0) {            ranges.add(new RangeValue("", false));        }    }    if (ranges.size() < 2) {        ranges.add(new RangeValue("99999999", false));    }    return ranges;}
public String maven_f5080_0()
{    return value;}
public boolean maven_f5081_0(Profile profile, ProfileActivationContext context, ModelProblemCollector problems)
{    Activation activation = profile.getActivation();    if (activation == null) {        return false;    }    ActivationOS os = activation.getOs();    if (os == null) {        return false;    }    boolean active = ensureAtLeastOneNonNull(os);    if (active && os.getFamily() != null) {        active = determineFamilyMatch(os.getFamily());    }    if (active && os.getName() != null) {        active = determineNameMatch(os.getName());    }    if (active && os.getArch() != null) {        active = determineArchMatch(os.getArch());    }    if (active && os.getVersion() != null) {        active = determineVersionMatch(os.getVersion());    }    return active;}
public boolean maven_f5082_0(Profile profile, ProfileActivationContext context, ModelProblemCollector problems)
{    Activation activation = profile.getActivation();    if (activation == null) {        return false;    }    ActivationOS os = activation.getOs();    if (os == null) {        return false;    }    return true;}
private boolean maven_f5083_0(ActivationOS os)
{    return os.getArch() != null || os.getFamily() != null || os.getName() != null || os.getVersion() != null;}
private boolean maven_f5084_0(String version)
{    String test = version;    boolean reverse = false;    if (test.startsWith("!")) {        reverse = true;        test = test.substring(1);    }    boolean result = Os.isVersion(test);    return reverse ? !result : result;}
private boolean maven_f5085_0(String arch)
{    String test = arch;    boolean reverse = false;    if (test.startsWith("!")) {        reverse = true;        test = test.substring(1);    }    boolean result = Os.isArch(test);    return reverse ? !result : result;}
private boolean maven_f5086_0(String name)
{    String test = name;    boolean reverse = false;    if (test.startsWith("!")) {        reverse = true;        test = test.substring(1);    }    boolean result = Os.isName(test);    return reverse ? !result : result;}
private boolean maven_f5087_0(String family)
{    String test = family;    boolean reverse = false;    if (test.startsWith("!")) {        reverse = true;        test = test.substring(1);    }    boolean result = Os.isFamily(test);    return reverse ? !result : result;}
public boolean maven_f5088_0(Profile profile, ProfileActivationContext context, ModelProblemCollector problems)
{    Activation activation = profile.getActivation();    if (activation == null) {        return false;    }    ActivationProperty property = activation.getProperty();    if (property == null) {        return false;    }    String name = property.getName();    boolean reverseName = false;    if (name != null && name.startsWith("!")) {        reverseName = true;        name = name.substring(1);    }    if (name == null || name.length() <= 0) {        problems.add(new ModelProblemCollectorRequest(Severity.ERROR, Version.BASE).setMessage("The property name is required to activate the profile " + profile.getId()).setLocation(property.getLocation("")));        return false;    }    String sysValue = context.getUserProperties().get(name);    if (sysValue == null) {        sysValue = context.getSystemProperties().get(name);    }    String propValue = property.getValue();    if (StringUtils.isNotEmpty(propValue)) {        boolean reverseValue = false;        if (propValue.startsWith("!")) {            reverseValue = true;            propValue = propValue.substring(1);        }                boolean result = propValue.equals(sysValue);        return reverseValue ? !result : result;    } else {        boolean result = StringUtils.isNotEmpty(sysValue);        return reverseName ? !result : result;    }}
public boolean maven_f5089_0(Profile profile, ProfileActivationContext context, ModelProblemCollector problems)
{    Activation activation = profile.getActivation();    if (activation == null) {        return false;    }    ActivationProperty property = activation.getProperty();    if (property == null) {        return false;    }    return true;}
public List<String> maven_f5090_0()
{    return activeProfileIds;}
public DefaultProfileActivationContext maven_f5091_0(List<String> activeProfileIds)
{    if (activeProfileIds != null) {        this.activeProfileIds = Collections.unmodifiableList(activeProfileIds);    } else {        this.activeProfileIds = Collections.emptyList();    }    return this;}
public List<String> maven_f5092_0()
{    return inactiveProfileIds;}
public DefaultProfileActivationContext maven_f5093_0(List<String> inactiveProfileIds)
{    if (inactiveProfileIds != null) {        this.inactiveProfileIds = Collections.unmodifiableList(inactiveProfileIds);    } else {        this.inactiveProfileIds = Collections.emptyList();    }    return this;}
public Map<String, String> maven_f5094_0()
{    return systemProperties;}
public DefaultProfileActivationContext maven_f5095_0(Properties systemProperties)
{    if (systemProperties != null) {        this.systemProperties = Collections.unmodifiableMap((Map) systemProperties);    } else {        this.systemProperties = Collections.emptyMap();    }    return this;}
public DefaultProfileActivationContext maven_f5096_0(Map<String, String> systemProperties)
{    if (systemProperties != null) {        this.systemProperties = Collections.unmodifiableMap(systemProperties);    } else {        this.systemProperties = Collections.emptyMap();    }    return this;}
public Map<String, String> maven_f5097_0()
{    return userProperties;}
public DefaultProfileActivationContext maven_f5098_0(Properties userProperties)
{    if (userProperties != null) {        this.userProperties = Collections.unmodifiableMap((Map) userProperties);    } else {        this.userProperties = Collections.emptyMap();    }    return this;}
public DefaultProfileActivationContext maven_f5099_0(Map<String, String> userProperties)
{    if (userProperties != null) {        this.userProperties = Collections.unmodifiableMap(userProperties);    } else {        this.userProperties = Collections.emptyMap();    }    return this;}
public File maven_f5100_0()
{    return projectDirectory;}
public DefaultProfileActivationContext maven_f5101_0(File projectDirectory)
{    this.projectDirectory = projectDirectory;    return this;}
public Map<String, String> maven_f5102_0()
{    return projectProperties;}
public DefaultProfileActivationContext maven_f5103_0(Properties projectProperties)
{    if (projectProperties != null) {        this.projectProperties = Collections.unmodifiableMap(toMap(projectProperties));    } else {        this.projectProperties = Collections.emptyMap();    }    return this;}
private Map<String, String> maven_f5104_0(Properties properties)
{    if (properties == null) {        return Collections.emptyMap();    }    Map<String, String> map = new HashMap<>();    Enumeration keys = properties.keys();    while (keys.hasMoreElements()) {        String key = (String) keys.nextElement();        map.put(key, properties.getProperty(key));    }    return map;}
public void maven_f5105_0(Model model, Profile profile, ModelBuildingRequest request, ModelProblemCollector problems)
{    if (profile != null) {        merger.mergeModelBase(model, profile);        if (profile.getBuild() != null) {            if (model.getBuild() == null) {                model.setBuild(new Build());            }            merger.mergeBuildBase(model.getBuild(), profile.getBuild());        }    }}
public void maven_f5106_0(ModelBase target, ModelBase source)
{    mergeModelBase(target, source, true, Collections.emptyMap());}
public void maven_f5107_0(BuildBase target, BuildBase source)
{    mergeBuildBase(target, source, true, Collections.emptyMap());}
protected void maven_f5108_0(PluginContainer target, PluginContainer source, boolean sourceDominant, Map<Object, Object> context)
{    List<Plugin> src = source.getPlugins();    if (!src.isEmpty()) {        List<Plugin> tgt = target.getPlugins();        Map<Object, Plugin> master = new LinkedHashMap<>(tgt.size() * 2);        for (Plugin element : tgt) {            Object key = getPluginKey(element);            master.put(key, element);        }        Map<Object, List<Plugin>> predecessors = new LinkedHashMap<>();        List<Plugin> pending = new ArrayList<>();        for (Plugin element : src) {            Object key = getPluginKey(element);            Plugin existing = master.get(key);            if (existing != null) {                mergePlugin(existing, element, sourceDominant, context);                if (!pending.isEmpty()) {                    predecessors.put(key, pending);                    pending = new ArrayList<>();                }            } else {                pending.add(element);            }        }        List<Plugin> result = new ArrayList<>(src.size() + tgt.size());        for (Map.Entry<Object, Plugin> entry : master.entrySet()) {            List<Plugin> pre = predecessors.get(entry.getKey());            if (pre != null) {                result.addAll(pre);            }            result.add(entry.getValue());        }        result.addAll(pending);        target.setPlugins(result);    }}
protected void maven_f5109_0(Plugin target, Plugin source, boolean sourceDominant, Map<Object, Object> context)
{    List<PluginExecution> src = source.getExecutions();    if (!src.isEmpty()) {        List<PluginExecution> tgt = target.getExecutions();        Map<Object, PluginExecution> merged = new LinkedHashMap<>((src.size() + tgt.size()) * 2);        for (PluginExecution element : tgt) {            Object key = getPluginExecutionKey(element);            merged.put(key, element);        }        for (PluginExecution element : src) {            Object key = getPluginExecutionKey(element);            PluginExecution existing = merged.get(key);            if (existing != null) {                mergePluginExecution(existing, element, sourceDominant, context);            } else {                merged.put(key, element);            }        }        target.setExecutions(new ArrayList<>(merged.values()));    }}
protected void maven_f5110_0(Reporting target, Reporting source, boolean sourceDominant, Map<Object, Object> context)
{    List<ReportPlugin> src = source.getPlugins();    if (!src.isEmpty()) {        List<ReportPlugin> tgt = target.getPlugins();        Map<Object, ReportPlugin> merged = new LinkedHashMap<>((src.size() + tgt.size()) * 2);        for (ReportPlugin element : tgt) {            Object key = getReportPluginKey(element);            merged.put(key, element);        }        for (ReportPlugin element : src) {            Object key = getReportPluginKey(element);            ReportPlugin existing = merged.get(key);            if (existing == null) {                merged.put(key, element);            } else {                mergeReportPlugin(existing, element, sourceDominant, context);            }        }        target.setPlugins(new ArrayList<>(merged.values()));    }}
protected void maven_f5111_0(ReportPlugin target, ReportPlugin source, boolean sourceDominant, Map<Object, Object> context)
{    List<ReportSet> src = source.getReportSets();    if (!src.isEmpty()) {        List<ReportSet> tgt = target.getReportSets();        Map<Object, ReportSet> merged = new LinkedHashMap<>((src.size() + tgt.size()) * 2);        for (ReportSet element : tgt) {            Object key = getReportSetKey(element);            merged.put(key, element);        }        for (ReportSet element : src) {            Object key = getReportSetKey(element);            ReportSet existing = merged.get(key);            if (existing != null) {                mergeReportSet(existing, element, sourceDominant, context);            } else {                merged.put(key, element);            }        }        target.setReportSets(new ArrayList<>(merged.values()));    }}
public DefaultProfileSelector maven_f5112_0(ProfileActivator profileActivator)
{    if (profileActivator != null) {        activators.add(profileActivator);    }    return this;}
public List<Profile> maven_f5113_0(Collection<Profile> profiles, ProfileActivationContext context, ModelProblemCollector problems)
{    Collection<String> activatedIds = new HashSet<>(context.getActiveProfileIds());    Collection<String> deactivatedIds = new HashSet<>(context.getInactiveProfileIds());    List<Profile> activeProfiles = new ArrayList<>(profiles.size());    List<Profile> activePomProfilesByDefault = new ArrayList<>();    boolean activatedPomProfileNotByDefault = false;    for (Profile profile : profiles) {        if (!deactivatedIds.contains(profile.getId())) {            if (activatedIds.contains(profile.getId()) || isActive(profile, context, problems)) {                activeProfiles.add(profile);                if (Profile.SOURCE_POM.equals(profile.getSource())) {                    activatedPomProfileNotByDefault = true;                }            } else if (isActiveByDefault(profile)) {                if (Profile.SOURCE_POM.equals(profile.getSource())) {                    activePomProfilesByDefault.add(profile);                } else {                    activeProfiles.add(profile);                }            }        }    }    if (!activatedPomProfileNotByDefault) {        activeProfiles.addAll(activePomProfilesByDefault);    }    return activeProfiles;}
private boolean maven_f5114_0(Profile profile, ProfileActivationContext context, ModelProblemCollector problems)
{    boolean isActive = false;    for (ProfileActivator activator : activators) {        if (activator.presentInConfig(profile, context, problems)) {            isActive = true;        }    }    for (ProfileActivator activator : activators) {        try {            if (activator.presentInConfig(profile, context, problems)) {                isActive &= activator.isActive(profile, context, problems);            }        } catch (RuntimeException e) {            problems.add(new ModelProblemCollectorRequest(Severity.ERROR, Version.BASE).setMessage("Failed to determine activation for profile " + profile.getId()).setLocation(profile.getLocation("")).setException(e));            return false;        }    }    return isActive;}
private boolean maven_f5115_0(Profile profile)
{    Activation activation = profile.getActivation();    return activation != null && activation.isActiveByDefault();}
public Repository maven_f5116_0()
{    return repository;}
public String maven_f5117_0()
{    return groupId;}
public String maven_f5118_0()
{    return artifactId;}
public String maven_f5119_0()
{    return version;}
public DefaultSuperPomProvider maven_f5120_0(ModelProcessor modelProcessor)
{    this.modelProcessor = modelProcessor;    return this;}
public Model maven_f5121_0(String version)
{    if (superModel == null) {        String resource = "/org/apache/maven/model/pom-" + version + ".xml";        InputStream is = getClass().getResourceAsStream(resource);        if (is == null) {            throw new IllegalStateException("The super POM " + resource + " was not found" + ", please verify the integrity of your Maven installation");        }        try {            Map<String, Object> options = new HashMap<>();            options.put("xml:4.0.0", "xml:4.0.0");            String modelId = "org.apache.maven:maven-model-builder:" + this.getClass().getPackage().getImplementationVersion() + ":super-pom";            InputSource inputSource = new InputSource();            inputSource.setModelId(modelId);            inputSource.setLocation(getClass().getResource(resource).toExternalForm());            options.put(ModelProcessor.INPUT_SOURCE, inputSource);            superModel = modelProcessor.read(is, options);        } catch (IOException e) {            throw new IllegalStateException("The super POM " + resource + " is damaged" + ", please verify the integrity of your Maven installation", e);        }    }    return superModel;}
public void maven_f5122_0(Model m, ModelBuildingRequest request, ModelProblemCollector problems)
{    Parent parent = m.getParent();    if (parent != null) {        validateStringNotEmpty("parent.groupId", problems, Severity.FATAL, Version.BASE, parent.getGroupId(), parent);        validateStringNotEmpty("parent.artifactId", problems, Severity.FATAL, Version.BASE, parent.getArtifactId(), parent);        validateStringNotEmpty("parent.version", problems, Severity.FATAL, Version.BASE, parent.getVersion(), parent);        if (equals(parent.getGroupId(), m.getGroupId()) && equals(parent.getArtifactId(), m.getArtifactId())) {            addViolation(problems, Severity.FATAL, Version.BASE, "parent.artifactId", null, "must be changed" + ", the parent element cannot have the same groupId:artifactId as the project.", parent);        }        if (equals("LATEST", parent.getVersion()) || equals("RELEASE", parent.getVersion())) {            addViolation(problems, Severity.WARNING, Version.BASE, "parent.version", null, "is either LATEST or RELEASE (both of them are being deprecated)", parent);        }    }    if (request.getValidationLevel() >= ModelBuildingRequest.VALIDATION_LEVEL_MAVEN_2_0) {        Severity errOn30 = getSeverity(request, ModelBuildingRequest.VALIDATION_LEVEL_MAVEN_3_0);                                                        validateStringNotEmpty("modelVersion", problems, Severity.ERROR, Version.V20, m.getModelVersion(), m);        validateModelVersion(problems, m.getModelVersion(), m, "4.0.0");        validateStringNoExpression("groupId", problems, Severity.WARNING, Version.V20, m.getGroupId(), m);        if (parent == null) {            validateStringNotEmpty("groupId", problems, Severity.FATAL, Version.V20, m.getGroupId(), m);        }        validateStringNoExpression("artifactId", problems, Severity.WARNING, Version.V20, m.getArtifactId(), m);        validateStringNotEmpty("artifactId", problems, Severity.FATAL, Version.V20, m.getArtifactId(), m);        validateVersionNoExpression("version", problems, Severity.WARNING, Version.V20, m.getVersion(), m);        if (parent == null) {            validateStringNotEmpty("version", problems, Severity.FATAL, Version.V20, m.getVersion(), m);        }        validate20RawDependencies(problems, m.getDependencies(), "dependencies.dependency.", EMPTY, request);        validate20RawDependenciesSelfReferencing(problems, m, m.getDependencies(), "dependencies.dependency", request);        if (m.getDependencyManagement() != null) {            validate20RawDependencies(problems, m.getDependencyManagement().getDependencies(), "dependencyManagement.dependencies.dependency.", EMPTY, request);        }        validateRawRepositories(problems, m.getRepositories(), "repositories.repository.", EMPTY, request);        validateRawRepositories(problems, m.getPluginRepositories(), "pluginRepositories.pluginRepository.", EMPTY, request);        Build build = m.getBuild();        if (build != null) {            validate20RawPlugins(problems, build.getPlugins(), "build.plugins.plugin.", EMPTY, request);            PluginManagement mgmt = build.getPluginManagement();            if (mgmt != null) {                validate20RawPlugins(problems, mgmt.getPlugins(), "build.pluginManagement.plugins.plugin.", EMPTY, request);            }        }        Set<String> profileIds = new HashSet<>();        for (Profile profile : m.getProfiles()) {            String prefix = "profiles.profile[" + profile.getId() + "].";            if (!profileIds.add(profile.getId())) {                addViolation(problems, errOn30, Version.V20, "profiles.profile.id", null, "must be unique but found duplicate profile with id " + profile.getId(), profile);            }            validate30RawProfileActivation(problems, profile.getActivation(), profile.getId(), prefix, "activation", request);            validate20RawDependencies(problems, profile.getDependencies(), prefix, "dependencies.dependency.", request);            if (profile.getDependencyManagement() != null) {                validate20RawDependencies(problems, profile.getDependencyManagement().getDependencies(), prefix, "dependencyManagement.dependencies.dependency.", request);            }            validateRawRepositories(problems, profile.getRepositories(), prefix, "repositories.repository.", request);            validateRawRepositories(problems, profile.getPluginRepositories(), prefix, "pluginRepositories.pluginRepository.", request);            BuildBase buildBase = profile.getBuild();            if (buildBase != null) {                validate20RawPlugins(problems, buildBase.getPlugins(), prefix, "plugins.plugin.", request);                PluginManagement mgmt = buildBase.getPluginManagement();                if (mgmt != null) {                    validate20RawPlugins(problems, mgmt.getPlugins(), prefix, "pluginManagement.plugins.plugin.", request);                }            }        }    }}
private void maven_f5123_0(ModelProblemCollector problems, Activation activation, String sourceHint, String prefix, String fieldName, ModelBuildingRequest request)
{    if (activation == null) {        return;    }    ActivationFile file = activation.getFile();    if (file != null) {        String path;        boolean missing;        if (StringUtils.isNotEmpty(file.getExists())) {            path = file.getExists();            missing = false;        } else if (StringUtils.isNotEmpty(file.getMissing())) {            path = file.getMissing();            missing = true;        } else {            return;        }        if (path.contains("${project.basedir}")) {            addViolation(problems, Severity.WARNING, Version.V30, prefix + fieldName + (missing ? ".file.missing" : ".file.exists"), null, "Failed to interpolate file location " + path + " for profile " + sourceHint + ": ${project.basedir} expression not supported during profile activation, " + "use ${basedir} instead", file.getLocation(missing ? "missing" : "exists"));        } else if (hasProjectExpression(path)) {            addViolation(problems, Severity.WARNING, Version.V30, prefix + fieldName + (missing ? ".file.missing" : ".file.exists"), null, "Failed to interpolate file location " + path + " for profile " + sourceHint + ": ${project.*} expressions are not supported during profile activation", file.getLocation(missing ? "missing" : "exists"));        }    }}
private void maven_f5124_0(ModelProblemCollector problems, List<Plugin> plugins, String prefix, String prefix2, ModelBuildingRequest request)
{    Severity errOn31 = getSeverity(request, ModelBuildingRequest.VALIDATION_LEVEL_MAVEN_3_1);    Map<String, Plugin> index = new HashMap<>();    for (Plugin plugin : plugins) {        if (plugin.getGroupId() == null || (plugin.getGroupId() != null && plugin.getGroupId().trim().isEmpty())) {            addViolation(problems, Severity.FATAL, Version.V20, prefix + prefix2 + "(groupId:artifactId)", null, "groupId of a plugin must be defined. ", plugin);        }        if (plugin.getArtifactId() == null || (plugin.getArtifactId() != null && plugin.getArtifactId().trim().isEmpty())) {            addViolation(problems, Severity.FATAL, Version.V20, prefix + prefix2 + "(groupId:artifactId)", null, "artifactId of a plugin must be defined. ", plugin);        }                if (plugin.getVersion() != null && plugin.getVersion().trim().isEmpty()) {            addViolation(problems, Severity.FATAL, Version.V20, prefix + prefix2 + "(groupId:artifactId)", null, "version of a plugin must be defined. ", plugin);        }        String key = plugin.getKey();        Plugin existing = index.get(key);        if (existing != null) {            addViolation(problems, errOn31, Version.V20, prefix + prefix2 + "(groupId:artifactId)", null, "must be unique but found duplicate declaration of plugin " + key, plugin);        } else {            index.put(key, plugin);        }        Set<String> executionIds = new HashSet<>();        for (PluginExecution exec : plugin.getExecutions()) {            if (!executionIds.add(exec.getId())) {                addViolation(problems, Severity.ERROR, Version.V20, prefix + prefix2 + "[" + plugin.getKey() + "].executions.execution.id", null, "must be unique but found duplicate execution with id " + exec.getId(), exec);            }        }    }}
public void maven_f5125_0(Model m, ModelBuildingRequest request, ModelProblemCollector problems)
{    validateStringNotEmpty("modelVersion", problems, Severity.ERROR, Version.BASE, m.getModelVersion(), m);    validateId("groupId", problems, m.getGroupId(), m);    validateId("artifactId", problems, m.getArtifactId(), m);    validateStringNotEmpty("packaging", problems, Severity.ERROR, Version.BASE, m.getPackaging(), m);    if (!m.getModules().isEmpty()) {        if (!"pom".equals(m.getPackaging())) {            addViolation(problems, Severity.ERROR, Version.BASE, "packaging", null, "with value '" + m.getPackaging() + "' is invalid. Aggregator projects " + "require 'pom' as packaging.", m);        }        for (int i = 0, n = m.getModules().size(); i < n; i++) {            String module = m.getModules().get(i);            if (StringUtils.isBlank(module)) {                addViolation(problems, Severity.ERROR, Version.BASE, "modules.module[" + i + "]", null, "has been specified without a path to the project directory.", m.getLocation("modules"));            }        }    }    validateStringNotEmpty("version", problems, Severity.ERROR, Version.BASE, m.getVersion(), m);    Severity errOn30 = getSeverity(request, ModelBuildingRequest.VALIDATION_LEVEL_MAVEN_3_0);    validateEffectiveDependencies(problems, m, m.getDependencies(), false, request);    DependencyManagement mgmt = m.getDependencyManagement();    if (mgmt != null) {        validateEffectiveDependencies(problems, m, mgmt.getDependencies(), true, request);    }    if (request.getValidationLevel() >= ModelBuildingRequest.VALIDATION_LEVEL_MAVEN_2_0) {        Set<String> modules = new HashSet<>();        for (int i = 0, n = m.getModules().size(); i < n; i++) {            String module = m.getModules().get(i);            if (!modules.add(module)) {                addViolation(problems, Severity.ERROR, Version.V20, "modules.module[" + i + "]", null, "specifies duplicate child module " + module, m.getLocation("modules"));            }        }        Severity errOn31 = getSeverity(request, ModelBuildingRequest.VALIDATION_LEVEL_MAVEN_3_1);        validateBannedCharacters(EMPTY, "version", problems, errOn31, Version.V20, m.getVersion(), null, m, ILLEGAL_VERSION_CHARS);        validate20ProperSnapshotVersion("version", problems, errOn31, Version.V20, m.getVersion(), null, m);        Build build = m.getBuild();        if (build != null) {            for (Plugin p : build.getPlugins()) {                validateStringNotEmpty("build.plugins.plugin.artifactId", problems, Severity.ERROR, Version.V20, p.getArtifactId(), p);                validateStringNotEmpty("build.plugins.plugin.groupId", problems, Severity.ERROR, Version.V20, p.getGroupId(), p);                validate20PluginVersion("build.plugins.plugin.version", problems, p.getVersion(), p.getKey(), p, request);                validateBoolean("build.plugins.plugin.inherited", EMPTY, problems, errOn30, Version.V20, p.getInherited(), p.getKey(), p);                validateBoolean("build.plugins.plugin.extensions", EMPTY, problems, errOn30, Version.V20, p.getExtensions(), p.getKey(), p);                validate20EffectivePluginDependencies(problems, p, request);            }            validate20RawResources(problems, build.getResources(), "build.resources.resource.", request);            validate20RawResources(problems, build.getTestResources(), "build.testResources.testResource.", request);        }        Reporting reporting = m.getReporting();        if (reporting != null) {            for (ReportPlugin p : reporting.getPlugins()) {                validateStringNotEmpty("reporting.plugins.plugin.artifactId", problems, Severity.ERROR, Version.V20, p.getArtifactId(), p);                validateStringNotEmpty("reporting.plugins.plugin.groupId", problems, Severity.ERROR, Version.V20, p.getGroupId(), p);            }        }        for (Repository repository : m.getRepositories()) {            validate20EffectiveRepository(problems, repository, "repositories.repository.", request);        }        for (Repository repository : m.getPluginRepositories()) {            validate20EffectiveRepository(problems, repository, "pluginRepositories.pluginRepository.", request);        }        DistributionManagement distMgmt = m.getDistributionManagement();        if (distMgmt != null) {            if (distMgmt.getStatus() != null) {                addViolation(problems, Severity.ERROR, Version.V20, "distributionManagement.status", null, "must not be specified.", distMgmt);            }            validate20EffectiveRepository(problems, distMgmt.getRepository(), "distributionManagement.repository.", request);            validate20EffectiveRepository(problems, distMgmt.getSnapshotRepository(), "distributionManagement.snapshotRepository.", request);        }    }}
private void maven_f5126_0(ModelProblemCollector problems, List<Dependency> dependencies, String prefix, String prefix2, ModelBuildingRequest request)
{    Severity errOn30 = getSeverity(request, ModelBuildingRequest.VALIDATION_LEVEL_MAVEN_3_0);    Severity errOn31 = getSeverity(request, ModelBuildingRequest.VALIDATION_LEVEL_MAVEN_3_1);    Map<String, Dependency> index = new HashMap<>();    for (Dependency dependency : dependencies) {        String key = dependency.getManagementKey();        if ("import".equals(dependency.getScope())) {            if (!"pom".equals(dependency.getType())) {                addViolation(problems, Severity.WARNING, Version.V20, prefix + prefix2 + "type", key, "must be 'pom' to import the managed dependencies.", dependency);            } else if (StringUtils.isNotEmpty(dependency.getClassifier())) {                addViolation(problems, errOn30, Version.V20, prefix + prefix2 + "classifier", key, "must be empty, imported POM cannot have a classifier.", dependency);            }        } else if ("system".equals(dependency.getScope())) {            if (request.getValidationLevel() >= ModelBuildingRequest.VALIDATION_LEVEL_MAVEN_3_1) {                addViolation(problems, Severity.WARNING, Version.V31, prefix + prefix2 + "scope", key, "declares usage of deprecated 'system' scope ", dependency);            }            String sysPath = dependency.getSystemPath();            if (StringUtils.isNotEmpty(sysPath)) {                if (!hasExpression(sysPath)) {                    addViolation(problems, Severity.WARNING, Version.V20, prefix + prefix2 + "systemPath", key, "should use a variable instead of a hard-coded path " + sysPath, dependency);                } else if (sysPath.contains("${basedir}") || sysPath.contains("${project.basedir}")) {                    addViolation(problems, Severity.WARNING, Version.V20, prefix + prefix2 + "systemPath", key, "should not point at files within the project directory, " + sysPath + " will be unresolvable by dependent projects", dependency);                }            }        }        if (equals("LATEST", dependency.getVersion()) || equals("RELEASE", dependency.getVersion())) {            addViolation(problems, Severity.WARNING, Version.BASE, prefix + prefix2 + "version", key, "is either LATEST or RELEASE (both of them are being deprecated)", dependency);        }        Dependency existing = index.get(key);        if (existing != null) {            String msg;            if (equals(existing.getVersion(), dependency.getVersion())) {                msg = "duplicate declaration of version " + StringUtils.defaultString(dependency.getVersion(), "(?)");            } else {                msg = "version " + StringUtils.defaultString(existing.getVersion(), "(?)") + " vs " + StringUtils.defaultString(dependency.getVersion(), "(?)");            }            addViolation(problems, errOn31, Version.V20, prefix + prefix2 + "(groupId:artifactId:type:classifier)", null, "must be unique: " + key + " -> " + msg, dependency);        } else {            index.put(key, dependency);        }    }}
private void maven_f5127_0(ModelProblemCollector problems, Model m, List<Dependency> dependencies, String prefix, ModelBuildingRequest request)
{        for (Dependency dependency : dependencies) {        String key = dependency.getGroupId() + ":" + dependency.getArtifactId() + ":" + dependency.getVersion() + (dependency.getClassifier() != null ? ":" + dependency.getClassifier() : EMPTY);        String mKey = m.getGroupId() + ":" + m.getArtifactId() + ":" + m.getVersion();        if (key.equals(mKey)) {                                                addViolation(problems, Severity.FATAL, Version.V31, prefix + "[" + key + "]", key, "is referencing itself.", dependency);        }    }}
private void maven_f5128_0(ModelProblemCollector problems, Model m, List<Dependency> dependencies, boolean management, ModelBuildingRequest request)
{    Severity errOn30 = getSeverity(request, ModelBuildingRequest.VALIDATION_LEVEL_MAVEN_3_0);    String prefix = management ? "dependencyManagement.dependencies.dependency." : "dependencies.dependency.";    for (Dependency d : dependencies) {        validateEffectiveDependency(problems, d, management, prefix, request);        if (request.getValidationLevel() >= ModelBuildingRequest.VALIDATION_LEVEL_MAVEN_2_0) {            validateBoolean(prefix, "optional", problems, errOn30, Version.V20, d.getOptional(), d.getManagementKey(), d);            if (!management) {                validateVersion(prefix, "version", problems, errOn30, Version.V20, d.getVersion(), d.getManagementKey(), d);                /*                     * TODO Extensions like Flex Mojos use custom scopes like "merged", "internal", "external", etc. In                     * order to don't break backward-compat with those, only warn but don't error out.                     */                validateEnum(prefix, "scope", problems, Severity.WARNING, Version.V20, d.getScope(), d.getManagementKey(), d, "provided", "compile", "runtime", "test", "system");                validateEffectiveModelAgainstDependency(prefix, problems, m, d, request);            } else {                validateEnum(prefix, "scope", problems, Severity.WARNING, Version.V20, d.getScope(), d.getManagementKey(), d, "provided", "compile", "runtime", "test", "system", "import");            }        }    }}
private void maven_f5129_0(String prefix, ModelProblemCollector problems, Model m, Dependency d, ModelBuildingRequest request)
{    String key = d.getGroupId() + ":" + d.getArtifactId() + ":" + d.getVersion() + (d.getClassifier() != null ? ":" + d.getClassifier() : EMPTY);    String mKey = m.getGroupId() + ":" + m.getArtifactId() + ":" + m.getVersion();    if (key.equals(mKey)) {                                addViolation(problems, Severity.FATAL, Version.V31, prefix + "[" + key + "]", key, "is referencing itself.", d);    }}
private void maven_f5130_0(ModelProblemCollector problems, Plugin plugin, ModelBuildingRequest request)
{    List<Dependency> dependencies = plugin.getDependencies();    if (!dependencies.isEmpty()) {        String prefix = "build.plugins.plugin[" + plugin.getKey() + "].dependencies.dependency.";        Severity errOn30 = getSeverity(request, ModelBuildingRequest.VALIDATION_LEVEL_MAVEN_3_0);        for (Dependency d : dependencies) {            validateEffectiveDependency(problems, d, false, prefix, request);            validateVersion(prefix, "version", problems, errOn30, Version.BASE, d.getVersion(), d.getManagementKey(), d);            validateEnum(prefix, "scope", problems, errOn30, Version.BASE, d.getScope(), d.getManagementKey(), d, "compile", "runtime", "system");        }    }}
private void maven_f5131_0(ModelProblemCollector problems, Dependency d, boolean management, String prefix, ModelBuildingRequest request)
{    validateId(prefix, "artifactId", problems, Severity.ERROR, Version.BASE, d.getArtifactId(), d.getManagementKey(), d);    validateId(prefix, "groupId", problems, Severity.ERROR, Version.BASE, d.getGroupId(), d.getManagementKey(), d);    if (!management) {        validateStringNotEmpty(prefix, "type", problems, Severity.ERROR, Version.BASE, d.getType(), d.getManagementKey(), d);        validateDependencyVersion(problems, d, prefix);    }    if ("system".equals(d.getScope())) {        String systemPath = d.getSystemPath();        if (StringUtils.isEmpty(systemPath)) {            addViolation(problems, Severity.ERROR, Version.BASE, prefix + "systemPath", d.getManagementKey(), "is missing.", d);        } else {            File sysFile = new File(systemPath);            if (!sysFile.isAbsolute()) {                addViolation(problems, Severity.ERROR, Version.BASE, prefix + "systemPath", d.getManagementKey(), "must specify an absolute path but is " + systemPath, d);            } else if (!sysFile.isFile()) {                String msg = "refers to a non-existing file " + sysFile.getAbsolutePath();                systemPath = systemPath.replace('/', File.separatorChar).replace('\\', File.separatorChar);                String jdkHome = request.getSystemProperties().getProperty("java.home", EMPTY) + File.separator + "..";                if (systemPath.startsWith(jdkHome)) {                    msg += ". Please verify that you run Maven using a JDK and not just a JRE.";                }                addViolation(problems, Severity.WARNING, Version.BASE, prefix + "systemPath", d.getManagementKey(), msg, d);            }        }    } else if (StringUtils.isNotEmpty(d.getSystemPath())) {        addViolation(problems, Severity.ERROR, Version.BASE, prefix + "systemPath", d.getManagementKey(), "must be omitted." + " This field may only be specified for a dependency with system scope.", d);    }    if (request.getValidationLevel() >= ModelBuildingRequest.VALIDATION_LEVEL_MAVEN_2_0) {        for (Exclusion exclusion : d.getExclusions()) {            if (request.getValidationLevel() < ModelBuildingRequest.VALIDATION_LEVEL_MAVEN_3_0) {                validateId(prefix, "exclusions.exclusion.groupId", problems, Severity.WARNING, Version.V20, exclusion.getGroupId(), d.getManagementKey(), exclusion);                validateId(prefix, "exclusions.exclusion.artifactId", problems, Severity.WARNING, Version.V20, exclusion.getArtifactId(), d.getManagementKey(), exclusion);            } else {                validateIdWithWildcards(prefix, "exclusions.exclusion.groupId", problems, Severity.WARNING, Version.V30, exclusion.getGroupId(), d.getManagementKey(), exclusion);                validateIdWithWildcards(prefix, "exclusions.exclusion.artifactId", problems, Severity.WARNING, Version.V30, exclusion.getArtifactId(), d.getManagementKey(), exclusion);            }        }    }}
protected void maven_f5132_0(ModelProblemCollector problems, Dependency d, String prefix)
{    validateStringNotEmpty(prefix, "version", problems, Severity.ERROR, Version.BASE, d.getVersion(), d.getManagementKey(), d);}
private void maven_f5133_0(ModelProblemCollector problems, List<Repository> repositories, String prefix, String prefix2, ModelBuildingRequest request)
{    Map<String, Repository> index = new HashMap<>();    for (Repository repository : repositories) {        validateStringNotEmpty(prefix, prefix2, "id", problems, Severity.ERROR, Version.V20, repository.getId(), null, repository);        validateStringNotEmpty(prefix, prefix2, "[" + repository.getId() + "].url", problems, Severity.ERROR, Version.V20, repository.getUrl(), null, repository);        String key = repository.getId();        Repository existing = index.get(key);        if (existing != null) {            Severity errOn30 = getSeverity(request, ModelBuildingRequest.VALIDATION_LEVEL_MAVEN_3_0);            addViolation(problems, errOn30, Version.V20, prefix + prefix2 + "id", null, "must be unique: " + repository.getId() + " -> " + existing.getUrl() + " vs " + repository.getUrl(), repository);        } else {            index.put(key, repository);        }    }}
private void maven_f5134_0(ModelProblemCollector problems, Repository repository, String prefix, ModelBuildingRequest request)
{    if (repository != null) {        Severity errOn31 = getSeverity(request, ModelBuildingRequest.VALIDATION_LEVEL_MAVEN_3_1);        validateBannedCharacters(prefix, "id", problems, errOn31, Version.V20, repository.getId(), null, repository, ILLEGAL_REPO_ID_CHARS);        if ("local".equals(repository.getId())) {            addViolation(problems, errOn31, Version.V20, prefix + "id", null, "must not be 'local'" + ", this identifier is reserved for the local repository" + ", using it for other repositories will corrupt your repository metadata.", repository);        }        if ("legacy".equals(repository.getLayout())) {            addViolation(problems, Severity.WARNING, Version.V20, prefix + "layout", repository.getId(), "uses the unsupported value 'legacy', artifact resolution might fail.", repository);        }    }}
private void maven_f5135_0(ModelProblemCollector problems, List<Resource> resources, String prefix, ModelBuildingRequest request)
{    Severity errOn30 = getSeverity(request, ModelBuildingRequest.VALIDATION_LEVEL_MAVEN_3_0);    for (Resource resource : resources) {        validateStringNotEmpty(prefix, "directory", problems, Severity.ERROR, Version.V20, resource.getDirectory(), null, resource);        validateBoolean(prefix, "filtering", problems, errOn30, Version.V20, resource.getFiltering(), resource.getDirectory(), resource);    }}
private boolean maven_f5136_0(String fieldName, ModelProblemCollector problems, String id, InputLocationTracker tracker)
{    return validateId(EMPTY, fieldName, problems, Severity.ERROR, Version.BASE, id, null, tracker);}
private boolean maven_f5137_0(String prefix, String fieldName, ModelProblemCollector problems, Severity severity, Version version, String id, String sourceHint, InputLocationTracker tracker)
{    if (validIds.contains(id)) {        return true;    }    if (!validateStringNotEmpty(prefix, fieldName, problems, severity, version, id, sourceHint, tracker)) {        return false;    } else {        if (!isValidId(id)) {            addViolation(problems, severity, version, prefix + fieldName, sourceHint, "with value '" + id + "' does not match a valid id pattern.", tracker);            return false;        }        validIds.add(id);        return true;    }}
private boolean maven_f5138_0(String id)
{    for (int i = 0; i < id.length(); i++) {        char c = id.charAt(i);        if (!isValidIdCharacter(c)) {            return false;        }    }    return true;}
private boolean maven_f5139_0(char c)
{    return c >= 'a' && c <= 'z' || c >= 'A' && c <= 'Z' || c >= '0' && c <= '9' || c == '-' || c == '_' || c == '.';}
private boolean maven_f5140_0(String prefix, String fieldName, ModelProblemCollector problems, Severity severity, Version version, String id, String sourceHint, InputLocationTracker tracker)
{    if (!validateStringNotEmpty(prefix, fieldName, problems, severity, version, id, sourceHint, tracker)) {        return false;    } else {        if (!isValidIdWithWildCards(id)) {            addViolation(problems, severity, version, prefix + fieldName, sourceHint, "with value '" + id + "' does not match a valid id pattern.", tracker);            return false;        }        return true;    }}
private boolean maven_f5141_0(String id)
{    for (int i = 0; i < id.length(); i++) {        char c = id.charAt(i);        if (!isValidIdWithWildCardCharacter(c)) {            return false;        }    }    return true;}
private boolean maven_f5142_0(char c)
{    return isValidIdCharacter(c) || c == '?' || c == '*';}
private boolean maven_f5143_0(String fieldName, ModelProblemCollector problems, Severity severity, Version version, String string, InputLocationTracker tracker)
{    if (!hasExpression(string)) {        return true;    }    addViolation(problems, severity, version, fieldName, null, "contains an expression but should be a constant.", tracker);    return false;}
private boolean maven_f5144_0(String fieldName, ModelProblemCollector problems, Severity severity, Version version, String string, InputLocationTracker tracker)
{    if (!hasExpression(string)) {        return true;    }                                Matcher m = CI_FRIENDLY_EXPRESSION.matcher(string.trim());    while (m.find()) {        if (!CI_FRIENDLY_POSSIBLE_PROPERTY_NAMES.contains(m.group(1))) {            addViolation(problems, severity, version, fieldName, null, "contains an expression but should be a constant.", tracker);            return false;        }    }    return true;}
private boolean maven_f5145_0(String value)
{    return value != null && value.contains("${");}
private boolean maven_f5146_0(String value)
{    return value != null && value.contains("${project.");}
private boolean maven_f5147_0(String fieldName, ModelProblemCollector problems, Severity severity, Version version, String string, InputLocationTracker tracker)
{    return validateStringNotEmpty(EMPTY, fieldName, problems, severity, version, string, null, tracker);}
private boolean maven_f5148_0(String prefix, String prefix2, String fieldName, ModelProblemCollector problems, Severity severity, Version version, String string, String sourceHint, InputLocationTracker tracker)
{    if (!validateNotNull(prefix, prefix2, fieldName, problems, severity, version, string, sourceHint, tracker)) {        return false;    }    if (!string.isEmpty()) {        return true;    }    addViolation(problems, severity, version, prefix + prefix2 + fieldName, sourceHint, "is missing.", tracker);    return false;}
private boolean maven_f5149_0(String prefix, String fieldName, ModelProblemCollector problems, Severity severity, Version version, String string, String sourceHint, InputLocationTracker tracker)
{    if (!validateNotNull(prefix, fieldName, problems, severity, version, string, sourceHint, tracker)) {        return false;    }    if (string.length() > 0) {        return true;    }    addViolation(problems, severity, version, prefix + fieldName, sourceHint, "is missing.", tracker);    return false;}
private boolean maven_f5150_0(String prefix, String fieldName, ModelProblemCollector problems, Severity severity, Version version, Object object, String sourceHint, InputLocationTracker tracker)
{    if (object != null) {        return true;    }    addViolation(problems, severity, version, prefix + fieldName, sourceHint, "is missing.", tracker);    return false;}
private boolean maven_f5151_0(String prefix, String prefix2, String fieldName, ModelProblemCollector problems, Severity severity, Version version, Object object, String sourceHint, InputLocationTracker tracker)
{    if (object != null) {        return true;    }    addViolation(problems, severity, version, prefix + prefix2 + fieldName, sourceHint, "is missing.", tracker);    return false;}
private boolean maven_f5152_0(String prefix, String fieldName, ModelProblemCollector problems, Severity severity, Version version, String string, String sourceHint, InputLocationTracker tracker)
{    if (string == null || string.length() <= 0) {        return true;    }    if ("true".equalsIgnoreCase(string) || "false".equalsIgnoreCase(string)) {        return true;    }    addViolation(problems, severity, version, prefix + fieldName, sourceHint, "must be 'true' or 'false' but is '" + string + "'.", tracker);    return false;}
private boolean maven_f5153_0(String prefix, String fieldName, ModelProblemCollector problems, Severity severity, Version version, String string, String sourceHint, InputLocationTracker tracker, String... validValues)
{    if (string == null || string.length() <= 0) {        return true;    }    List<String> values = Arrays.asList(validValues);    if (values.contains(string)) {        return true;    }    addViolation(problems, severity, version, prefix + fieldName, sourceHint, "must be one of " + values + " but is '" + string + "'.", tracker);    return false;}
private boolean maven_f5154_0(ModelProblemCollector problems, String string, InputLocationTracker tracker, String... validVersions)
{    if (string == null || string.length() <= 0) {        return true;    }    List<String> values = Arrays.asList(validVersions);    if (values.contains(string)) {        return true;    }    boolean newerThanAll = true;    boolean olderThanAll = true;    for (String validValue : validVersions) {        final int comparison = compareModelVersions(validValue, string);        newerThanAll = newerThanAll && comparison < 0;        olderThanAll = olderThanAll && comparison > 0;    }    if (newerThanAll) {        addViolation(problems, Severity.FATAL, Version.V20, "modelVersion", null, "of '" + string + "' is newer than the versions supported by this version of Maven: " + values + ". Building this project requires a newer version of Maven.", tracker);    } else if (olderThanAll) {                addViolation(problems, Severity.FATAL, Version.V20, "modelVersion", null, "of '" + string + "' is older than the versions supported by this version of Maven: " + values + ". Building this project requires an older version of Maven.", tracker);    } else {        addViolation(problems, Severity.ERROR, Version.V20, "modelVersion", null, "must be one of " + values + " but is '" + string + "'.", tracker);    }    return false;}
private static int maven_f5155_0(String first, String second)
{        String[] firstSegments = StringUtils.split(first, ".");    String[] secondSegments = StringUtils.split(second, ".");    for (int i = 0; i < Math.min(firstSegments.length, secondSegments.length); i++) {        int result = Long.valueOf(firstSegments[i]).compareTo(Long.valueOf(secondSegments[i]));        if (result != 0) {            return result;        }    }    if (firstSegments.length == secondSegments.length) {        return 0;    }    return firstSegments.length > secondSegments.length ? -1 : 1;}
private boolean maven_f5156_0(String prefix, String fieldName, ModelProblemCollector problems, Severity severity, Version version, String string, String sourceHint, InputLocationTracker tracker, String banned)
{    if (string != null) {        for (int i = string.length() - 1; i >= 0; i--) {            if (banned.indexOf(string.charAt(i)) >= 0) {                addViolation(problems, severity, version, prefix + fieldName, sourceHint, "must not contain any of these characters " + banned + " but found " + string.charAt(i), tracker);                return false;            }        }    }    return true;}
private boolean maven_f5157_0(String prefix, String fieldName, ModelProblemCollector problems, Severity severity, Version version, String string, String sourceHint, InputLocationTracker tracker)
{    if (string == null || string.length() <= 0) {        return true;    }    if (hasExpression(string)) {        addViolation(problems, severity, version, prefix + fieldName, sourceHint, "must be a valid version but is '" + string + "'.", tracker);        return false;    }    return validateBannedCharacters(prefix, fieldName, problems, severity, version, string, sourceHint, tracker, ILLEGAL_VERSION_CHARS);}
private boolean maven_f5158_0(String fieldName, ModelProblemCollector problems, Severity severity, Version version, String string, String sourceHint, InputLocationTracker tracker)
{    if (string == null || string.length() <= 0) {        return true;    }    if (string.endsWith("SNAPSHOT") && !string.endsWith("-SNAPSHOT")) {        addViolation(problems, severity, version, fieldName, sourceHint, "uses an unsupported snapshot version format, should be '*-SNAPSHOT' instead.", tracker);        return false;    }    return true;}
private boolean maven_f5159_0(String fieldName, ModelProblemCollector problems, String string, String sourceHint, InputLocationTracker tracker, ModelBuildingRequest request)
{    if (string == null) {                return true;    }    Severity errOn30 = getSeverity(request, ModelBuildingRequest.VALIDATION_LEVEL_MAVEN_3_0);    if (!validateVersion(EMPTY, fieldName, problems, errOn30, Version.V20, string, sourceHint, tracker)) {        return false;    }    if (string.length() <= 0 || "RELEASE".equals(string) || "LATEST".equals(string)) {        addViolation(problems, errOn30, Version.V20, fieldName, sourceHint, "must be a valid version but is '" + string + "'.", tracker);        return false;    }    return true;}
private static void maven_f5160_0(ModelProblemCollector problems, Severity severity, Version version, String fieldName, String sourceHint, String message, InputLocationTracker tracker)
{    StringBuilder buffer = new StringBuilder(256);    buffer.append('\'').append(fieldName).append('\'');    if (sourceHint != null) {        buffer.append(" for ").append(sourceHint);    }    buffer.append(' ').append(message);        problems.add(new ModelProblemCollectorRequest(severity, version).setMessage(buffer.toString()).setLocation(getLocation(fieldName, tracker)));}
private static InputLocation maven_f5161_0(String fieldName, InputLocationTracker tracker)
{    InputLocation location = null;    if (tracker != null) {        if (fieldName != null) {            Object key = fieldName;            int idx = fieldName.lastIndexOf('.');            if (idx >= 0) {                fieldName = fieldName.substring(idx + 1);                key = fieldName;            }            if (fieldName.endsWith("]")) {                key = fieldName.substring(fieldName.lastIndexOf('[') + 1, fieldName.length() - 1);                try {                    key = Integer.valueOf(key.toString());                } catch (NumberFormatException e) {                                }            }            location = tracker.getLocation(key);        }        if (location == null) {            location = tracker.getLocation(EMPTY);        }    }    return location;}
private static boolean maven_f5162_0(String s1, String s2)
{    return StringUtils.clean(s1).equals(StringUtils.clean(s2));}
private static Severity maven_f5163_0(ModelBuildingRequest request, int errorThreshold)
{    return getSeverity(request.getValidationLevel(), errorThreshold);}
private static Severity maven_f5164_0(int validationLevel, int errorThreshold)
{    if (validationLevel < errorThreshold) {        return Severity.WARNING;    } else {        return Severity.ERROR;    }}
private File maven_f5165_0(String name)
{    return new File("src/test/resources/poms/factory/" + name + ".xml").getAbsoluteFile();}
public void maven_f5166_0() throws Exception
{    Properties sysProperties = new Properties();    sysProperties.setProperty("myproperty", "test");    ModelBuilder builder = new DefaultModelBuilderFactory().newInstance();    assertNotNull(builder);    DefaultModelBuildingRequest request = new DefaultModelBuildingRequest();    request.setProcessPlugins(true);    request.setPomFile(getPom("complex"));    request.setSystemProperties(sysProperties);    ModelBuildingResult result = builder.build(request);    assertNotNull(result);    assertNotNull(result.getEffectiveModel());    assertEquals("activated-1", result.getEffectiveModel().getProperties().get("profile.file"));    assertNull(result.getEffectiveModel().getProperties().get("profile.miss"));}
private File maven_f5167_0(String name)
{    return new File("src/test/resources/poms/factory/" + name + ".xml").getAbsoluteFile();}
public void maven_f5168_0() throws Exception
{    ModelBuilder builder = new DefaultModelBuilderFactory().newInstance();    assertNotNull(builder);    DefaultModelBuildingRequest request = new DefaultModelBuildingRequest();    request.setProcessPlugins(true);    request.setPomFile(getPom("simple"));    ModelBuildingResult result = builder.build(request);    assertNotNull(result);    assertNotNull(result.getEffectiveModel());    assertEquals("activated", result.getEffectiveModel().getProperties().get("profile.file"));    Xpp3Dom conf = (Xpp3Dom) result.getEffectiveModel().getBuild().getPlugins().get(0).getConfiguration();    assertEquals("1.5", conf.getChild("source").getValue());    assertEquals("  1.5  ", conf.getChild("target").getValue());}
public void maven_f5169_0() throws Exception
{    File tempFile = createTempFile("pomTest");    FileModelSource instance = new FileModelSource(tempFile);    assertFalse(instance.equals(null));    assertFalse(instance.equals(new Object()));    assertTrue(instance.equals(instance));    assertTrue(instance.equals(new FileModelSource(tempFile)));}
public void maven_f5170_0() throws Exception
{    assumeTrue(SystemUtils.IS_OS_WINDOWS);    File upperCaseFile = createTempFile("TESTE");    String absolutePath = upperCaseFile.getAbsolutePath();    File lowerCaseFile = new File(absolutePath.toLowerCase());    FileModelSource upperCaseFileSouce = new FileModelSource(upperCaseFile);    FileModelSource lowerCaseFileSouce = new FileModelSource(lowerCaseFile);    assertTrue(upperCaseFileSouce.equals(lowerCaseFileSouce));}
private File maven_f5171_0(String name) throws IOException
{    File tempFile = File.createTempFile(name, ".xml");    tempFile.deleteOnExit();    return tempFile;}
public Model maven_f5172_0()
{    return model;}
public List<String> maven_f5173_0()
{    return warnings;}
public List<String> maven_f5174_0()
{    return errors;}
public List<String> maven_f5175_0()
{    return fatals;}
public void maven_f5176_0(ModelProblemCollectorRequest req)
{    switch(req.getSeverity()) {        case FATAL:            fatals.add(req.getMessage());            break;        case ERROR:            errors.add(req.getMessage());            break;        case WARNING:            warnings.add(req.getMessage());            break;    }}
protected void maven_f5177_0() throws Exception
{    super.setUp();    reader = new DefaultModelReader();    writer = new DefaultModelWriter();    assembler = new DefaultInheritanceAssembler();}
private File maven_f5178_0(String name)
{    return new File("src/test/resources/poms/inheritance/" + name + ".xml");}
private Model maven_f5179_0(String name) throws IOException
{    return reader.read(getPom(name), null);}
public void maven_f5180_0() throws Exception
{    testInheritance("plugin-configuration");}
public void maven_f5181_0() throws Exception
{    testInheritance("urls");}
public void maven_f5182_0() throws IOException
{    testInheritance("flat-urls");}
public void maven_f5183_0() throws Exception
{    testInheritance("no-append-urls");}
public void maven_f5184_0() throws Exception
{    testInheritance("no-append-urls2");}
public void maven_f5185_0() throws Exception
{    testInheritance("no-append-urls3");}
public void maven_f5186_0() throws IOException
{        try {                testInheritance("tricky-flat-artifactId-urls", false);        } catch (AssertionError afe) {                assertTrue(afe.getMessage(), afe.getMessage().contains("Expected text value 'http://www.apache.org/path/to/parent/child-artifact-id/' but was " + "'http://www.apache.org/path/to/parent/../child-artifact-id/'"));    }        testInheritance("tricky-flat-artifactId-urls", true);            testInheritance("tricky-flat-directory-urls", false);    try {        testInheritance("tricky-flat-directory-urls", true);        fail("should have failed since module reference == directory name != artifactId");    } catch (AssertionError afe) {                assertTrue(afe.getMessage(), afe.getMessage().contains("Expected text value 'http://www.apache.org/path/to/parent/../child-artifact-id/' but was " + "'http://www.apache.org/path/to/parent/child-artifact-id/'"));    }}
public void maven_f5187_0() throws IOException
{    testInheritance("empty-urls", false);}
public void maven_f5188_0(String baseName) throws IOException
{    testInheritance(baseName, false);    testInheritance(baseName, true);}
public void maven_f5189_0(String baseName, boolean fromRepo) throws IOException
{    Model parent = getModel(baseName + "-parent");    Model child = getModel(baseName + "-child");    if (fromRepo) {                        parent.setPomFile(null);        child.setPomFile(null);    }    SimpleProblemCollector problems = new SimpleProblemCollector();    assembler.assembleModelInheritance(child, parent, null, problems);        File actual = new File("target/test-classes/poms/inheritance/" + baseName + (fromRepo ? "-build" : "-repo") + "-actual.xml");    writer.write(actual, null, child);        File expected = getPom(baseName + "-expected");    assertThat(actual, CompareMatcher.isIdenticalTo(expected).ignoreComments().ignoreWhitespace());}
public void maven_f5190_0() throws IOException
{    Model parent = getModel("module-path-not-artifactId-parent");    Model child = getModel("module-path-not-artifactId-child");    SimpleProblemCollector problems = new SimpleProblemCollector();    assembler.assembleModelInheritance(child, parent, null, problems);    File actual = new File("target/test-classes/poms/inheritance/module-path-not-artifactId-actual.xml");    writer.write(actual, null, child);        File expected = getPom("module-path-not-artifactId-expected");    assertThat(actual, CompareMatcher.isIdenticalTo(expected).ignoreComments().ignoreWhitespace());}
protected void maven_f5191_0() throws Exception
{    super.setUp();    context = new Properties();    context.put("basedir", "myBasedir");    context.put("project.baseUri", "myBaseUri");}
protected void maven_f5192_0(SimpleProblemCollector collector)
{    assertEquals("Expected no errors", 0, collector.getErrors().size());    assertEquals("Expected no warnings", 0, collector.getWarnings().size());    assertEquals("Expected no fatals", 0, collector.getFatals().size());}
protected void maven_f5193_0(int numFatals, int numErrors, int numWarnings, SimpleProblemCollector collector)
{    assertEquals("Errors", numErrors, collector.getErrors().size());    assertEquals("Warnings", numWarnings, collector.getWarnings().size());    assertEquals("Fatals", numFatals, collector.getFatals().size());}
protected void maven_f5194_0(int numFatals, int numErrors, int numWarnings, SimpleProblemCollector collector)
{    assertColllectorState(numFatals, numErrors, numWarnings, collector);}
private ModelBuildingRequest maven_f5195_0(Properties p)
{    ModelBuildingRequest config = new DefaultModelBuildingRequest();    if (p != null) {        config.setSystemProperties(p);    }    return config;}
public void maven_f5196_0()
{    Calendar cal = Calendar.getInstance();    cal.setTimeZone(MavenBuildTimestamp.DEFAULT_BUILD_TIME_ZONE);    cal.set(Calendar.HOUR, 12);    cal.set(Calendar.AM_PM, Calendar.AM);        cal.set(Calendar.HOUR_OF_DAY, 0);    cal.set(Calendar.MINUTE, 16);    cal.set(Calendar.SECOND, 0);    cal.set(Calendar.YEAR, 1976);    cal.set(Calendar.MONTH, Calendar.NOVEMBER);    cal.set(Calendar.DATE, 11);    Date firstTestDate = cal.getTime();    cal.set(Calendar.HOUR, 11);    cal.set(Calendar.AM_PM, Calendar.PM);        cal.set(Calendar.HOUR_OF_DAY, 23);    Date secondTestDate = cal.getTime();    SimpleDateFormat format = new SimpleDateFormat(MavenBuildTimestamp.DEFAULT_BUILD_TIMESTAMP_FORMAT);    format.setTimeZone(MavenBuildTimestamp.DEFAULT_BUILD_TIME_ZONE);    assertEquals("1976-11-11T00:16:00Z", format.format(firstTestDate));    assertEquals("1976-11-11T23:16:00Z", format.format(secondTestDate));}
public void maven_f5197_0()
{    Calendar cal = Calendar.getInstance();    cal.setTimeZone(TimeZone.getTimeZone("Europe/Berlin"));    cal.set(Calendar.HOUR_OF_DAY, 1);    cal.set(Calendar.MINUTE, 16);    cal.set(Calendar.SECOND, 0);    cal.set(Calendar.YEAR, 2014);    cal.set(Calendar.MONTH, Calendar.JUNE);    cal.set(Calendar.DATE, 16);    Date firstTestDate = cal.getTime();    cal.set(Calendar.MONTH, Calendar.NOVEMBER);    Date secondTestDate = cal.getTime();    SimpleDateFormat format = new SimpleDateFormat(MavenBuildTimestamp.DEFAULT_BUILD_TIMESTAMP_FORMAT);    format.setTimeZone(MavenBuildTimestamp.DEFAULT_BUILD_TIME_ZONE);    assertEquals("2014-06-15T23:16:00Z", format.format(firstTestDate));    assertEquals("2014-11-16T00:16:00Z", format.format(secondTestDate));}
public void maven_f5198_0() throws Exception
{    Model model = new Model();    Scm scm = new Scm();    scm.setConnection("${test}/somepath");    model.setScm(scm);    ModelInterpolator interpolator = createInterpolator();    final SimpleProblemCollector collector = new SimpleProblemCollector();    Model out = interpolator.interpolateModel(model, new File("."), createModelBuildingRequest(context), collector);    assertProblemFree(collector);    assertEquals("${test}/somepath", out.getScm().getConnection());}
public void maven_f5199_0() throws Exception
{    Model model = new Model();    Scm scm = new Scm();    scm.setConnection("${project.scm.connection}/somepath");    model.setScm(scm);    try {        ModelInterpolator interpolator = createInterpolator();        final SimpleProblemCollector collector = new SimpleProblemCollector();        interpolator.interpolateModel(model, null, createModelBuildingRequest(context), collector);        assertCollectorState(0, 1, 0, collector);    } catch (Exception e) {    }}
public void maven_f5200_0() throws Exception
{    Model model = new Model();    Scm scm = new Scm();    scm.setConnection("${test}/somepath");    model.setScm(scm);    model.addProperty("test", "test");    ModelInterpolator interpolator = createInterpolator();    final SimpleProblemCollector collector = new SimpleProblemCollector();    Model out = interpolator.interpolateModel(model, new File("."), createModelBuildingRequest(context), collector);    assertProblemFree(collector);    assertEquals("test/somepath", out.getScm().getConnection());}
public void maven_f5201_0() throws Exception
{    String orgName = "MyCo";    Model model = new Model();    model.setName("${pom.organization.name} Tools");    Organization org = new Organization();    org.setName(orgName);    model.setOrganization(org);    ModelInterpolator interpolator = createInterpolator();    Model out = interpolator.interpolateModel(model, new File("."), createModelBuildingRequest(context), new SimpleProblemCollector());    assertEquals(orgName + " Tools", out.getName());}
public void maven_f5202_0() throws Exception
{    Model model = new Model();    model.setVersion("3.8.1");    Dependency dep = new Dependency();    dep.setVersion("${version}");    model.addDependency(dep);    ModelInterpolator interpolator = createInterpolator();    final SimpleProblemCollector collector = new SimpleProblemCollector();    Model out = interpolator.interpolateModel(model, new File("."), createModelBuildingRequest(context), collector);    assertCollectorState(0, 0, 1, collector);    assertEquals("3.8.1", (out.getDependencies().get(0)).getVersion());}
public void maven_f5203_0() throws Exception
{    Model model = new Model();    model.setVersion("3.8.1");    Dependency dep = new Dependency();    dep.setVersion("${something}");    model.addDependency(dep);    /*                           try         {         new RegexBasedModelInterpolator().interpolate( model, context );         fail( "Should have failed to interpolate with invalid reference" );         }         catch ( ModelInterpolationException expected )         {         assertTrue( true );         }         */    ModelInterpolator interpolator = createInterpolator();    final SimpleProblemCollector collector = new SimpleProblemCollector();    Model out = interpolator.interpolateModel(model, new File("."), createModelBuildingRequest(context), collector);    assertProblemFree(collector);    assertEquals("${something}", (out.getDependencies().get(0)).getVersion());}
public void maven_f5204_0() throws Exception
{    Model model = new Model();    model.setVersion("3.8.1");    model.setArtifactId("foo");    Dependency dep = new Dependency();    dep.setVersion("${artifactId}-${version}");    model.addDependency(dep);    ModelInterpolator interpolator = createInterpolator();    final SimpleProblemCollector collector = new SimpleProblemCollector();    Model out = interpolator.interpolateModel(model, new File("."), createModelBuildingRequest(context), collector);    assertCollectorState(0, 0, 2, collector);    assertEquals("foo-3.8.1", (out.getDependencies().get(0)).getVersion());}
public void maven_f5205_0() throws Exception
{    Model model = new Model();    model.setVersion("3.8.1");    model.setArtifactId("foo");    Repository repository = new Repository();    repository.setUrl("file://localhost/${basedir}/temp-repo");    model.addRepository(repository);    ModelInterpolator interpolator = createInterpolator();    final SimpleProblemCollector collector = new SimpleProblemCollector();    Model out = interpolator.interpolateModel(model, null, createModelBuildingRequest(context), collector);    assertProblemFree(collector);    assertEquals("file://localhost/myBasedir/temp-repo", (out.getRepositories().get(0)).getUrl());}
public void maven_f5206_0() throws Exception
{    Model model = new Model();    model.setVersion("3.8.1");    model.setArtifactId("foo");    Repository repository = new Repository();    repository.setUrl("${project.baseUri}/temp-repo");    model.addRepository(repository);    ModelInterpolator interpolator = createInterpolator();    final SimpleProblemCollector collector = new SimpleProblemCollector();    Model out = interpolator.interpolateModel(model, null, createModelBuildingRequest(context), collector);    assertProblemFree(collector);    assertEquals("myBaseUri/temp-repo", (out.getRepositories().get(0)).getUrl());}
public void maven_f5207_0() throws Exception
{    Properties context = new Properties();    context.put("env.HOME", "/path/to/home");    Model model = new Model();    Properties modelProperties = new Properties();    modelProperties.setProperty("outputDirectory", "${env.HOME}");    model.setProperties(modelProperties);    ModelInterpolator interpolator = createInterpolator();    final SimpleProblemCollector collector = new SimpleProblemCollector();    Model out = interpolator.interpolateModel(model, new File("."), createModelBuildingRequest(context), collector);    assertProblemFree(collector);    assertEquals("/path/to/home", out.getProperties().getProperty("outputDirectory"));}
public void maven_f5208_0() throws Exception
{    Model model = new Model();    Properties modelProperties = new Properties();    modelProperties.setProperty("outputDirectory", "${env.DOES_NOT_EXIST}");    model.setProperties(modelProperties);    ModelInterpolator interpolator = createInterpolator();    final SimpleProblemCollector collector = new SimpleProblemCollector();    Model out = interpolator.interpolateModel(model, new File("."), createModelBuildingRequest(context), collector);    assertProblemFree(collector);    assertEquals(out.getProperties().getProperty("outputDirectory"), "${env.DOES_NOT_EXIST}");}
public void maven_f5209_0() throws Exception
{    Model model = new Model();    Properties modelProperties = new Properties();    modelProperties.setProperty("outputDirectory", "${DOES_NOT_EXIST}");    model.setProperties(modelProperties);    ModelInterpolator interpolator = createInterpolator();    final SimpleProblemCollector collector = new SimpleProblemCollector();    Model out = interpolator.interpolateModel(model, new File("."), createModelBuildingRequest(context), collector);    assertProblemFree(collector);    assertEquals(out.getProperties().getProperty("outputDirectory"), "${DOES_NOT_EXIST}");}
public void maven_f5210_0() throws Exception
{    Model model = new Model();    Build build = new Build();    build.setSourceDirectory("correct");    Resource res = new Resource();    res.setDirectory("${project.build.sourceDirectory}");    build.addResource(res);    Resource res2 = new Resource();    res2.setDirectory("${pom.build.sourceDirectory}");    build.addResource(res2);    Resource res3 = new Resource();    res3.setDirectory("${build.sourceDirectory}");    build.addResource(res3);    model.setBuild(build);    ModelInterpolator interpolator = createInterpolator();    final SimpleProblemCollector collector = new SimpleProblemCollector();    Model out = interpolator.interpolateModel(model, null, createModelBuildingRequest(context), collector);    assertCollectorState(0, 0, 2, collector);    List<Resource> outResources = out.getBuild().getResources();    Iterator<Resource> resIt = outResources.iterator();    assertEquals(build.getSourceDirectory(), resIt.next().getDirectory());    assertEquals(build.getSourceDirectory(), resIt.next().getDirectory());    assertEquals(build.getSourceDirectory(), resIt.next().getDirectory());}
public void maven_f5211_0() throws Exception
{    File basedir = new File("/test/path");    Model model = new Model();    Dependency dep = new Dependency();    dep.setSystemPath("${basedir}/artifact.jar");    model.addDependency(dep);    ModelInterpolator interpolator = createInterpolator();    final SimpleProblemCollector collector = new SimpleProblemCollector();    Model result = interpolator.interpolateModel(model, basedir, createModelBuildingRequest(context), collector);    assertProblemFree(collector);    List<Dependency> rDeps = result.getDependencies();    assertNotNull(rDeps);    assertEquals(1, rDeps.size());    assertEquals(new File(basedir, "artifact.jar").getAbsolutePath(), new File(rDeps.get(0).getSystemPath()).getAbsolutePath());}
public void maven_f5212_0()
{    Properties interpolationProperties = new Properties();    interpolationProperties.setProperty("maven.build.timestamp.format", "yyyyMMdd'T'HHmm'Z'");    MavenBuildTimestamp timestamp = new MavenBuildTimestamp(new Date(), interpolationProperties);    String formattedTimestamp = timestamp.formattedTimestamp();    assertTrue("We expect the UTC marker at the end of the timestamp.", formattedTimestamp.endsWith("Z"));}
protected void maven_f5213_0() throws Exception
{    super.setUp();    interpolator = new StringSearchModelInterpolator();}
protected ModelInterpolator maven_f5214_0(org.apache.maven.model.path.PathTranslator translator) throws Exception
{    return this.interpolator;}
protected ModelInterpolator maven_f5215_0() throws Exception
{    return this.interpolator;}
public void maven_f5216_0() throws Exception
{    Model model = new Model();    Properties p = new Properties();    p.setProperty("key", "value");    p.setProperty("key2", "value2");    String[] values = { "${key}", "${key2}" };    StringSearchModelInterpolator interpolator = (StringSearchModelInterpolator) createInterpolator();    ModelBuildingRequest config = createModelBuildingRequest(p);    final SimpleProblemCollector collector = new SimpleProblemCollector();    interpolator.interpolateObject(values, model, new File("."), config, collector);    assertProblemFree(collector);    assertEquals("value", values[0]);    assertEquals("value2", values[1]);}
private ModelBuildingRequest maven_f5217_0(Properties p)
{    ModelBuildingRequest config = new DefaultModelBuildingRequest();    config.setSystemProperties(p);    return config;}
public void maven_f5218_0() throws Exception
{    Model model = new Model();    Properties p = new Properties();    p.setProperty("key", "value");    p.setProperty("key2", "value2");    String[] values = { "${key}", "${key2}" };    ObjectWithStringArrayField obj = new ObjectWithStringArrayField(values);    StringSearchModelInterpolator interpolator = (StringSearchModelInterpolator) createInterpolator();    ModelBuildingRequest config = createModelBuildingRequest(p);    final SimpleProblemCollector collector = new SimpleProblemCollector();    interpolator.interpolateObject(obj, model, new File("."), config, collector);    assertProblemFree(collector);    assertEquals("value", obj.values[0]);    assertEquals("value2", obj.values[1]);}
public void maven_f5219_0() throws Exception
{    Model model = new Model();    Properties p = new Properties();    p.setProperty("key", "value");    p.setProperty("key2", "value2");    List<String> values = new ArrayList<>();    values.add("${key}");    values.add("${key2}");    ObjectWithListField obj = new ObjectWithListField(values);    StringSearchModelInterpolator interpolator = (StringSearchModelInterpolator) createInterpolator();    ModelBuildingRequest config = createModelBuildingRequest(p);    final SimpleProblemCollector collector = new SimpleProblemCollector();    interpolator.interpolateObject(obj, model, new File("."), config, collector);    assertProblemFree(collector);    assertEquals("value", obj.values.get(0));    assertEquals("value2", obj.values.get(1));}
public void maven_f5220_0() throws Exception
{    Model model = new Model();    Properties p = new Properties();    p.setProperty("key", "value");    p.setProperty("key2", "value2");    List<String> values = new ArrayList<>();    values.add("key");    values.add("${key2}");    ObjectWithListField obj = new ObjectWithListField(values);    StringSearchModelInterpolator interpolator = (StringSearchModelInterpolator) createInterpolator();    ModelBuildingRequest config = createModelBuildingRequest(p);    final SimpleProblemCollector collector = new SimpleProblemCollector();    interpolator.interpolateObject(obj, model, new File("."), config, collector);    assertProblemFree(collector);    assertEquals("key", obj.values.get(0));    assertEquals("value2", obj.values.get(1));}
public void maven_f5221_0() throws Exception
{    Model model = new Model();    Properties p = new Properties();    p.setProperty("key", "value");    p.setProperty("key2", "value2");    List<String> values = Collections.unmodifiableList(Collections.singletonList("${key}"));    ObjectWithListField obj = new ObjectWithListField(values);    StringSearchModelInterpolator interpolator = (StringSearchModelInterpolator) createInterpolator();    ModelBuildingRequest config = createModelBuildingRequest(p);    final SimpleProblemCollector collector = new SimpleProblemCollector();    interpolator.interpolateObject(obj, model, new File("."), config, collector);    assertProblemFree(collector);    assertEquals("${key}", obj.values.get(0));}
public void maven_f5222_0() throws Exception
{    Model model = new Model();    Properties p = new Properties();    p.setProperty("key", "value");    p.setProperty("key2", "value2");    p.setProperty("key3", "value3");    p.setProperty("key4", "value4");    List<String[]> values = new ArrayList<>();    values.add(new String[] { "${key}", "${key2}" });    values.add(new String[] { "${key3}", "${key4}" });    ObjectWithListField obj = new ObjectWithListField(values);    StringSearchModelInterpolator interpolator = (StringSearchModelInterpolator) createInterpolator();    ModelBuildingRequest config = createModelBuildingRequest(p);    final SimpleProblemCollector collector = new SimpleProblemCollector();    interpolator.interpolateObject(obj, model, new File("."), config, collector);    assertProblemFree(collector);    assertEquals("value", ((String[]) obj.values.get(0))[0]);    assertEquals("value2", ((String[]) obj.values.get(0))[1]);    assertEquals("value3", ((String[]) obj.values.get(1))[0]);    assertEquals("value4", ((String[]) obj.values.get(1))[1]);}
public void maven_f5223_0() throws Exception
{    Model model = new Model();    Properties p = new Properties();    p.setProperty("key", "value");    p.setProperty("key2", "value2");    Map<String, String> values = new HashMap<>();    values.put("key", "${key}");    values.put("key2", "${key2}");    ObjectWithMapField obj = new ObjectWithMapField(values);    StringSearchModelInterpolator interpolator = (StringSearchModelInterpolator) createInterpolator();    ModelBuildingRequest config = createModelBuildingRequest(p);    final SimpleProblemCollector collector = new SimpleProblemCollector();    interpolator.interpolateObject(obj, model, new File("."), config, collector);    assertProblemFree(collector);    assertEquals("value", obj.values.get("key"));    assertEquals("value2", obj.values.get("key2"));}
public void maven_f5224_0() throws Exception
{    Model model = new Model();    Properties p = new Properties();    p.setProperty("key", "value");    p.setProperty("key2", "value2");    Map<String, String> values = new HashMap<>();    values.put("key", "val");    values.put("key2", "${key2}");    ObjectWithMapField obj = new ObjectWithMapField(values);    StringSearchModelInterpolator interpolator = (StringSearchModelInterpolator) createInterpolator();    ModelBuildingRequest config = createModelBuildingRequest(p);    final SimpleProblemCollector collector = new SimpleProblemCollector();    interpolator.interpolateObject(obj, model, new File("."), config, collector);    assertProblemFree(collector);    assertEquals("val", obj.values.get("key"));    assertEquals("value2", obj.values.get("key2"));}
public void maven_f5225_0() throws Exception
{    Model model = new Model();    Properties p = new Properties();    p.setProperty("key", "value");    p.setProperty("key2", "value2");    Map<String, String> values = Collections.unmodifiableMap(Collections.singletonMap("key", "${key}"));    ObjectWithMapField obj = new ObjectWithMapField(values);    StringSearchModelInterpolator interpolator = (StringSearchModelInterpolator) createInterpolator();    ModelBuildingRequest config = createModelBuildingRequest(p);    final SimpleProblemCollector collector = new SimpleProblemCollector();    interpolator.interpolateObject(obj, model, new File("."), config, collector);    assertProblemFree(collector);    assertEquals("${key}", obj.values.get("key"));}
public void maven_f5226_0() throws Exception
{    Model model = new Model();    Properties p = new Properties();    p.setProperty("key", "value");    p.setProperty("key2", "value2");    p.setProperty("key3", "value3");    p.setProperty("key4", "value4");    Map<String, String[]> values = new HashMap<>();    values.put("key", new String[] { "${key}", "${key2}" });    values.put("key2", new String[] { "${key3}", "${key4}" });    ObjectWithMapField obj = new ObjectWithMapField(values);    StringSearchModelInterpolator interpolator = (StringSearchModelInterpolator) createInterpolator();    ModelBuildingRequest config = createModelBuildingRequest(p);    final SimpleProblemCollector collector = new SimpleProblemCollector();    interpolator.interpolateObject(obj, model, new File("."), config, collector);    assertProblemFree(collector);    assertEquals("value", ((String[]) obj.values.get("key"))[0]);    assertEquals("value2", ((String[]) obj.values.get("key"))[1]);    assertEquals("value3", ((String[]) obj.values.get("key2"))[0]);    assertEquals("value4", ((String[]) obj.values.get("key2"))[1]);}
public void maven_f5227_0() throws Exception
{    Model model = new Model();    model.setPomFile(new File(System.getProperty("user.dir"), "pom.xml"));    File baseDir = model.getProjectDirectory();    Properties p = new Properties();    Map<String, String> values = new HashMap<>();    values.put("key", "${project.basedir}" + File.separator + "target");    ObjectWithMapField obj = new ObjectWithMapField(values);    StringSearchModelInterpolator interpolator = (StringSearchModelInterpolator) createInterpolator();    ModelBuildingRequest config = createModelBuildingRequest(p);    SimpleProblemCollector collector = new SimpleProblemCollector();    interpolator.interpolateObject(obj, model, new File("."), config, collector);    assertProblemFree(collector);    assertThat(baseDir.getCanonicalPath(), is(System.getProperty("user.dir")));    assertThat(obj.values.size(), is(1));    assertThat((String) obj.values.get("key"), is(anyOf(is(System.getProperty("user.dir") + File.separator + "target"),     is(System.getProperty("user.dir") + File.separator + '.' + File.separator + "target"))));}
public void maven_f5228_0() throws Exception
{    Model model = new Model();    File baseDir = new File(System.getProperty("user.dir"));    Properties p = new Properties();    ObjectWithNotInterpolatedFile obj = new ObjectWithNotInterpolatedFile(baseDir);    StringSearchModelInterpolator interpolator = (StringSearchModelInterpolator) createInterpolator();    ModelBuildingRequest config = createModelBuildingRequest(p);    SimpleProblemCollector collector = new SimpleProblemCollector();    interpolator.interpolateObject(obj, model, new File("."), config, collector);    assertProblemFree(collector);        Map<Class<?>, ?> cache = (Map<Class<?>, ?>) getField(StringSearchModelInterpolator.class, "CACHED_ENTRIES").get(null);    Object objCacheItem = cache.get(Object.class);    Object fileCacheItem = cache.get(File.class);    assertNotNull(objCacheItem);    assertNotNull(fileCacheItem);    assertThat(((Object[]) getInternalState(objCacheItem, "fields")).length, is(0));    assertThat(((Object[]) getInternalState(fileCacheItem, "fields")).length, is(0));}
public void maven_f5229_0() throws Exception
{    Model model = new Model();    File baseDir = new File(System.getProperty("user.dir"));    Properties p = new Properties();    StringSearchModelInterpolator interpolator = (StringSearchModelInterpolator) createInterpolator();    ModelBuildingRequest config = createModelBuildingRequest(p);    SimpleProblemCollector collector = new SimpleProblemCollector();    interpolator.interpolateObject(baseDir, model, new File("."), config, collector);    assertProblemFree(collector);        Map<Class<?>, ?> cache = (Map<Class<?>, ?>) getField(StringSearchModelInterpolator.class, "CACHED_ENTRIES").get(null);    Object fileCacheItem = cache.get(File.class);    assertNotNull(fileCacheItem);    assertThat(((Object[]) getInternalState(fileCacheItem, "fields")).length, is(0));}
public void maven_f5230_0() throws Exception
{    final Model model = new Model();    final Properties p = new Properties();    p.setProperty("key", "value");    p.setProperty("key2", "value2");    p.setProperty("key3", "value3");    p.setProperty("key4", "value4");    p.setProperty("key5", "value5");    final StringSearchModelInterpolator interpolator = (StringSearchModelInterpolator) createInterpolator();    int numItems = 100;    final CountDownLatch countDownLatch = new CountDownLatch(1);    List<Future<SimpleProblemCollector>> futures = new ArrayList<>();    for (int i = 0; i < numItems; i++) {        Callable<SimpleProblemCollector> future = new Callable<SimpleProblemCollector>() {            public SimpleProblemCollector call() throws Exception {                final ObjectWithMixedProtection obj = getValueList();                final ModelBuildingRequest config = createModelBuildingRequest(p);                countDownLatch.await();                final SimpleProblemCollector collector = new SimpleProblemCollector();                interpolator.interpolateObject(obj, model, new File("."), config, collector);                return collector;            }        };        FutureTask<SimpleProblemCollector> task = new FutureTask<>(future);        futures.add(task);        new Thread(task).start();    }        countDownLatch.countDown();    for (Future<SimpleProblemCollector> result : futures) {                SimpleProblemCollector problemCollector = result.get();        assertProblemFree(problemCollector);    }}
public SimpleProblemCollector maven_f5231_0() throws Exception
{    final ObjectWithMixedProtection obj = getValueList();    final ModelBuildingRequest config = createModelBuildingRequest(p);    countDownLatch.await();    final SimpleProblemCollector collector = new SimpleProblemCollector();    interpolator.interpolateObject(obj, model, new File("."), config, collector);    return collector;}
private ObjectWithMixedProtection maven_f5232_0()
{    List<String[]> values = new ArrayList<>();    values.add(new String[] { "${key}", "${key2}" });    values.add(new String[] { "${key3}", "${key4}" });    List<String> values2 = new ArrayList<>();    values.add(new String[] { "${key}", "${key2}" });    values.add(new String[] { "${key3}", "${key4}" });    List<String> values3 = new ArrayList<>();    values.add(new String[] { "${key}", "${key2}" });    values.add(new String[] { "${key3}", "${key4}" });    return new ObjectWithMixedProtection(values, values2, values3, "${key5}");}
public String maven_f5233_0()
{    return fooBar;}
public void maven_f5234_0()
{    Properties props = new Properties();    props.setProperty("expression", "value");    DefaultModelBuildingRequest request = new DefaultModelBuildingRequest();    request.setUserProperties(props);    SimpleProblemCollector problems = new SimpleProblemCollector();    StringSearchModelInterpolator interpolator = new StringSearchModelInterpolator();    interpolator.interpolateObject(new ClassWithFinalField(), new Model(), null, request, problems);    assertProblemFree(problems);}
public void maven_f5235_0()
{    Properties props = new Properties();    props.setProperty("expression", "value");    DefaultModelBuildingRequest request = new DefaultModelBuildingRequest();    request.setUserProperties(props);    InputSource source = new InputSource();    source.setLocation("${expression}");    source.setModelId("${expression}");    Model model = new Model();    model.setLocation("", new InputLocation(1, 1, source));    SimpleProblemCollector problems = new SimpleProblemCollector();    StringSearchModelInterpolator interpolator = new StringSearchModelInterpolator();    interpolator.interpolateObject(model, model, null, request, problems);    assertProblemFree(problems);    assertEquals("${expression}", source.getLocation());    assertEquals("${expression}", source.getModelId());}
public void maven_f5236_0()
{    Model parent = new Model();    parent.setModelVersion("4.0.0");    Model model = new Model();    modelMerger.mergeModel_ModelVersion(model, parent, false, null);    assertNull(model.getModelVersion());    model.setModelVersion("5.0.0");    modelMerger.mergeModel_ModelVersion(model, parent, false, null);    assertEquals("5.0.0", model.getModelVersion());}
public void maven_f5237_0()
{    Model parent = new Model();    parent.setArtifactId("PARENT");    Model model = new Model();    modelMerger.mergeModel_ArtifactId(model, parent, false, null);    assertNull(model.getArtifactId());    model.setArtifactId("MODEL");    modelMerger.mergeModel_ArtifactId(model, parent, false, null);    assertEquals("MODEL", model.getArtifactId());}
public void maven_f5238_0()
{    Model parent = new Model();    parent.setPrerequisites(new Prerequisites());    Model model = new Model();    modelMerger.mergeModel_Prerequisites(model, parent, false, null);    assertNull(model.getPrerequisites());    Prerequisites modelPrerequisites = new Prerequisites();    modelPrerequisites.setMaven("3.0");    model.setPrerequisites(modelPrerequisites);    modelMerger.mergeModel_Prerequisites(model, parent, false, null);    assertEquals(modelPrerequisites, model.getPrerequisites());}
public void maven_f5239_0()
{    Model parent = new Model();    parent.setProfiles(Collections.singletonList(new Profile()));    ;    Model model = new Model();    modelMerger.mergeModel_Profiles(model, parent, false, null);    assertEquals(0, model.getProfiles().size());    Profile modelProfile = new Profile();    modelProfile.setId("MODEL");    model.setProfiles(Collections.singletonList(modelProfile));    modelMerger.mergeModel_Prerequisites(model, parent, false, null);    assertEquals(Collections.singletonList(modelProfile), model.getProfiles());}
private String maven_f5240_0(String url)
{    return normalizer.normalize(url);}
public void maven_f5241_0()
{    assertNull(normalize(null));}
public void maven_f5242_0()
{    assertEquals("", normalize(""));    assertEquals("http://server.org/dir", normalize("http://server.org/dir"));    assertEquals("http://server.org/dir/", normalize("http://server.org/dir/"));}
public void maven_f5243_0()
{    assertEquals("http://server.org/child", normalize("http://server.org/parent/../child"));    assertEquals("http://server.org/child", normalize("http://server.org/grand/parent/../../child"));    assertEquals("http://server.org//child", normalize("http://server.org/parent/..//child"));    assertEquals("http://server.org/child", normalize("http://server.org/parent//../child"));}
public void maven_f5244_0()
{    assertEquals("scm:hg:ssh://localhost//home/user", normalize("scm:hg:ssh://localhost//home/user"));    assertEquals("file:////UNC/server", normalize("file:////UNC/server"));    assertEquals("[fetch=]http://server.org/[push=]ssh://server.org/", normalize("[fetch=]http://server.org/[push=]ssh://server.org/"));}
public void maven_f5245_0()
{    assertEquals("/", normalize("/../"));}
public void maven_f5246_0()
{    assertEquals("", normalize("a/../"));}
public void maven_f5247_0()
{    assertEquals("../", normalize("../"));}
protected void maven_f5248_0() throws Exception
{    super.setUp();    activator = activatorClass.getConstructor().newInstance();}
protected void maven_f5249_0() throws Exception
{    activator = null;    super.tearDown();}
protected ProfileActivationContext maven_f5250_0(final Properties userProperties, final Properties systemProperties)
{    DefaultProfileActivationContext context = new DefaultProfileActivationContext();    return context.setUserProperties(userProperties).setSystemProperties(systemProperties);}
protected void maven_f5251_0(boolean active, Profile profile, ProfileActivationContext context)
{    SimpleProblemCollector problems = new SimpleProblemCollector();    assertEquals(active, activator.isActive(profile, context, problems));    assertEquals(problems.getErrors().toString(), 0, problems.getErrors().size());    assertEquals(problems.getWarnings().toString(), 0, problems.getWarnings().size());}
private Profile maven_f5252_0(String jdkVersion)
{    Activation a = new Activation();    a.setJdk(jdkVersion);    Profile p = new Profile();    p.setActivation(a);    return p;}
private Properties maven_f5253_0(String javaVersion)
{    Properties props = new Properties();    props.setProperty("java.version", javaVersion);    return props;}
public void maven_f5254_0() throws Exception
{    Profile p = new Profile();    assertActivation(false, p, newContext(null, null));    p.setActivation(new Activation());    assertActivation(false, p, newContext(null, null));}
public void maven_f5255_0() throws Exception
{    Profile profile = newProfile("1.4");    assertActivation(true, profile, newContext(null, newProperties("1.4")));    assertActivation(true, profile, newContext(null, newProperties("1.4.2")));    assertActivation(true, profile, newContext(null, newProperties("1.4.2_09")));    assertActivation(true, profile, newContext(null, newProperties("1.4.2_09-b03")));    assertActivation(false, profile, newContext(null, newProperties("1.3")));    assertActivation(false, profile, newContext(null, newProperties("1.5")));}
public void maven_f5256_0() throws Exception
{    Profile profile = newProfile("!1.4");    assertActivation(false, profile, newContext(null, newProperties("1.4")));    assertActivation(false, profile, newContext(null, newProperties("1.4.2")));    assertActivation(false, profile, newContext(null, newProperties("1.4.2_09")));    assertActivation(false, profile, newContext(null, newProperties("1.4.2_09-b03")));    assertActivation(true, profile, newContext(null, newProperties("1.3")));    assertActivation(true, profile, newContext(null, newProperties("1.5")));}
public void maven_f5257_0() throws Exception
{    Profile profile = newProfile("[1.5,1.6]");    assertActivation(false, profile, newContext(null, newProperties("1.4")));    assertActivation(false, profile, newContext(null, newProperties("1.4.2")));    assertActivation(false, profile, newContext(null, newProperties("1.4.2_09")));    assertActivation(false, profile, newContext(null, newProperties("1.4.2_09-b03")));    assertActivation(true, profile, newContext(null, newProperties("1.5")));    assertActivation(true, profile, newContext(null, newProperties("1.5.0")));    assertActivation(true, profile, newContext(null, newProperties("1.5.0_09")));    assertActivation(true, profile, newContext(null, newProperties("1.5.0_09-b03")));    assertActivation(true, profile, newContext(null, newProperties("1.5.1")));    assertActivation(true, profile, newContext(null, newProperties("1.6")));    assertActivation(true, profile, newContext(null, newProperties("1.6.0")));    assertActivation(true, profile, newContext(null, newProperties("1.6.0_09")));    assertActivation(true, profile, newContext(null, newProperties("1.6.0_09-b03")));}
public void maven_f5258_0() throws Exception
{    Profile profile = newProfile("(1.3,1.6)");    assertActivation(false, profile, newContext(null, newProperties("1.3")));    assertActivation(false, profile, newContext(null, newProperties("1.3.0")));    assertActivation(false, profile, newContext(null, newProperties("1.3.0_09")));    assertActivation(false, profile, newContext(null, newProperties("1.3.0_09-b03")));    assertActivation(true, profile, newContext(null, newProperties("1.3.1")));    assertActivation(true, profile, newContext(null, newProperties("1.3.1_09")));    assertActivation(true, profile, newContext(null, newProperties("1.3.1_09-b03")));    assertActivation(true, profile, newContext(null, newProperties("1.5")));    assertActivation(true, profile, newContext(null, newProperties("1.5.0")));    assertActivation(true, profile, newContext(null, newProperties("1.5.0_09")));    assertActivation(true, profile, newContext(null, newProperties("1.5.0_09-b03")));    assertActivation(true, profile, newContext(null, newProperties("1.5.1")));    assertActivation(false, profile, newContext(null, newProperties("1.6")));}
public void maven_f5259_0() throws Exception
{    Profile profile = newProfile("[1.5,)");    assertActivation(false, profile, newContext(null, newProperties("1.4")));    assertActivation(false, profile, newContext(null, newProperties("1.4.2")));    assertActivation(false, profile, newContext(null, newProperties("1.4.2_09")));    assertActivation(false, profile, newContext(null, newProperties("1.4.2_09-b03")));    assertActivation(true, profile, newContext(null, newProperties("1.5")));    assertActivation(true, profile, newContext(null, newProperties("1.5.0")));    assertActivation(true, profile, newContext(null, newProperties("1.5.0_09")));    assertActivation(true, profile, newContext(null, newProperties("1.5.0_09-b03")));    assertActivation(true, profile, newContext(null, newProperties("1.5.1")));    assertActivation(true, profile, newContext(null, newProperties("1.6")));    assertActivation(true, profile, newContext(null, newProperties("1.6.0")));    assertActivation(true, profile, newContext(null, newProperties("1.6.0_09")));    assertActivation(true, profile, newContext(null, newProperties("1.6.0_09-b03")));}
public void maven_f5260_0() throws Exception
{    Profile profile = newProfile("(,1.6)");    assertActivation(true, profile, newContext(null, newProperties("1.5")));    assertActivation(true, profile, newContext(null, newProperties("1.5.0")));    assertActivation(true, profile, newContext(null, newProperties("1.5.0_09")));    assertActivation(true, profile, newContext(null, newProperties("1.5.0_09-b03")));    assertActivation(true, profile, newContext(null, newProperties("1.5.1")));    assertActivation(false, profile, newContext(null, newProperties("1.6")));    assertActivation(false, profile, newContext(null, newProperties("1.6.0")));    assertActivation(false, profile, newContext(null, newProperties("1.6.0_09")));    assertActivation(false, profile, newContext(null, newProperties("1.6.0_09-b03")));}
private Profile maven_f5261_0(String key, String value)
{    ActivationProperty ap = new ActivationProperty();    ap.setName(key);    ap.setValue(value);    Activation a = new Activation();    a.setProperty(ap);    Profile p = new Profile();    p.setActivation(a);    return p;}
private Properties maven_f5262_0(String key, String value)
{    Properties props = new Properties();    props.setProperty(key, value);    return props;}
public void maven_f5263_0() throws Exception
{    Profile p = new Profile();    assertActivation(false, p, newContext(null, null));    p.setActivation(new Activation());    assertActivation(false, p, newContext(null, null));}
public void maven_f5264_0() throws Exception
{    Profile profile = newProfile("prop", null);    assertActivation(true, profile, newContext(newProperties("prop", "value"), null));    assertActivation(false, profile, newContext(newProperties("prop", ""), null));    assertActivation(false, profile, newContext(newProperties("other", "value"), null));}
public void maven_f5265_0() throws Exception
{    Profile profile = newProfile("prop", null);    assertActivation(true, profile, newContext(null, newProperties("prop", "value")));    assertActivation(false, profile, newContext(null, newProperties("prop", "")));    assertActivation(false, profile, newContext(null, newProperties("other", "value")));}
public void maven_f5266_0() throws Exception
{    Profile profile = newProfile("!prop", null);    assertActivation(false, profile, newContext(newProperties("prop", "value"), null));    assertActivation(true, profile, newContext(newProperties("prop", ""), null));    assertActivation(true, profile, newContext(newProperties("other", "value"), null));}
public void maven_f5267_0() throws Exception
{    Profile profile = newProfile("!prop", null);    assertActivation(false, profile, newContext(null, newProperties("prop", "value")));    assertActivation(true, profile, newContext(null, newProperties("prop", "")));    assertActivation(true, profile, newContext(null, newProperties("other", "value")));}
public void maven_f5268_0() throws Exception
{    Profile profile = newProfile("prop", "value");    assertActivation(true, profile, newContext(newProperties("prop", "value"), null));    assertActivation(false, profile, newContext(newProperties("prop", "other"), null));    assertActivation(false, profile, newContext(newProperties("prop", ""), null));}
public void maven_f5269_0() throws Exception
{    Profile profile = newProfile("prop", "value");    assertActivation(true, profile, newContext(null, newProperties("prop", "value")));    assertActivation(false, profile, newContext(null, newProperties("prop", "other")));    assertActivation(false, profile, newContext(null, newProperties("other", "")));}
public void maven_f5270_0() throws Exception
{    Profile profile = newProfile("prop", "!value");    assertActivation(false, profile, newContext(newProperties("prop", "value"), null));    assertActivation(true, profile, newContext(newProperties("prop", "other"), null));    assertActivation(true, profile, newContext(newProperties("prop", ""), null));}
public void maven_f5271_0() throws Exception
{    Profile profile = newProfile("prop", "!value");    assertActivation(false, profile, newContext(null, newProperties("prop", "value")));    assertActivation(true, profile, newContext(null, newProperties("prop", "other")));    assertActivation(true, profile, newContext(null, newProperties("other", "")));}
public void maven_f5272_0() throws Exception
{    Profile profile = newProfile("prop", "value");    Properties props1 = newProperties("prop", "value");    Properties props2 = newProperties("prop", "other");    assertActivation(true, profile, newContext(props1, props2));    assertActivation(false, profile, newContext(props2, props1));}
private Model maven_f5273_0(String pom) throws Exception
{    String resource = "/poms/validation/" + pom;    InputStream is = getClass().getResourceAsStream(resource);    assertNotNull("missing resource: " + resource, is);    return new MavenXpp3Reader().read(is);}
private SimpleProblemCollector maven_f5274_0(String pom) throws Exception
{    return validateEffective(pom, ModelBuildingRequest.VALIDATION_LEVEL_STRICT);}
private SimpleProblemCollector maven_f5275_0(String pom) throws Exception
{    return validateRaw(pom, ModelBuildingRequest.VALIDATION_LEVEL_STRICT);}
private SimpleProblemCollector maven_f5276_0(String pom, int level) throws Exception
{    ModelBuildingRequest request = new DefaultModelBuildingRequest().setValidationLevel(level);    SimpleProblemCollector problems = new SimpleProblemCollector(read(pom));    validator.validateEffectiveModel(problems.getModel(), request, problems);    return problems;}
private SimpleProblemCollector maven_f5277_0(String pom, int level) throws Exception
{    ModelBuildingRequest request = new DefaultModelBuildingRequest().setValidationLevel(level);    SimpleProblemCollector problems = new SimpleProblemCollector(read(pom));    validator.validateRawModel(problems.getModel(), request, problems);    return problems;}
private void maven_f5278_0(String msg, String substring)
{    assertTrue("\"" + substring + "\" was not found in: " + msg, msg.contains(substring));}
protected void maven_f5279_0() throws Exception
{    super.setUp();    validator = new DefaultModelValidator();}
protected void maven_f5280_0() throws Exception
{    this.validator = null;    super.tearDown();}
private void maven_f5281_0(SimpleProblemCollector result, int fatals, int errors, int warnings)
{    assertEquals(String.valueOf(result.getFatals()), fatals, result.getFatals().size());    assertEquals(String.valueOf(result.getErrors()), errors, result.getErrors().size());    assertEquals(String.valueOf(result.getWarnings()), warnings, result.getWarnings().size());}
public void maven_f5282_0() throws Exception
{    SimpleProblemCollector result = validate("missing-modelVersion-pom.xml");    assertViolations(result, 0, 1, 0);    assertEquals("'modelVersion' is missing.", result.getErrors().get(0));}
public void maven_f5283_0() throws Exception
{    SimpleProblemCollector result = validateRaw("bad-modelVersion.xml", ModelBuildingRequest.VALIDATION_LEVEL_STRICT);    assertViolations(result, 1, 0, 0);    assertTrue(result.getFatals().get(0).contains("modelVersion"));}
public void maven_f5284_0() throws Exception
{    SimpleProblemCollector result = validate("missing-artifactId-pom.xml");    assertViolations(result, 0, 1, 0);    assertEquals("'artifactId' is missing.", result.getErrors().get(0));}
public void maven_f5285_0() throws Exception
{    SimpleProblemCollector result = validate("missing-groupId-pom.xml");    assertViolations(result, 0, 1, 0);    assertEquals("'groupId' is missing.", result.getErrors().get(0));}
public void maven_f5286_0() throws Exception
{    SimpleProblemCollector result = validate("invalid-ids-pom.xml");    assertViolations(result, 0, 2, 0);    assertEquals("'groupId' with value 'o/a/m' does not match a valid id pattern.", result.getErrors().get(0));    assertEquals("'artifactId' with value 'm$-do$' does not match a valid id pattern.", result.getErrors().get(1));}
public void maven_f5287_0() throws Exception
{    SimpleProblemCollector result = validate("missing-type-pom.xml");    assertViolations(result, 0, 1, 0);    assertEquals("'packaging' is missing.", result.getErrors().get(0));}
public void maven_f5288_0() throws Exception
{    SimpleProblemCollector result = validate("missing-version-pom.xml");    assertViolations(result, 0, 1, 0);    assertEquals("'version' is missing.", result.getErrors().get(0));}
public void maven_f5289_0() throws Exception
{    SimpleProblemCollector result = validate("invalid-aggregator-packaging-pom.xml");    assertViolations(result, 0, 1, 0);    assertTrue(result.getErrors().get(0).contains("Aggregator projects require 'pom' as packaging."));}
public void maven_f5290_0() throws Exception
{    SimpleProblemCollector result = validate("missing-dependency-artifactId-pom.xml");    assertViolations(result, 0, 1, 0);    assertTrue(result.getErrors().get(0).contains("'dependencies.dependency.artifactId' for groupId:null:jar is missing"));}
public void maven_f5291_0() throws Exception
{    SimpleProblemCollector result = validate("missing-dependency-groupId-pom.xml");    assertViolations(result, 0, 1, 0);    assertTrue(result.getErrors().get(0).contains("'dependencies.dependency.groupId' for null:artifactId:jar is missing"));}
public void maven_f5292_0() throws Exception
{    SimpleProblemCollector result = validate("missing-dependency-version-pom.xml");    assertViolations(result, 0, 1, 0);    assertTrue(result.getErrors().get(0).contains("'dependencies.dependency.version' for groupId:artifactId:jar is missing"));}
public void maven_f5293_0() throws Exception
{    SimpleProblemCollector result = validate("missing-dependency-mgmt-artifactId-pom.xml");    assertViolations(result, 0, 1, 0);    assertTrue(result.getErrors().get(0).contains("'dependencyManagement.dependencies.dependency.artifactId' for groupId:null:jar is missing"));}
public void maven_f5294_0() throws Exception
{    SimpleProblemCollector result = validate("missing-dependency-mgmt-groupId-pom.xml");    assertViolations(result, 0, 1, 0);    assertTrue(result.getErrors().get(0).contains("'dependencyManagement.dependencies.dependency.groupId' for null:artifactId:jar is missing"));}
public void maven_f5295_0() throws Exception
{    SimpleProblemCollector result = validate("missing-1-pom.xml");    assertViolations(result, 0, 4, 0);    List<String> messages = result.getErrors();    assertTrue(messages.contains("\'modelVersion\' is missing."));    assertTrue(messages.contains("\'groupId\' is missing."));    assertTrue(messages.contains("\'artifactId\' is missing."));    assertTrue(messages.contains("\'version\' is missing."));}
public void maven_f5296_0() throws Exception
{    SimpleProblemCollector result = validate("missing-plugin-artifactId-pom.xml");    assertViolations(result, 0, 1, 0);    assertEquals("'build.plugins.plugin.artifactId' is missing.", result.getErrors().get(0));}
public void maven_f5297_0() throws Exception
{    SimpleProblemCollector result = validate("empty-plugin-version.xml");    assertViolations(result, 0, 1, 0);    assertEquals("'build.plugins.plugin.version' for org.apache.maven.plugins:maven-it-plugin" + " must be a valid version but is ''.", result.getErrors().get(0));}
public void maven_f5298_0() throws Exception
{    SimpleProblemCollector result = validateRaw("missing-repository-id-pom.xml", ModelBuildingRequest.VALIDATION_LEVEL_STRICT);    assertViolations(result, 0, 4, 0);    assertEquals("'repositories.repository.id' is missing.", result.getErrors().get(0));    assertEquals("'repositories.repository.[null].url' is missing.", result.getErrors().get(1));    assertEquals("'pluginRepositories.pluginRepository.id' is missing.", result.getErrors().get(2));    assertEquals("'pluginRepositories.pluginRepository.[null].url' is missing.", result.getErrors().get(3));}
public void maven_f5299_0() throws Exception
{    SimpleProblemCollector result = validate("missing-resource-directory-pom.xml");    assertViolations(result, 0, 2, 0);    assertEquals("'build.resources.resource.directory' is missing.", result.getErrors().get(0));    assertEquals("'build.testResources.testResource.directory' is missing.", result.getErrors().get(1));}
public void maven_f5300_0() throws Exception
{    SimpleProblemCollector result = validate("bad-plugin-dependency-scope.xml");    assertViolations(result, 0, 3, 0);    assertTrue(result.getErrors().get(0).contains("test:d"));    assertTrue(result.getErrors().get(1).contains("test:e"));    assertTrue(result.getErrors().get(2).contains("test:f"));}
public void maven_f5301_0() throws Exception
{    SimpleProblemCollector result = validate("bad-dependency-scope.xml");    assertViolations(result, 0, 0, 2);    assertTrue(result.getWarnings().get(0).contains("test:f"));    assertTrue(result.getWarnings().get(1).contains("test:g"));}
public void maven_f5302_0() throws Exception
{    SimpleProblemCollector result = validate("bad-dependency-management-scope.xml");    assertViolations(result, 0, 0, 1);    assertContains(result.getWarnings().get(0), "test:g");}
public void maven_f5303_0() throws Exception
{    SimpleProblemCollector result = validate("bad-dependency-version.xml");    assertViolations(result, 0, 2, 0);    assertContains(result.getErrors().get(0), "'dependencies.dependency.version' for test:b:jar must be a valid version");    assertContains(result.getErrors().get(1), "'dependencies.dependency.version' for test:c:jar must not contain any of these characters");}
public void maven_f5304_0() throws Exception
{    SimpleProblemCollector result = validate("duplicate-module.xml");    assertViolations(result, 0, 1, 0);    assertTrue(result.getErrors().get(0).contains("child"));}
public void maven_f5305_0() throws Exception
{    SimpleProblemCollector result = validateRaw("duplicate-profile-id.xml");    assertViolations(result, 0, 1, 0);    assertTrue(result.getErrors().get(0).contains("non-unique-id"));}
public void maven_f5306_0() throws Exception
{    SimpleProblemCollector result = validate("bad-plugin-version.xml");    assertViolations(result, 0, 4, 0);    assertContains(result.getErrors().get(0), "'build.plugins.plugin.version' for test:mip must be a valid version");    assertContains(result.getErrors().get(1), "'build.plugins.plugin.version' for test:rmv must be a valid version");    assertContains(result.getErrors().get(2), "'build.plugins.plugin.version' for test:lmv must be a valid version");    assertContains(result.getErrors().get(3), "'build.plugins.plugin.version' for test:ifsc must not contain any of these characters");}
public void maven_f5307_0() throws Exception
{    SimpleProblemCollector result = validate("distribution-management-status.xml");    assertViolations(result, 0, 1, 0);    assertTrue(result.getErrors().get(0).contains("distributionManagement.status"));}
public void maven_f5308_0() throws Exception
{    SimpleProblemCollector result = validateRaw("incomplete-parent.xml");    assertViolations(result, 3, 0, 0);    assertTrue(result.getFatals().get(0).contains("parent.groupId"));    assertTrue(result.getFatals().get(1).contains("parent.artifactId"));    assertTrue(result.getFatals().get(2).contains("parent.version"));}
public void maven_f5309_0() throws Exception
{    SimpleProblemCollector result = validateRaw("hard-coded-system-path.xml");    assertViolations(result, 0, 0, 1);    assertContains(result.getWarnings().get(0), "'dependencies.dependency.systemPath' for test:a:jar should use a variable instead of a hard-coded path");    SimpleProblemCollector result_31 = validateRaw("hard-coded-system-path.xml", ModelBuildingRequest.VALIDATION_LEVEL_MAVEN_3_1);    assertViolations(result_31, 0, 0, 3);    assertContains(result_31.getWarnings().get(0), "'dependencies.dependency.scope' for test:a:jar declares usage of deprecated 'system' scope");    assertContains(result_31.getWarnings().get(1), "'dependencies.dependency.systemPath' for test:a:jar should use a variable instead of a hard-coded path");    assertContains(result_31.getWarnings().get(2), "'dependencies.dependency.scope' for test:b:jar declares usage of deprecated 'system' scope");}
public void maven_f5310_0() throws Exception
{    SimpleProblemCollector result = validate("empty-module.xml");    assertViolations(result, 0, 1, 0);    assertTrue(result.getErrors().get(0).contains("'modules.module[0]' has been specified without a path"));}
public void maven_f5311_0() throws Exception
{    SimpleProblemCollector result = validateRaw("duplicate-plugin.xml");    assertViolations(result, 0, 0, 4);    assertTrue(result.getWarnings().get(0).contains("duplicate declaration of plugin test:duplicate"));    assertTrue(result.getWarnings().get(1).contains("duplicate declaration of plugin test:managed-duplicate"));    assertTrue(result.getWarnings().get(2).contains("duplicate declaration of plugin profile:duplicate"));    assertTrue(result.getWarnings().get(3).contains("duplicate declaration of plugin profile:managed-duplicate"));}
public void maven_f5312_0() throws Exception
{    SimpleProblemCollector result = validateRaw("duplicate-plugin-execution.xml");    assertViolations(result, 0, 4, 0);    assertContains(result.getErrors().get(0), "duplicate execution with id a");    assertContains(result.getErrors().get(1), "duplicate execution with id default");    assertContains(result.getErrors().get(2), "duplicate execution with id c");    assertContains(result.getErrors().get(3), "duplicate execution with id b");}
public void maven_f5313_0() throws Exception
{    SimpleProblemCollector result = validate("reserved-repository-id.xml");    assertViolations(result, 0, 0, 4);    assertContains(result.getWarnings().get(0), "'repositories.repository.id'" + " must not be 'local'");    assertContains(result.getWarnings().get(1), "'pluginRepositories.pluginRepository.id' must not be 'local'");    assertContains(result.getWarnings().get(2), "'distributionManagement.repository.id' must not be 'local'");    assertContains(result.getWarnings().get(3), "'distributionManagement.snapshotRepository.id' must not be 'local'");}
public void maven_f5314_0() throws Exception
{    SimpleProblemCollector result = validate("missing-plugin-dependency-groupId.xml");    assertViolations(result, 0, 1, 0);    assertTrue(result.getErrors().get(0).contains(":a:"));}
public void maven_f5315_0() throws Exception
{    SimpleProblemCollector result = validate("missing-plugin-dependency-artifactId.xml");    assertViolations(result, 0, 1, 0);    assertTrue(result.getErrors().get(0).contains("test:"));}
public void maven_f5316_0() throws Exception
{    SimpleProblemCollector result = validate("missing-plugin-dependency-version.xml");    assertViolations(result, 0, 1, 0);    assertTrue(result.getErrors().get(0).contains("test:a"));}
public void maven_f5317_0() throws Exception
{    SimpleProblemCollector result = validate("bad-plugin-dependency-version.xml");    assertViolations(result, 0, 1, 0);    assertTrue(result.getErrors().get(0).contains("test:b"));}
public void maven_f5318_0() throws Exception
{    SimpleProblemCollector result = validate("bad-version.xml");    assertViolations(result, 0, 0, 1);    assertContains(result.getWarnings().get(0), "'version' must not contain any of these characters");}
public void maven_f5319_0() throws Exception
{    SimpleProblemCollector result = validate("bad-snapshot-version.xml");    assertViolations(result, 0, 0, 1);    assertContains(result.getWarnings().get(0), "'version' uses an unsupported snapshot version format");}
public void maven_f5320_0() throws Exception
{    SimpleProblemCollector result = validate("bad-repository-id.xml");    assertViolations(result, 0, 0, 4);    assertContains(result.getWarnings().get(0), "'repositories.repository.id' must not contain any of these characters");    assertContains(result.getWarnings().get(1), "'pluginRepositories.pluginRepository.id' must not contain any of these characters");    assertContains(result.getWarnings().get(2), "'distributionManagement.repository.id' must not contain any of these characters");    assertContains(result.getWarnings().get(3), "'distributionManagement.snapshotRepository.id' must not contain any of these characters");}
public void maven_f5321_0() throws Exception
{    SimpleProblemCollector result = validateEffective("bad-dependency-exclusion-id.xml", ModelBuildingRequest.VALIDATION_LEVEL_MAVEN_2_0);    assertViolations(result, 0, 0, 2);    assertContains(result.getWarnings().get(0), "'dependencies.dependency.exclusions.exclusion.groupId' for gid:aid:jar");    assertContains(result.getWarnings().get(1), "'dependencies.dependency.exclusions.exclusion.artifactId' for gid:aid:jar");        SimpleProblemCollector result_30 = validate("bad-dependency-exclusion-id.xml");    assertViolations(result_30, 0, 0, 0);}
public void maven_f5322_0() throws Exception
{    SimpleProblemCollector result = validate("missing-dependency-exclusion-id.xml");    assertViolations(result, 0, 0, 2);    assertContains(result.getWarnings().get(0), "'dependencies.dependency.exclusions.exclusion.groupId' for gid:aid:jar is missing");    assertContains(result.getWarnings().get(1), "'dependencies.dependency.exclusions.exclusion.artifactId' for gid:aid:jar is missing");}
public void maven_f5323_0() throws Exception
{    SimpleProblemCollector result = validateRaw("bad-import-scope-type.xml");    assertViolations(result, 0, 0, 1);    assertContains(result.getWarnings().get(0), "'dependencyManagement.dependencies.dependency.type' for test:a:jar must be 'pom'");}
public void maven_f5324_0() throws Exception
{    SimpleProblemCollector result = validateRaw("bad-import-scope-classifier.xml");    assertViolations(result, 0, 1, 0);    assertContains(result.getErrors().get(0), "'dependencyManagement.dependencies.dependency.classifier' for test:a:pom:cls must be empty");}
public void maven_f5325_0() throws Exception
{    SimpleProblemCollector result = validateRaw("basedir-system-path.xml");    assertViolations(result, 0, 0, 2);    assertContains(result.getWarnings().get(0), "'dependencies.dependency.systemPath' for test:a:jar should not point at files within the project directory");    assertContains(result.getWarnings().get(1), "'dependencies.dependency.systemPath' for test:b:jar should not point at files within the project directory");    SimpleProblemCollector result_31 = validateRaw("basedir-system-path.xml", ModelBuildingRequest.VALIDATION_LEVEL_MAVEN_3_1);    assertViolations(result_31, 0, 0, 4);    assertContains(result_31.getWarnings().get(0), "'dependencies.dependency.scope' for test:a:jar declares usage of deprecated 'system' scope");    assertContains(result_31.getWarnings().get(1), "'dependencies.dependency.systemPath' for test:a:jar should not point at files within the project directory");    assertContains(result_31.getWarnings().get(2), "'dependencies.dependency.scope' for test:b:jar declares usage of deprecated 'system' scope");    assertContains(result_31.getWarnings().get(3), "'dependencies.dependency.systemPath' for test:b:jar should not point at files within the project directory");}
public void maven_f5326_0() throws Exception
{    SimpleProblemCollector result = validateRaw("raw-model/missing-plugin-version-pluginManagement.xml");    assertViolations(result, 1, 0, 0);    assertEquals("'build.pluginManagement.plugins.plugin.(groupId:artifactId)' version of a plugin must be defined. ", result.getFatals().get(0));}
public void maven_f5327_0() throws Exception
{    SimpleProblemCollector result = validateRaw("raw-model/missing-groupId-pluginManagement.xml");    assertViolations(result, 1, 0, 0);    assertEquals("'build.pluginManagement.plugins.plugin.(groupId:artifactId)' groupId of a plugin must be defined. ", result.getFatals().get(0));}
public void maven_f5328_0() throws Exception
{    SimpleProblemCollector result = validateRaw("raw-model/missing-artifactId-pluginManagement.xml");    assertViolations(result, 1, 0, 0);    assertEquals("'build.pluginManagement.plugins.plugin.(groupId:artifactId)' artifactId of a plugin must be defined. ", result.getFatals().get(0));}
public void maven_f5329_0() throws Exception
{    SimpleProblemCollector result = validateRaw("raw-model/missing-ga-pluginManagement.xml");    assertViolations(result, 2, 0, 0);    assertEquals("'build.pluginManagement.plugins.plugin.(groupId:artifactId)' groupId of a plugin must be defined. ", result.getFatals().get(0));    assertEquals("'build.pluginManagement.plugins.plugin.(groupId:artifactId)' artifactId of a plugin must be defined. ", result.getFatals().get(1));}
public void maven_f5330_0() throws Exception
{    SimpleProblemCollector result = validate("missing-report-version-pom.xml");    assertViolations(result, 0, 0, 0);}
public void maven_f5331_0() throws Exception
{    SimpleProblemCollector result = validateRaw("deprecated-dependency-metaversions-latest-and-release.xml");    assertViolations(result, 0, 0, 2);    assertContains(result.getWarnings().get(0), "'dependencies.dependency.version' for test:a:jar is either LATEST or RELEASE (both of them are being deprecated)");    assertContains(result.getWarnings().get(1), "'dependencies.dependency.version' for test:b:jar is either LATEST or RELEASE (both of them are being deprecated)");}
public void maven_f5332_0() throws Exception
{    SimpleProblemCollector result = validateRaw("raw-model/self-referencing.xml");    assertViolations(result, 1, 0, 0);    assertEquals("'dependencies.dependency[com.example.group:testinvalidpom:0.0.1-SNAPSHOT]' for com.example.group:testinvalidpom:0.0.1-SNAPSHOT is referencing itself.", result.getFatals().get(0));}
public void maven_f5333_0() throws Exception
{    SimpleProblemCollector result = validateRaw("raw-model/self-referencing-classifier.xml");    assertViolations(result, 0, 0, 0);}
public void maven_f5334_0() throws Exception
{    SimpleProblemCollector result = validateRaw("raw-model/ok-ci-friendly-sha1.xml");    assertViolations(result, 0, 0, 0);}
public void maven_f5335_0() throws Exception
{    SimpleProblemCollector result = validateRaw("raw-model/ok-ci-friendly-revision.xml");    assertViolations(result, 0, 0, 0);}
public void maven_f5336_0() throws Exception
{    SimpleProblemCollector result = validateRaw("raw-model/ok-ci-friendly-changelist.xml");    assertViolations(result, 0, 0, 0);}
public void maven_f5337_0() throws Exception
{    SimpleProblemCollector result = validateRaw("raw-model/ok-ci-friendly-all-expressions.xml");    assertViolations(result, 0, 0, 0);}
public void maven_f5338_0() throws Exception
{    SimpleProblemCollector result = validateRaw("raw-model/bad-ci-friendly.xml");    assertViolations(result, 0, 0, 1);    assertEquals("'version' contains an expression but should be a constant.", result.getWarnings().get(0));}
public void maven_f5339_0() throws Exception
{    SimpleProblemCollector result = validateRaw("raw-model/bad-ci-friendly-sha1plus.xml");    assertViolations(result, 0, 0, 1);    assertEquals("'version' contains an expression but should be a constant.", result.getWarnings().get(0));}
public void maven_f5340_0() throws Exception
{    SimpleProblemCollector result = validateRaw("raw-model/bad-ci-friendly-sha1plus2.xml");    assertViolations(result, 0, 0, 1);    assertEquals("'version' contains an expression but should be a constant.", result.getWarnings().get(0));}
public void maven_f5341_0() throws Exception
{    SimpleProblemCollector result = validateRaw("raw-model/bad-parent-version-latest.xml");    assertViolations(result, 0, 0, 1);    assertEquals("'parent.version' is either LATEST or RELEASE (both of them are being deprecated)", result.getWarnings().get(0));}
public void maven_f5342_0() throws Exception
{    SimpleProblemCollector result = validateRaw("raw-model/bad-parent-version-release.xml");    assertViolations(result, 0, 0, 1);    assertEquals("'parent.version' is either LATEST or RELEASE (both of them are being deprecated)", result.getWarnings().get(0));}
public voidf5343_1CharSequence content)
{    }
private String maven_f5344_0(CharSequence content)
{    if (content == null) {        return "";    } else {        return content.toString();    }}
public voidf5345_1CharSequence content, Throwable error)
{    }
public voidf5346_1Throwable error)
{    }
public voidf5347_1CharSequence content)
{    }
public voidf5348_1CharSequence content, Throwable error)
{    }
public voidf5349_1Throwable error)
{    }
public voidf5350_1CharSequence content)
{    }
public voidf5351_1CharSequence content, Throwable error)
{    }
public voidf5352_1Throwable error)
{    }
public voidf5353_1CharSequence content)
{    }
public voidf5354_1CharSequence content, Throwable error)
{    }
public voidf5355_1Throwable error)
{    }
public boolean maven_f5356_0()
{    return logger.isDebugEnabled();}
public boolean maven_f5357_0()
{    return logger.isInfoEnabled();}
public boolean maven_f5358_0()
{    return logger.isWarnEnabled();}
public boolean maven_f5359_0()
{    return logger.isErrorEnabled();}
public void maven_f5360_0(Log log)
{    this.log = log;}
public Log maven_f5361_0()
{    if (log == null) {        log = new SystemStreamLog();    }    return log;}
public Map maven_f5362_0()
{    return pluginContext;}
public void maven_f5363_0(Map pluginContext)
{    this.pluginContext = pluginContext;}
public String maven_f5364_0()
{    return longMessage;}
public Object maven_f5365_0()
{    return source;}
public String maven_f5366_0()
{    return getComponentFactory();}
public void maven_f5367_0(String language)
{    setComponentFactory(language);}
public String maven_f5368_0()
{    return deprecated;}
public void maven_f5369_0(String deprecated)
{    this.deprecated = deprecated;}
public List<Parameter> maven_f5370_0()
{    return parameters;}
public void maven_f5371_0(List<Parameter> parameters) throws DuplicateParameterException
{    for (Parameter parameter : parameters) {        addParameter(parameter);    }}
public void maven_f5372_0(Parameter parameter) throws DuplicateParameterException
{    if (parameters != null && parameters.contains(parameter)) {        throw new DuplicateParameterException(parameter.getName() + " has been declared multiple times in mojo with goal: " + getGoal() + " (implementation: " + getImplementation() + ")");    }    if (parameters == null) {        parameters = new LinkedList<>();    }    parameters.add(parameter);}
public Map<String, Parameter> maven_f5373_0()
{    if (parameterMap == null) {        parameterMap = new HashMap<>();        if (parameters != null) {            for (Parameter pd : parameters) {                parameterMap.put(pd.getName(), pd);            }        }    }    return parameterMap;}
public void maven_f5374_0(String requiresDependencyResolution)
{    this.dependencyResolutionRequired = requiresDependencyResolution;}
public String maven_f5375_0()
{    return dependencyResolutionRequired;}
public String maven_f5376_0()
{    return dependencyResolutionRequired;}
public void maven_f5377_0(String requiresDependencyCollection)
{    this.dependencyCollectionRequired = requiresDependencyCollection;}
public String maven_f5378_0()
{    return dependencyCollectionRequired;}
public void maven_f5379_0(boolean requiresProject)
{    this.projectRequired = requiresProject;}
public boolean maven_f5380_0()
{    return projectRequired;}
public void maven_f5381_0(boolean requiresOnline)
{    this.onlineRequired = requiresOnline;}
public boolean maven_f5382_0()
{    return onlineRequired;}
public boolean maven_f5383_0()
{    return onlineRequired;}
public String maven_f5384_0()
{    return phase;}
public void maven_f5385_0(String phase)
{    this.phase = phase;}
public String maven_f5386_0()
{    return since;}
public void maven_f5387_0(String since)
{    this.since = since;}
public String maven_f5388_0()
{    return goal;}
public void maven_f5389_0(String goal)
{    this.goal = goal;}
public String maven_f5390_0()
{    return executePhase;}
public void maven_f5391_0(String executePhase)
{    this.executePhase = executePhase;}
public boolean maven_f5392_0()
{    return MULTI_PASS_EXEC_STRATEGY.equals(executionStrategy);}
public String maven_f5393_0()
{    return executionStrategy;}
public void maven_f5394_0(String executionStrategy)
{    this.executionStrategy = executionStrategy;}
public PlexusConfiguration maven_f5395_0()
{    if (mojoConfiguration == null) {        mojoConfiguration = new XmlPlexusConfiguration("configuration");    }    return mojoConfiguration;}
public void maven_f5396_0(PlexusConfiguration mojoConfiguration)
{    this.mojoConfiguration = mojoConfiguration;}
public String maven_f5397_0()
{    return Mojo.ROLE;}
public String maven_f5398_0()
{    return getId();}
public String maven_f5399_0()
{    return getPluginDescriptor().getId() + ":" + getGoal();}
public String maven_f5400_0()
{    return getPluginDescriptor().getGoalPrefix() + ":" + getGoal();}
public String maven_f5401_0()
{    return MAVEN_PLUGIN;}
public PluginDescriptor maven_f5402_0()
{    return pluginDescriptor;}
public void maven_f5403_0(PluginDescriptor pluginDescriptor)
{    this.pluginDescriptor = pluginDescriptor;}
public boolean maven_f5404_0()
{    return inheritedByDefault;}
public void maven_f5405_0(boolean inheritedByDefault)
{    this.inheritedByDefault = inheritedByDefault;}
public boolean maven_f5406_0(Object object)
{    if (this == object) {        return true;    }    if (object instanceof MojoDescriptor) {        MojoDescriptor other = (MojoDescriptor) object;        if (!compareObjects(getPluginDescriptor(), other.getPluginDescriptor())) {            return false;        }        return compareObjects(getGoal(), other.getGoal());    }    return false;}
private boolean maven_f5407_0(Object first, Object second)
{    if (first == second) {        return true;    }    if (first == null || second == null) {        return false;    }    return first.equals(second);}
public int maven_f5408_0()
{    int result = 1;    String goal = getGoal();    if (goal != null) {        result += goal.hashCode();    }    PluginDescriptor pd = getPluginDescriptor();    if (pd != null) {        result -= pd.hashCode();    }    return result;}
public String maven_f5409_0()
{    return executeLifecycle;}
public void maven_f5410_0(String executeLifecycle)
{    this.executeLifecycle = executeLifecycle;}
public void maven_f5411_0(boolean aggregator)
{    this.aggregator = aggregator;}
public boolean maven_f5412_0()
{    return aggregator;}
public boolean maven_f5413_0()
{    return directInvocationOnly;}
public void maven_f5414_0(boolean directInvocationOnly)
{    this.directInvocationOnly = directInvocationOnly;}
public boolean maven_f5415_0()
{    return requiresReports;}
public void maven_f5416_0(boolean requiresReports)
{    this.requiresReports = requiresReports;}
public void maven_f5417_0(String executeGoal)
{    this.executeGoal = executeGoal;}
public String maven_f5418_0()
{    return executeGoal;}
public boolean maven_f5419_0()
{    return threadSafe;}
public void maven_f5420_0(boolean threadSafe)
{    this.threadSafe = threadSafe;}
public boolean maven_f5421_0()
{    return (getExecuteGoal() != null && getExecuteGoal().length() > 0) || (getExecutePhase() != null && getExecutePhase().length() > 0);}
public MojoDescriptor maven_f5422_0()
{    try {        return (MojoDescriptor) super.clone();    } catch (CloneNotSupportedException e) {        throw new UnsupportedOperationException(e);    }}
public String maven_f5423_0()
{    return name;}
public void maven_f5424_0(String name)
{    this.name = name;}
public String maven_f5425_0()
{    return type;}
public void maven_f5426_0(String type)
{    this.type = type;}
public boolean maven_f5427_0()
{    return required;}
public void maven_f5428_0(boolean required)
{    this.required = required;}
public String maven_f5429_0()
{    return description;}
public void maven_f5430_0(String description)
{    this.description = description;}
public String maven_f5431_0()
{    return expression;}
public void maven_f5432_0(String expression)
{    this.expression = expression;}
public String maven_f5433_0()
{    return deprecated;}
public void maven_f5434_0(String deprecated)
{    this.deprecated = deprecated;}
public int maven_f5435_0()
{    return name.hashCode();}
public boolean maven_f5436_0(Object other)
{    return (other instanceof Parameter) && getName().equals(((Parameter) other).getName());}
public String maven_f5437_0()
{    return alias;}
public void maven_f5438_0(String alias)
{    this.alias = alias;}
public boolean maven_f5439_0()
{    return editable;}
public void maven_f5440_0(boolean editable)
{    this.editable = editable;}
public void maven_f5441_0(String defaultValue)
{    this.defaultValue = defaultValue;}
public String maven_f5442_0()
{    return defaultValue;}
public String maven_f5443_0()
{    return "Mojo parameter [name: \'" + getName() + "\'; alias: \'" + getAlias() + "\']";}
public Requirement maven_f5444_0()
{    return requirement;}
public void maven_f5445_0(Requirement requirement)
{    this.requirement = requirement;}
public String maven_f5446_0()
{    return implementation;}
public void maven_f5447_0(String implementation)
{    this.implementation = implementation;}
public String maven_f5448_0()
{    return since;}
public void maven_f5449_0(String since)
{    this.since = since;}
public Parameter maven_f5450_0()
{    try {        return (Parameter) super.clone();    } catch (CloneNotSupportedException e) {        throw new UnsupportedOperationException(e);    }}
public List<MojoDescriptor> maven_f5451_0()
{    return (List) getComponents();}
public void maven_f5452_0(MojoDescriptor mojoDescriptor) throws DuplicateMojoDescriptorException
{    MojoDescriptor existing = null;                List<MojoDescriptor> mojos = getMojos();    if (mojos != null && mojos.contains(mojoDescriptor)) {        int indexOf = mojos.indexOf(mojoDescriptor);        existing = mojos.get(indexOf);    }    if (existing != null) {        throw new DuplicateMojoDescriptorException(getGoalPrefix(), mojoDescriptor.getGoal(), existing.getImplementation(), mojoDescriptor.getImplementation());    } else {        addComponentDescriptor(mojoDescriptor);    }}
public String maven_f5453_0()
{    return groupId;}
public void maven_f5454_0(String groupId)
{    this.groupId = groupId;}
public String maven_f5455_0()
{    return artifactId;}
public void maven_f5456_0(String artifactId)
{    this.artifactId = artifactId;}
public static String maven_f5457_0(String groupId, String artifactId, String version)
{    return groupId + ":" + artifactId + ":" + version;}
public String maven_f5458_0()
{    return groupId + ":" + artifactId;}
public String maven_f5459_0()
{    return constructPluginKey(groupId, artifactId, version);}
public static String maven_f5460_0(String id)
{    return "maven-" + id + "-plugin";}
public static String maven_f5461_0()
{    return "org.apache.maven.plugins";}
public static String maven_f5462_0(String artifactId)
{    if ("maven-plugin-plugin".equals(artifactId)) {        return "plugin";    } else {        return artifactId.replaceAll("-?maven-?", "").replaceAll("-?plugin-?", "");    }}
public String maven_f5463_0()
{    return goalPrefix;}
public void maven_f5464_0(String goalPrefix)
{    this.goalPrefix = goalPrefix;}
public void maven_f5465_0(String version)
{    this.version = version;}
public String maven_f5466_0()
{    return version;}
public void maven_f5467_0(String source)
{    this.source = source;}
public String maven_f5468_0()
{    return source;}
public boolean maven_f5469_0()
{    return inheritedByDefault;}
public void maven_f5470_0(boolean inheritedByDefault)
{    this.inheritedByDefault = inheritedByDefault;}
public List<Artifact> maven_f5471_0()
{    return artifacts;}
public void maven_f5472_0(List<Artifact> artifacts)
{    this.artifacts = artifacts;        artifactMap = null;}
public Map<String, Artifact> maven_f5473_0()
{    if (artifactMap == null) {        artifactMap = ArtifactUtils.artifactMapByVersionlessId(getArtifacts());    }    return artifactMap;}
public boolean maven_f5474_0(Object object)
{    if (this == object) {        return true;    }    return object instanceof PluginDescriptor && getId().equals(((PluginDescriptor) object).getId());}
public int maven_f5475_0()
{    return 10 + getId().hashCode();}
public MojoDescriptor maven_f5476_0(String goal)
{    if (getMojos() == null) {                return null;    }        for (MojoDescriptor desc : getMojos()) {        if (goal.equals(desc.getGoal())) {            return desc;        }    }    return null;}
public void maven_f5477_0(ClassRealm classRealm)
{    this.classRealm = classRealm;}
public ClassRealm maven_f5478_0()
{    return classRealm;}
public void maven_f5479_0(Set<Artifact> introducedDependencyArtifacts)
{    this.introducedDependencyArtifacts = introducedDependencyArtifacts;}
public Set<Artifact> maven_f5480_0()
{    return (introducedDependencyArtifacts != null) ? introducedDependencyArtifacts : Collections.<Artifact>emptySet();}
public void maven_f5481_0(String name)
{    this.name = name;}
public String maven_f5482_0()
{    return name;}
public void maven_f5483_0(String description)
{    this.description = description;}
public String maven_f5484_0()
{    return description;}
public void maven_f5485_0(String requiredMavenVersion)
{    this.requiredMavenVersion = requiredMavenVersion;}
public String maven_f5486_0()
{    return requiredMavenVersion;}
public void maven_f5487_0(Plugin plugin)
{    this.plugin = plugin;}
public Plugin maven_f5488_0()
{    return plugin;}
public Artifact maven_f5489_0()
{    return pluginArtifact;}
public void maven_f5490_0(Artifact pluginArtifact)
{    this.pluginArtifact = pluginArtifact;}
public Lifecycle maven_f5491_0(String lifecycleId) throws IOException, XmlPullParserException
{    if (lifecycleMappings == null) {        LifecycleConfiguration lifecycleConfiguration;        try (Reader reader = ReaderFactory.newXmlReader(getDescriptorStream(LIFECYCLE_DESCRIPTOR))) {            lifecycleConfiguration = new LifecycleMappingsXpp3Reader().read(reader);        }        lifecycleMappings = new HashMap<>();        for (Lifecycle lifecycle : lifecycleConfiguration.getLifecycles()) {            lifecycleMappings.put(lifecycle.getId(), lifecycle);        }    }    return lifecycleMappings.get(lifecycleId);}
private InputStream maven_f5492_0(String descriptor) throws IOException
{    File pluginFile = (pluginArtifact != null) ? pluginArtifact.getFile() : null;    if (pluginFile == null) {        throw new IllegalStateException("plugin main artifact has not been resolved for " + getId());    }    if (pluginFile.isFile()) {        try {            return new URL("jar:" + pluginFile.toURI() + "!/" + descriptor).openStream();        } catch (MalformedURLException e) {            throw new IllegalStateException(e);        }    } else {        return new FileInputStream(new File(pluginFile, descriptor));    }}
public PluginDescriptor maven_f5493_0()
{    try {        return (PluginDescriptor) super.clone();    } catch (CloneNotSupportedException e) {        throw new UnsupportedOperationException(e);    }}
public PluginDescriptor maven_f5494_0(Reader reader) throws PlexusConfigurationException
{    return build(reader, null);}
public PluginDescriptor maven_f5495_0(Reader reader, String source) throws PlexusConfigurationException
{    PlexusConfiguration c = buildConfiguration(reader);    PluginDescriptor pluginDescriptor = new PluginDescriptor();    pluginDescriptor.setSource(source);    pluginDescriptor.setGroupId(c.getChild("groupId").getValue());    pluginDescriptor.setArtifactId(c.getChild("artifactId").getValue());    pluginDescriptor.setVersion(c.getChild("version").getValue());    pluginDescriptor.setGoalPrefix(c.getChild("goalPrefix").getValue());    pluginDescriptor.setName(c.getChild("name").getValue());    pluginDescriptor.setDescription(c.getChild("description").getValue());    String isolatedRealm = c.getChild("isolatedRealm").getValue();    if (isolatedRealm != null) {        pluginDescriptor.setIsolatedRealm(Boolean.parseBoolean(isolatedRealm));    }    String inheritedByDefault = c.getChild("inheritedByDefault").getValue();    if (inheritedByDefault != null) {        pluginDescriptor.setInheritedByDefault(Boolean.parseBoolean(inheritedByDefault));    }                PlexusConfiguration[] mojoConfigurations = c.getChild("mojos").getChildren("mojo");    for (PlexusConfiguration component : mojoConfigurations) {        MojoDescriptor mojoDescriptor = buildComponentDescriptor(component, pluginDescriptor);        pluginDescriptor.addMojo(mojoDescriptor);    }                PlexusConfiguration[] dependencyConfigurations = c.getChild("dependencies").getChildren("dependency");    List<ComponentDependency> dependencies = new ArrayList<>();    for (PlexusConfiguration d : dependencyConfigurations) {        ComponentDependency cd = new ComponentDependency();        cd.setArtifactId(d.getChild("artifactId").getValue());        cd.setGroupId(d.getChild("groupId").getValue());        cd.setType(d.getChild("type").getValue());        cd.setVersion(d.getChild("version").getValue());        dependencies.add(cd);    }    pluginDescriptor.setDependencies(dependencies);    return pluginDescriptor;}
public MojoDescriptor maven_f5496_0(PlexusConfiguration c, PluginDescriptor pluginDescriptor) throws PlexusConfigurationException
{    MojoDescriptor mojo = new MojoDescriptor();    mojo.setPluginDescriptor(pluginDescriptor);    mojo.setGoal(c.getChild("goal").getValue());    mojo.setImplementation(c.getChild("implementation").getValue());    PlexusConfiguration langConfig = c.getChild("language");    if (langConfig != null) {        mojo.setLanguage(langConfig.getValue());    }    PlexusConfiguration configuratorConfig = c.getChild("configurator");    if (configuratorConfig != null) {        mojo.setComponentConfigurator(configuratorConfig.getValue());    }    PlexusConfiguration composerConfig = c.getChild("composer");    if (composerConfig != null) {        mojo.setComponentComposer(composerConfig.getValue());    }    String since = c.getChild("since").getValue();    if (since != null) {        mojo.setSince(since);    }    PlexusConfiguration deprecated = c.getChild("deprecated", false);    if (deprecated != null) {        mojo.setDeprecated(deprecated.getValue());    }    String phase = c.getChild("phase").getValue();    if (phase != null) {        mojo.setPhase(phase);    }    String executePhase = c.getChild("executePhase").getValue();    if (executePhase != null) {        mojo.setExecutePhase(executePhase);    }    String executeMojo = c.getChild("executeGoal").getValue();    if (executeMojo != null) {        mojo.setExecuteGoal(executeMojo);    }    String executeLifecycle = c.getChild("executeLifecycle").getValue();    if (executeLifecycle != null) {        mojo.setExecuteLifecycle(executeLifecycle);    }    mojo.setInstantiationStrategy(c.getChild("instantiationStrategy").getValue());    mojo.setDescription(c.getChild("description").getValue());    PlexusConfiguration dependencyResolution = c.getChild("requiresDependencyResolution", false);    if (dependencyResolution != null) {        mojo.setDependencyResolutionRequired(dependencyResolution.getValue());    }    PlexusConfiguration dependencyCollection = c.getChild("requiresDependencyCollection", false);    if (dependencyCollection != null) {        mojo.setDependencyCollectionRequired(dependencyCollection.getValue());    }    String directInvocationOnly = c.getChild("requiresDirectInvocation").getValue();    if (directInvocationOnly != null) {        mojo.setDirectInvocationOnly(Boolean.parseBoolean(directInvocationOnly));    }    String requiresProject = c.getChild("requiresProject").getValue();    if (requiresProject != null) {        mojo.setProjectRequired(Boolean.parseBoolean(requiresProject));    }    String requiresReports = c.getChild("requiresReports").getValue();    if (requiresReports != null) {        mojo.setRequiresReports(Boolean.parseBoolean(requiresReports));    }    String aggregator = c.getChild("aggregator").getValue();    if (aggregator != null) {        mojo.setAggregator(Boolean.parseBoolean(aggregator));    }    String requiresOnline = c.getChild("requiresOnline").getValue();    if (requiresOnline != null) {        mojo.setOnlineRequired(Boolean.parseBoolean(requiresOnline));    }    String inheritedByDefault = c.getChild("inheritedByDefault").getValue();    if (inheritedByDefault != null) {        mojo.setInheritedByDefault(Boolean.parseBoolean(inheritedByDefault));    }    String threadSafe = c.getChild("threadSafe").getValue();    if (threadSafe != null) {        mojo.setThreadSafe(Boolean.parseBoolean(threadSafe));    }                PlexusConfiguration mojoConfig = c.getChild("configuration");    mojo.setMojoConfiguration(mojoConfig);                PlexusConfiguration[] parameterConfigurations = c.getChild("parameters").getChildren("parameter");    List<Parameter> parameters = new ArrayList<>();    for (PlexusConfiguration d : parameterConfigurations) {        Parameter parameter = new Parameter();        parameter.setName(d.getChild("name").getValue());        parameter.setAlias(d.getChild("alias").getValue());        parameter.setType(d.getChild("type").getValue());        String required = d.getChild("required").getValue();        parameter.setRequired(Boolean.parseBoolean(required));        PlexusConfiguration editableConfig = d.getChild("editable");                if (editableConfig != null) {            String editable = d.getChild("editable").getValue();            parameter.setEditable(editable == null || Boolean.parseBoolean(editable));        }        parameter.setDescription(d.getChild("description").getValue());        parameter.setDeprecated(d.getChild("deprecated").getValue());        parameter.setImplementation(d.getChild("implementation").getValue());        parameter.setSince(d.getChild("since").getValue());        PlexusConfiguration paramConfig = mojoConfig.getChild(parameter.getName(), false);        if (paramConfig != null) {            parameter.setExpression(paramConfig.getValue(null));            parameter.setDefaultValue(paramConfig.getAttribute("default-value"));        }        parameters.add(parameter);    }    mojo.setParameters(parameters);                    PlexusConfiguration[] requirements = c.getChild("requirements").getChildren("requirement");    for (PlexusConfiguration requirement : requirements) {        ComponentRequirement cr = new ComponentRequirement();        cr.setRole(requirement.getChild("role").getValue());        cr.setRoleHint(requirement.getChild("role-hint").getValue());        cr.setFieldName(requirement.getChild("field-name").getValue());        mojo.addRequirement(cr);    }    return mojo;}
public PlexusConfiguration maven_f5497_0(Reader configuration) throws PlexusConfigurationException
{    try {        return new XmlPlexusConfiguration(Xpp3DomBuilder.build(configuration));    } catch (IOException | XmlPullParserException e) {        throw new PlexusConfigurationException(e.getMessage(), e);    }}
public String maven_f5498_0()
{    return role;}
public String maven_f5499_0()
{    return roleHint;}
public Requirement maven_f5500_0()
{    try {        return (Requirement) super.clone();    } catch (CloneNotSupportedException e) {        throw new UnsupportedOperationException(e);    }}
public void maven_f5501_0(CharSequence content)
{    print("debug", content);}
public void maven_f5502_0(CharSequence content, Throwable error)
{    print("debug", content, error);}
public void maven_f5503_0(Throwable error)
{    print("debug", error);}
public void maven_f5504_0(CharSequence content)
{    print("info", content);}
public void maven_f5505_0(CharSequence content, Throwable error)
{    print("info", content, error);}
public void maven_f5506_0(Throwable error)
{    print("info", error);}
public void maven_f5507_0(CharSequence content)
{    print("warn", content);}
public void maven_f5508_0(CharSequence content, Throwable error)
{    print("warn", content, error);}
public void maven_f5509_0(Throwable error)
{    print("warn", error);}
public void maven_f5510_0(CharSequence content)
{    System.err.println("[error] " + content.toString());}
public void maven_f5511_0(CharSequence content, Throwable error)
{    StringWriter sWriter = new StringWriter();    PrintWriter pWriter = new PrintWriter(sWriter);    error.printStackTrace(pWriter);    System.err.println("[error] " + content.toString() + "\n\n" + sWriter.toString());}
public void maven_f5512_0(Throwable error)
{    StringWriter sWriter = new StringWriter();    PrintWriter pWriter = new PrintWriter(sWriter);    error.printStackTrace(pWriter);    System.err.println("[error] " + sWriter.toString());}
public boolean maven_f5513_0()
{        return false;}
public boolean maven_f5514_0()
{    return true;}
public boolean maven_f5515_0()
{    return true;}
public boolean maven_f5516_0()
{    return true;}
private void maven_f5517_0(String prefix, CharSequence content)
{    System.out.println("[" + prefix + "] " + content.toString());}
private void maven_f5518_0(String prefix, Throwable error)
{    StringWriter sWriter = new StringWriter();    PrintWriter pWriter = new PrintWriter(sWriter);    error.printStackTrace(pWriter);    System.out.println("[" + prefix + "] " + sWriter.toString());}
private void maven_f5519_0(String prefix, CharSequence content, Throwable error)
{    StringWriter sWriter = new StringWriter();    PrintWriter pWriter = new PrintWriter(sWriter);    error.printStackTrace(pWriter);    System.out.println("[" + prefix + "] " + content.toString() + "\n\n" + sWriter.toString());}
public String maven_f5520_0()
{    return goal;}
public PluginDescriptor maven_f5521_0()
{    return pluginDescriptor;}
private static String maven_f5522_0(String goal, PluginDescriptor pluginDescriptor)
{    StringBuilder buffer = new StringBuilder(256);    buffer.append("Could not find goal '").append(goal).append('\'');    if (pluginDescriptor != null) {        buffer.append(" in plugin ").append(pluginDescriptor.getId());        buffer.append(" among available goals ");        List<MojoDescriptor> mojos = pluginDescriptor.getMojos();        if (mojos != null) {            for (Iterator<MojoDescriptor> it = mojos.iterator(); it.hasNext(); ) {                MojoDescriptor mojo = it.next();                if (mojo != null) {                    buffer.append(mojo.getGoal());                }                if (it.hasNext()) {                    buffer.append(", ");                }            }        }    }    return buffer.toString();}
private PluginDescriptor maven_f5523_0(String resource) throws IOException, PlexusConfigurationException
{    Reader reader = ReaderFactory.newXmlReader(getClass().getResourceAsStream(resource));    return new PluginDescriptorBuilder().build(reader);}
public void maven_f5524_0() throws Exception
{    PluginDescriptor pd = build("/plugin.xml");    assertEquals("org.apache.maven.plugins", pd.getGroupId());    assertEquals("maven-jar-plugin", pd.getArtifactId());    assertEquals("2.3-SNAPSHOT", pd.getVersion());    assertEquals("jar", pd.getGoalPrefix());    assertEquals("plugin-description", pd.getDescription());    assertEquals(false, pd.isIsolatedRealm());    assertEquals(true, pd.isInheritedByDefault());    assertEquals(2, pd.getMojos().size());    assertEquals(1, pd.getDependencies().size());    MojoDescriptor md = pd.getMojos().get(0);    assertEquals("jar", md.getGoal());    assertEquals("mojo-description", md.getDescription());    assertEquals("runtime", md.getDependencyResolutionRequired());    assertEquals("test", md.getDependencyCollectionRequired());    assertEquals(false, md.isAggregator());    assertEquals(false, md.isDirectInvocationOnly());    assertEquals(true, md.isInheritedByDefault());    assertEquals(false, md.isOnlineRequired());    assertEquals(true, md.isProjectRequired());    assertEquals(false, md.isThreadSafe());    assertEquals("package", md.getPhase());    assertEquals("org.apache.maven.plugin.jar.JarMojo", md.getImplementation());    assertEquals("antrun", md.getComponentConfigurator());    assertEquals("java", md.getLanguage());    assertEquals("per-lookup", md.getInstantiationStrategy());    assertEquals("some-goal", md.getExecuteGoal());    assertEquals("generate-sources", md.getExecutePhase());    assertEquals("cobertura", md.getExecuteLifecycle());    assertEquals("2.2", md.getSince());    assertEquals("deprecated-mojo", md.getDeprecated());    assertEquals(1, md.getRequirements().size());    assertEquals(1, md.getParameters().size());    assertNotNull(md.getMojoConfiguration());    assertEquals(1, md.getMojoConfiguration().getChildCount());    PlexusConfiguration pc = md.getMojoConfiguration().getChild(0);    assertEquals("${jar.finalName}", pc.getValue());    assertEquals("${project.build.finalName}", pc.getAttribute("default-value"));    assertEquals("java.lang.String", pc.getAttribute("implementation"));    Parameter mp = md.getParameters().get(0);    assertEquals("finalName", mp.getName());    assertEquals("jarName", mp.getAlias());    assertEquals("java.lang.String", mp.getType());    assertEquals("java.lang.String", mp.getImplementation());    assertEquals(true, mp.isEditable());    assertEquals(false, mp.isRequired());    assertEquals("parameter-description", mp.getDescription());    assertEquals("deprecated-parameter", mp.getDeprecated());    assertEquals("${jar.finalName}", mp.getExpression());    assertEquals("${project.build.finalName}", mp.getDefaultValue());    assertEquals("3.0.0", mp.getSince());    ComponentRequirement cr = md.getRequirements().get(0);    assertEquals("org.codehaus.plexus.archiver.Archiver", cr.getRole());    assertEquals("jar", cr.getRoleHint());    assertEquals("jarArchiver", cr.getFieldName());    ComponentDependency cd = pd.getDependencies().get(0);    assertEquals("org.apache.maven", cd.getGroupId());    assertEquals("maven-plugin-api", cd.getArtifactId());    assertEquals("2.0.6", cd.getVersion());    assertEquals("jar", cd.getType());    md = pd.getMojos().get(1);    assertEquals("war", md.getGoal());    assertEquals(null, md.getDependencyResolutionRequired());    assertEquals(null, md.getDependencyCollectionRequired());    assertEquals(true, md.isThreadSafe());}
public void maven_f5525_0() throws IOException, XmlPullParserException
{/*        LifecycleMappingsXpp3Reader reader = new LifecycleMappingsXpp3Reader();        LifecycleConfiguration config = reader.read( new InputStreamReader( getClass().getResourceAsStream( "/lifecycle.xml" ) ) );        assertEquals( "check number of lifecycles", 1, config.getLifecycles().size() );        Lifecycle l = (Lifecycle) config.getLifecycles().iterator().next();        assertEquals( "check id", "clover", l.getId() );        assertEquals( "check number of phases", 1, l.getPhases().size() );        Phase p = (Phase) l.getPhases().iterator().next();        assertEquals( "check id", "generate-sources", p.getId() );        assertEquals( "check number of executions", 1, p.getExecutions().size() );        Execution e = (Execution) p.getExecutions().iterator().next();        assertEquals( "check configuration", "true", ((Xpp3Dom) e.getConfiguration()).getChild( "debug" ).getValue() );        assertEquals( "check number of goals", 1, e.getGoals().size() );        String g = (String) e.getGoals().iterator().next();        assertEquals( "check goal", "clover:compiler", g );        */}
public void maven_f5526_0(RepositorySystemSession session, ArtifactDescriptorResult result, Model model)
{    ArtifactTypeRegistry stereotypes = session.getArtifactTypeRegistry();    for (Repository r : model.getRepositories()) {        result.addRepository(ArtifactDescriptorUtils.toRemoteRepository(r));    }    for (org.apache.maven.model.Dependency dependency : model.getDependencies()) {        result.addDependency(convert(dependency, stereotypes));    }    DependencyManagement mgmt = model.getDependencyManagement();    if (mgmt != null) {        for (org.apache.maven.model.Dependency dependency : mgmt.getDependencies()) {            result.addManagedDependency(convert(dependency, stereotypes));        }    }    Map<String, Object> properties = new LinkedHashMap<>();    Prerequisites prerequisites = model.getPrerequisites();    if (prerequisites != null) {        properties.put("prerequisites.maven", prerequisites.getMaven());    }    List<License> licenses = model.getLicenses();    properties.put("license.count", licenses.size());    for (int i = 0; i < licenses.size(); i++) {        License license = licenses.get(i);        properties.put("license." + i + ".name", license.getName());        properties.put("license." + i + ".url", license.getUrl());        properties.put("license." + i + ".comments", license.getComments());        properties.put("license." + i + ".distribution", license.getDistribution());    }    result.setProperties(properties);    setArtifactProperties(result, model);}
private Dependency maven_f5527_0(org.apache.maven.model.Dependency dependency, ArtifactTypeRegistry stereotypes)
{    ArtifactType stereotype = stereotypes.get(dependency.getType());    if (stereotype == null) {        stereotype = new DefaultArtifactType(dependency.getType());    }    boolean system = dependency.getSystemPath() != null && dependency.getSystemPath().length() > 0;    Map<String, String> props = null;    if (system) {        props = Collections.singletonMap(ArtifactProperties.LOCAL_PATH, dependency.getSystemPath());    }    Artifact artifact = new DefaultArtifact(dependency.getGroupId(), dependency.getArtifactId(), dependency.getClassifier(), null, dependency.getVersion(), props, stereotype);    List<Exclusion> exclusions = new ArrayList<>(dependency.getExclusions().size());    for (org.apache.maven.model.Exclusion exclusion : dependency.getExclusions()) {        exclusions.add(convert(exclusion));    }    Dependency result = new Dependency(artifact, dependency.getScope(), dependency.getOptional() != null ? dependency.isOptional() : null, exclusions);    return result;}
private Exclusion maven_f5528_0(org.apache.maven.model.Exclusion exclusion)
{    return new Exclusion(exclusion.getGroupId(), exclusion.getArtifactId(), "*", "*");}
private void maven_f5529_0(ArtifactDescriptorResult result, Model model)
{    String downloadUrl = null;    DistributionManagement distMgmt = model.getDistributionManagement();    if (distMgmt != null) {        downloadUrl = distMgmt.getDownloadUrl();    }    if (downloadUrl != null && downloadUrl.length() > 0) {        Artifact artifact = result.getArtifact();        Map<String, String> props = new HashMap<>(artifact.getProperties());        props.put(ArtifactProperties.DOWNLOAD_URL, downloadUrl);        result.setArtifact(artifact.setProperties(props));    }}
public static Artifact maven_f5530_0(Artifact artifact)
{    Artifact pomArtifact = artifact;    if (pomArtifact.getClassifier().length() > 0 || !"pom".equals(pomArtifact.getExtension())) {        pomArtifact = new DefaultArtifact(artifact.getGroupId(), artifact.getArtifactId(), "pom", artifact.getVersion());    }    return pomArtifact;}
public static RemoteRepository maven_f5531_0(Repository repository)
{    RemoteRepository.Builder builder = new RemoteRepository.Builder(repository.getId(), repository.getLayout(), repository.getUrl());    builder.setSnapshotPolicy(toRepositoryPolicy(repository.getSnapshots()));    builder.setReleasePolicy(toRepositoryPolicy(repository.getReleases()));    return builder.build();}
public static RepositoryPolicy maven_f5532_0(org.apache.maven.model.RepositoryPolicy policy)
{    boolean enabled = true;    String checksums = RepositoryPolicy.CHECKSUM_POLICY_WARN;    String updates = RepositoryPolicy.UPDATE_POLICY_DAILY;    if (policy != null) {        enabled = policy.isEnabled();        if (policy.getUpdatePolicy() != null) {            updates = policy.getUpdatePolicy();        }        if (policy.getChecksumPolicy() != null) {            checksums = policy.getChecksumPolicy();        }    }    return new RepositoryPolicy(enabled, updates, checksums);}
public void maven_f5533_0(ServiceLocator locator)
{    setRemoteRepositoryManager(locator.getService(RemoteRepositoryManager.class));    setVersionResolver(locator.getService(VersionResolver.class));    setVersionRangeResolver(locator.getService(VersionRangeResolver.class));    setArtifactResolver(locator.getService(ArtifactResolver.class));    modelBuilder = locator.getService(ModelBuilder.class);    if (modelBuilder == null) {        setModelBuilder(new DefaultModelBuilderFactory().newInstance());    }    setRepositoryEventDispatcher(locator.getService(RepositoryEventDispatcher.class));}
public DefaultArtifactDescriptorReader maven_f5534_0(RemoteRepositoryManager remoteRepositoryManager)
{    this.remoteRepositoryManager = Objects.requireNonNull(remoteRepositoryManager, "remoteRepositoryManager cannot be null");    return this;}
public DefaultArtifactDescriptorReader maven_f5535_0(VersionResolver versionResolver)
{    this.versionResolver = Objects.requireNonNull(versionResolver, "versionResolver cannot be null");    return this;}
public DefaultArtifactDescriptorReader maven_f5536_0(VersionRangeResolver versionRangeResolver)
{    this.versionRangeResolver = Objects.requireNonNull(versionRangeResolver, "versionRangeResolver cannot be null");    return this;}
public DefaultArtifactDescriptorReader maven_f5537_0(ArtifactResolver artifactResolver)
{    this.artifactResolver = Objects.requireNonNull(artifactResolver, "artifactResolver cannot be null");    return this;}
public DefaultArtifactDescriptorReader maven_f5538_0(RepositoryEventDispatcher repositoryEventDispatcher)
{    this.repositoryEventDispatcher = Objects.requireNonNull(repositoryEventDispatcher, "repositoryEventDispatcher cannot be null");    return this;}
public DefaultArtifactDescriptorReader maven_f5539_0(ModelBuilder modelBuilder)
{    this.modelBuilder = Objects.requireNonNull(modelBuilder, "modelBuilder cannot be null");    return this;}
public ArtifactDescriptorResult maven_f5540_0(RepositorySystemSession session, ArtifactDescriptorRequest request) throws ArtifactDescriptorException
{    ArtifactDescriptorResult result = new ArtifactDescriptorResult(request);    Model model = loadPom(session, request, result);    if (model != null) {        Map<String, Object> config = session.getConfigProperties();        ArtifactDescriptorReaderDelegate delegate = (ArtifactDescriptorReaderDelegate) config.get(ArtifactDescriptorReaderDelegate.class.getName());        if (delegate == null) {            delegate = new ArtifactDescriptorReaderDelegate();        }        delegate.populateResult(session, result, model);    }    return result;}
private Model maven_f5541_0(RepositorySystemSession session, ArtifactDescriptorRequest request, ArtifactDescriptorResult result) throws ArtifactDescriptorException
{    RequestTrace trace = RequestTrace.newChild(request.getTrace(), request);    Set<String> visited = new LinkedHashSet<>();    for (Artifact a = request.getArtifact(); ; ) {        Artifact pomArtifact = ArtifactDescriptorUtils.toPomArtifact(a);        try {            VersionRequest versionRequest = new VersionRequest(a, request.getRepositories(), request.getRequestContext());            versionRequest.setTrace(trace);            VersionResult versionResult = versionResolver.resolveVersion(session, versionRequest);            a = a.setVersion(versionResult.getVersion());            versionRequest = new VersionRequest(pomArtifact, request.getRepositories(), request.getRequestContext());            versionRequest.setTrace(trace);            versionResult = versionResolver.resolveVersion(session, versionRequest);            pomArtifact = pomArtifact.setVersion(versionResult.getVersion());        } catch (VersionResolutionException e) {            result.addException(e);            throw new ArtifactDescriptorException(result);        }        if (!visited.add(a.getGroupId() + ':' + a.getArtifactId() + ':' + a.getBaseVersion())) {            RepositoryException exception = new RepositoryException("Artifact relocations form a cycle: " + visited);            invalidDescriptor(session, trace, a, exception);            if ((getPolicy(session, a, request) & ArtifactDescriptorPolicy.IGNORE_INVALID) != 0) {                return null;            }            result.addException(exception);            throw new ArtifactDescriptorException(result);        }        ArtifactResult resolveResult;        try {            ArtifactRequest resolveRequest = new ArtifactRequest(pomArtifact, request.getRepositories(), request.getRequestContext());            resolveRequest.setTrace(trace);            resolveResult = artifactResolver.resolveArtifact(session, resolveRequest);            pomArtifact = resolveResult.getArtifact();            result.setRepository(resolveResult.getRepository());        } catch (ArtifactResolutionException e) {            if (e.getCause() instanceof ArtifactNotFoundException) {                missingDescriptor(session, trace, a, (Exception) e.getCause());                if ((getPolicy(session, a, request) & ArtifactDescriptorPolicy.IGNORE_MISSING) != 0) {                    return null;                }            }            result.addException(e);            throw new ArtifactDescriptorException(result);        }        Model model;        final WorkspaceReader workspace = session.getWorkspaceReader();        if (workspace instanceof MavenWorkspaceReader) {            model = ((MavenWorkspaceReader) workspace).findModel(pomArtifact);            if (model != null) {                return model;            }        }        try {            ModelBuildingRequest modelRequest = new DefaultModelBuildingRequest();            modelRequest.setValidationLevel(ModelBuildingRequest.VALIDATION_LEVEL_MINIMAL);            modelRequest.setProcessPlugins(false);            modelRequest.setTwoPhaseBuilding(false);            modelRequest.setSystemProperties(toProperties(session.getUserProperties(), session.getSystemProperties()));            modelRequest.setModelCache(DefaultModelCache.newInstance(session));            modelRequest.setModelResolver(new DefaultModelResolver(session, trace.newChild(modelRequest), request.getRequestContext(), artifactResolver, versionRangeResolver, remoteRepositoryManager, request.getRepositories()));            if (resolveResult.getRepository() instanceof WorkspaceRepository) {                modelRequest.setPomFile(pomArtifact.getFile());            } else {                modelRequest.setModelSource(new FileModelSource(pomArtifact.getFile()));            }            model = modelBuilder.build(modelRequest).getEffectiveModel();        } catch (ModelBuildingException e) {            for (ModelProblem problem : e.getProblems()) {                if (problem.getException() instanceof UnresolvableModelException) {                    result.addException(problem.getException());                    throw new ArtifactDescriptorException(result);                }            }            invalidDescriptor(session, trace, a, e);            if ((getPolicy(session, a, request) & ArtifactDescriptorPolicy.IGNORE_INVALID) != 0) {                return null;            }            result.addException(e);            throw new ArtifactDescriptorException(result);        }        Relocation relocation = getRelocation(model);        if (relocation != null) {            result.addRelocation(a);            a = new RelocatedArtifact(a, relocation.getGroupId(), relocation.getArtifactId(), relocation.getVersion());            result.setArtifact(a);        } else {            return model;        }    }}
private Properties maven_f5542_0(Map<String, String> dominant, Map<String, String> recessive)
{    Properties props = new Properties();    if (recessive != null) {        props.putAll(recessive);    }    if (dominant != null) {        props.putAll(dominant);    }    return props;}
private Relocation maven_f5543_0(Model model)
{    Relocation relocation = null;    DistributionManagement distMgmt = model.getDistributionManagement();    if (distMgmt != null) {        relocation = distMgmt.getRelocation();    }    return relocation;}
private void maven_f5544_0(RepositorySystemSession session, RequestTrace trace, Artifact artifact, Exception exception)
{    RepositoryEvent.Builder event = new RepositoryEvent.Builder(session, EventType.ARTIFACT_DESCRIPTOR_MISSING);    event.setTrace(trace);    event.setArtifact(artifact);    event.setException(exception);    repositoryEventDispatcher.dispatch(event.build());}
private void maven_f5545_0(RepositorySystemSession session, RequestTrace trace, Artifact artifact, Exception exception)
{    RepositoryEvent.Builder event = new RepositoryEvent.Builder(session, EventType.ARTIFACT_DESCRIPTOR_INVALID);    event.setTrace(trace);    event.setArtifact(artifact);    event.setException(exception);    repositoryEventDispatcher.dispatch(event.build());}
private int maven_f5546_0(RepositorySystemSession session, Artifact a, ArtifactDescriptorRequest request)
{    ArtifactDescriptorPolicy policy = session.getArtifactDescriptorPolicy();    if (policy == null) {        return ArtifactDescriptorPolicy.STRICT;    }    return policy.getPolicy(session, new ArtifactDescriptorPolicyRequest(a, request.getRequestContext()));}
public static ModelCache maven_f5547_0(RepositorySystemSession session)
{    if (session.getCache() == null) {        return null;    } else {        return new DefaultModelCache(session);    }}
public Object maven_f5548_0(String groupId, String artifactId, String version, String tag)
{    return cache.get(session, new Key(groupId, artifactId, version, tag));}
public void maven_f5549_0(String groupId, String artifactId, String version, String tag, Object data)
{    cache.put(session, new Key(groupId, artifactId, version, tag), data);}
public boolean maven_f5550_0(Object obj)
{    if (this == obj) {        return true;    }    if (null == obj || !getClass().equals(obj.getClass())) {        return false;    }    Key that = (Key) obj;    return artifactId.equals(that.artifactId) && groupId.equals(that.groupId) && version.equals(that.version) && tag.equals(that.tag);}
public int maven_f5551_0()
{    return hash;}
public void maven_f5552_0(Repository repository) throws InvalidRepositoryException
{    addRepository(repository, false);}
public void maven_f5553_0(final Repository repository, boolean replace) throws InvalidRepositoryException
{    if (session.isIgnoreArtifactDescriptorRepositories()) {        return;    }    if (!repositoryIds.add(repository.getId())) {        if (!replace) {            return;        }        removeMatchingRepository(repositories, repository.getId());    }    List<RemoteRepository> newRepositories = Collections.singletonList(ArtifactDescriptorUtils.toRemoteRepository(repository));    this.repositories = remoteRepositoryManager.aggregateRepositories(session, repositories, newRepositories, true);}
private static void maven_f5554_0(Iterable<RemoteRepository> repositories, final String id)
{    Iterator<RemoteRepository> iterator = repositories.iterator();    while (iterator.hasNext()) {        RemoteRepository remoteRepository = iterator.next();        if (remoteRepository.getId().equals(id)) {            iterator.remove();        }    }}
public ModelResolver maven_f5555_0()
{    return new DefaultModelResolver(this);}
public ModelSource maven_f5556_0(String groupId, String artifactId, String version) throws UnresolvableModelException
{    Artifact pomArtifact = new DefaultArtifact(groupId, artifactId, "", "pom", version);    try {        ArtifactRequest request = new ArtifactRequest(pomArtifact, repositories, context);        request.setTrace(trace);        pomArtifact = resolver.resolveArtifact(session, request).getArtifact();    } catch (ArtifactResolutionException e) {        throw new UnresolvableModelException(e.getMessage(), groupId, artifactId, version, e);    }    File pomFile = pomArtifact.getFile();    return new FileModelSource(pomFile);}
public ModelSource maven_f5557_0(final Parent parent) throws UnresolvableModelException
{    try {        final Artifact artifact = new DefaultArtifact(parent.getGroupId(), parent.getArtifactId(), "", "pom", parent.getVersion());        final VersionRangeRequest versionRangeRequest = new VersionRangeRequest(artifact, repositories, context);        versionRangeRequest.setTrace(trace);        final VersionRangeResult versionRangeResult = versionRangeResolver.resolveVersionRange(session, versionRangeRequest);        if (versionRangeResult.getHighestVersion() == null) {            throw new UnresolvableModelException(String.format("No versions matched the requested parent version range '%s'", parent.getVersion()), parent.getGroupId(), parent.getArtifactId(), parent.getVersion());        }        if (versionRangeResult.getVersionConstraint() != null && versionRangeResult.getVersionConstraint().getRange() != null && versionRangeResult.getVersionConstraint().getRange().getUpperBound() == null) {                        throw new UnresolvableModelException(String.format("The requested parent version range '%s' does not specify an upper bound", parent.getVersion()), parent.getGroupId(), parent.getArtifactId(), parent.getVersion());        }        parent.setVersion(versionRangeResult.getHighestVersion().toString());        return resolveModel(parent.getGroupId(), parent.getArtifactId(), parent.getVersion());    } catch (final VersionRangeResolutionException e) {        throw new UnresolvableModelException(e.getMessage(), parent.getGroupId(), parent.getArtifactId(), parent.getVersion(), e);    }}
public ModelSource maven_f5558_0(final Dependency dependency) throws UnresolvableModelException
{    try {        final Artifact artifact = new DefaultArtifact(dependency.getGroupId(), dependency.getArtifactId(), "", "pom", dependency.getVersion());        final VersionRangeRequest versionRangeRequest = new VersionRangeRequest(artifact, repositories, context);        versionRangeRequest.setTrace(trace);        final VersionRangeResult versionRangeResult = versionRangeResolver.resolveVersionRange(session, versionRangeRequest);        if (versionRangeResult.getHighestVersion() == null) {            throw new UnresolvableModelException(String.format("No versions matched the requested dependency version range '%s'", dependency.getVersion()), dependency.getGroupId(), dependency.getArtifactId(), dependency.getVersion());        }        if (versionRangeResult.getVersionConstraint() != null && versionRangeResult.getVersionConstraint().getRange() != null && versionRangeResult.getVersionConstraint().getRange().getUpperBound() == null) {                        throw new UnresolvableModelException(String.format("The requested dependency version range '%s' does not specify an upper bound", dependency.getVersion()), dependency.getGroupId(), dependency.getArtifactId(), dependency.getVersion());        }        dependency.setVersion(versionRangeResult.getHighestVersion().toString());        return resolveModel(dependency.getGroupId(), dependency.getArtifactId(), dependency.getVersion());    } catch (VersionRangeResolutionException e) {        throw new UnresolvableModelException(e.getMessage(), dependency.getGroupId(), dependency.getArtifactId(), dependency.getVersion(), e);    }}
public void maven_f5559_0(ServiceLocator locator)
{    setMetadataResolver(locator.getService(MetadataResolver.class));    setSyncContextFactory(locator.getService(SyncContextFactory.class));    setRepositoryEventDispatcher(locator.getService(RepositoryEventDispatcher.class));}
public DefaultVersionRangeResolver maven_f5560_0(MetadataResolver metadataResolver)
{    this.metadataResolver = Objects.requireNonNull(metadataResolver, "metadataResolver cannot be null");    return this;}
public DefaultVersionRangeResolver maven_f5561_0(SyncContextFactory syncContextFactory)
{    this.syncContextFactory = Objects.requireNonNull(syncContextFactory, "syncContextFactory cannot be null");    return this;}
public DefaultVersionRangeResolver maven_f5562_0(RepositoryEventDispatcher repositoryEventDispatcher)
{    this.repositoryEventDispatcher = Objects.requireNonNull(repositoryEventDispatcher, "repositoryEventDispatcher cannot be null");    return this;}
public VersionRangeResult maven_f5563_0(RepositorySystemSession session, VersionRangeRequest request) throws VersionRangeResolutionException
{    VersionRangeResult result = new VersionRangeResult(request);    VersionScheme versionScheme = new GenericVersionScheme();    VersionConstraint versionConstraint;    try {        versionConstraint = versionScheme.parseVersionConstraint(request.getArtifact().getVersion());    } catch (InvalidVersionSpecificationException e) {        result.addException(e);        throw new VersionRangeResolutionException(result);    }    result.setVersionConstraint(versionConstraint);    if (versionConstraint.getRange() == null) {        result.addVersion(versionConstraint.getVersion());    } else {        Map<String, ArtifactRepository> versionIndex = getVersions(session, result, request);        List<Version> versions = new ArrayList<>();        for (Map.Entry<String, ArtifactRepository> v : versionIndex.entrySet()) {            try {                Version ver = versionScheme.parseVersion(v.getKey());                if (versionConstraint.containsVersion(ver)) {                    versions.add(ver);                    result.setRepository(ver, v.getValue());                }            } catch (InvalidVersionSpecificationException e) {                result.addException(e);            }        }        Collections.sort(versions);        result.setVersions(versions);    }    return result;}
private Map<String, ArtifactRepository> maven_f5564_0(RepositorySystemSession session, VersionRangeResult result, VersionRangeRequest request)
{    RequestTrace trace = RequestTrace.newChild(request.getTrace(), request);    Map<String, ArtifactRepository> versionIndex = new HashMap<>();    Metadata metadata = new DefaultMetadata(request.getArtifact().getGroupId(), request.getArtifact().getArtifactId(), MAVEN_METADATA_XML, Metadata.Nature.RELEASE_OR_SNAPSHOT);    List<MetadataRequest> metadataRequests = new ArrayList<>(request.getRepositories().size());    metadataRequests.add(new MetadataRequest(metadata, null, request.getRequestContext()));    for (RemoteRepository repository : request.getRepositories()) {        MetadataRequest metadataRequest = new MetadataRequest(metadata, repository, request.getRequestContext());        metadataRequest.setDeleteLocalCopyIfMissing(true);        metadataRequest.setTrace(trace);        metadataRequests.add(metadataRequest);    }    List<MetadataResult> metadataResults = metadataResolver.resolveMetadata(session, metadataRequests);    WorkspaceReader workspace = session.getWorkspaceReader();    if (workspace != null) {        List<String> versions = workspace.findVersions(request.getArtifact());        for (String version : versions) {            versionIndex.put(version, workspace.getRepository());        }    }    for (MetadataResult metadataResult : metadataResults) {        result.addException(metadataResult.getException());        ArtifactRepository repository = metadataResult.getRequest().getRepository();        if (repository == null) {            repository = session.getLocalRepository();        }        Versioning versioning = readVersions(session, trace, metadataResult.getMetadata(), repository, result);        for (String version : versioning.getVersions()) {            if (!versionIndex.containsKey(version)) {                versionIndex.put(version, repository);            }        }    }    return versionIndex;}
private Versioning maven_f5565_0(RepositorySystemSession session, RequestTrace trace, Metadata metadata, ArtifactRepository repository, VersionRangeResult result)
{    Versioning versioning = null;    try {        if (metadata != null) {            try (SyncContext syncContext = syncContextFactory.newInstance(session, true)) {                syncContext.acquire(null, Collections.singleton(metadata));                if (metadata.getFile() != null && metadata.getFile().exists()) {                    try (final InputStream in = new FileInputStream(metadata.getFile())) {                        versioning = new MetadataXpp3Reader().read(in, false).getVersioning();                    }                }            }        }    } catch (Exception e) {        invalidMetadata(session, trace, metadata, repository, e);        result.addException(e);    }    return (versioning != null) ? versioning : new Versioning();}
private void maven_f5566_0(RepositorySystemSession session, RequestTrace trace, Metadata metadata, ArtifactRepository repository, Exception exception)
{    RepositoryEvent.Builder event = new RepositoryEvent.Builder(session, EventType.METADATA_INVALID);    event.setTrace(trace);    event.setMetadata(metadata);    event.setException(exception);    event.setRepository(repository);    repositoryEventDispatcher.dispatch(event.build());}
public void maven_f5567_0(ServiceLocator locator)
{    setMetadataResolver(locator.getService(MetadataResolver.class));    setSyncContextFactory(locator.getService(SyncContextFactory.class));    setRepositoryEventDispatcher(locator.getService(RepositoryEventDispatcher.class));}
public DefaultVersionResolver maven_f5568_0(MetadataResolver metadataResolver)
{    this.metadataResolver = Objects.requireNonNull(metadataResolver, "metadataResolver cannot be null");    return this;}
public DefaultVersionResolver maven_f5569_0(SyncContextFactory syncContextFactory)
{    this.syncContextFactory = Objects.requireNonNull(syncContextFactory, "syncContextFactory cannot be null");    return this;}
public DefaultVersionResolver maven_f5570_0(RepositoryEventDispatcher repositoryEventDispatcher)
{    this.repositoryEventDispatcher = Objects.requireNonNull(repositoryEventDispatcher, "repositoryEventDispatcher cannot be null");    return this;}
public VersionResult maven_f5571_0(RepositorySystemSession session, VersionRequest request) throws VersionResolutionException
{    RequestTrace trace = RequestTrace.newChild(request.getTrace(), request);    Artifact artifact = request.getArtifact();    String version = artifact.getVersion();    VersionResult result = new VersionResult(request);    Key cacheKey = null;    RepositoryCache cache = session.getCache();    if (cache != null && !ConfigUtils.getBoolean(session, false, "aether.versionResolver.noCache")) {        cacheKey = new Key(session, request);        Object obj = cache.get(session, cacheKey);        if (obj instanceof Record) {            Record record = (Record) obj;            result.setVersion(record.version);            result.setRepository(getRepository(session, request.getRepositories(), record.repoClass, record.repoId));            return result;        }    }    Metadata metadata;    if (RELEASE.equals(version)) {        metadata = new DefaultMetadata(artifact.getGroupId(), artifact.getArtifactId(), MAVEN_METADATA_XML, Metadata.Nature.RELEASE);    } else if (LATEST.equals(version)) {        metadata = new DefaultMetadata(artifact.getGroupId(), artifact.getArtifactId(), MAVEN_METADATA_XML, Metadata.Nature.RELEASE_OR_SNAPSHOT);    } else if (version.endsWith(SNAPSHOT)) {        WorkspaceReader workspace = session.getWorkspaceReader();        if (workspace != null && workspace.findVersions(artifact).contains(version)) {            metadata = null;            result.setRepository(workspace.getRepository());        } else {            metadata = new DefaultMetadata(artifact.getGroupId(), artifact.getArtifactId(), version, MAVEN_METADATA_XML, Metadata.Nature.SNAPSHOT);        }    } else {        metadata = null;    }    if (metadata == null) {        result.setVersion(version);    } else {        List<MetadataRequest> metadataReqs = new ArrayList<>(request.getRepositories().size());        metadataReqs.add(new MetadataRequest(metadata, null, request.getRequestContext()));        for (RemoteRepository repository : request.getRepositories()) {            MetadataRequest metadataRequest = new MetadataRequest(metadata, repository, request.getRequestContext());            metadataRequest.setDeleteLocalCopyIfMissing(true);            metadataRequest.setFavorLocalRepository(true);            metadataRequest.setTrace(trace);            metadataReqs.add(metadataRequest);        }        List<MetadataResult> metadataResults = metadataResolver.resolveMetadata(session, metadataReqs);        Map<String, VersionInfo> infos = new HashMap<>();        for (MetadataResult metadataResult : metadataResults) {            result.addException(metadataResult.getException());            ArtifactRepository repository = metadataResult.getRequest().getRepository();            if (repository == null) {                repository = session.getLocalRepository();            }            Versioning v = readVersions(session, trace, metadataResult.getMetadata(), repository, result);            merge(artifact, infos, v, repository);        }        if (RELEASE.equals(version)) {            resolve(result, infos, RELEASE);        } else if (LATEST.equals(version)) {            if (!resolve(result, infos, LATEST)) {                resolve(result, infos, RELEASE);            }            if (result.getVersion() != null && result.getVersion().endsWith(SNAPSHOT)) {                VersionRequest subRequest = new VersionRequest();                subRequest.setArtifact(artifact.setVersion(result.getVersion()));                if (result.getRepository() instanceof RemoteRepository) {                    RemoteRepository r = (RemoteRepository) result.getRepository();                    subRequest.setRepositories(Collections.singletonList(r));                } else {                    subRequest.setRepositories(request.getRepositories());                }                VersionResult subResult = resolveVersion(session, subRequest);                result.setVersion(subResult.getVersion());                result.setRepository(subResult.getRepository());                for (Exception exception : subResult.getExceptions()) {                    result.addException(exception);                }            }        } else {            String key = SNAPSHOT + getKey(artifact.getClassifier(), artifact.getExtension());            merge(infos, SNAPSHOT, key);            if (!resolve(result, infos, key)) {                result.setVersion(version);            }        }        if (StringUtils.isEmpty(result.getVersion())) {            throw new VersionResolutionException(result);        }    }    if (cacheKey != null && metadata != null && isSafelyCacheable(session, artifact)) {        cache.put(session, cacheKey, new Record(result.getVersion(), result.getRepository()));    }    return result;}
private boolean maven_f5572_0(VersionResult result, Map<String, VersionInfo> infos, String key)
{    VersionInfo info = infos.get(key);    if (info != null) {        result.setVersion(info.version);        result.setRepository(info.repository);    }    return info != null;}
private Versioning maven_f5573_0(RepositorySystemSession session, RequestTrace trace, Metadata metadata, ArtifactRepository repository, VersionResult result)
{    Versioning versioning = null;    try {        if (metadata != null) {            try (SyncContext syncContext = syncContextFactory.newInstance(session, true)) {                syncContext.acquire(null, Collections.singleton(metadata));                if (metadata.getFile() != null && metadata.getFile().exists()) {                    try (final InputStream in = new FileInputStream(metadata.getFile())) {                        versioning = new MetadataXpp3Reader().read(in, false).getVersioning();                        /*                            NOTE: Users occasionally misuse the id "local" for remote repos which screws up the metadata                            of the local repository. This is especially troublesome during snapshot resolution so we try                            to handle that gracefully.                             */                        if (versioning != null && repository instanceof LocalRepository && versioning.getSnapshot() != null && versioning.getSnapshot().getBuildNumber() > 0) {                            final Versioning repaired = new Versioning();                            repaired.setLastUpdated(versioning.getLastUpdated());                            repaired.setSnapshot(new Snapshot());                            repaired.getSnapshot().setLocalCopy(true);                            versioning = repaired;                            throw new IOException("Snapshot information corrupted with remote repository data" + ", please verify that no remote repository uses the id '" + repository.getId() + "'");                        }                    }                }            }        }    } catch (Exception e) {        invalidMetadata(session, trace, metadata, repository, e);        result.addException(e);    }    return (versioning != null) ? versioning : new Versioning();}
private void maven_f5574_0(RepositorySystemSession session, RequestTrace trace, Metadata metadata, ArtifactRepository repository, Exception exception)
{    RepositoryEvent.Builder event = new RepositoryEvent.Builder(session, EventType.METADATA_INVALID);    event.setTrace(trace);    event.setMetadata(metadata);    event.setException(exception);    event.setRepository(repository);    repositoryEventDispatcher.dispatch(event.build());}
private void maven_f5575_0(Artifact artifact, Map<String, VersionInfo> infos, Versioning versioning, ArtifactRepository repository)
{    if (StringUtils.isNotEmpty(versioning.getRelease())) {        merge(RELEASE, infos, versioning.getLastUpdated(), versioning.getRelease(), repository);    }    if (StringUtils.isNotEmpty(versioning.getLatest())) {        merge(LATEST, infos, versioning.getLastUpdated(), versioning.getLatest(), repository);    }    for (SnapshotVersion sv : versioning.getSnapshotVersions()) {        if (StringUtils.isNotEmpty(sv.getVersion())) {            String key = getKey(sv.getClassifier(), sv.getExtension());            merge(SNAPSHOT + key, infos, sv.getUpdated(), sv.getVersion(), repository);        }    }    Snapshot snapshot = versioning.getSnapshot();    if (snapshot != null && versioning.getSnapshotVersions().isEmpty()) {        String version = artifact.getVersion();        if (snapshot.getTimestamp() != null && snapshot.getBuildNumber() > 0) {            String qualifier = snapshot.getTimestamp() + '-' + snapshot.getBuildNumber();            version = version.substring(0, version.length() - SNAPSHOT.length()) + qualifier;        }        merge(SNAPSHOT, infos, versioning.getLastUpdated(), version, repository);    }}
private void maven_f5576_0(String key, Map<String, VersionInfo> infos, String timestamp, String version, ArtifactRepository repository)
{    VersionInfo info = infos.get(key);    if (info == null) {        info = new VersionInfo(timestamp, version, repository);        infos.put(key, info);    } else if (info.isOutdated(timestamp)) {        info.version = version;        info.repository = repository;        info.timestamp = timestamp;    }}
private void maven_f5577_0(Map<String, VersionInfo> infos, String srcKey, String dstKey)
{    VersionInfo srcInfo = infos.get(srcKey);    VersionInfo dstInfo = infos.get(dstKey);    if (dstInfo == null || (srcInfo != null && dstInfo.isOutdated(srcInfo.timestamp) && srcInfo.repository != dstInfo.repository)) {        infos.put(dstKey, srcInfo);    }}
private String maven_f5578_0(String classifier, String extension)
{    return StringUtils.clean(classifier) + ':' + StringUtils.clean(extension);}
private ArtifactRepository maven_f5579_0(RepositorySystemSession session, List<RemoteRepository> repositories, Class<?> repoClass, String repoId)
{    if (repoClass != null) {        if (WorkspaceRepository.class.isAssignableFrom(repoClass)) {            return session.getWorkspaceReader().getRepository();        } else if (LocalRepository.class.isAssignableFrom(repoClass)) {            return session.getLocalRepository();        } else {            for (RemoteRepository repository : repositories) {                if (repoId.equals(repository.getId())) {                    return repository;                }            }        }    }    return null;}
private boolean maven_f5580_0(RepositorySystemSession session, Artifact artifact)
{    /*         * The workspace/reactor is in flux so we better not assume definitive information for any of its         * artifacts/projects.         */    WorkspaceReader workspace = session.getWorkspaceReader();    if (workspace == null) {        return true;    }    Artifact pomArtifact = ArtifactDescriptorUtils.toPomArtifact(artifact);    return workspace.findArtifact(pomArtifact) == null;}
 boolean maven_f5581_0(String timestamp)
{    return timestamp != null && timestamp.compareTo(this.timestamp) > 0;}
public boolean maven_f5582_0(Object obj)
{    if (obj == this) {        return true;    } else if (obj == null || !getClass().equals(obj.getClass())) {        return false;    }    Key that = (Key) obj;    return artifactId.equals(that.artifactId) && groupId.equals(that.groupId) && classifier.equals(that.classifier) && extension.equals(that.extension) && version.equals(that.version) && context.equals(that.context) && localRepo.equals(that.localRepo) && Objects.equals(workspace, that.workspace) && repositories.equals(that.repositories);}
public int maven_f5583_0()
{    return hashCode;}
private static Metadata maven_f5584_0(Artifact artifact, boolean legacyFormat)
{    Snapshot snapshot = new Snapshot();    snapshot.setLocalCopy(true);    Versioning versioning = new Versioning();    versioning.setSnapshot(snapshot);    Metadata metadata = new Metadata();    metadata.setVersioning(versioning);    metadata.setGroupId(artifact.getGroupId());    metadata.setArtifactId(artifact.getArtifactId());    metadata.setVersion(artifact.getBaseVersion());    if (!legacyFormat) {        metadata.setModelVersion("1.1.0");    }    return metadata;}
public void maven_f5585_0(Artifact artifact)
{    artifacts.add(artifact);}
public MavenMetadata maven_f5586_0(File file)
{    return new LocalSnapshotMetadata(metadata, file, legacyFormat);}
public Object maven_f5587_0()
{    return getGroupId() + ':' + getArtifactId() + ':' + getVersion();}
public static Object maven_f5588_0(Artifact artifact)
{    return artifact.getGroupId() + ':' + artifact.getArtifactId() + ':' + artifact.getBaseVersion();}
protected void maven_f5589_0(Metadata recessive)
{    metadata.getVersioning().updateTimestamp();    if (!legacyFormat) {        String lastUpdated = metadata.getVersioning().getLastUpdated();        Map<String, SnapshotVersion> versions = new LinkedHashMap<>();        for (Artifact artifact : artifacts) {            SnapshotVersion sv = new SnapshotVersion();            sv.setClassifier(artifact.getClassifier());            sv.setExtension(artifact.getExtension());            sv.setVersion(getVersion());            sv.setUpdated(lastUpdated);            versions.put(getKey(sv.getClassifier(), sv.getExtension()), sv);        }        Versioning versioning = recessive.getVersioning();        if (versioning != null) {            for (SnapshotVersion sv : versioning.getSnapshotVersions()) {                String key = getKey(sv.getClassifier(), sv.getExtension());                if (!versions.containsKey(key)) {                    versions.put(key, sv);                }            }        }        metadata.getVersioning().setSnapshotVersions(new ArrayList<>(versions.values()));    }    artifacts.clear();}
private String maven_f5590_0(String classifier, String extension)
{    return classifier + ':' + extension;}
public String maven_f5591_0()
{    return metadata.getGroupId();}
public String maven_f5592_0()
{    return metadata.getArtifactId();}
public String maven_f5593_0()
{    return metadata.getVersion();}
public Nature maven_f5594_0()
{    return Nature.SNAPSHOT;}
public Collection<? extends Metadata> maven_f5595_0(Collection<? extends Artifact> artifacts)
{    for (Artifact artifact : artifacts) {        if (artifact.isSnapshot()) {            Object key = LocalSnapshotMetadata.getKey(artifact);            LocalSnapshotMetadata snapshotMetadata = snapshots.get(key);            if (snapshotMetadata == null) {                snapshotMetadata = new LocalSnapshotMetadata(artifact, legacyFormat);                snapshots.put(key, snapshotMetadata);            }            snapshotMetadata.bind(artifact);        }    }    return Collections.emptyList();}
public Artifact maven_f5596_0(Artifact artifact)
{    return artifact;}
public Collection<? extends Metadata> maven_f5597_0(Collection<? extends Artifact> artifacts)
{    return snapshots.values();}
protected void maven_f5598_0()
{    install(new AetherModule());        bind(ArtifactDescriptorReader.class).to(DefaultArtifactDescriptorReader.class).in(Singleton.class);        bind(VersionResolver.class).to(DefaultVersionResolver.class).in(Singleton.class);        bind(VersionRangeResolver.class).to(DefaultVersionRangeResolver.class).in(Singleton.class);        bind(MetadataGeneratorFactory.class).annotatedWith(Names.named("snapshot")).to(SnapshotMetadataGeneratorFactory.class).in(Singleton.class);        bind(MetadataGeneratorFactory.class).annotatedWith(Names.named("versions")).to(VersionsMetadataGeneratorFactory.class).in(Singleton.class);        bind(ModelBuilder.class).toInstance(new DefaultModelBuilderFactory().newInstance());}
 Set<MetadataGeneratorFactory> maven_f5599_0(@Named("snapshot") MetadataGeneratorFactory snapshot, maven_f5599_0("versions") MetadataGeneratorFactory versions)
{    Set<MetadataGeneratorFactory> factories = new HashSet<>();    factories.add(snapshot);    factories.add(versions);    return Collections.unmodifiableSet(factories);}
public String maven_f5600_0()
{    return MAVEN_METADATA_XML;}
public File maven_f5601_0()
{    return file;}
public void maven_f5602_0(File existing, File result) throws RepositoryException
{    Metadata recessive = read(existing);    merge(recessive);    write(result, metadata);    merged = true;}
public boolean maven_f5603_0()
{    return merged;}
 static Metadata maven_f5604_0(File metadataFile) throws RepositoryException
{    if (metadataFile.length() <= 0) {        return new Metadata();    }    try (Reader reader = ReaderFactory.newXmlReader(metadataFile)) {        return new MetadataXpp3Reader().read(reader, false);    } catch (IOException e) {        throw new RepositoryException("Could not read metadata " + metadataFile + ": " + e.getMessage(), e);    } catch (XmlPullParserException e) {        throw new RepositoryException("Could not parse metadata " + metadataFile + ": " + e.getMessage(), e);    }}
private void maven_f5605_0(File metadataFile, Metadata metadata) throws RepositoryException
{    metadataFile.getParentFile().mkdirs();    try (Writer writer = WriterFactory.newXmlWriter(metadataFile)) {        new MetadataXpp3Writer().write(writer, metadata);    } catch (IOException e) {        throw new RepositoryException("Could not write metadata " + metadataFile + ": " + e.getMessage(), e);    }}
public Map<String, String> maven_f5606_0()
{    return Collections.emptyMap();}
public org.eclipse.aether.metadata.Metadata maven_f5607_0(Map<String, String> properties)
{    return this;}
public static DefaultServiceLocator maven_f5608_0()
{    DefaultServiceLocator locator = new DefaultServiceLocator();    locator.addService(ArtifactDescriptorReader.class, DefaultArtifactDescriptorReader.class);    locator.addService(VersionResolver.class, DefaultVersionResolver.class);    locator.addService(VersionRangeResolver.class, DefaultVersionRangeResolver.class);    locator.addService(MetadataGeneratorFactory.class, SnapshotMetadataGeneratorFactory.class);    locator.addService(MetadataGeneratorFactory.class, VersionsMetadataGeneratorFactory.class);    return locator;}
public static DefaultRepositorySystemSession maven_f5609_0()
{    DefaultRepositorySystemSession session = new DefaultRepositorySystemSession();    DependencyTraverser depTraverser = new FatArtifactTraverser();    session.setDependencyTraverser(depTraverser);    DependencyManager depManager = new ClassicDependencyManager();    session.setDependencyManager(depManager);    DependencySelector depFilter = new AndDependencySelector(new ScopeDependencySelector("test", "provided"), new OptionalDependencySelector(), new ExclusionDependencySelector());    session.setDependencySelector(depFilter);    DependencyGraphTransformer transformer = new ConflictResolver(new NearestVersionSelector(), new JavaScopeSelector(), new SimpleOptionalitySelector(), new JavaScopeDeriver());    transformer = new ChainedDependencyGraphTransformer(transformer, new JavaDependencyContextRefiner());    session.setDependencyGraphTransformer(transformer);    DefaultArtifactTypeRegistry stereotypes = new DefaultArtifactTypeRegistry();    stereotypes.add(new DefaultArtifactType("pom"));    stereotypes.add(new DefaultArtifactType("maven-plugin", "jar", "", "java"));    stereotypes.add(new DefaultArtifactType("jar", "jar", "", "java"));    stereotypes.add(new DefaultArtifactType("ejb", "jar", "", "java"));    stereotypes.add(new DefaultArtifactType("ejb-client", "jar", "client", "java"));    stereotypes.add(new DefaultArtifactType("test-jar", "jar", "tests", "java"));    stereotypes.add(new DefaultArtifactType("javadoc", "jar", "javadoc", "java"));    stereotypes.add(new DefaultArtifactType("java-source", "jar", "sources", "java", false, false));    stereotypes.add(new DefaultArtifactType("war", "war", "", "java", false, true));    stereotypes.add(new DefaultArtifactType("ear", "ear", "", "java", false, true));    stereotypes.add(new DefaultArtifactType("rar", "rar", "", "java", false, true));    stereotypes.add(new DefaultArtifactType("par", "par", "", "java", false, true));    session.setArtifactTypeRegistry(stereotypes);    session.setArtifactDescriptorPolicy(new SimpleArtifactDescriptorPolicy(true, true));    final Properties systemProperties = new Properties();            Properties sysProp = System.getProperties();    synchronized (sysProp) {        systemProperties.putAll(sysProp);    }    session.setSystemProperties(systemProperties);    session.setConfigProperties(systemProperties);    return session;}
protected void maven_f5610_0()
{    install(new AetherModule());    bind(ArtifactDescriptorReader.class).to(DefaultArtifactDescriptorReader.class).in(Singleton.class);    bind(VersionResolver.class).to(DefaultVersionResolver.class).in(Singleton.class);    bind(VersionRangeResolver.class).to(DefaultVersionRangeResolver.class).in(Singleton.class);    bind(MetadataGeneratorFactory.class).annotatedWith(Names.named("snapshot")).to(SnapshotMetadataGeneratorFactory.class).in(Singleton.class);    bind(MetadataGeneratorFactory.class).annotatedWith(Names.named("versions")).to(VersionsMetadataGeneratorFactory.class).in(Singleton.class);    bind(ModelBuilder.class).toInstance(new DefaultModelBuilderFactory().newInstance());}
 Set<MetadataGeneratorFactory> maven_f5611_0(@Named("snapshot") MetadataGeneratorFactory snapshot, maven_f5611_0("versions") MetadataGeneratorFactory versions)
{    Set<MetadataGeneratorFactory> factories = new HashSet<>(2);    factories.add(snapshot);    factories.add(versions);    return Collections.unmodifiableSet(factories);}
protected static Metadata maven_f5612_0(Artifact artifact, boolean legacyFormat)
{    Metadata metadata = new Metadata();    if (!legacyFormat) {        metadata.setModelVersion("1.1.0");    }    metadata.setGroupId(artifact.getGroupId());    metadata.setArtifactId(artifact.getArtifactId());    metadata.setVersion(artifact.getBaseVersion());    return metadata;}
public void maven_f5613_0(Artifact artifact)
{    artifacts.add(artifact);}
public Object maven_f5614_0()
{    return getGroupId() + ':' + getArtifactId() + ':' + getVersion();}
public static Object maven_f5615_0(Artifact artifact)
{    return artifact.getGroupId() + ':' + artifact.getArtifactId() + ':' + artifact.getBaseVersion();}
protected String maven_f5616_0(String classifier, String extension)
{    return classifier + ':' + extension;}
public String maven_f5617_0()
{    return metadata.getGroupId();}
public String maven_f5618_0()
{    return metadata.getArtifactId();}
public String maven_f5619_0()
{    return metadata.getVersion();}
public Nature maven_f5620_0()
{    return Nature.SNAPSHOT;}
public String maven_f5621_0()
{    if (groupId != null) {        return groupId;    } else {        return artifact.getGroupId();    }}
public String maven_f5622_0()
{    if (artifactId != null) {        return artifactId;    } else {        return artifact.getArtifactId();    }}
public String maven_f5623_0()
{    if (version != null) {        return version;    } else {        return artifact.getVersion();    }}
public String maven_f5624_0()
{    return artifact.getClassifier();}
public String maven_f5625_0()
{    return artifact.getExtension();}
public File maven_f5626_0()
{    return artifact.getFile();}
public String maven_f5627_0(String key, String defaultValue)
{    return artifact.getProperty(key, defaultValue);}
public Map<String, String> maven_f5628_0()
{    return artifact.getProperties();}
public MavenMetadata maven_f5629_0(File file)
{    return new RemoteSnapshotMetadata(metadata, file, legacyFormat);}
public String maven_f5630_0(Artifact artifact)
{    String key = getKey(artifact.getClassifier(), artifact.getExtension());    return versions.get(key).getVersion();}
protected void maven_f5631_0(Metadata recessive)
{    Snapshot snapshot;    String lastUpdated;    if (metadata.getVersioning() == null) {        DateFormat utcDateFormatter = new SimpleDateFormat(DEFAULT_SNAPSHOT_TIMESTAMP_FORMAT);        utcDateFormatter.setCalendar(new GregorianCalendar());        utcDateFormatter.setTimeZone(DEFAULT_SNAPSHOT_TIME_ZONE);        snapshot = new Snapshot();        snapshot.setBuildNumber(getBuildNumber(recessive) + 1);        snapshot.setTimestamp(utcDateFormatter.format(new Date()));        Versioning versioning = new Versioning();        versioning.setSnapshot(snapshot);        versioning.setLastUpdated(snapshot.getTimestamp().replace(".", ""));        lastUpdated = versioning.getLastUpdated();        metadata.setVersioning(versioning);    } else {        snapshot = metadata.getVersioning().getSnapshot();        lastUpdated = metadata.getVersioning().getLastUpdated();    }    for (Artifact artifact : artifacts) {        String version = artifact.getVersion();        if (version.endsWith(SNAPSHOT)) {            String qualifier = snapshot.getTimestamp() + '-' + snapshot.getBuildNumber();            version = version.substring(0, version.length() - SNAPSHOT.length()) + qualifier;        }        SnapshotVersion sv = new SnapshotVersion();        sv.setClassifier(artifact.getClassifier());        sv.setExtension(artifact.getExtension());        sv.setVersion(version);        sv.setUpdated(lastUpdated);        versions.put(getKey(sv.getClassifier(), sv.getExtension()), sv);    }    artifacts.clear();    Versioning versioning = recessive.getVersioning();    if (versioning != null) {        for (SnapshotVersion sv : versioning.getSnapshotVersions()) {            String key = getKey(sv.getClassifier(), sv.getExtension());            if (!versions.containsKey(key)) {                versions.put(key, sv);            }        }    }    if (!legacyFormat) {        metadata.getVersioning().setSnapshotVersions(new ArrayList<>(versions.values()));    }}
private static int maven_f5632_0(Metadata metadata)
{    int number = 0;    Versioning versioning = metadata.getVersioning();    if (versioning != null) {        Snapshot snapshot = versioning.getSnapshot();        if (snapshot != null && snapshot.getBuildNumber() > 0) {            number = snapshot.getBuildNumber();        }    }    return number;}
public Collection<? extends Metadata> maven_f5633_0(Collection<? extends Artifact> artifacts)
{    for (Artifact artifact : artifacts) {        if (artifact.isSnapshot()) {            Object key = RemoteSnapshotMetadata.getKey(artifact);            RemoteSnapshotMetadata snapshotMetadata = snapshots.get(key);            if (snapshotMetadata == null) {                snapshotMetadata = new RemoteSnapshotMetadata(artifact, legacyFormat);                snapshots.put(key, snapshotMetadata);            }            snapshotMetadata.bind(artifact);        }    }    return snapshots.values();}
public Artifact maven_f5634_0(Artifact artifact)
{    if (artifact.isSnapshot() && artifact.getVersion().equals(artifact.getBaseVersion())) {        Object key = RemoteSnapshotMetadata.getKey(artifact);        RemoteSnapshotMetadata snapshotMetadata = snapshots.get(key);        if (snapshotMetadata != null) {            artifact = artifact.setVersion(snapshotMetadata.getExpandedVersion(artifact));        }    }    return artifact;}
public Collection<? extends Metadata> maven_f5635_0(Collection<? extends Artifact> artifacts)
{    return Collections.emptyList();}
public MetadataGenerator maven_f5636_0(RepositorySystemSession session, InstallRequest request)
{    return new LocalSnapshotMetadataGenerator(session, request);}
public MetadataGenerator maven_f5637_0(RepositorySystemSession session, DeployRequest request)
{    return new RemoteSnapshotMetadataGenerator(session, request);}
public float maven_f5638_0()
{    return 10;}
private static Metadata maven_f5639_0(Artifact artifact)
{    Metadata metadata = new Metadata();    metadata.setGroupId(artifact.getGroupId());    metadata.setArtifactId(artifact.getArtifactId());    Versioning versioning = new Versioning();    versioning.addVersion(artifact.getBaseVersion());    if (!artifact.isSnapshot()) {        versioning.setRelease(artifact.getBaseVersion());    }    if ("maven-plugin".equals(artifact.getProperty(ArtifactProperties.TYPE, ""))) {        versioning.setLatest(artifact.getBaseVersion());    }    metadata.setVersioning(versioning);    return metadata;}
protected void maven_f5640_0(Metadata recessive)
{    Versioning versioning = metadata.getVersioning();    versioning.updateTimestamp();    if (recessive.getVersioning() != null) {        if (versioning.getLatest() == null) {            versioning.setLatest(recessive.getVersioning().getLatest());        }        if (versioning.getRelease() == null) {            versioning.setRelease(recessive.getVersioning().getRelease());        }        Collection<String> versions = new LinkedHashSet<>(recessive.getVersioning().getVersions());        versions.addAll(versioning.getVersions());        versioning.setVersions(new ArrayList<>(versions));    }}
public Object maven_f5641_0()
{    return getGroupId() + ':' + getArtifactId();}
public static Object maven_f5642_0(Artifact artifact)
{    return artifact.getGroupId() + ':' + artifact.getArtifactId();}
public MavenMetadata maven_f5643_0(File file)
{    return new VersionsMetadata(artifact, file);}
public String maven_f5644_0()
{    return artifact.getGroupId();}
public String maven_f5645_0()
{    return artifact.getArtifactId();}
public String maven_f5646_0()
{    return "";}
public Nature maven_f5647_0()
{    return artifact.isSnapshot() ? Nature.RELEASE_OR_SNAPSHOT : Nature.RELEASE;}
public Collection<? extends Metadata> maven_f5648_0(Collection<? extends Artifact> artifacts)
{    return Collections.emptyList();}
public Artifact maven_f5649_0(Artifact artifact)
{    return artifact;}
public Collection<? extends Metadata> maven_f5650_0(Collection<? extends Artifact> artifacts)
{    for (Artifact artifact : artifacts) {        Object key = VersionsMetadata.getKey(artifact);        if (processedVersions.get(key) == null) {            VersionsMetadata versionsMetadata = versions.get(key);            if (versionsMetadata == null) {                versionsMetadata = new VersionsMetadata(artifact);                versions.put(key, versionsMetadata);            }        }    }    return versions.values();}
public MetadataGenerator maven_f5651_0(RepositorySystemSession session, InstallRequest request)
{    return new VersionsMetadataGenerator(session, request);}
public MetadataGenerator maven_f5652_0(RepositorySystemSession session, DeployRequest request)
{    return new VersionsMetadataGenerator(session, request);}
public float maven_f5653_0()
{    return 5;}
protected void maven_f5654_0(ContainerConfiguration containerConfiguration)
{    super.customizeContainerConfiguration(containerConfiguration);    containerConfiguration.setAutoWiring(true);    containerConfiguration.setClassPathScanning(PlexusConstants.SCANNING_INDEX);}
protected void maven_f5655_0() throws Exception
{    super.setUp();    system = lookup(RepositorySystem.class);    session = newMavenRepositorySystemSession(system);}
protected void maven_f5656_0() throws Exception
{    session = null;    system = null;    super.tearDown();}
public static RepositorySystemSession maven_f5657_0(RepositorySystem system)
{    DefaultRepositorySystemSession session = MavenRepositorySystemUtils.newSession();    LocalRepository localRepo = new LocalRepository("target/local-repo");    session.setLocalRepositoryManager(system.newLocalRepositoryManager(session, localRepo));    session.setTransferListener(new ConsoleTransferListener());    session.setRepositoryListener(new ConsoleRepositoryListener());    return session;}
public static RemoteRepository maven_f5658_0() throws MalformedURLException
{    return new RemoteRepository.Builder("repo", "default", getTestFile("target/test-classes/repo").toURI().toURL().toString()).build();}
public void maven_f5659_0() throws Exception
{        DefaultArtifactDescriptorReader reader = (DefaultArtifactDescriptorReader) lookup(ArtifactDescriptorReader.class);    RepositoryEventDispatcher eventDispatcher = mock(RepositoryEventDispatcher.class);    ArgumentCaptor<RepositoryEvent> event = ArgumentCaptor.forClass(RepositoryEvent.class);    reader.setRepositoryEventDispatcher(eventDispatcher);    ArtifactDescriptorRequest request = new ArtifactDescriptorRequest();    request.addRepository(newTestRepository());    request.setArtifact(new DefaultArtifact("org.apache.maven.its", "dep-mng5459", "jar", "0.4.0-SNAPSHOT"));        reader.readArtifactDescriptor(session, request);        verify(eventDispatcher).dispatch(event.capture());    boolean missingArtifactDescriptor = false;    for (RepositoryEvent evt : event.getAllValues()) {        if (EventType.ARTIFACT_DESCRIPTOR_MISSING.equals(evt.getType())) {            assertEquals("Could not find artifact org.apache.maven.its:dep-mng5459:pom:0.4.0-20130404.090532-2 in repo (" + newTestRepository().getUrl() + ")", evt.getException().getMessage());            missingArtifactDescriptor = true;        }    }    if (!missingArtifactDescriptor) {        fail("Expected missing artifact descriptor for org.apache.maven.its:dep-mng5459:pom:0.4.0-20130404.090532-2");    }}
public void maven_f5660_0() throws Exception
{    final Parent parent = new Parent();    parent.setGroupId("ut.simple");    parent.setArtifactId("artifact");    parent.setVersion("0");    try {        this.newModelResolver().resolveModel(parent);        fail("Expected 'UnresolvableModelException' not thrown.");    } catch (final UnresolvableModelException e) {        assertNotNull(e.getMessage());        assertTrue(e.getMessage().startsWith("Could not find artifact ut.simple:artifact:pom:0 in repo"));    }}
public void maven_f5661_0() throws Exception
{    final Parent parent = new Parent();    parent.setGroupId("ut.simple");    parent.setArtifactId("artifact");    parent.setVersion("[2.0,2.1)");    try {        this.newModelResolver().resolveModel(parent);        fail("Expected 'UnresolvableModelException' not thrown.");    } catch (final UnresolvableModelException e) {        assertEquals("No versions matched the requested parent version range '[2.0,2.1)'", e.getMessage());    }}
public void maven_f5662_0() throws Exception
{    final Parent parent = new Parent();    parent.setGroupId("ut.simple");    parent.setArtifactId("artifact");    parent.setVersion("[1.0,)");    try {        this.newModelResolver().resolveModel(parent);        fail("Expected 'UnresolvableModelException' not thrown.");    } catch (final UnresolvableModelException e) {        assertEquals("The requested parent version range '[1.0,)' does not specify an upper bound", e.getMessage());    }}
public void maven_f5663_0() throws Exception
{    final Parent parent = new Parent();    parent.setGroupId("ut.simple");    parent.setArtifactId("artifact");    parent.setVersion("1.0");    assertNotNull(this.newModelResolver().resolveModel(parent));    assertEquals("1.0", parent.getVersion());}
public void maven_f5664_0() throws Exception
{    final Parent parent = new Parent();    parent.setGroupId("ut.simple");    parent.setArtifactId("artifact");    parent.setVersion("(,2.0)");    assertNotNull(this.newModelResolver().resolveModel(parent));    assertEquals("1.0", parent.getVersion());}
public void maven_f5665_0() throws Exception
{    final Dependency dependency = new Dependency();    dependency.setGroupId("ut.simple");    dependency.setArtifactId("artifact");    dependency.setVersion("0");    try {        this.newModelResolver().resolveModel(dependency);        fail("Expected 'UnresolvableModelException' not thrown.");    } catch (final UnresolvableModelException e) {        assertNotNull(e.getMessage());        assertTrue(e.getMessage().startsWith("Could not find artifact ut.simple:artifact:pom:0 in repo"));    }}
public void maven_f5666_0() throws Exception
{    final Dependency dependency = new Dependency();    dependency.setGroupId("ut.simple");    dependency.setArtifactId("artifact");    dependency.setVersion("[2.0,2.1)");    try {        this.newModelResolver().resolveModel(dependency);        fail("Expected 'UnresolvableModelException' not thrown.");    } catch (final UnresolvableModelException e) {        assertEquals("No versions matched the requested dependency version range '[2.0,2.1)'", e.getMessage());    }}
public void maven_f5667_0() throws Exception
{    final Dependency dependency = new Dependency();    dependency.setGroupId("ut.simple");    dependency.setArtifactId("artifact");    dependency.setVersion("[1.0,)");    try {        this.newModelResolver().resolveModel(dependency);        fail("Expected 'UnresolvableModelException' not thrown.");    } catch (final UnresolvableModelException e) {        assertEquals("The requested dependency version range '[1.0,)' does not specify an upper bound", e.getMessage());    }}
public void maven_f5668_0() throws Exception
{    final Dependency dependency = new Dependency();    dependency.setGroupId("ut.simple");    dependency.setArtifactId("artifact");    dependency.setVersion("1.0");    assertNotNull(this.newModelResolver().resolveModel(dependency));    assertEquals("1.0", dependency.getVersion());}
public void maven_f5669_0() throws Exception
{    final Dependency dependency = new Dependency();    dependency.setGroupId("ut.simple");    dependency.setArtifactId("artifact");    dependency.setVersion("(,2.0)");    assertNotNull(this.newModelResolver().resolveModel(dependency));    assertEquals("1.0", dependency.getVersion());}
private ModelResolver maven_f5670_0() throws ComponentLookupException, MalformedURLException
{    return new DefaultModelResolver(this.session, null, this.getClass().getName(), lookup(ArtifactResolver.class), lookup(VersionRangeResolver.class), lookup(RemoteRepositoryManager.class), Arrays.asList(newTestRepository()));}
protected void maven_f5671_0() throws Exception
{    super.setUp();        versionResolver = (DefaultVersionResolver) lookup(VersionResolver.class, "default");}
protected void maven_f5672_0() throws Exception
{    versionResolver = null;    super.tearDown();}
public void maven_f5673_0() throws Exception
{    VersionRequest requestB = new VersionRequest();    requestB.addRepository(newTestRepository());    Artifact artifactB = new DefaultArtifact("org.apache.maven.its", "dep-mng5324", "classifierB", "jar", "07.20.3-SNAPSHOT");    requestB.setArtifact(artifactB);    VersionResult resultB = versionResolver.resolveVersion(session, requestB);    assertEquals("07.20.3-20120809.112920-97", resultB.getVersion());    VersionRequest requestA = new VersionRequest();    requestA.addRepository(newTestRepository());    Artifact artifactA = new DefaultArtifact("org.apache.maven.its", "dep-mng5324", "classifierA", "jar", "07.20.3-SNAPSHOT");    requestA.setArtifact(artifactA);    VersionResult resultA = versionResolver.resolveVersion(session, requestA);    assertEquals("07.20.3-20120809.112124-88", resultA.getVersion());}
public void maven_f5674_0() throws Exception
{    VersionRequest requestA = new VersionRequest();    requestA.addRepository(newTestRepository());    String versionA = "07.20.3-20120809.112124-88";    Artifact artifactA = new DefaultArtifact("org.apache.maven.its", "dep-mng5324", "classifierA", "jar", versionA);    requestA.setArtifact(artifactA);    VersionResult resultA = versionResolver.resolveVersion(session, requestA);    assertEquals(versionA, resultA.getVersion());    VersionRequest requestB = new VersionRequest();    requestB.addRepository(newTestRepository());    String versionB = "07.20.3-20120809.112920-97";    Artifact artifactB = new DefaultArtifact("org.apache.maven.its", "dep-mng5324", "classifierB", "jar", versionB);    requestB.setArtifact(artifactB);    VersionResult resultB = versionResolver.resolveVersion(session, requestB);    assertEquals(versionB, resultB.getVersion());}
public void maven_f5675_0()
{    ServiceLocator locator = MavenRepositorySystemUtils.newServiceLocator();    RepositorySystem repoSys = locator.getService(RepositorySystem.class);    assertNotNull(repoSys);}
public void maven_f5676_0()
{    ServiceLocator locator = MavenRepositorySystemUtils.newServiceLocator();    assertEquals(2, locator.getServices(MetadataGeneratorFactory.class).size());}
public void maven_f5677_0()
{    defaultLocale = Locale.getDefault();    Locale.setDefault(new Locale("th", "TH"));}
public void maven_f5678_0()
{    Locale.setDefault(defaultLocale);}
 static String maven_f5679_0()
{    SimpleDateFormat df = new SimpleDateFormat("yyyyMMdd");    df.setCalendar(new GregorianCalendar());    df.setTimeZone(RemoteSnapshotMetadata.DEFAULT_SNAPSHOT_TIME_ZONE);    return df.format(new Date());}
public void maven_f5680_0()
{    String dateBefore = gregorianDate();    RemoteSnapshotMetadata metadata = new RemoteSnapshotMetadata(new DefaultArtifact("a:b:1-SNAPSHOT"), false);    metadata.merge(new Metadata());    String dateAfter = gregorianDate();    String ts = metadata.metadata.getVersioning().getSnapshot().getTimestamp();    String datePart = ts.replaceAll("\\..*", "");    /* Allow for this test running across midnight */    Set<String> expected = new HashSet<String>(Arrays.asList(dateBefore, dateAfter));    assertTrue("Expected " + datePart + " to be in " + expected, expected.contains(datePart));}
public void maven_f5681_0() throws Exception
{}
public void maven_f5682_0() throws Exception
{}
public void maven_f5683_0() throws Exception
{    Artifact artifact = new DefaultArtifact("ut.simple:artifact:extension:classifier:1.0");    ArtifactDescriptorRequest request = new ArtifactDescriptorRequest();    request.setArtifact(artifact);    request.addRepository(newTestRepository());    ArtifactDescriptorResult result = system.readArtifactDescriptor(session, request);    List<Dependency> deps = result.getDependencies();    assertEquals(2, deps.size());    checkUtSimpleArtifactDependencies(deps.get(0), deps.get(1));}
private void maven_f5684_0(Dependency dep1, Dependency dep2)
{    assertEquals("compile", dep1.getScope());    assertFalse(dep1.isOptional());    assertEquals(0, dep1.getExclusions().size());    Artifact depArtifact = dep1.getArtifact();    assertEquals("ut.simple", depArtifact.getGroupId());    assertEquals("dependency", depArtifact.getArtifactId());    assertEquals("1.0", depArtifact.getVersion());    assertEquals("1.0", depArtifact.getBaseVersion());    assertNull(depArtifact.getFile());    assertFalse(depArtifact.isSnapshot());    assertEquals("", depArtifact.getClassifier());    assertEquals("jar", depArtifact.getExtension());    assertEquals("java", depArtifact.getProperty("language", null));    assertEquals("jar", depArtifact.getProperty("type", null));    assertEquals("true", depArtifact.getProperty("constitutesBuildPath", null));    assertEquals("false", depArtifact.getProperty("includesDependencies", null));    assertEquals(4, depArtifact.getProperties().size());    assertEquals("compile", dep2.getScope());    assertFalse(dep2.isOptional());    assertEquals(0, dep2.getExclusions().size());    depArtifact = dep2.getArtifact();    assertEquals("ut.simple", depArtifact.getGroupId());    assertEquals("dependency", depArtifact.getArtifactId());    assertEquals("1.0", depArtifact.getVersion());    assertEquals("1.0", depArtifact.getBaseVersion());    assertNull(depArtifact.getFile());    assertFalse(depArtifact.isSnapshot());    assertEquals("sources", depArtifact.getClassifier());    assertEquals("jar", depArtifact.getExtension());    assertEquals("java", depArtifact.getProperty("language", null));        assertEquals("jar", depArtifact.getProperty("type", null));        assertEquals("true", depArtifact.getProperty("constitutesBuildPath", null));    assertEquals("false", depArtifact.getProperty("includesDependencies", null));    assertEquals(4, depArtifact.getProperties().size());}
public void maven_f5685_0() throws Exception
{    Artifact artifact = new DefaultArtifact("ut.simple:artifact:extension:classifier:1.0");        CollectRequest collectRequest = new CollectRequest();    collectRequest.setRoot(new Dependency(artifact, null));    collectRequest.addRepository(newTestRepository());    CollectResult collectResult = system.collectDependencies(session, collectRequest);    List<DependencyNode> nodes = collectResult.getRoot().getChildren();    assertEquals(2, nodes.size());    checkUtSimpleArtifactDependencies(nodes.get(0).getDependency(), nodes.get(1).getDependency());}
public void maven_f5686_0() throws Exception
{    Artifact artifact = new DefaultArtifact("ut.simple:artifact:1.0");    ArtifactRequest artifactRequest = new ArtifactRequest();    artifactRequest.setArtifact(artifact);    artifactRequest.addRepository(newTestRepository());    ArtifactResult artifactResult = system.resolveArtifact(session, artifactRequest);    checkArtifactResult(artifactResult, "artifact-1.0.jar");    artifact = new DefaultArtifact("ut.simple:artifact:zip:1.0");    artifactRequest.setArtifact(artifact);    artifactResult = system.resolveArtifact(session, artifactRequest);    checkArtifactResult(artifactResult, "artifact-1.0.zip");    artifact = new DefaultArtifact("ut.simple:artifact:zip:classifier:1.0");    artifactRequest.setArtifact(artifact);    artifactResult = system.resolveArtifact(session, artifactRequest);    checkArtifactResult(artifactResult, "artifact-1.0-classifier.zip");}
private void maven_f5687_0(ArtifactResult result, String filename)
{    assertFalse(result.isMissing());    assertTrue(result.isResolved());    Artifact artifact = result.getArtifact();    assertNotNull(artifact.getFile());    assertEquals(filename, artifact.getFile().getName());}
public void maven_f5688_0() throws Exception
{    ArtifactRequest req1 = new ArtifactRequest();    req1.setArtifact(new DefaultArtifact("ut.simple:artifact:1.0"));    req1.addRepository(newTestRepository());    ArtifactRequest req2 = new ArtifactRequest();    req2.setArtifact(new DefaultArtifact("ut.simple:artifact:zip:1.0"));    req2.addRepository(newTestRepository());    ArtifactRequest req3 = new ArtifactRequest();    req3.setArtifact(new DefaultArtifact("ut.simple:artifact:zip:classifier:1.0"));    req3.addRepository(newTestRepository());    List<ArtifactRequest> requests = Arrays.asList(req1, req2, req3);    List<ArtifactResult> results = system.resolveArtifacts(session, requests);    assertEquals(3, results.size());    checkArtifactResult(results.get(0), "artifact-1.0.jar");    checkArtifactResult(results.get(1), "artifact-1.0.zip");    checkArtifactResult(results.get(2), "artifact-1.0-classifier.zip");}
public void maven_f5689_0() throws Exception
{}
public void maven_f5690_0() throws Exception
{}
public void maven_f5691_0() throws Exception
{}
public void maven_f5692_0() throws Exception
{}
public void maven_f5693_0() throws Exception
{}
public void maven_f5694_0(RepositoryEvent event)
{    println("artifactDeployed", event.getArtifact() + " to " + event.getRepository());}
public void maven_f5695_0(RepositoryEvent event)
{    println("artifactDeploying", event.getArtifact() + " to " + event.getRepository());}
public void maven_f5696_0(RepositoryEvent event)
{    println("artifactDescriptorInvalid", "for " + event.getArtifact() + ": " + event.getException().getMessage());}
public void maven_f5697_0(RepositoryEvent event)
{    println("artifactDescriptorMissing", "for " + event.getArtifact());}
public void maven_f5698_0(RepositoryEvent event)
{    println("artifactInstalled", event.getArtifact() + " to " + event.getFile());}
public void maven_f5699_0(RepositoryEvent event)
{    println("artifactInstalling", event.getArtifact() + " to " + event.getFile());}
public void maven_f5700_0(RepositoryEvent event)
{    println("artifactResolved", event.getArtifact() + " from " + event.getRepository());}
public void maven_f5701_0(RepositoryEvent event)
{    println("artifactDownloading", event.getArtifact() + " from " + event.getRepository());}
public void maven_f5702_0(RepositoryEvent event)
{    println("artifactDownloaded", event.getArtifact() + " from " + event.getRepository());}
public void maven_f5703_0(RepositoryEvent event)
{    println("artifactResolving", event.getArtifact().toString());}
public void maven_f5704_0(RepositoryEvent event)
{    println("metadataDeployed", event.getMetadata() + " to " + event.getRepository());}
public void maven_f5705_0(RepositoryEvent event)
{    println("metadataDeploying", event.getMetadata() + " to " + event.getRepository());}
public void maven_f5706_0(RepositoryEvent event)
{    println("metadataInstalled", event.getMetadata() + " to " + event.getFile());}
public void maven_f5707_0(RepositoryEvent event)
{    println("metadataInstalling", event.getMetadata() + " to " + event.getFile());}
public void maven_f5708_0(RepositoryEvent event)
{    println("metadataInvalid", event.getMetadata().toString());}
public void maven_f5709_0(RepositoryEvent event)
{    println("metadataResolved", event.getMetadata() + " from " + event.getRepository());}
public void maven_f5710_0(RepositoryEvent event)
{    println("metadataResolving", event.getMetadata() + " from " + event.getRepository());}
private void maven_f5711_0(String event, String message)
{    out.println("Aether Repository - " + event + ": " + message);}
public void maven_f5712_0(TransferEvent event)
{    String message = event.getRequestType() == TransferEvent.RequestType.PUT ? "Uploading" : "Downloading";    println("transferInitiated", message + ": " + event.getResource().getRepositoryUrl() + event.getResource().getResourceName());}
public void maven_f5713_0(TransferEvent event)
{    TransferResource resource = event.getResource();    downloads.put(resource, event.getTransferredBytes());    StringBuilder buffer = new StringBuilder(64);    for (Map.Entry<TransferResource, Long> entry : downloads.entrySet()) {        long total = entry.getKey().getContentLength();        long complete = entry.getValue();        buffer.append(getStatus(complete, total)).append("  ");    }    int pad = lastLength - buffer.length();    lastLength = buffer.length();    pad(buffer, pad);    buffer.append('\r');    print("transferProgressed", buffer.toString());}
private String maven_f5714_0(long complete, long total)
{    if (total >= 1024) {        return toKB(complete) + "/" + toKB(total) + " KB ";    } else if (total >= 0) {        return complete + "/" + total + " B ";    } else if (complete >= 1024) {        return toKB(complete) + " KB ";    } else {        return complete + " B ";    }}
private void maven_f5715_0(StringBuilder buffer, int spaces)
{    String block = "                                        ";    while (spaces > 0) {        int n = Math.min(spaces, block.length());        buffer.append(block, 0, n);        spaces -= n;    }}
public void maven_f5716_0(TransferEvent event)
{    transferCompleted(event);    TransferResource resource = event.getResource();    long contentLength = event.getTransferredBytes();    if (contentLength >= 0) {        String type = (event.getRequestType() == TransferEvent.RequestType.PUT ? "Uploaded" : "Downloaded");        String len = contentLength >= 1024 ? toKB(contentLength) + " KB" : contentLength + " B";        String throughput = "";        long duration = System.currentTimeMillis() - resource.getTransferStartTime();        if (duration > 0) {            DecimalFormat format = new DecimalFormat("0.0", new DecimalFormatSymbols(Locale.ENGLISH));            double kbPerSec = (contentLength / 1024.0) / (duration / 1000.0);            throughput = " at " + format.format(kbPerSec) + " KB/sec";        }        println("transferSucceeded", type + ": " + resource.getRepositoryUrl() + resource.getResourceName() + " (" + len + throughput + ")");    }}
public void maven_f5717_0(TransferEvent event)
{    transferCompleted(event);    println("transferFailed", event.getException().getClass() + ": " + event.getException().getMessage());}
private void maven_f5718_0(TransferEvent event)
{    downloads.remove(event.getResource());    StringBuilder buffer = new StringBuilder(64);    pad(buffer, lastLength);    buffer.append('\r');    out.println(buffer);}
public void maven_f5719_0(TransferEvent event)
{    println("transferCorrupted", event.getException().getClass() + ": " + event.getException().getMessage());}
protected long maven_f5720_0(long bytes)
{    return (bytes + 1023) / 1024;}
private void maven_f5721_0(String event, String message)
{    print(event, message);    out.println();}
private void maven_f5722_0(String event, String message)
{    out.print("Aether Transfer - " + event);    if (message != null) {        out.print(": ");        out.print(message);    }}
public File maven_f5723_0()
{    return settings;}
public DefaultSettingsBuilder maven_f5724_0(SettingsReader settingsReader)
{    this.settingsReader = settingsReader;    return this;}
public DefaultSettingsBuilder maven_f5725_0(SettingsWriter settingsWriter)
{    this.settingsWriter = settingsWriter;    return this;}
public DefaultSettingsBuilder maven_f5726_0(SettingsValidator settingsValidator)
{    this.settingsValidator = settingsValidator;    return this;}
public SettingsBuildingResult maven_f5727_0(SettingsBuildingRequest request) throws SettingsBuildingException
{    DefaultSettingsProblemCollector problems = new DefaultSettingsProblemCollector(null);    Source globalSettingsSource = getSettingsSource(request.getGlobalSettingsFile(), request.getGlobalSettingsSource());    Settings globalSettings = readSettings(globalSettingsSource, request, problems);    Source userSettingsSource = getSettingsSource(request.getUserSettingsFile(), request.getUserSettingsSource());    Settings userSettings = readSettings(userSettingsSource, request, problems);    settingsMerger.merge(userSettings, globalSettings, TrackableBase.GLOBAL_LEVEL);    problems.setSource("");    userSettings = interpolate(userSettings, request, problems);        String localRepository = userSettings.getLocalRepository();    if (localRepository != null && localRepository.length() > 0) {        File file = new File(localRepository);        if (!file.isAbsolute() && file.getPath().startsWith(File.separator)) {            userSettings.setLocalRepository(file.getAbsolutePath());        }    }    if (hasErrors(problems.getProblems())) {        throw new SettingsBuildingException(problems.getProblems());    }    return new DefaultSettingsBuildingResult(userSettings, problems.getProblems());}
private boolean maven_f5728_0(List<SettingsProblem> problems)
{    if (problems != null) {        for (SettingsProblem problem : problems) {            if (SettingsProblem.Severity.ERROR.compareTo(problem.getSeverity()) >= 0) {                return true;            }        }    }    return false;}
private Source maven_f5729_0(File settingsFile, Source settingsSource)
{    if (settingsSource != null) {        return settingsSource;    } else if (settingsFile != null && settingsFile.exists()) {        return new FileSource(settingsFile);    }    return null;}
private Settings maven_f5730_0(Source settingsSource, SettingsBuildingRequest request, DefaultSettingsProblemCollector problems)
{    if (settingsSource == null) {        return new Settings();    }    problems.setSource(settingsSource.getLocation());    Settings settings;    try {        Map<String, ?> options = Collections.singletonMap(SettingsReader.IS_STRICT, Boolean.TRUE);        try {            settings = settingsReader.read(settingsSource.getInputStream(), options);        } catch (SettingsParseException e) {            options = Collections.singletonMap(SettingsReader.IS_STRICT, Boolean.FALSE);            settings = settingsReader.read(settingsSource.getInputStream(), options);            problems.add(SettingsProblem.Severity.WARNING, e.getMessage(), e.getLineNumber(), e.getColumnNumber(), e);        }    } catch (SettingsParseException e) {        problems.add(SettingsProblem.Severity.FATAL, "Non-parseable settings " + settingsSource.getLocation() + ": " + e.getMessage(), e.getLineNumber(), e.getColumnNumber(), e);        return new Settings();    } catch (IOException e) {        problems.add(SettingsProblem.Severity.FATAL, "Non-readable settings " + settingsSource.getLocation() + ": " + e.getMessage(), -1, -1, e);        return new Settings();    }    settingsValidator.validate(settings, problems);    return settings;}
private Settings maven_f5731_0(Settings settings, SettingsBuildingRequest request, SettingsProblemCollector problems)
{    StringWriter writer = new StringWriter(1024 * 4);    try {        settingsWriter.write(writer, null, settings);    } catch (IOException e) {        throw new IllegalStateException("Failed to serialize settings to memory", e);    }    String serializedSettings = writer.toString();    RegexBasedInterpolator interpolator = new RegexBasedInterpolator();    interpolator.addValueSource(new PropertiesBasedValueSource(request.getUserProperties()));    interpolator.addValueSource(new PropertiesBasedValueSource(request.getSystemProperties()));    try {        interpolator.addValueSource(new EnvarBasedValueSource());    } catch (IOException e) {        problems.add(SettingsProblem.Severity.WARNING, "Failed to use environment variables for interpolation: " + e.getMessage(), -1, -1, e);    }    interpolator.addPostProcessor(new InterpolationPostProcessor() {        @Override        public Object execute(String expression, Object value) {            if (value != null) {                                value = value.toString().replace("&", "&amp;").replace("<", "&lt;").replace(">", "&gt;");                return value;            }            return null;        }    });    try {        serializedSettings = interpolator.interpolate(serializedSettings, "settings");    } catch (InterpolationException e) {        problems.add(SettingsProblem.Severity.ERROR, "Failed to interpolate settings: " + e.getMessage(), -1, -1, e);        return settings;    }    Settings result;    try {        Map<String, ?> options = Collections.singletonMap(SettingsReader.IS_STRICT, Boolean.FALSE);        result = settingsReader.read(new StringReader(serializedSettings), options);    } catch (IOException e) {        problems.add(SettingsProblem.Severity.ERROR, "Failed to interpolate settings: " + e.getMessage(), -1, -1, e);        return settings;    }    return result;}
public Object maven_f5732_0(String expression, Object value)
{    if (value != null) {                value = value.toString().replace("&", "&amp;").replace("<", "&lt;").replace(">", "&gt;");        return value;    }    return null;}
protected SettingsReader maven_f5733_0()
{    return new DefaultSettingsReader();}
protected SettingsWriter maven_f5734_0()
{    return new DefaultSettingsWriter();}
protected SettingsValidator maven_f5735_0()
{    return new DefaultSettingsValidator();}
public DefaultSettingsBuilder maven_f5736_0()
{    return new DefaultSettingsBuilder(newSettingsReader(), newSettingsWriter(), newSettingsValidator());}
public File maven_f5737_0()
{    return globalSettingsFile;}
public DefaultSettingsBuildingRequest maven_f5738_0(File globalSettingsFile)
{    this.globalSettingsFile = globalSettingsFile;    return this;}
public SettingsSource maven_f5739_0()
{    return globalSettingsSource;}
public DefaultSettingsBuildingRequest maven_f5740_0(SettingsSource globalSettingsSource)
{    this.globalSettingsSource = globalSettingsSource;    return this;}
public File maven_f5741_0()
{    return userSettingsFile;}
public DefaultSettingsBuildingRequest maven_f5742_0(File userSettingsFile)
{    this.userSettingsFile = userSettingsFile;    return this;}
public SettingsSource maven_f5743_0()
{    return userSettingsSource;}
public DefaultSettingsBuildingRequest maven_f5744_0(SettingsSource userSettingsSource)
{    this.userSettingsSource = userSettingsSource;    return this;}
public Properties maven_f5745_0()
{    if (systemProperties == null) {        systemProperties = new Properties();    }    return systemProperties;}
public DefaultSettingsBuildingRequest maven_f5746_0(Properties systemProperties)
{    if (systemProperties != null) {        this.systemProperties = new Properties();        synchronized (systemProperties) {                        this.systemProperties.putAll(systemProperties);        }    } else {        this.systemProperties = null;    }    return this;}
public Properties maven_f5747_0()
{    if (userProperties == null) {        userProperties = new Properties();    }    return userProperties;}
public DefaultSettingsBuildingRequest maven_f5748_0(Properties userProperties)
{    if (userProperties != null) {        this.userProperties = new Properties();        this.userProperties.putAll(userProperties);    } else {        this.userProperties = null;    }    return this;}
public Settings maven_f5749_0()
{    return effectiveSettings;}
public List<SettingsProblem> maven_f5750_0()
{    return problems;}
public String maven_f5751_0()
{    return source;}
public int maven_f5752_0()
{    return lineNumber;}
public int maven_f5753_0()
{    return columnNumber;}
public String maven_f5754_0()
{    StringBuilder buffer = new StringBuilder(256);    if (getSource().length() > 0) {        if (buffer.length() > 0) {            buffer.append(", ");        }        buffer.append(getSource());    }    if (getLineNumber() > 0) {        if (buffer.length() > 0) {            buffer.append(", ");        }        buffer.append("line ").append(getLineNumber());    }    if (getColumnNumber() > 0) {        if (buffer.length() > 0) {            buffer.append(", ");        }        buffer.append("column ").append(getColumnNumber());    }    return buffer.toString();}
public Exception maven_f5755_0()
{    return exception;}
public String maven_f5756_0()
{    String msg;    if (message != null && message.length() > 0) {        msg = message;    } else {        msg = exception.getMessage();        if (msg == null) {            msg = "";        }    }    return msg;}
public Severity maven_f5757_0()
{    return severity;}
public String maven_f5758_0()
{    StringBuilder buffer = new StringBuilder(128);    buffer.append('[').append(getSeverity()).append("] ");    buffer.append(getMessage());    buffer.append(" @ ").append(getLocation());    return buffer.toString();}
public List<SettingsProblem> maven_f5759_0()
{    return problems;}
public void maven_f5760_0(String source)
{    this.source = source;}
public void maven_f5761_0(SettingsProblem.Severity severity, String message, int line, int column, Exception cause)
{    if (line <= 0 && column <= 0 && (cause instanceof SettingsParseException)) {        SettingsParseException e = (SettingsParseException) cause;        line = e.getLineNumber();        column = e.getColumnNumber();    }    SettingsProblem problem = new DefaultSettingsProblem(message, severity, source, line, column, cause);    problems.add(problem);}
public File maven_f5762_0()
{    return getFile();}
public List<SettingsProblem> maven_f5763_0()
{    return problems;}
private static String maven_f5764_0(List<SettingsProblem> problems)
{    StringWriter buffer = new StringWriter(1024);    PrintWriter writer = new PrintWriter(buffer);    writer.print(problems.size());    writer.print((problems.size() == 1) ? " problem was " : " problems were ");    writer.print("encountered while building the effective settings");    writer.println();    for (SettingsProblem problem : problems) {        writer.print("[");        writer.print(problem.getSeverity());        writer.print("] ");        writer.print(problem.getMessage());        writer.print(" @ ");        writer.println(problem.getLocation());    }    return buffer.toString();}
public String maven_f5765_0()
{    return getContent();}
public URL maven_f5766_0()
{    return getUrl();}
public SettingsDecryptionResult maven_f5767_0(SettingsDecryptionRequest request)
{    List<SettingsProblem> problems = new ArrayList<>();    List<Server> servers = new ArrayList<>();    for (Server server : request.getServers()) {        server = server.clone();        servers.add(server);        try {            server.setPassword(decrypt(server.getPassword()));        } catch (SecDispatcherException e) {            problems.add(new DefaultSettingsProblem("Failed to decrypt password for server " + server.getId() + ": " + e.getMessage(), Severity.ERROR, "server: " + server.getId(), -1, -1, e));        }        try {            server.setPassphrase(decrypt(server.getPassphrase()));        } catch (SecDispatcherException e) {            problems.add(new DefaultSettingsProblem("Failed to decrypt passphrase for server " + server.getId() + ": " + e.getMessage(), Severity.ERROR, "server: " + server.getId(), -1, -1, e));        }    }    List<Proxy> proxies = new ArrayList<>();    for (Proxy proxy : request.getProxies()) {        proxy = proxy.clone();        proxies.add(proxy);        try {            proxy.setPassword(decrypt(proxy.getPassword()));        } catch (SecDispatcherException e) {            problems.add(new DefaultSettingsProblem("Failed to decrypt password for proxy " + proxy.getId() + ": " + e.getMessage(), Severity.ERROR, "proxy: " + proxy.getId(), -1, -1, e));        }    }    return new DefaultSettingsDecryptionResult(servers, proxies, problems);}
private String maven_f5768_0(String str) throws SecDispatcherException
{    return (str == null) ? null : securityDispatcher.decrypt(str);}
public List<Server> maven_f5769_0()
{    if (servers == null) {        servers = new ArrayList<>();    }    return servers;}
public DefaultSettingsDecryptionRequest maven_f5770_0(List<Server> servers)
{    this.servers = servers;    return this;}
public List<Proxy> maven_f5771_0()
{    if (proxies == null) {        proxies = new ArrayList<>();    }    return proxies;}
public DefaultSettingsDecryptionRequest maven_f5772_0(List<Proxy> proxies)
{    this.proxies = proxies;    return this;}
public Server maven_f5773_0()
{    return servers.isEmpty() ? null : servers.get(0);}
public List<Server> maven_f5774_0()
{    return servers;}
public Proxy maven_f5775_0()
{    return proxies.isEmpty() ? null : proxies.get(0);}
public List<Proxy> maven_f5776_0()
{    return proxies;}
public List<SettingsProblem> maven_f5777_0()
{    return problems;}
public Settings maven_f5778_0(File input, Map<String, ?> options) throws IOException
{    Objects.requireNonNull(input, "input cannot be null");    Settings settings = read(ReaderFactory.newXmlReader(input), options);    return settings;}
public Settings maven_f5779_0(Reader input, Map<String, ?> options) throws IOException
{    Objects.requireNonNull(input, "input cannot be null");    try (final Reader in = input) {        return new SettingsXpp3Reader().read(in, isStrict(options));    } catch (XmlPullParserException e) {        throw new SettingsParseException(e.getMessage(), e.getLineNumber(), e.getColumnNumber(), e);    }}
public Settings maven_f5780_0(InputStream input, Map<String, ?> options) throws IOException
{    Objects.requireNonNull(input, "input cannot be null");    try (final InputStream in = input) {        return new SettingsXpp3Reader().read(in, isStrict(options));    } catch (XmlPullParserException e) {        throw new SettingsParseException(e.getMessage(), e.getLineNumber(), e.getColumnNumber(), e);    }}
private boolean maven_f5781_0(Map<String, ?> options)
{    Object value = (options != null) ? options.get(IS_STRICT) : null;    return value == null || Boolean.parseBoolean(value.toString());}
public void maven_f5782_0(File output, Map<String, Object> options, Settings settings) throws IOException
{    Objects.requireNonNull(output, "output cannot be null");    Objects.requireNonNull(settings, "settings cannot be null");    output.getParentFile().mkdirs();    write(WriterFactory.newXmlWriter(output), options, settings);}
public void maven_f5783_0(Writer output, Map<String, Object> options, Settings settings) throws IOException
{    Objects.requireNonNull(output, "output cannot be null");    Objects.requireNonNull(settings, "settings cannot be null");    try (final Writer out = output) {        new SettingsXpp3Writer().write(out, settings);    }}
public void maven_f5784_0(OutputStream output, Map<String, Object> options, Settings settings) throws IOException
{    Objects.requireNonNull(output, "output cannot be null");    Objects.requireNonNull(settings, "settings cannot be null");    String encoding = settings.getModelEncoding();        if (encoding == null || encoding.length() <= 0) {        encoding = "UTF-8";    }    try (final Writer out = new OutputStreamWriter(output, encoding)) {        write(out, options, settings);    }}
public int maven_f5785_0()
{    return lineNumber;}
public int maven_f5786_0()
{    return columnNumber;}
public void maven_f5787_0(Settings dominant, Settings recessive, String recessiveSourceLevel)
{    if (dominant == null || recessive == null) {        return;    }    recessive.setSourceLevel(recessiveSourceLevel);    List<String> dominantActiveProfiles = dominant.getActiveProfiles();    List<String> recessiveActiveProfiles = recessive.getActiveProfiles();    if (recessiveActiveProfiles != null) {        if (dominantActiveProfiles == null) {            dominantActiveProfiles = new ArrayList<>();            dominant.setActiveProfiles(dominantActiveProfiles);        }        for (String profileId : recessiveActiveProfiles) {            if (!dominantActiveProfiles.contains(profileId)) {                dominantActiveProfiles.add(profileId);            }        }    }    List<String> dominantPluginGroupIds = dominant.getPluginGroups();    List<String> recessivePluginGroupIds = recessive.getPluginGroups();    if (recessivePluginGroupIds != null) {        if (dominantPluginGroupIds == null) {            dominantPluginGroupIds = new ArrayList<>();            dominant.setPluginGroups(dominantPluginGroupIds);        }        for (String pluginGroupId : recessivePluginGroupIds) {            if (!dominantPluginGroupIds.contains(pluginGroupId)) {                dominantPluginGroupIds.add(pluginGroupId);            }        }    }    if (StringUtils.isEmpty(dominant.getLocalRepository())) {        dominant.setLocalRepository(recessive.getLocalRepository());    }    shallowMergeById(dominant.getMirrors(), recessive.getMirrors(), recessiveSourceLevel);    shallowMergeById(dominant.getServers(), recessive.getServers(), recessiveSourceLevel);    shallowMergeById(dominant.getProxies(), recessive.getProxies(), recessiveSourceLevel);    shallowMergeById(dominant.getProfiles(), recessive.getProfiles(), recessiveSourceLevel);}
private static void maven_f5788_0(List<T> dominant, List<T> recessive, String recessiveSourceLevel)
{    Map<String, T> dominantById = mapById(dominant);    for (T identifiable : recessive) {        if (!dominantById.containsKey(identifiable.getId())) {            identifiable.setSourceLevel(recessiveSourceLevel);            dominant.add(identifiable);        }    }}
private static Map<String, T> maven_f5789_0(List<T> identifiables)
{    Map<String, T> byId = new HashMap<>();    for (T identifiable : identifiables) {        byId.put(identifiable.getId(), identifiable);    }    return byId;}
public void maven_f5790_0(Settings settings, SettingsProblemCollector problems)
{    if (settings.isUsePluginRegistry()) {        addViolation(problems, Severity.WARNING, "usePluginRegistry", null, "is deprecated and has no effect.");    }    List<String> pluginGroups = settings.getPluginGroups();    if (pluginGroups != null) {        for (int i = 0; i < pluginGroups.size(); i++) {            String pluginGroup = pluginGroups.get(i).trim();            if (StringUtils.isBlank(pluginGroup)) {                addViolation(problems, Severity.ERROR, "pluginGroups.pluginGroup[" + i + "]", null, "must not be empty");            } else if (!pluginGroup.matches(ID_REGEX)) {                addViolation(problems, Severity.ERROR, "pluginGroups.pluginGroup[" + i + "]", null, "must denote a valid group id and match the pattern " + ID_REGEX);            }        }    }    List<Server> servers = settings.getServers();    if (servers != null) {        Set<String> serverIds = new HashSet<>();        for (int i = 0; i < servers.size(); i++) {            Server server = servers.get(i);            validateStringNotEmpty(problems, "servers.server[" + i + "].id", server.getId(), null);            if (!serverIds.add(server.getId())) {                addViolation(problems, Severity.WARNING, "servers.server.id", null, "must be unique but found duplicate server with id " + server.getId());            }        }    }    List<Mirror> mirrors = settings.getMirrors();    if (mirrors != null) {        for (Mirror mirror : mirrors) {            validateStringNotEmpty(problems, "mirrors.mirror.id", mirror.getId(), mirror.getUrl());            validateBannedCharacters(problems, "mirrors.mirror.id", Severity.WARNING, mirror.getId(), null, ILLEGAL_REPO_ID_CHARS);            if ("local".equals(mirror.getId())) {                addViolation(problems, Severity.WARNING, "mirrors.mirror.id", null, "must not be 'local'" + ", this identifier is reserved for the local repository" + ", using it for other repositories will corrupt your repository metadata.");            }            validateStringNotEmpty(problems, "mirrors.mirror.url", mirror.getUrl(), mirror.getId());            validateStringNotEmpty(problems, "mirrors.mirror.mirrorOf", mirror.getMirrorOf(), mirror.getId());        }    }    List<Profile> profiles = settings.getProfiles();    if (profiles != null) {        Set<String> profileIds = new HashSet<>();        for (Profile profile : profiles) {            if (!profileIds.add(profile.getId())) {                addViolation(problems, Severity.WARNING, "profiles.profile.id", null, "must be unique but found duplicate profile with id " + profile.getId());            }            String prefix = "profiles.profile[" + profile.getId() + "].";            validateRepositories(problems, profile.getRepositories(), prefix + "repositories.repository");            validateRepositories(problems, profile.getPluginRepositories(), prefix + "pluginRepositories.pluginRepository");        }    }    List<Proxy> proxies = settings.getProxies();    if (proxies != null) {        Set<String> proxyIds = new HashSet<>();        for (Proxy proxy : proxies) {            if (!proxyIds.add(proxy.getId())) {                addViolation(problems, Severity.WARNING, "proxies.proxy.id", null, "must be unique but found duplicate proxy with id " + proxy.getId());            }            validateStringNotEmpty(problems, "proxies.proxy.host", proxy.getHost(), proxy.getId());        }    }}
private void maven_f5791_0(SettingsProblemCollector problems, List<Repository> repositories, String prefix)
{    Set<String> repoIds = new HashSet<>();    for (Repository repository : repositories) {        validateStringNotEmpty(problems, prefix + ".id", repository.getId(), repository.getUrl());        validateBannedCharacters(problems, prefix + ".id", Severity.WARNING, repository.getId(), null, ILLEGAL_REPO_ID_CHARS);        if ("local".equals(repository.getId())) {            addViolation(problems, Severity.WARNING, prefix + ".id", null, "must not be 'local'" + ", this identifier is reserved for the local repository" + ", using it for other repositories will corrupt your repository metadata.");        }        if (!repoIds.add(repository.getId())) {            addViolation(problems, Severity.WARNING, prefix + ".id", null, "must be unique but found duplicate repository with id " + repository.getId());        }        validateStringNotEmpty(problems, prefix + ".url", repository.getUrl(), repository.getId());        if ("legacy".equals(repository.getLayout())) {            addViolation(problems, Severity.WARNING, prefix + ".layout", repository.getId(), "uses the unsupported value 'legacy', artifact resolution might fail.");        }    }}
private static boolean maven_f5792_0(SettingsProblemCollector problems, String fieldName, String string, String sourceHint)
{    if (!validateNotNull(problems, fieldName, string, sourceHint)) {        return false;    }    if (string.length() > 0) {        return true;    }    addViolation(problems, Severity.ERROR, fieldName, sourceHint, "is missing");    return false;}
private static boolean maven_f5793_0(SettingsProblemCollector problems, String fieldName, Object object, String sourceHint)
{    if (object != null) {        return true;    }    addViolation(problems, Severity.ERROR, fieldName, sourceHint, "is missing");    return false;}
private static boolean maven_f5794_0(SettingsProblemCollector problems, String fieldName, Severity severity, String string, String sourceHint, String banned)
{    if (string != null) {        for (int i = string.length() - 1; i >= 0; i--) {            if (banned.indexOf(string.charAt(i)) >= 0) {                addViolation(problems, severity, fieldName, sourceHint, "must not contain any of these characters " + banned + " but found " + string.charAt(i));                return false;            }        }    }    return true;}
private static void maven_f5795_0(SettingsProblemCollector problems, Severity severity, String fieldName, String sourceHint, String message)
{    StringBuilder buffer = new StringBuilder(256);    buffer.append('\'').append(fieldName).append('\'');    if (sourceHint != null) {        buffer.append(" for ").append(sourceHint);    }    buffer.append(' ').append(message);    problems.add(severity, buffer.toString(), -1, -1, null);}
private File maven_f5796_0(String name)
{    return new File("src/test/resources/settings/factory/" + name + ".xml").getAbsoluteFile();}
public void maven_f5797_0() throws Exception
{    SettingsBuilder builder = new DefaultSettingsBuilderFactory().newInstance();    assertNotNull(builder);    DefaultSettingsBuildingRequest request = new DefaultSettingsBuildingRequest();    request.setSystemProperties(System.getProperties());    request.setUserSettingsFile(getSettings("simple"));    SettingsBuildingResult result = builder.build(request);    assertNotNull(result);    assertNotNull(result.getEffectiveSettings());}
protected void maven_f5798_0() throws Exception
{    super.setUp();    validator = new DefaultSettingsValidator();}
protected void maven_f5799_0() throws Exception
{    validator = null;    super.tearDown();}
private void maven_f5800_0(String msg, String substring)
{    assertTrue("\"" + substring + "\" was not found in: " + msg, msg.contains(substring));}
public void maven_f5801_0()
{    Settings model = new Settings();    Profile prof = new Profile();    prof.setId("xxx");    model.addProfile(prof);    SimpleProblemCollector problems = new SimpleProblemCollector();    validator.validate(model, problems);    assertEquals(0, problems.messages.size());    Repository repo = new Repository();    prof.addRepository(repo);    problems = new SimpleProblemCollector();    validator.validate(model, problems);    assertEquals(2, problems.messages.size());    repo.setUrl("http://xxx.xxx.com");    problems = new SimpleProblemCollector();    validator.validate(model, problems);    assertEquals(1, problems.messages.size());    repo.setId("xxx");    problems = new SimpleProblemCollector();    validator.validate(model, problems);    assertEquals(0, problems.messages.size());}
public void maven_f5802_0() throws Exception
{    Settings settings = new Settings();    Mirror mirror = new Mirror();    mirror.setId("local");    settings.addMirror(mirror);    mirror = new Mirror();    mirror.setId("illegal\\:/chars");    mirror.setUrl("http://void");    mirror.setMirrorOf("void");    settings.addMirror(mirror);    SimpleProblemCollector problems = new SimpleProblemCollector();    validator.validate(settings, problems);    assertEquals(4, problems.messages.size());    assertContains(problems.messages.get(0), "'mirrors.mirror.id' must not be 'local'");    assertContains(problems.messages.get(1), "'mirrors.mirror.url' for local is missing");    assertContains(problems.messages.get(2), "'mirrors.mirror.mirrorOf' for local is missing");    assertContains(problems.messages.get(3), "'mirrors.mirror.id' must not contain any of these characters");}
public void maven_f5803_0() throws Exception
{    Profile profile = new Profile();    Repository repo = new Repository();    repo.setId("local");    profile.addRepository(repo);    repo = new Repository();    repo.setId("illegal\\:/chars");    repo.setUrl("http://void");    profile.addRepository(repo);    Settings settings = new Settings();    settings.addProfile(profile);    SimpleProblemCollector problems = new SimpleProblemCollector();    validator.validate(settings, problems);    assertEquals(3, problems.messages.size());    assertContains(problems.messages.get(0), "'profiles.profile[default].repositories.repository.id' must not be 'local'");    assertContains(problems.messages.get(1), "'profiles.profile[default].repositories.repository.url' for local is missing");    assertContains(problems.messages.get(2), "'profiles.profile[default].repositories.repository.id' must not contain any of these characters");}
public void maven_f5804_0() throws Exception
{    Settings settings = new Settings();    Server server1 = new Server();    server1.setId("test");    settings.addServer(server1);    Server server2 = new Server();    server2.setId("test");    settings.addServer(server2);    SimpleProblemCollector problems = new SimpleProblemCollector();    validator.validate(settings, problems);    assertEquals(1, problems.messages.size());    assertContains(problems.messages.get(0), "'servers.server.id' must be unique but found duplicate server with id test");}
public void maven_f5805_0() throws Exception
{    Settings settings = new Settings();    Profile profile1 = new Profile();    profile1.setId("test");    settings.addProfile(profile1);    Profile profile2 = new Profile();    profile2.setId("test");    settings.addProfile(profile2);    SimpleProblemCollector problems = new SimpleProblemCollector();    validator.validate(settings, problems);    assertEquals(1, problems.messages.size());    assertContains(problems.messages.get(0), "'profiles.profile.id' must be unique but found duplicate profile with id test");}
public void maven_f5806_0() throws Exception
{    Settings settings = new Settings();    Profile profile = new Profile();    profile.setId("pro");    settings.addProfile(profile);    Repository repo1 = new Repository();    repo1.setUrl("http://apache.org/");    repo1.setId("test");    profile.addRepository(repo1);    Repository repo2 = new Repository();    repo2.setUrl("http://apache.org/");    repo2.setId("test");    profile.addRepository(repo2);    SimpleProblemCollector problems = new SimpleProblemCollector();    validator.validate(settings, problems);    assertEquals(1, problems.messages.size());    assertContains(problems.messages.get(0), "'profiles.profile[pro].repositories.repository.id' must be unique" + " but found duplicate repository with id test");}
public void maven_f5807_0() throws Exception
{    Settings settings = new Settings();    Proxy proxy = new Proxy();    String id = null;    proxy.setId(id);    proxy.setHost("www.example.com");    settings.addProxy(proxy);    settings.addProxy(proxy);    SimpleProblemCollector problems = new SimpleProblemCollector();    validator.validate(settings, problems);    assertEquals(1, problems.messages.size());    assertContains(problems.messages.get(0), "'proxies.proxy.id' must be unique" + " but found duplicate proxy with id " + id);}
public void maven_f5808_0() throws Exception
{    Settings settings = new Settings();    Proxy proxy1 = new Proxy();    settings.addProxy(proxy1);    SimpleProblemCollector problems = new SimpleProblemCollector();    validator.validate(settings, problems);    assertEquals(1, problems.messages.size());    assertContains(problems.messages.get(0), "'proxies.proxy.host' for default is missing");}
public void maven_f5809_0(Severity severity, String message, int line, int column, Exception cause)
{    messages.add(message);}
protected String maven_f5810_0(int level)
{    switch(level) {        case LOG_LEVEL_TRACE:            return level().debug("TRACE").toString();        case LOG_LEVEL_DEBUG:            return level().debug("DEBUG").toString();        case LOG_LEVEL_INFO:            return level().info("INFO").toString();        case LOG_LEVEL_WARN:            return level().warning("WARNING").toString();        case LOG_LEVEL_ERROR:        default:            return level().error("ERROR").toString();    }}
protected void maven_f5811_0(Throwable t, PrintStream stream)
{    if (t == null) {        return;    }    stream.print(buffer().failure(t.getClass().getName()));    if (t.getMessage() != null) {        stream.print(": ");        stream.print(buffer().failure(t.getMessage()));    }    stream.println();    while (t != null) {        for (StackTraceElement e : t.getStackTrace()) {            stream.print("    ");            stream.print(buffer().strong("at"));            stream.print(" " + e.getClassName() + "." + e.getMethodName());            stream.print(buffer().a(" (").strong(getLocation(e)).a(")"));            stream.println();        }        t = t.getCause();        if (t != null) {            stream.print(buffer().strong("Caused by").a(": ").a(t.getClass().getName()));            if (t.getMessage() != null) {                stream.print(": ");                stream.print(buffer().failure(t.getMessage()));            }            stream.println();        }    }}
protected String maven_f5812_0(final StackTraceElement e)
{    assert e != null;    if (e.isNativeMethod()) {        return "Native Method";    } else if (e.getFileName() == null) {        return "Unknown Source";    } else if (e.getLineNumber() >= 0) {        return String.format("%s:%s", e.getFileName(), e.getLineNumber());    } else {        return e.getFileName();    }}
public Logger maven_f5813_0(String name)
{    Logger simpleLogger = loggerMap.get(name);    if (simpleLogger != null) {        return simpleLogger;    } else {        Logger newInstance = new MavenSimpleLogger(name);        Logger oldInstance = loggerMap.putIfAbsent(name, newInstance);        return oldInstance == null ? newInstance : oldInstance;    }}
public static StaticLoggerBinder maven_f5814_0()
{    return SINGLETON;}
public ILoggerFactory maven_f5815_0()
{    return loggerFactory;}
public String maven_f5816_0()
{    return LOGGER_FACTORY_CLASS_STR;}
